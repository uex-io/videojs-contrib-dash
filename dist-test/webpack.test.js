/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	var q = window.QUnit;
	var videojs = __webpack_require__(1);
	__webpack_require__(45);

	var when = function(element, type, fn, condition) {
	  var func = function() {
	    if (condition()) {
	      element.off(type, func);
	      fn.apply(this, arguments);
	    }
	  };

	  element.on(type, func);
	};

	q.module('Webpack/Browserify Integration', {
	  beforeEach: function(assert) {
	    var
	      done = assert.async(),
	      videoEl,
	      player;

	    this.fixture = document.createElement('div');
	    document.body.appendChild(this.fixture);

	    videoEl = document.createElement('video');
	    videoEl.id = 'vid';
	    videoEl.setAttribute('controls', '');
	    videoEl.setAttribute('width', '600');
	    videoEl.setAttribute('height', '300');
	    videoEl.className = 'video-js vjs-default-skin';
	    this.fixture.appendChild(videoEl);

	    player = videojs('vid');
	    this.player = player;

	    player.ready(function() {
	      player.one('loadstart', done);

	      player.src({
	        src: 'http://dash.edgesuite.net/akamai/bbb_30fps/bbb_30fps.mpd',
	        type: 'application/dash+xml'
	      });
	    });
	  },
	  afterEach: function() {
	    this.player.dispose();
	    this.fixture.innerHTML = '';
	  }
	});

	q.test('should play', function(assert) {
	  var
	    done = assert.async(),
	    player = this.player;

	  assert.expect(2);

	  when(player, 'timeupdate', function() {
	    assert.ok(true, 'played for at least two seconds');
	    assert.equal(player.error(), null, 'has no player errors');

	    done();
	  }, function() {
	    return player.currentTime() >= 2;
	  });

	  player.play();
	});


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @license
	 * Video.js 6.13.0 <http://videojs.com/>
	 * Copyright Brightcove, Inc. <https://www.brightcove.com/>
	 * Available under Apache License Version 2.0
	 * <https://github.com/videojs/video.js/blob/master/LICENSE>
	 *
	 * Includes vtt.js <https://github.com/mozilla/vtt.js>
	 * Available under Apache License Version 2.0
	 * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>
	 */

	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	var window = _interopDefault(__webpack_require__(2));
	var document = _interopDefault(__webpack_require__(3));
	var tsml = _interopDefault(__webpack_require__(5));
	var safeParseTuple = _interopDefault(__webpack_require__(6));
	var xhr = _interopDefault(__webpack_require__(7));
	var vtt = _interopDefault(__webpack_require__(40));

	var version = "6.13.0";

	/**
	 * @file browser.js
	 * @module browser
	 */
	var USER_AGENT = window.navigator && window.navigator.userAgent || '';
	var webkitVersionMap = /AppleWebKit\/([\d.]+)/i.exec(USER_AGENT);
	var appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;

	/*
	 * Device is an iPhone
	 *
	 * @type {Boolean}
	 * @constant
	 * @private
	 */
	var IS_IPAD = /iPad/i.test(USER_AGENT);

	// The Facebook app's UIWebView identifies as both an iPhone and iPad, so
	// to identify iPhones, we need to exclude iPads.
	// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/
	var IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;
	var IS_IPOD = /iPod/i.test(USER_AGENT);
	var IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;

	var IOS_VERSION = function () {
	  var match = USER_AGENT.match(/OS (\d+)_/i);

	  if (match && match[1]) {
	    return match[1];
	  }
	  return null;
	}();

	var IS_ANDROID = /Android/i.test(USER_AGENT);
	var ANDROID_VERSION = function () {
	  // This matches Android Major.Minor.Patch versions
	  // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
	  var match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);

	  if (!match) {
	    return null;
	  }

	  var major = match[1] && parseFloat(match[1]);
	  var minor = match[2] && parseFloat(match[2]);

	  if (major && minor) {
	    return parseFloat(match[1] + '.' + match[2]);
	  } else if (major) {
	    return major;
	  }
	  return null;
	}();

	// Old Android is defined as Version older than 2.3, and requiring a webkit version of the android browser
	var IS_OLD_ANDROID = IS_ANDROID && /webkit/i.test(USER_AGENT) && ANDROID_VERSION < 2.3;
	var IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;

	var IS_FIREFOX = /Firefox/i.test(USER_AGENT);
	var IS_EDGE = /Edge/i.test(USER_AGENT);
	var IS_CHROME = !IS_EDGE && (/Chrome/i.test(USER_AGENT) || /CriOS/i.test(USER_AGENT));
	var CHROME_VERSION = function () {
	  var match = USER_AGENT.match(/(Chrome|CriOS)\/(\d+)/);

	  if (match && match[2]) {
	    return parseFloat(match[2]);
	  }
	  return null;
	}();
	var IS_IE8 = /MSIE\s8\.0/.test(USER_AGENT);
	var IE_VERSION = function () {
	  var result = /MSIE\s(\d+)\.\d/.exec(USER_AGENT);
	  var version = result && parseFloat(result[1]);

	  if (!version && /Trident\/7.0/i.test(USER_AGENT) && /rv:11.0/.test(USER_AGENT)) {
	    // IE 11 has a different user agent string than other IE versions
	    version = 11.0;
	  }

	  return version;
	}();

	var IS_SAFARI = /Safari/i.test(USER_AGENT) && !IS_CHROME && !IS_ANDROID && !IS_EDGE;
	var IS_ANY_SAFARI = (IS_SAFARI || IS_IOS) && !IS_CHROME;

	var TOUCH_ENABLED = isReal() && ('ontouchstart' in window || window.navigator.maxTouchPoints || window.DocumentTouch && window.document instanceof window.DocumentTouch);

	var BACKGROUND_SIZE_SUPPORTED = isReal() && 'backgroundSize' in window.document.createElement('video').style;

	var browser = (Object.freeze || Object)({
		IS_IPAD: IS_IPAD,
		IS_IPHONE: IS_IPHONE,
		IS_IPOD: IS_IPOD,
		IS_IOS: IS_IOS,
		IOS_VERSION: IOS_VERSION,
		IS_ANDROID: IS_ANDROID,
		ANDROID_VERSION: ANDROID_VERSION,
		IS_OLD_ANDROID: IS_OLD_ANDROID,
		IS_NATIVE_ANDROID: IS_NATIVE_ANDROID,
		IS_FIREFOX: IS_FIREFOX,
		IS_EDGE: IS_EDGE,
		IS_CHROME: IS_CHROME,
		CHROME_VERSION: CHROME_VERSION,
		IS_IE8: IS_IE8,
		IE_VERSION: IE_VERSION,
		IS_SAFARI: IS_SAFARI,
		IS_ANY_SAFARI: IS_ANY_SAFARI,
		TOUCH_ENABLED: TOUCH_ENABLED,
		BACKGROUND_SIZE_SUPPORTED: BACKGROUND_SIZE_SUPPORTED
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
	  return typeof obj;
	} : function (obj) {
	  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	};











	var classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};











	var inherits = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};











	var possibleConstructorReturn = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && (typeof call === "object" || typeof call === "function") ? call : self;
	};











	var taggedTemplateLiteralLoose = function (strings, raw) {
	  strings.raw = raw;
	  return strings;
	};

	/**
	 * @file obj.js
	 * @module obj
	 */

	/**
	 * @callback obj:EachCallback
	 *
	 * @param {Mixed} value
	 *        The current key for the object that is being iterated over.
	 *
	 * @param {string} key
	 *        The current key-value for object that is being iterated over
	 */

	/**
	 * @callback obj:ReduceCallback
	 *
	 * @param {Mixed} accum
	 *        The value that is accumulating over the reduce loop.
	 *
	 * @param {Mixed} value
	 *        The current key for the object that is being iterated over.
	 *
	 * @param {string} key
	 *        The current key-value for object that is being iterated over
	 *
	 * @return {Mixed}
	 *         The new accumulated value.
	 */
	var toString = Object.prototype.toString;

	/**
	 * Get the keys of an Object
	 *
	 * @param {Object}
	 *        The Object to get the keys from
	 *
	 * @return {string[]}
	 *         An array of the keys from the object. Returns an empty array if the
	 *         object passed in was invalid or had no keys.
	 *
	 * @private
	 */
	var keys = function keys(object) {
	  return isObject(object) ? Object.keys(object) : [];
	};

	/**
	 * Array-like iteration for objects.
	 *
	 * @param {Object} object
	 *        The object to iterate over
	 *
	 * @param {obj:EachCallback} fn
	 *        The callback function which is called for each key in the object.
	 */
	function each(object, fn) {
	  keys(object).forEach(function (key) {
	    return fn(object[key], key);
	  });
	}

	/**
	 * Array-like reduce for objects.
	 *
	 * @param {Object} object
	 *        The Object that you want to reduce.
	 *
	 * @param {Function} fn
	 *         A callback function which is called for each key in the object. It
	 *         receives the accumulated value and the per-iteration value and key
	 *         as arguments.
	 *
	 * @param {Mixed} [initial = 0]
	 *        Starting value
	 *
	 * @return {Mixed}
	 *         The final accumulated value.
	 */
	function reduce(object, fn) {
	  var initial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	  return keys(object).reduce(function (accum, key) {
	    return fn(accum, object[key], key);
	  }, initial);
	}

	/**
	 * Object.assign-style object shallow merge/extend.
	 *
	 * @param  {Object} target
	 * @param  {Object} ...sources
	 * @return {Object}
	 */
	function assign(target) {
	  for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    sources[_key - 1] = arguments[_key];
	  }

	  if (Object.assign) {
	    return Object.assign.apply(Object, [target].concat(sources));
	  }

	  sources.forEach(function (source) {
	    if (!source) {
	      return;
	    }

	    each(source, function (value, key) {
	      target[key] = value;
	    });
	  });

	  return target;
	}

	/**
	 * Returns whether a value is an object of any kind - including DOM nodes,
	 * arrays, regular expressions, etc. Not functions, though.
	 *
	 * This avoids the gotcha where using `typeof` on a `null` value
	 * results in `'object'`.
	 *
	 * @param  {Object} value
	 * @return {Boolean}
	 */
	function isObject(value) {
	  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';
	}

	/**
	 * Returns whether an object appears to be a "plain" object - that is, a
	 * direct instance of `Object`.
	 *
	 * @param  {Object} value
	 * @return {Boolean}
	 */
	function isPlain(value) {
	  return isObject(value) && toString.call(value) === '[object Object]' && value.constructor === Object;
	}

	/**
	 * @file create-logger.js
	 * @module create-logger
	 */
	// This is the private tracking variable for the logging history.
	var history = [];

	/**
	 * Log messages to the console and history based on the type of message
	 *
	 * @private
	 * @param  {string} type
	 *         The name of the console method to use.
	 *
	 * @param  {Array} args
	 *         The arguments to be passed to the matching console method.
	 */
	var LogByTypeFactory = function LogByTypeFactory(name, log) {
	  return function (type, level, args, stringify) {
	    var lvl = log.levels[level];
	    var lvlRegExp = new RegExp('^(' + lvl + ')$');

	    if (type !== 'log') {

	      // Add the type to the front of the message when it's not "log".
	      args.unshift(type.toUpperCase() + ':');
	    }

	    // Add console prefix after adding to history.
	    args.unshift(name + ':');

	    // Add a clone of the args at this point to history.
	    if (history) {
	      history.push([].concat(args));
	    }

	    // If there's no console then don't try to output messages, but they will
	    // still be stored in history.
	    if (!window.console) {
	      return;
	    }

	    // Was setting these once outside of this function, but containing them
	    // in the function makes it easier to test cases where console doesn't exist
	    // when the module is executed.
	    var fn = window.console[type];

	    if (!fn && type === 'debug') {
	      // Certain browsers don't have support for console.debug. For those, we
	      // should default to the closest comparable log.
	      fn = window.console.info || window.console.log;
	    }

	    // Bail out if there's no console or if this type is not allowed by the
	    // current logging level.
	    if (!fn || !lvl || !lvlRegExp.test(type)) {
	      return;
	    }

	    // IEs previous to 11 log objects uselessly as "[object Object]"; so, JSONify
	    // objects and arrays for those less-capable browsers.
	    if (stringify) {
	      args = args.map(function (a) {
	        if (isObject(a) || Array.isArray(a)) {
	          try {
	            return JSON.stringify(a);
	          } catch (x) {
	            return String(a);
	          }
	        }

	        // Cast to string before joining, so we get null and undefined explicitly
	        // included in output (as we would in a modern console).
	        return String(a);
	      }).join(' ');
	    }

	    // Old IE versions do not allow .apply() for console methods (they are
	    // reported as objects rather than functions).
	    if (!fn.apply) {
	      fn(args);
	    } else {
	      fn[Array.isArray(args) ? 'apply' : 'call'](window.console, args);
	    }
	  };
	};

	function createLogger$1(name) {
	  // This is the private tracking variable for logging level.
	  var level = 'info';

	  // the curried logByType bound to the specific log and history
	  var logByType = void 0;

	  /**
	   * Logs plain debug messages. Similar to `console.log`.
	   *
	   * Due to [limitations](https://github.com/jsdoc3/jsdoc/issues/955#issuecomment-313829149)
	   * of our JSDoc template, we cannot properly document this as both a function
	   * and a namespace, so its function signature is documented here.
	   *
	   * #### Arguments
	   * ##### *args
	   * Mixed[]
	   *
	   * Any combination of values that could be passed to `console.log()`.
	   *
	   * #### Return Value
	   *
	   * `undefined`
	   *
	   * @namespace
	   * @param    {Mixed[]} args
	   *           One or more messages or objects that should be logged.
	   */
	  var log = function log() {
	    var stringify = log.stringify || IE_VERSION && IE_VERSION < 11;

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    logByType('log', level, args, stringify);
	  };

	  // This is the logByType helper that the logging methods below use
	  logByType = LogByTypeFactory(name, log);

	  /**
	   * Create a new sublogger which chains the old name to the new name.
	   *
	   * For example, doing `videojs.log.createLogger('player')` and then using that logger will log the following:
	   * ```js
	   *  mylogger('foo');
	   *  // > VIDEOJS: player: foo
	   * ```
	   *
	   * @param {string} name
	   *        The name to add call the new logger
	   * @return {Object}
	   */
	  log.createLogger = function (subname) {
	    return createLogger$1(name + ': ' + subname);
	  };

	  /**
	   * Enumeration of available logging levels, where the keys are the level names
	   * and the values are `|`-separated strings containing logging methods allowed
	   * in that logging level. These strings are used to create a regular expression
	   * matching the function name being called.
	   *
	   * Levels provided by Video.js are:
	   *
	   * - `off`: Matches no calls. Any value that can be cast to `false` will have
	   *   this effect. The most restrictive.
	   * - `all`: Matches only Video.js-provided functions (`debug`, `log`,
	   *   `log.warn`, and `log.error`).
	   * - `debug`: Matches `log.debug`, `log`, `log.warn`, and `log.error` calls.
	   * - `info` (default): Matches `log`, `log.warn`, and `log.error` calls.
	   * - `warn`: Matches `log.warn` and `log.error` calls.
	   * - `error`: Matches only `log.error` calls.
	   *
	   * @type {Object}
	   */
	  log.levels = {
	    all: 'debug|log|warn|error',
	    off: '',
	    debug: 'debug|log|warn|error',
	    info: 'log|warn|error',
	    warn: 'warn|error',
	    error: 'error',
	    DEFAULT: level
	  };

	  /**
	   * Get or set the current logging level.
	   *
	   * If a string matching a key from {@link module:log.levels} is provided, acts
	   * as a setter.
	   *
	   * @param  {string} [lvl]
	   *         Pass a valid level to set a new logging level.
	   *
	   * @return {string}
	   *         The current logging level.
	   */
	  log.level = function (lvl) {
	    if (typeof lvl === 'string') {
	      if (!log.levels.hasOwnProperty(lvl)) {
	        throw new Error('"' + lvl + '" in not a valid log level');
	      }
	      level = lvl;
	    }
	    return level;
	  };

	  /**
	   * Returns an array containing everything that has been logged to the history.
	   *
	   * This array is a shallow clone of the internal history record. However, its
	   * contents are _not_ cloned; so, mutating objects inside this array will
	   * mutate them in history.
	   *
	   * @return {Array}
	   */
	  log.history = function () {
	    return history ? [].concat(history) : [];
	  };

	  /**
	   * Allows you to filter the history by the given logger name
	   *
	   * @param {string} fname
	   *        The name to filter by
	   *
	   * @return {Array}
	   *         The filtered list to return
	   */
	  log.history.filter = function (fname) {
	    return (history || []).filter(function (historyItem) {
	      // if the first item in each historyItem includes `fname`, then it's a match
	      return new RegExp('.*' + fname + '.*').test(historyItem[0]);
	    });
	  };

	  /**
	   * Clears the internal history tracking, but does not prevent further history
	   * tracking.
	   */
	  log.history.clear = function () {
	    if (history) {
	      history.length = 0;
	    }
	  };

	  /**
	   * Disable history tracking if it is currently enabled.
	   */
	  log.history.disable = function () {
	    if (history !== null) {
	      history.length = 0;
	      history = null;
	    }
	  };

	  /**
	   * Enable history tracking if it is currently disabled.
	   */
	  log.history.enable = function () {
	    if (history === null) {
	      history = [];
	    }
	  };

	  /**
	   * Logs error messages. Similar to `console.error`.
	   *
	   * @param {Mixed[]} args
	   *        One or more messages or objects that should be logged as an error
	   */
	  log.error = function () {
	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    return logByType('error', level, args);
	  };

	  /**
	   * Logs warning messages. Similar to `console.warn`.
	   *
	   * @param {Mixed[]} args
	   *        One or more messages or objects that should be logged as a warning.
	   */
	  log.warn = function () {
	    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	      args[_key3] = arguments[_key3];
	    }

	    return logByType('warn', level, args);
	  };

	  /**
	   * Logs debug messages. Similar to `console.debug`, but may also act as a comparable
	   * log if `console.debug` is not available
	   *
	   * @param {Mixed[]} args
	   *        One or more messages or objects that should be logged as debug.
	   */
	  log.debug = function () {
	    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	      args[_key4] = arguments[_key4];
	    }

	    return logByType('debug', level, args);
	  };

	  return log;
	}

	/**
	 * @file log.js
	 * @module log
	 */
	var log = createLogger$1('VIDEOJS');
	var createLogger = log.createLogger;

	/**
	 * @file computed-style.js
	 * @module computed-style
	 */
	/**
	 * A safe getComputedStyle with an IE8 fallback.
	 *
	 * This is needed because in Firefox, if the player is loaded in an iframe with
	 * `display:none`, then `getComputedStyle` returns `null`, so, we do a null-check to
	 * make sure  that the player doesn't break in these cases.
	 *
	 * @param {Element} el
	 *        The element you want the computed style of
	 *
	 * @param {string} prop
	 *        The property name you want
	 *
	 * @see https://bugzilla.mozilla.org/show_bug.cgi?id=548397
	 *
	 * @static
	 * @const
	 */
	function computedStyle(el, prop) {
	  if (!el || !prop) {
	    return '';
	  }

	  if (typeof window.getComputedStyle === 'function') {
	    var cs = window.getComputedStyle(el);

	    return cs ? cs[prop] : '';
	  }

	  return el.currentStyle[prop] || '';
	}

	var _templateObject = taggedTemplateLiteralLoose(['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.'], ['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.']);

	/**
	 * @file dom.js
	 * @module dom
	 */
	/**
	 * Detect if a value is a string with any non-whitespace characters.
	 *
	 * @param {string} str
	 *        The string to check
	 *
	 * @return {boolean}
	 *         - True if the string is non-blank
	 *         - False otherwise
	 *
	 */
	function isNonBlankString(str) {
	  return typeof str === 'string' && /\S/.test(str);
	}

	/**
	 * Throws an error if the passed string has whitespace. This is used by
	 * class methods to be relatively consistent with the classList API.
	 *
	 * @param {string} str
	 *         The string to check for whitespace.
	 *
	 * @throws {Error}
	 *         Throws an error if there is whitespace in the string.
	 *
	 */
	function throwIfWhitespace(str) {
	  if (/\s/.test(str)) {
	    throw new Error('class has illegal whitespace characters');
	  }
	}

	/**
	 * Produce a regular expression for matching a className within an elements className.
	 *
	 * @param {string} className
	 *         The className to generate the RegExp for.
	 *
	 * @return {RegExp}
	 *         The RegExp that will check for a specific `className` in an elements
	 *         className.
	 */
	function classRegExp(className) {
	  return new RegExp('(^|\\s)' + className + '($|\\s)');
	}

	/**
	 * Whether the current DOM interface appears to be real.
	 *
	 * @return {Boolean}
	 */
	function isReal() {
	  return (

	    // Both document and window will never be undefined thanks to `global`.
	    document === window.document &&

	    // In IE < 9, DOM methods return "object" as their type, so all we can
	    // confidently check is that it exists.
	    typeof document.createElement !== 'undefined'
	  );
	}

	/**
	 * Determines, via duck typing, whether or not a value is a DOM element.
	 *
	 * @param {Mixed} value
	 *        The thing to check
	 *
	 * @return {boolean}
	 *         - True if it is a DOM element
	 *         - False otherwise
	 */
	function isEl(value) {
	  return isObject(value) && value.nodeType === 1;
	}

	/**
	 * Determines if the current DOM is embedded in an iframe.
	 *
	 * @return {boolean}
	 *
	 */
	function isInFrame() {

	  // We need a try/catch here because Safari will throw errors when attempting
	  // to get either `parent` or `self`
	  try {
	    return window.parent !== window.self;
	  } catch (x) {
	    return true;
	  }
	}

	/**
	 * Creates functions to query the DOM using a given method.
	 *
	 * @param {string} method
	 *         The method to create the query with.
	 *
	 * @return {Function}
	 *         The query method
	 */
	function createQuerier(method) {
	  return function (selector, context) {
	    if (!isNonBlankString(selector)) {
	      return document[method](null);
	    }
	    if (isNonBlankString(context)) {
	      context = document.querySelector(context);
	    }

	    var ctx = isEl(context) ? context : document;

	    return ctx[method] && ctx[method](selector);
	  };
	}

	/**
	 * Creates an element and applies properties.
	 *
	 * @param {string} [tagName='div']
	 *         Name of tag to be created.
	 *
	 * @param {Object} [properties={}]
	 *         Element properties to be applied.
	 *
	 * @param {Object} [attributes={}]
	 *         Element attributes to be applied.
	 *
	 * @param {String|Element|TextNode|Array|Function} [content]
	 *         Contents for the element (see: {@link dom:normalizeContent})
	 *
	 * @return {Element}
	 *         The element that was created.
	 */
	function createEl() {
	  var tagName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
	  var properties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	  var content = arguments[3];

	  var el = document.createElement(tagName);

	  Object.getOwnPropertyNames(properties).forEach(function (propName) {
	    var val = properties[propName];

	    // See #2176
	    // We originally were accepting both properties and attributes in the
	    // same object, but that doesn't work so well.
	    if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {
	      log.warn(tsml(_templateObject, propName, val));
	      el.setAttribute(propName, val);

	      // Handle textContent since it's not supported everywhere and we have a
	      // method for it.
	    } else if (propName === 'textContent') {
	      textContent(el, val);
	    } else {
	      el[propName] = val;
	    }
	  });

	  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
	    el.setAttribute(attrName, attributes[attrName]);
	  });

	  if (content) {
	    appendContent(el, content);
	  }

	  return el;
	}

	/**
	 * Injects text into an element, replacing any existing contents entirely.
	 *
	 * @param {Element} el
	 *        The element to add text content into
	 *
	 * @param {string} text
	 *        The text content to add.
	 *
	 * @return {Element}
	 *         The element with added text content.
	 */
	function textContent(el, text) {
	  if (typeof el.textContent === 'undefined') {
	    el.innerText = text;
	  } else {
	    el.textContent = text;
	  }
	  return el;
	}

	/**
	 * Insert an element as the first child node of another
	 *
	 * @param {Element} child
	 *        Element to insert
	 *
	 * @param {Element} parent
	 *        Element to insert child into
	 */
	function prependTo(child, parent) {
	  if (parent.firstChild) {
	    parent.insertBefore(child, parent.firstChild);
	  } else {
	    parent.appendChild(child);
	  }
	}

	/**
	 * Check if an element has a CSS class
	 *
	 * @param {Element} element
	 *        Element to check
	 *
	 * @param {string} classToCheck
	 *        Class name to check for
	 *
	 * @return {boolean}
	 *         - True if the element had the class
	 *         - False otherwise.
	 *
	 * @throws {Error}
	 *         Throws an error if `classToCheck` has white space.
	 */
	function hasClass(element, classToCheck) {
	  throwIfWhitespace(classToCheck);
	  if (element.classList) {
	    return element.classList.contains(classToCheck);
	  }
	  return classRegExp(classToCheck).test(element.className);
	}

	/**
	 * Add a CSS class name to an element
	 *
	 * @param {Element} element
	 *        Element to add class name to.
	 *
	 * @param {string} classToAdd
	 *        Class name to add.
	 *
	 * @return {Element}
	 *         The dom element with the added class name.
	 */
	function addClass(element, classToAdd) {
	  if (element.classList) {
	    element.classList.add(classToAdd);

	    // Don't need to `throwIfWhitespace` here because `hasElClass` will do it
	    // in the case of classList not being supported.
	  } else if (!hasClass(element, classToAdd)) {
	    element.className = (element.className + ' ' + classToAdd).trim();
	  }

	  return element;
	}

	/**
	 * Remove a CSS class name from an element
	 *
	 * @param {Element} element
	 *        Element to remove a class name from.
	 *
	 * @param {string} classToRemove
	 *        Class name to remove
	 *
	 * @return {Element}
	 *         The dom element with class name removed.
	 */
	function removeClass(element, classToRemove) {
	  if (element.classList) {
	    element.classList.remove(classToRemove);
	  } else {
	    throwIfWhitespace(classToRemove);
	    element.className = element.className.split(/\s+/).filter(function (c) {
	      return c !== classToRemove;
	    }).join(' ');
	  }

	  return element;
	}

	/**
	 * The callback definition for toggleElClass.
	 *
	 * @callback Dom~PredicateCallback
	 * @param {Element} element
	 *        The DOM element of the Component.
	 *
	 * @param {string} classToToggle
	 *        The `className` that wants to be toggled
	 *
	 * @return {boolean|undefined}
	 *         - If true the `classToToggle` will get added to `element`.
	 *         - If false the `classToToggle` will get removed from `element`.
	 *         - If undefined this callback will be ignored
	 */

	/**
	 * Adds or removes a CSS class name on an element depending on an optional
	 * condition or the presence/absence of the class name.
	 *
	 * @param {Element} element
	 *        The element to toggle a class name on.
	 *
	 * @param {string} classToToggle
	 *        The class that should be toggled
	 *
	 * @param {boolean|PredicateCallback} [predicate]
	 *        See the return value for {@link Dom~PredicateCallback}
	 *
	 * @return {Element}
	 *         The element with a class that has been toggled.
	 */
	function toggleClass(element, classToToggle, predicate) {

	  // This CANNOT use `classList` internally because IE does not support the
	  // second parameter to the `classList.toggle()` method! Which is fine because
	  // `classList` will be used by the add/remove functions.
	  var has = hasClass(element, classToToggle);

	  if (typeof predicate === 'function') {
	    predicate = predicate(element, classToToggle);
	  }

	  if (typeof predicate !== 'boolean') {
	    predicate = !has;
	  }

	  // If the necessary class operation matches the current state of the
	  // element, no action is required.
	  if (predicate === has) {
	    return;
	  }

	  if (predicate) {
	    addClass(element, classToToggle);
	  } else {
	    removeClass(element, classToToggle);
	  }

	  return element;
	}

	/**
	 * Apply attributes to an HTML element.
	 *
	 * @param {Element} el
	 *        Element to add attributes to.
	 *
	 * @param {Object} [attributes]
	 *        Attributes to be applied.
	 */
	function setAttributes(el, attributes) {
	  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
	    var attrValue = attributes[attrName];

	    if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {
	      el.removeAttribute(attrName);
	    } else {
	      el.setAttribute(attrName, attrValue === true ? '' : attrValue);
	    }
	  });
	}

	/**
	 * Get an element's attribute values, as defined on the HTML tag
	 * Attributes are not the same as properties. They're defined on the tag
	 * or with setAttribute (which shouldn't be used with HTML)
	 * This will return true or false for boolean attributes.
	 *
	 * @param {Element} tag
	 *        Element from which to get tag attributes.
	 *
	 * @return {Object}
	 *         All attributes of the element.
	 */
	function getAttributes(tag) {
	  var obj = {};

	  // known boolean attributes
	  // we can check for matching boolean properties, but older browsers
	  // won't know about HTML5 boolean attributes that we still read from
	  var knownBooleans = ',' + 'autoplay,controls,playsinline,loop,muted,default,defaultMuted' + ',';

	  if (tag && tag.attributes && tag.attributes.length > 0) {
	    var attrs = tag.attributes;

	    for (var i = attrs.length - 1; i >= 0; i--) {
	      var attrName = attrs[i].name;
	      var attrVal = attrs[i].value;

	      // check for known booleans
	      // the matching element property will return a value for typeof
	      if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {
	        // the value of an included boolean attribute is typically an empty
	        // string ('') which would equal false if we just check for a false value.
	        // we also don't want support bad code like autoplay='false'
	        attrVal = attrVal !== null ? true : false;
	      }

	      obj[attrName] = attrVal;
	    }
	  }

	  return obj;
	}

	/**
	 * Get the value of an element's attribute
	 *
	 * @param {Element} el
	 *        A DOM element
	 *
	 * @param {string} attribute
	 *        Attribute to get the value of
	 *
	 * @return {string}
	 *         value of the attribute
	 */
	function getAttribute(el, attribute) {
	  return el.getAttribute(attribute);
	}

	/**
	 * Set the value of an element's attribute
	 *
	 * @param {Element} el
	 *        A DOM element
	 *
	 * @param {string} attribute
	 *        Attribute to set
	 *
	 * @param {string} value
	 *        Value to set the attribute to
	 */
	function setAttribute(el, attribute, value) {
	  el.setAttribute(attribute, value);
	}

	/**
	 * Remove an element's attribute
	 *
	 * @param {Element} el
	 *        A DOM element
	 *
	 * @param {string} attribute
	 *        Attribute to remove
	 */
	function removeAttribute(el, attribute) {
	  el.removeAttribute(attribute);
	}

	/**
	 * Attempt to block the ability to select text while dragging controls
	 */
	function blockTextSelection() {
	  document.body.focus();
	  document.onselectstart = function () {
	    return false;
	  };
	}

	/**
	 * Turn off text selection blocking
	 */
	function unblockTextSelection() {
	  document.onselectstart = function () {
	    return true;
	  };
	}

	/**
	 * Identical to the native `getBoundingClientRect` function, but ensures that
	 * the method is supported at all (it is in all browsers we claim to support)
	 * and that the element is in the DOM before continuing.
	 *
	 * This wrapper function also shims properties which are not provided by some
	 * older browsers (namely, IE8).
	 *
	 * Additionally, some browsers do not support adding properties to a
	 * `ClientRect`/`DOMRect` object; so, we shallow-copy it with the standard
	 * properties (except `x` and `y` which are not widely supported). This helps
	 * avoid implementations where keys are non-enumerable.
	 *
	 * @param  {Element} el
	 *         Element whose `ClientRect` we want to calculate.
	 *
	 * @return {Object|undefined}
	 *         Always returns a plain
	 */
	function getBoundingClientRect(el) {
	  if (el && el.getBoundingClientRect && el.parentNode) {
	    var rect = el.getBoundingClientRect();
	    var result = {};

	    ['bottom', 'height', 'left', 'right', 'top', 'width'].forEach(function (k) {
	      if (rect[k] !== undefined) {
	        result[k] = rect[k];
	      }
	    });

	    if (!result.height) {
	      result.height = parseFloat(computedStyle(el, 'height'));
	    }

	    if (!result.width) {
	      result.width = parseFloat(computedStyle(el, 'width'));
	    }

	    return result;
	  }
	}

	/**
	 * The postion of a DOM element on the page.
	 *
	 * @typedef {Object} module:dom~Position
	 *
	 * @property {number} left
	 *           Pixels to the left
	 *
	 * @property {number} top
	 *           Pixels on top
	 */

	/**
	 * Offset Left.
	 * getBoundingClientRect technique from
	 * John Resig
	 *
	 * @see http://ejohn.org/blog/getboundingclientrect-is-awesome/
	 *
	 * @param {Element} el
	 *        Element from which to get offset
	 *
	 * @return {module:dom~Position}
	 *         The position of the element that was passed in.
	 */
	function findPosition(el) {
	  var box = void 0;

	  if (el.getBoundingClientRect && el.parentNode) {
	    box = el.getBoundingClientRect();
	  }

	  if (!box) {
	    return {
	      left: 0,
	      top: 0
	    };
	  }

	  var docEl = document.documentElement;
	  var body = document.body;

	  var clientLeft = docEl.clientLeft || body.clientLeft || 0;
	  var scrollLeft = window.pageXOffset || body.scrollLeft;
	  var left = box.left + scrollLeft - clientLeft;

	  var clientTop = docEl.clientTop || body.clientTop || 0;
	  var scrollTop = window.pageYOffset || body.scrollTop;
	  var top = box.top + scrollTop - clientTop;

	  // Android sometimes returns slightly off decimal values, so need to round
	  return {
	    left: Math.round(left),
	    top: Math.round(top)
	  };
	}

	/**
	 * x and y coordinates for a dom element or mouse pointer
	 *
	 * @typedef {Object} Dom~Coordinates
	 *
	 * @property {number} x
	 *           x coordinate in pixels
	 *
	 * @property {number} y
	 *           y coordinate in pixels
	 */

	/**
	 * Get pointer position in element
	 * Returns an object with x and y coordinates.
	 * The base on the coordinates are the bottom left of the element.
	 *
	 * @param {Element} el
	 *        Element on which to get the pointer position on
	 *
	 * @param {EventTarget~Event} event
	 *        Event object
	 *
	 * @return {Dom~Coordinates}
	 *         A Coordinates object corresponding to the mouse position.
	 *
	 */
	function getPointerPosition(el, event) {
	  var position = {};
	  var box = findPosition(el);
	  var boxW = el.offsetWidth;
	  var boxH = el.offsetHeight;

	  var boxY = box.top;
	  var boxX = box.left;
	  var pageY = event.pageY;
	  var pageX = event.pageX;

	  if (event.changedTouches) {
	    pageX = event.changedTouches[0].pageX;
	    pageY = event.changedTouches[0].pageY;
	  }

	  position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));
	  position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));

	  return position;
	}

	/**
	 * Determines, via duck typing, whether or not a value is a text node.
	 *
	 * @param {Mixed} value
	 *        Check if this value is a text node.
	 *
	 * @return {boolean}
	 *         - True if it is a text node
	 *         - False otherwise
	 */
	function isTextNode(value) {
	  return isObject(value) && value.nodeType === 3;
	}

	/**
	 * Empties the contents of an element.
	 *
	 * @param {Element} el
	 *        The element to empty children from
	 *
	 * @return {Element}
	 *         The element with no children
	 */
	function emptyEl(el) {
	  while (el.firstChild) {
	    el.removeChild(el.firstChild);
	  }
	  return el;
	}

	/**
	 * Normalizes content for eventual insertion into the DOM.
	 *
	 * This allows a wide range of content definition methods, but protects
	 * from falling into the trap of simply writing to `innerHTML`, which is
	 * an XSS concern.
	 *
	 * The content for an element can be passed in multiple types and
	 * combinations, whose behavior is as follows:
	 *
	 * @param {String|Element|TextNode|Array|Function} content
	 *        - String: Normalized into a text node.
	 *        - Element/TextNode: Passed through.
	 *        - Array: A one-dimensional array of strings, elements, nodes, or functions
	 *          (which return single strings, elements, or nodes).
	 *        - Function: If the sole argument, is expected to produce a string, element,
	 *          node, or array as defined above.
	 *
	 * @return {Array}
	 *         All of the content that was passed in normalized.
	 */
	function normalizeContent(content) {

	  // First, invoke content if it is a function. If it produces an array,
	  // that needs to happen before normalization.
	  if (typeof content === 'function') {
	    content = content();
	  }

	  // Next up, normalize to an array, so one or many items can be normalized,
	  // filtered, and returned.
	  return (Array.isArray(content) ? content : [content]).map(function (value) {

	    // First, invoke value if it is a function to produce a new value,
	    // which will be subsequently normalized to a Node of some kind.
	    if (typeof value === 'function') {
	      value = value();
	    }

	    if (isEl(value) || isTextNode(value)) {
	      return value;
	    }

	    if (typeof value === 'string' && /\S/.test(value)) {
	      return document.createTextNode(value);
	    }
	  }).filter(function (value) {
	    return value;
	  });
	}

	/**
	 * Normalizes and appends content to an element.
	 *
	 * @param {Element} el
	 *        Element to append normalized content to.
	 *
	 *
	 * @param {String|Element|TextNode|Array|Function} content
	 *        See the `content` argument of {@link dom:normalizeContent}
	 *
	 * @return {Element}
	 *         The element with appended normalized content.
	 */
	function appendContent(el, content) {
	  normalizeContent(content).forEach(function (node) {
	    return el.appendChild(node);
	  });
	  return el;
	}

	/**
	 * Normalizes and inserts content into an element; this is identical to
	 * `appendContent()`, except it empties the element first.
	 *
	 * @param {Element} el
	 *        Element to insert normalized content into.
	 *
	 * @param {String|Element|TextNode|Array|Function} content
	 *        See the `content` argument of {@link dom:normalizeContent}
	 *
	 * @return {Element}
	 *         The element with inserted normalized content.
	 *
	 */
	function insertContent(el, content) {
	  return appendContent(emptyEl(el), content);
	}

	/**
	 * Check if event was a single left click
	 *
	 * @param {EventTarget~Event} event
	 *        Event object
	 *
	 * @return {boolean}
	 *         - True if a left click
	 *         - False if not a left click
	 */
	function isSingleLeftClick(event) {
	  // Note: if you create something draggable, be sure to
	  // call it on both `mousedown` and `mousemove` event,
	  // otherwise `mousedown` should be enough for a button

	  if (event.button === undefined && event.buttons === undefined) {
	    // Why do we need `buttons` ?
	    // Because, middle mouse sometimes have this:
	    // e.button === 0 and e.buttons === 4
	    // Furthermore, we want to prevent combination click, something like
	    // HOLD middlemouse then left click, that would be
	    // e.button === 0, e.buttons === 5
	    // just `button` is not gonna work

	    // Alright, then what this block does ?
	    // this is for chrome `simulate mobile devices`
	    // I want to support this as well

	    return true;
	  }

	  if (event.button === 0 && event.buttons === undefined) {
	    // Touch screen, sometimes on some specific device, `buttons`
	    // doesn't have anything (safari on ios, blackberry...)

	    return true;
	  }

	  if (IE_VERSION === 9) {
	    // Ignore IE9

	    return true;
	  }

	  if (event.button !== 0 || event.buttons !== 1) {
	    // This is the reason we have those if else block above
	    // if any special case we can catch and let it slide
	    // we do it above, when get to here, this definitely
	    // is-not-left-click

	    return false;
	  }

	  return true;
	}

	/**
	 * Finds a single DOM element matching `selector` within the optional
	 * `context` of another DOM element (defaulting to `document`).
	 *
	 * @param {string} selector
	 *        A valid CSS selector, which will be passed to `querySelector`.
	 *
	 * @param {Element|String} [context=document]
	 *        A DOM element within which to query. Can also be a selector
	 *        string in which case the first matching element will be used
	 *        as context. If missing (or no element matches selector), falls
	 *        back to `document`.
	 *
	 * @return {Element|null}
	 *         The element that was found or null.
	 */
	var $ = createQuerier('querySelector');

	/**
	 * Finds a all DOM elements matching `selector` within the optional
	 * `context` of another DOM element (defaulting to `document`).
	 *
	 * @param {string} selector
	 *           A valid CSS selector, which will be passed to `querySelectorAll`.
	 *
	 * @param {Element|String} [context=document]
	 *           A DOM element within which to query. Can also be a selector
	 *           string in which case the first matching element will be used
	 *           as context. If missing (or no element matches selector), falls
	 *           back to `document`.
	 *
	 * @return {NodeList}
	 *         A element list of elements that were found. Will be empty if none were found.
	 *
	 */
	var $$ = createQuerier('querySelectorAll');



	var Dom = (Object.freeze || Object)({
		isReal: isReal,
		isEl: isEl,
		isInFrame: isInFrame,
		createEl: createEl,
		textContent: textContent,
		prependTo: prependTo,
		hasClass: hasClass,
		addClass: addClass,
		removeClass: removeClass,
		toggleClass: toggleClass,
		setAttributes: setAttributes,
		getAttributes: getAttributes,
		getAttribute: getAttribute,
		setAttribute: setAttribute,
		removeAttribute: removeAttribute,
		blockTextSelection: blockTextSelection,
		unblockTextSelection: unblockTextSelection,
		getBoundingClientRect: getBoundingClientRect,
		findPosition: findPosition,
		getPointerPosition: getPointerPosition,
		isTextNode: isTextNode,
		emptyEl: emptyEl,
		normalizeContent: normalizeContent,
		appendContent: appendContent,
		insertContent: insertContent,
		isSingleLeftClick: isSingleLeftClick,
		$: $,
		$$: $$
	});

	/**
	 * @file guid.js
	 * @module guid
	 */

	/**
	 * Unique ID for an element or function
	 * @type {Number}
	 */
	var _guid = 1;

	/**
	 * Get a unique auto-incrementing ID by number that has not been returned before.
	 *
	 * @return {number}
	 *         A new unique ID.
	 */
	function newGUID() {
	  return _guid++;
	}

	/**
	 * @file dom-data.js
	 * @module dom-data
	 */
	/**
	 * Element Data Store.
	 *
	 * Allows for binding data to an element without putting it directly on the
	 * element. Ex. Event listeners are stored here.
	 * (also from jsninja.com, slightly modified and updated for closure compiler)
	 *
	 * @type {Object}
	 * @private
	 */
	var elData = {};

	/*
	 * Unique attribute name to store an element's guid in
	 *
	 * @type {String}
	 * @constant
	 * @private
	 */
	var elIdAttr = 'vdata' + new Date().getTime();

	/**
	 * Returns the cache object where data for an element is stored
	 *
	 * @param {Element} el
	 *        Element to store data for.
	 *
	 * @return {Object}
	 *         The cache object for that el that was passed in.
	 */
	function getData(el) {
	  var id = el[elIdAttr];

	  if (!id) {
	    id = el[elIdAttr] = newGUID();
	  }

	  if (!elData[id]) {
	    elData[id] = {};
	  }

	  return elData[id];
	}

	/**
	 * Returns whether or not an element has cached data
	 *
	 * @param {Element} el
	 *        Check if this element has cached data.
	 *
	 * @return {boolean}
	 *         - True if the DOM element has cached data.
	 *         - False otherwise.
	 */
	function hasData(el) {
	  var id = el[elIdAttr];

	  if (!id) {
	    return false;
	  }

	  return !!Object.getOwnPropertyNames(elData[id]).length;
	}

	/**
	 * Delete data for the element from the cache and the guid attr from getElementById
	 *
	 * @param {Element} el
	 *        Remove cached data for this element.
	 */
	function removeData(el) {
	  var id = el[elIdAttr];

	  if (!id) {
	    return;
	  }

	  // Remove all stored data
	  delete elData[id];

	  // Remove the elIdAttr property from the DOM node
	  try {
	    delete el[elIdAttr];
	  } catch (e) {
	    if (el.removeAttribute) {
	      el.removeAttribute(elIdAttr);
	    } else {
	      // IE doesn't appear to support removeAttribute on the document element
	      el[elIdAttr] = null;
	    }
	  }
	}

	/**
	 * @file events.js. An Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
	 * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
	 * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
	 * robust as jquery's, so there's probably some differences.
	 *
	 * @module events
	 */

	/**
	 * Clean up the listener cache and dispatchers
	 *
	 * @param {Element|Object} elem
	 *        Element to clean up
	 *
	 * @param {string} type
	 *        Type of event to clean up
	 */
	function _cleanUpEvents(elem, type) {
	  var data = getData(elem);

	  // Remove the events of a particular type if there are none left
	  if (data.handlers[type].length === 0) {
	    delete data.handlers[type];
	    // data.handlers[type] = null;
	    // Setting to null was causing an error with data.handlers

	    // Remove the meta-handler from the element
	    if (elem.removeEventListener) {
	      elem.removeEventListener(type, data.dispatcher, false);
	    } else if (elem.detachEvent) {
	      elem.detachEvent('on' + type, data.dispatcher);
	    }
	  }

	  // Remove the events object if there are no types left
	  if (Object.getOwnPropertyNames(data.handlers).length <= 0) {
	    delete data.handlers;
	    delete data.dispatcher;
	    delete data.disabled;
	  }

	  // Finally remove the element data if there is no data left
	  if (Object.getOwnPropertyNames(data).length === 0) {
	    removeData(elem);
	  }
	}

	/**
	 * Loops through an array of event types and calls the requested method for each type.
	 *
	 * @param {Function} fn
	 *        The event method we want to use.
	 *
	 * @param {Element|Object} elem
	 *        Element or object to bind listeners to
	 *
	 * @param {string} type
	 *        Type of event to bind to.
	 *
	 * @param {EventTarget~EventListener} callback
	 *        Event listener.
	 */
	function _handleMultipleEvents(fn, elem, types, callback) {
	  types.forEach(function (type) {
	    // Call the event method for each one of the types
	    fn(elem, type, callback);
	  });
	}

	/**
	 * Fix a native event to have standard property values
	 *
	 * @param {Object} event
	 *        Event object to fix.
	 *
	 * @return {Object}
	 *         Fixed event object.
	 */
	function fixEvent(event) {

	  function returnTrue() {
	    return true;
	  }

	  function returnFalse() {
	    return false;
	  }

	  // Test if fixing up is needed
	  // Used to check if !event.stopPropagation instead of isPropagationStopped
	  // But native events return true for stopPropagation, but don't have
	  // other expected methods like isPropagationStopped. Seems to be a problem
	  // with the Javascript Ninja code. So we're just overriding all events now.
	  if (!event || !event.isPropagationStopped) {
	    var old = event || window.event;

	    event = {};
	    // Clone the old object so that we can modify the values event = {};
	    // IE8 Doesn't like when you mess with native event properties
	    // Firefox returns false for event.hasOwnProperty('type') and other props
	    //  which makes copying more difficult.
	    // TODO: Probably best to create a whitelist of event props
	    for (var key in old) {
	      // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
	      // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation
	      // and webkitMovementX/Y
	      if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY') {
	        // Chrome 32+ warns if you try to copy deprecated returnValue, but
	        // we still want to if preventDefault isn't supported (IE8).
	        if (!(key === 'returnValue' && old.preventDefault)) {
	          event[key] = old[key];
	        }
	      }
	    }

	    // The event occurred on this element
	    if (!event.target) {
	      event.target = event.srcElement || document;
	    }

	    // Handle which other element the event is related to
	    if (!event.relatedTarget) {
	      event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
	    }

	    // Stop the default browser action
	    event.preventDefault = function () {
	      if (old.preventDefault) {
	        old.preventDefault();
	      }
	      event.returnValue = false;
	      old.returnValue = false;
	      event.defaultPrevented = true;
	    };

	    event.defaultPrevented = false;

	    // Stop the event from bubbling
	    event.stopPropagation = function () {
	      if (old.stopPropagation) {
	        old.stopPropagation();
	      }
	      event.cancelBubble = true;
	      old.cancelBubble = true;
	      event.isPropagationStopped = returnTrue;
	    };

	    event.isPropagationStopped = returnFalse;

	    // Stop the event from bubbling and executing other handlers
	    event.stopImmediatePropagation = function () {
	      if (old.stopImmediatePropagation) {
	        old.stopImmediatePropagation();
	      }
	      event.isImmediatePropagationStopped = returnTrue;
	      event.stopPropagation();
	    };

	    event.isImmediatePropagationStopped = returnFalse;

	    // Handle mouse position
	    if (event.clientX !== null && event.clientX !== undefined) {
	      var doc = document.documentElement;
	      var body = document.body;

	      event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
	      event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
	    }

	    // Handle key presses
	    event.which = event.charCode || event.keyCode;

	    // Fix button for mouse clicks:
	    // 0 == left; 1 == middle; 2 == right
	    if (event.button !== null && event.button !== undefined) {

	      // The following is disabled because it does not pass videojs-standard
	      // and... yikes.
	      /* eslint-disable */
	      event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;
	      /* eslint-enable */
	    }
	  }

	  // Returns fixed-up instance
	  return event;
	}

	/**
	 * Whether passive event listeners are supported
	 */
	var _supportsPassive = false;

	(function () {
	  try {
	    var opts = Object.defineProperty({}, 'passive', {
	      get: function get() {
	        _supportsPassive = true;
	      }
	    });

	    window.addEventListener('test', null, opts);
	    window.removeEventListener('test', null, opts);
	  } catch (e) {
	    // disregard
	  }
	})();

	/**
	 * Touch events Chrome expects to be passive
	 */
	var passiveEvents = ['touchstart', 'touchmove'];

	/**
	 * Add an event listener to element
	 * It stores the handler function in a separate cache object
	 * and adds a generic handler to the element's event,
	 * along with a unique id (guid) to the element.
	 *
	 * @param {Element|Object} elem
	 *        Element or object to bind listeners to
	 *
	 * @param {string|string[]} type
	 *        Type of event to bind to.
	 *
	 * @param {EventTarget~EventListener} fn
	 *        Event listener.
	 */
	function on(elem, type, fn) {
	  if (Array.isArray(type)) {
	    return _handleMultipleEvents(on, elem, type, fn);
	  }

	  var data = getData(elem);

	  // We need a place to store all our handler data
	  if (!data.handlers) {
	    data.handlers = {};
	  }

	  if (!data.handlers[type]) {
	    data.handlers[type] = [];
	  }

	  if (!fn.guid) {
	    fn.guid = newGUID();
	  }

	  data.handlers[type].push(fn);

	  if (!data.dispatcher) {
	    data.disabled = false;

	    data.dispatcher = function (event, hash) {

	      if (data.disabled) {
	        return;
	      }

	      event = fixEvent(event);

	      var handlers = data.handlers[event.type];

	      if (handlers) {
	        // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.
	        var handlersCopy = handlers.slice(0);

	        for (var m = 0, n = handlersCopy.length; m < n; m++) {
	          if (event.isImmediatePropagationStopped()) {
	            break;
	          } else {
	            try {
	              handlersCopy[m].call(elem, event, hash);
	            } catch (e) {
	              log.error(e);
	            }
	          }
	        }
	      }
	    };
	  }

	  if (data.handlers[type].length === 1) {
	    if (elem.addEventListener) {
	      var options = false;

	      if (_supportsPassive && passiveEvents.indexOf(type) > -1) {
	        options = { passive: true };
	      }
	      elem.addEventListener(type, data.dispatcher, options);
	    } else if (elem.attachEvent) {
	      elem.attachEvent('on' + type, data.dispatcher);
	    }
	  }
	}

	/**
	 * Removes event listeners from an element
	 *
	 * @param {Element|Object} elem
	 *        Object to remove listeners from.
	 *
	 * @param {string|string[]} [type]
	 *        Type of listener to remove. Don't include to remove all events from element.
	 *
	 * @param {EventTarget~EventListener} [fn]
	 *        Specific listener to remove. Don't include to remove listeners for an event
	 *        type.
	 */
	function off(elem, type, fn) {
	  // Don't want to add a cache object through getElData if not needed
	  if (!hasData(elem)) {
	    return;
	  }

	  var data = getData(elem);

	  // If no events exist, nothing to unbind
	  if (!data.handlers) {
	    return;
	  }

	  if (Array.isArray(type)) {
	    return _handleMultipleEvents(off, elem, type, fn);
	  }

	  // Utility function
	  var removeType = function removeType(el, t) {
	    data.handlers[t] = [];
	    _cleanUpEvents(el, t);
	  };

	  // Are we removing all bound events?
	  if (type === undefined) {
	    for (var t in data.handlers) {
	      if (Object.prototype.hasOwnProperty.call(data.handlers || {}, t)) {
	        removeType(elem, t);
	      }
	    }
	    return;
	  }

	  var handlers = data.handlers[type];

	  // If no handlers exist, nothing to unbind
	  if (!handlers) {
	    return;
	  }

	  // If no listener was provided, remove all listeners for type
	  if (!fn) {
	    removeType(elem, type);
	    return;
	  }

	  // We're only removing a single handler
	  if (fn.guid) {
	    for (var n = 0; n < handlers.length; n++) {
	      if (handlers[n].guid === fn.guid) {
	        handlers.splice(n--, 1);
	      }
	    }
	  }

	  _cleanUpEvents(elem, type);
	}

	/**
	 * Trigger an event for an element
	 *
	 * @param {Element|Object} elem
	 *        Element to trigger an event on
	 *
	 * @param {EventTarget~Event|string} event
	 *        A string (the type) or an event object with a type attribute
	 *
	 * @param {Object} [hash]
	 *        data hash to pass along with the event
	 *
	 * @return {boolean|undefined}
	 *         - Returns the opposite of `defaultPrevented` if default was prevented
	 *         - Otherwise returns undefined
	 */
	function trigger(elem, event, hash) {
	  // Fetches element data and a reference to the parent (for bubbling).
	  // Don't want to add a data object to cache for every parent,
	  // so checking hasElData first.
	  var elemData = hasData(elem) ? getData(elem) : {};
	  var parent = elem.parentNode || elem.ownerDocument;
	  // type = event.type || event,
	  // handler;

	  // If an event name was passed as a string, creates an event out of it
	  if (typeof event === 'string') {
	    event = { type: event, target: elem };
	  } else if (!event.target) {
	    event.target = elem;
	  }

	  // Normalizes the event properties.
	  event = fixEvent(event);

	  // If the passed element has a dispatcher, executes the established handlers.
	  if (elemData.dispatcher) {
	    elemData.dispatcher.call(elem, event, hash);
	  }

	  // Unless explicitly stopped or the event does not bubble (e.g. media events)
	  // recursively calls this function to bubble the event up the DOM.
	  if (parent && !event.isPropagationStopped() && event.bubbles === true) {
	    trigger.call(null, parent, event, hash);

	    // If at the top of the DOM, triggers the default action unless disabled.
	  } else if (!parent && !event.defaultPrevented) {
	    var targetData = getData(event.target);

	    // Checks if the target has a default action for this event.
	    if (event.target[event.type]) {
	      // Temporarily disables event dispatching on the target as we have already executed the handler.
	      targetData.disabled = true;
	      // Executes the default action.
	      if (typeof event.target[event.type] === 'function') {
	        event.target[event.type]();
	      }
	      // Re-enables event dispatching.
	      targetData.disabled = false;
	    }
	  }

	  // Inform the triggerer if the default was prevented by returning false
	  return !event.defaultPrevented;
	}

	/**
	 * Trigger a listener only once for an event
	 *
	 * @param {Element|Object} elem
	 *        Element or object to bind to.
	 *
	 * @param {string|string[]} type
	 *        Name/type of event
	 *
	 * @param {Event~EventListener} fn
	 *        Event Listener function
	 */
	function one(elem, type, fn) {
	  if (Array.isArray(type)) {
	    return _handleMultipleEvents(one, elem, type, fn);
	  }
	  var func = function func() {
	    off(elem, type, func);
	    fn.apply(this, arguments);
	  };

	  // copy the guid to the new function so it can removed using the original function's ID
	  func.guid = fn.guid = fn.guid || newGUID();
	  on(elem, type, func);
	}

	var Events = (Object.freeze || Object)({
		fixEvent: fixEvent,
		on: on,
		off: off,
		trigger: trigger,
		one: one
	});

	/**
	 * @file setup.js - Functions for setting up a player without
	 * user interaction based on the data-setup `attribute` of the video tag.
	 *
	 * @module setup
	 */
	var _windowLoaded = false;
	var videojs$2 = void 0;

	/**
	 * Set up any tags that have a data-setup `attribute` when the player is started.
	 */
	var autoSetup = function autoSetup() {

	  // Protect against breakage in non-browser environments and check global autoSetup option.
	  if (!isReal() || videojs$2.options.autoSetup === false) {
	    return;
	  }

	  // One day, when we stop supporting IE8, go back to this, but in the meantime...*hack hack hack*
	  // var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));
	  // var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));
	  // var mediaEls = vids.concat(audios);

	  // Because IE8 doesn't support calling slice on a node list, we need to loop
	  // through each list of elements to build up a new, combined list of elements.
	  var vids = document.getElementsByTagName('video');
	  var audios = document.getElementsByTagName('audio');
	  var divs = document.getElementsByTagName('video-js');
	  var mediaEls = [];

	  if (vids && vids.length > 0) {
	    for (var i = 0, e = vids.length; i < e; i++) {
	      mediaEls.push(vids[i]);
	    }
	  }

	  if (audios && audios.length > 0) {
	    for (var _i = 0, _e = audios.length; _i < _e; _i++) {
	      mediaEls.push(audios[_i]);
	    }
	  }

	  if (divs && divs.length > 0) {
	    for (var _i2 = 0, _e2 = divs.length; _i2 < _e2; _i2++) {
	      mediaEls.push(divs[_i2]);
	    }
	  }

	  // Check if any media elements exist
	  if (mediaEls && mediaEls.length > 0) {

	    for (var _i3 = 0, _e3 = mediaEls.length; _i3 < _e3; _i3++) {
	      var mediaEl = mediaEls[_i3];

	      // Check if element exists, has getAttribute func.
	      // IE seems to consider typeof el.getAttribute == 'object' instead of
	      // 'function' like expected, at least when loading the player immediately.
	      if (mediaEl && mediaEl.getAttribute) {

	        // Make sure this player hasn't already been set up.
	        if (mediaEl.player === undefined) {
	          var options = mediaEl.getAttribute('data-setup');

	          // Check if data-setup attr exists.
	          // We only auto-setup if they've added the data-setup attr.
	          if (options !== null) {
	            // Create new video.js instance.
	            videojs$2(mediaEl);
	          }
	        }

	        // If getAttribute isn't defined, we need to wait for the DOM.
	      } else {
	        autoSetupTimeout(1);
	        break;
	      }
	    }

	    // No videos were found, so keep looping unless page is finished loading.
	  } else if (!_windowLoaded) {
	    autoSetupTimeout(1);
	  }
	};

	/**
	 * Wait until the page is loaded before running autoSetup. This will be called in
	 * autoSetup if `hasLoaded` returns false.
	 *
	 * @param {number} wait
	 *        How long to wait in ms
	 *
	 * @param {module:videojs} [vjs]
	 *        The videojs library function
	 */
	function autoSetupTimeout(wait, vjs) {
	  if (vjs) {
	    videojs$2 = vjs;
	  }

	  window.setTimeout(autoSetup, wait);
	}

	if (isReal() && document.readyState === 'complete') {
	  _windowLoaded = true;
	} else {
	  /**
	   * Listen for the load event on window, and set _windowLoaded to true.
	   *
	   * @listens load
	   */
	  one(window, 'load', function () {
	    _windowLoaded = true;
	  });
	}

	/**
	 * @file stylesheet.js
	 * @module stylesheet
	 */
	/**
	 * Create a DOM syle element given a className for it.
	 *
	 * @param {string} className
	 *        The className to add to the created style element.
	 *
	 * @return {Element}
	 *         The element that was created.
	 */
	var createStyleElement = function createStyleElement(className) {
	  var style = document.createElement('style');

	  style.className = className;

	  return style;
	};

	/**
	 * Add text to a DOM element.
	 *
	 * @param {Element} el
	 *        The Element to add text content to.
	 *
	 * @param {string} content
	 *        The text to add to the element.
	 */
	var setTextContent = function setTextContent(el, content) {
	  if (el.styleSheet) {
	    el.styleSheet.cssText = content;
	  } else {
	    el.textContent = content;
	  }
	};

	/**
	 * @file fn.js
	 * @module fn
	 */
	/**
	 * Bind (a.k.a proxy or Context). A simple method for changing the context of a function
	 * It also stores a unique id on the function so it can be easily removed from events.
	 *
	 * @param {Mixed} context
	 *        The object to bind as scope.
	 *
	 * @param {Function} fn
	 *        The function to be bound to a scope.
	 *
	 * @param {number} [uid]
	 *        An optional unique ID for the function to be set
	 *
	 * @return {Function}
	 *         The new function that will be bound into the context given
	 */
	var bind = function bind(context, fn, uid) {
	  // Make sure the function has a unique ID
	  if (!fn.guid) {
	    fn.guid = newGUID();
	  }

	  // Create the new function that changes the context
	  var bound = function bound() {
	    return fn.apply(context, arguments);
	  };

	  // Allow for the ability to individualize this function
	  // Needed in the case where multiple objects might share the same prototype
	  // IF both items add an event listener with the same function, then you try to remove just one
	  // it will remove both because they both have the same guid.
	  // when using this, you need to use the bind method when you remove the listener as well.
	  // currently used in text tracks
	  bound.guid = uid ? uid + '_' + fn.guid : fn.guid;

	  return bound;
	};

	/**
	 * Wraps the given function, `fn`, with a new function that only invokes `fn`
	 * at most once per every `wait` milliseconds.
	 *
	 * @param  {Function} fn
	 *         The function to be throttled.
	 *
	 * @param  {Number}   wait
	 *         The number of milliseconds by which to throttle.
	 *
	 * @return {Function}
	 */
	var throttle = function throttle(fn, wait) {
	  var last = Date.now();

	  var throttled = function throttled() {
	    var now = Date.now();

	    if (now - last >= wait) {
	      fn.apply(undefined, arguments);
	      last = now;
	    }
	  };

	  return throttled;
	};

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked.
	 *
	 * Inspired by lodash and underscore implementations.
	 *
	 * @param  {Function} func
	 *         The function to wrap with debounce behavior.
	 *
	 * @param  {number} wait
	 *         The number of milliseconds to wait after the last invocation.
	 *
	 * @param  {boolean} [immediate]
	 *         Whether or not to invoke the function immediately upon creation.
	 *
	 * @param  {Object} [context=window]
	 *         The "context" in which the debounced function should debounce. For
	 *         example, if this function should be tied to a Video.js player,
	 *         the player can be passed here. Alternatively, defaults to the
	 *         global `window` object.
	 *
	 * @return {Function}
	 *         A debounced function.
	 */
	var debounce = function debounce(func, wait, immediate) {
	  var context = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : window;

	  var timeout = void 0;

	  var cancel = function cancel() {
	    context.clearTimeout(timeout);
	    timeout = null;
	  };

	  /* eslint-disable consistent-this */
	  var debounced = function debounced() {
	    var self = this;
	    var args = arguments;

	    var _later = function later() {
	      timeout = null;
	      _later = null;
	      if (!immediate) {
	        func.apply(self, args);
	      }
	    };

	    if (!timeout && immediate) {
	      func.apply(self, args);
	    }

	    context.clearTimeout(timeout);
	    timeout = context.setTimeout(_later, wait);
	  };
	  /* eslint-enable consistent-this */

	  debounced.cancel = cancel;

	  return debounced;
	};

	/**
	 * @file src/js/event-target.js
	 */
	/**
	 * `EventTarget` is a class that can have the same API as the DOM `EventTarget`. It
	 * adds shorthand functions that wrap around lengthy functions. For example:
	 * the `on` function is a wrapper around `addEventListener`.
	 *
	 * @see [EventTarget Spec]{@link https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget}
	 * @class EventTarget
	 */
	var EventTarget = function EventTarget() {};

	/**
	 * A Custom DOM event.
	 *
	 * @typedef {Object} EventTarget~Event
	 * @see [Properties]{@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}
	 */

	/**
	 * All event listeners should follow the following format.
	 *
	 * @callback EventTarget~EventListener
	 * @this {EventTarget}
	 *
	 * @param {EventTarget~Event} event
	 *        the event that triggered this function
	 *
	 * @param {Object} [hash]
	 *        hash of data sent during the event
	 */

	/**
	 * An object containing event names as keys and booleans as values.
	 *
	 * > NOTE: If an event name is set to a true value here {@link EventTarget#trigger}
	 *         will have extra functionality. See that function for more information.
	 *
	 * @property EventTarget.prototype.allowedEvents_
	 * @private
	 */
	EventTarget.prototype.allowedEvents_ = {};

	/**
	 * Adds an `event listener` to an instance of an `EventTarget`. An `event listener` is a
	 * function that will get called when an event with a certain name gets triggered.
	 *
	 * @param {string|string[]} type
	 *        An event name or an array of event names.
	 *
	 * @param {EventTarget~EventListener} fn
	 *        The function to call with `EventTarget`s
	 */
	EventTarget.prototype.on = function (type, fn) {
	  // Remove the addEventListener alias before calling Events.on
	  // so we don't get into an infinite type loop
	  var ael = this.addEventListener;

	  this.addEventListener = function () {};
	  on(this, type, fn);
	  this.addEventListener = ael;
	};

	/**
	 * An alias of {@link EventTarget#on}. Allows `EventTarget` to mimic
	 * the standard DOM API.
	 *
	 * @function
	 * @see {@link EventTarget#on}
	 */
	EventTarget.prototype.addEventListener = EventTarget.prototype.on;

	/**
	 * Removes an `event listener` for a specific event from an instance of `EventTarget`.
	 * This makes it so that the `event listener` will no longer get called when the
	 * named event happens.
	 *
	 * @param {string|string[]} type
	 *        An event name or an array of event names.
	 *
	 * @param {EventTarget~EventListener} fn
	 *        The function to remove.
	 */
	EventTarget.prototype.off = function (type, fn) {
	  off(this, type, fn);
	};

	/**
	 * An alias of {@link EventTarget#off}. Allows `EventTarget` to mimic
	 * the standard DOM API.
	 *
	 * @function
	 * @see {@link EventTarget#off}
	 */
	EventTarget.prototype.removeEventListener = EventTarget.prototype.off;

	/**
	 * This function will add an `event listener` that gets triggered only once. After the
	 * first trigger it will get removed. This is like adding an `event listener`
	 * with {@link EventTarget#on} that calls {@link EventTarget#off} on itself.
	 *
	 * @param {string|string[]} type
	 *        An event name or an array of event names.
	 *
	 * @param {EventTarget~EventListener} fn
	 *        The function to be called once for each event name.
	 */
	EventTarget.prototype.one = function (type, fn) {
	  // Remove the addEventListener alialing Events.on
	  // so we don't get into an infinite type loop
	  var ael = this.addEventListener;

	  this.addEventListener = function () {};
	  one(this, type, fn);
	  this.addEventListener = ael;
	};

	/**
	 * This function causes an event to happen. This will then cause any `event listeners`
	 * that are waiting for that event, to get called. If there are no `event listeners`
	 * for an event then nothing will happen.
	 *
	 * If the name of the `Event` that is being triggered is in `EventTarget.allowedEvents_`.
	 * Trigger will also call the `on` + `uppercaseEventName` function.
	 *
	 * Example:
	 * 'click' is in `EventTarget.allowedEvents_`, so, trigger will attempt to call
	 * `onClick` if it exists.
	 *
	 * @param {string|EventTarget~Event|Object} event
	 *        The name of the event, an `Event`, or an object with a key of type set to
	 *        an event name.
	 */
	EventTarget.prototype.trigger = function (event) {
	  var type = event.type || event;

	  if (typeof event === 'string') {
	    event = { type: type };
	  }
	  event = fixEvent(event);

	  if (this.allowedEvents_[type] && this['on' + type]) {
	    this['on' + type](event);
	  }

	  trigger(this, event);
	};

	/**
	 * An alias of {@link EventTarget#trigger}. Allows `EventTarget` to mimic
	 * the standard DOM API.
	 *
	 * @function
	 * @see {@link EventTarget#trigger}
	 */
	EventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;

	/**
	 * @file mixins/evented.js
	 * @module evented
	 */
	/**
	 * Returns whether or not an object has had the evented mixin applied.
	 *
	 * @param  {Object} object
	 *         An object to test.
	 *
	 * @return {boolean}
	 *         Whether or not the object appears to be evented.
	 */
	var isEvented = function isEvented(object) {
	  return object instanceof EventTarget || !!object.eventBusEl_ && ['on', 'one', 'off', 'trigger'].every(function (k) {
	    return typeof object[k] === 'function';
	  });
	};

	/**
	 * Whether a value is a valid event type - non-empty string or array.
	 *
	 * @private
	 * @param  {string|Array} type
	 *         The type value to test.
	 *
	 * @return {boolean}
	 *         Whether or not the type is a valid event type.
	 */
	var isValidEventType = function isValidEventType(type) {
	  return (
	    // The regex here verifies that the `type` contains at least one non-
	    // whitespace character.
	    typeof type === 'string' && /\S/.test(type) || Array.isArray(type) && !!type.length
	  );
	};

	/**
	 * Validates a value to determine if it is a valid event target. Throws if not.
	 *
	 * @private
	 * @throws {Error}
	 *         If the target does not appear to be a valid event target.
	 *
	 * @param  {Object} target
	 *         The object to test.
	 */
	var validateTarget = function validateTarget(target) {
	  if (!target.nodeName && !isEvented(target)) {
	    throw new Error('Invalid target; must be a DOM node or evented object.');
	  }
	};

	/**
	 * Validates a value to determine if it is a valid event target. Throws if not.
	 *
	 * @private
	 * @throws {Error}
	 *         If the type does not appear to be a valid event type.
	 *
	 * @param  {string|Array} type
	 *         The type to test.
	 */
	var validateEventType = function validateEventType(type) {
	  if (!isValidEventType(type)) {
	    throw new Error('Invalid event type; must be a non-empty string or array.');
	  }
	};

	/**
	 * Validates a value to determine if it is a valid listener. Throws if not.
	 *
	 * @private
	 * @throws {Error}
	 *         If the listener is not a function.
	 *
	 * @param  {Function} listener
	 *         The listener to test.
	 */
	var validateListener = function validateListener(listener) {
	  if (typeof listener !== 'function') {
	    throw new Error('Invalid listener; must be a function.');
	  }
	};

	/**
	 * Takes an array of arguments given to `on()` or `one()`, validates them, and
	 * normalizes them into an object.
	 *
	 * @private
	 * @param  {Object} self
	 *         The evented object on which `on()` or `one()` was called. This
	 *         object will be bound as the `this` value for the listener.
	 *
	 * @param  {Array} args
	 *         An array of arguments passed to `on()` or `one()`.
	 *
	 * @return {Object}
	 *         An object containing useful values for `on()` or `one()` calls.
	 */
	var normalizeListenArgs = function normalizeListenArgs(self, args) {

	  // If the number of arguments is less than 3, the target is always the
	  // evented object itself.
	  var isTargetingSelf = args.length < 3 || args[0] === self || args[0] === self.eventBusEl_;
	  var target = void 0;
	  var type = void 0;
	  var listener = void 0;

	  if (isTargetingSelf) {
	    target = self.eventBusEl_;

	    // Deal with cases where we got 3 arguments, but we are still listening to
	    // the evented object itself.
	    if (args.length >= 3) {
	      args.shift();
	    }

	    type = args[0];
	    listener = args[1];
	  } else {
	    target = args[0];
	    type = args[1];
	    listener = args[2];
	  }

	  validateTarget(target);
	  validateEventType(type);
	  validateListener(listener);

	  listener = bind(self, listener);

	  return { isTargetingSelf: isTargetingSelf, target: target, type: type, listener: listener };
	};

	/**
	 * Adds the listener to the event type(s) on the target, normalizing for
	 * the type of target.
	 *
	 * @private
	 * @param  {Element|Object} target
	 *         A DOM node or evented object.
	 *
	 * @param  {string} method
	 *         The event binding method to use ("on" or "one").
	 *
	 * @param  {string|Array} type
	 *         One or more event type(s).
	 *
	 * @param  {Function} listener
	 *         A listener function.
	 */
	var listen = function listen(target, method, type, listener) {
	  validateTarget(target);

	  if (target.nodeName) {
	    Events[method](target, type, listener);
	  } else {
	    target[method](type, listener);
	  }
	};

	/**
	 * Contains methods that provide event capabilites to an object which is passed
	 * to {@link module:evented|evented}.
	 *
	 * @mixin EventedMixin
	 */
	var EventedMixin = {

	  /**
	   * Add a listener to an event (or events) on this object or another evented
	   * object.
	   *
	   * @param  {string|Array|Element|Object} targetOrType
	   *         If this is a string or array, it represents the event type(s)
	   *         that will trigger the listener.
	   *
	   *         Another evented object can be passed here instead, which will
	   *         cause the listener to listen for events on _that_ object.
	   *
	   *         In either case, the listener's `this` value will be bound to
	   *         this object.
	   *
	   * @param  {string|Array|Function} typeOrListener
	   *         If the first argument was a string or array, this should be the
	   *         listener function. Otherwise, this is a string or array of event
	   *         type(s).
	   *
	   * @param  {Function} [listener]
	   *         If the first argument was another evented object, this will be
	   *         the listener function.
	   */
	  on: function on$$1() {
	    var _this = this;

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var _normalizeListenArgs = normalizeListenArgs(this, args),
	        isTargetingSelf = _normalizeListenArgs.isTargetingSelf,
	        target = _normalizeListenArgs.target,
	        type = _normalizeListenArgs.type,
	        listener = _normalizeListenArgs.listener;

	    listen(target, 'on', type, listener);

	    // If this object is listening to another evented object.
	    if (!isTargetingSelf) {

	      // If this object is disposed, remove the listener.
	      var removeListenerOnDispose = function removeListenerOnDispose() {
	        return _this.off(target, type, listener);
	      };

	      // Use the same function ID as the listener so we can remove it later it
	      // using the ID of the original listener.
	      removeListenerOnDispose.guid = listener.guid;

	      // Add a listener to the target's dispose event as well. This ensures
	      // that if the target is disposed BEFORE this object, we remove the
	      // removal listener that was just added. Otherwise, we create a memory leak.
	      var removeRemoverOnTargetDispose = function removeRemoverOnTargetDispose() {
	        return _this.off('dispose', removeListenerOnDispose);
	      };

	      // Use the same function ID as the listener so we can remove it later
	      // it using the ID of the original listener.
	      removeRemoverOnTargetDispose.guid = listener.guid;

	      listen(this, 'on', 'dispose', removeListenerOnDispose);
	      listen(target, 'on', 'dispose', removeRemoverOnTargetDispose);
	    }
	  },


	  /**
	   * Add a listener to an event (or events) on this object or another evented
	   * object. The listener will only be called once and then removed.
	   *
	   * @param  {string|Array|Element|Object} targetOrType
	   *         If this is a string or array, it represents the event type(s)
	   *         that will trigger the listener.
	   *
	   *         Another evented object can be passed here instead, which will
	   *         cause the listener to listen for events on _that_ object.
	   *
	   *         In either case, the listener's `this` value will be bound to
	   *         this object.
	   *
	   * @param  {string|Array|Function} typeOrListener
	   *         If the first argument was a string or array, this should be the
	   *         listener function. Otherwise, this is a string or array of event
	   *         type(s).
	   *
	   * @param  {Function} [listener]
	   *         If the first argument was another evented object, this will be
	   *         the listener function.
	   */
	  one: function one$$1() {
	    var _this2 = this;

	    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    var _normalizeListenArgs2 = normalizeListenArgs(this, args),
	        isTargetingSelf = _normalizeListenArgs2.isTargetingSelf,
	        target = _normalizeListenArgs2.target,
	        type = _normalizeListenArgs2.type,
	        listener = _normalizeListenArgs2.listener;

	    // Targeting this evented object.


	    if (isTargetingSelf) {
	      listen(target, 'one', type, listener);

	      // Targeting another evented object.
	    } else {
	      var wrapper = function wrapper() {
	        for (var _len3 = arguments.length, largs = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	          largs[_key3] = arguments[_key3];
	        }

	        _this2.off(target, type, wrapper);
	        listener.apply(null, largs);
	      };

	      // Use the same function ID as the listener so we can remove it later
	      // it using the ID of the original listener.
	      wrapper.guid = listener.guid;
	      listen(target, 'one', type, wrapper);
	    }
	  },


	  /**
	   * Removes listener(s) from event(s) on an evented object.
	   *
	   * @param  {string|Array|Element|Object} [targetOrType]
	   *         If this is a string or array, it represents the event type(s).
	   *
	   *         Another evented object can be passed here instead, in which case
	   *         ALL 3 arguments are _required_.
	   *
	   * @param  {string|Array|Function} [typeOrListener]
	   *         If the first argument was a string or array, this may be the
	   *         listener function. Otherwise, this is a string or array of event
	   *         type(s).
	   *
	   * @param  {Function} [listener]
	   *         If the first argument was another evented object, this will be
	   *         the listener function; otherwise, _all_ listeners bound to the
	   *         event type(s) will be removed.
	   */
	  off: function off$$1(targetOrType, typeOrListener, listener) {

	    // Targeting this evented object.
	    if (!targetOrType || isValidEventType(targetOrType)) {
	      off(this.eventBusEl_, targetOrType, typeOrListener);

	      // Targeting another evented object.
	    } else {
	      var target = targetOrType;
	      var type = typeOrListener;

	      // Fail fast and in a meaningful way!
	      validateTarget(target);
	      validateEventType(type);
	      validateListener(listener);

	      // Ensure there's at least a guid, even if the function hasn't been used
	      listener = bind(this, listener);

	      // Remove the dispose listener on this evented object, which was given
	      // the same guid as the event listener in on().
	      this.off('dispose', listener);

	      if (target.nodeName) {
	        off(target, type, listener);
	        off(target, 'dispose', listener);
	      } else if (isEvented(target)) {
	        target.off(type, listener);
	        target.off('dispose', listener);
	      }
	    }
	  },


	  /**
	   * Fire an event on this evented object, causing its listeners to be called.
	   *
	   * @param   {string|Object} event
	   *          An event type or an object with a type property.
	   *
	   * @param   {Object} [hash]
	   *          An additional object to pass along to listeners.
	   *
	   * @returns {boolean}
	   *          Whether or not the default behavior was prevented.
	   */
	  trigger: function trigger$$1(event, hash) {
	    return trigger(this.eventBusEl_, event, hash);
	  }
	};

	/**
	 * Applies {@link module:evented~EventedMixin|EventedMixin} to a target object.
	 *
	 * @param  {Object} target
	 *         The object to which to add event methods.
	 *
	 * @param  {Object} [options={}]
	 *         Options for customizing the mixin behavior.
	 *
	 * @param  {String} [options.eventBusKey]
	 *         By default, adds a `eventBusEl_` DOM element to the target object,
	 *         which is used as an event bus. If the target object already has a
	 *         DOM element that should be used, pass its key here.
	 *
	 * @return {Object}
	 *         The target object.
	 */
	function evented(target) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var eventBusKey = options.eventBusKey;

	  // Set or create the eventBusEl_.

	  if (eventBusKey) {
	    if (!target[eventBusKey].nodeName) {
	      throw new Error('The eventBusKey "' + eventBusKey + '" does not refer to an element.');
	    }
	    target.eventBusEl_ = target[eventBusKey];
	  } else {
	    target.eventBusEl_ = createEl('span', { className: 'vjs-event-bus' });
	  }

	  assign(target, EventedMixin);

	  // When any evented object is disposed, it removes all its listeners.
	  target.on('dispose', function () {
	    target.off();
	    window.setTimeout(function () {
	      target.eventBusEl_ = null;
	    }, 0);
	  });

	  return target;
	}

	/**
	 * @file mixins/stateful.js
	 * @module stateful
	 */
	/**
	 * Contains methods that provide statefulness to an object which is passed
	 * to {@link module:stateful}.
	 *
	 * @mixin StatefulMixin
	 */
	var StatefulMixin = {

	  /**
	   * A hash containing arbitrary keys and values representing the state of
	   * the object.
	   *
	   * @type {Object}
	   */
	  state: {},

	  /**
	   * Set the state of an object by mutating its
	   * {@link module:stateful~StatefulMixin.state|state} object in place.
	   *
	   * @fires   module:stateful~StatefulMixin#statechanged
	   * @param   {Object|Function} stateUpdates
	   *          A new set of properties to shallow-merge into the plugin state.
	   *          Can be a plain object or a function returning a plain object.
	   *
	   * @returns {Object|undefined}
	   *          An object containing changes that occurred. If no changes
	   *          occurred, returns `undefined`.
	   */
	  setState: function setState(stateUpdates) {
	    var _this = this;

	    // Support providing the `stateUpdates` state as a function.
	    if (typeof stateUpdates === 'function') {
	      stateUpdates = stateUpdates();
	    }

	    var changes = void 0;

	    each(stateUpdates, function (value, key) {

	      // Record the change if the value is different from what's in the
	      // current state.
	      if (_this.state[key] !== value) {
	        changes = changes || {};
	        changes[key] = {
	          from: _this.state[key],
	          to: value
	        };
	      }

	      _this.state[key] = value;
	    });

	    // Only trigger "statechange" if there were changes AND we have a trigger
	    // function. This allows us to not require that the target object be an
	    // evented object.
	    if (changes && isEvented(this)) {

	      /**
	       * An event triggered on an object that is both
	       * {@link module:stateful|stateful} and {@link module:evented|evented}
	       * indicating that its state has changed.
	       *
	       * @event    module:stateful~StatefulMixin#statechanged
	       * @type     {Object}
	       * @property {Object} changes
	       *           A hash containing the properties that were changed and
	       *           the values they were changed `from` and `to`.
	       */
	      this.trigger({
	        changes: changes,
	        type: 'statechanged'
	      });
	    }

	    return changes;
	  }
	};

	/**
	 * Applies {@link module:stateful~StatefulMixin|StatefulMixin} to a target
	 * object.
	 *
	 * If the target object is {@link module:evented|evented} and has a
	 * `handleStateChanged` method, that method will be automatically bound to the
	 * `statechanged` event on itself.
	 *
	 * @param   {Object} target
	 *          The object to be made stateful.
	 *
	 * @param   {Object} [defaultState]
	 *          A default set of properties to populate the newly-stateful object's
	 *          `state` property.
	 *
	 * @returns {Object}
	 *          Returns the `target`.
	 */
	function stateful(target, defaultState) {
	  assign(target, StatefulMixin);

	  // This happens after the mixing-in because we need to replace the `state`
	  // added in that step.
	  target.state = assign({}, target.state, defaultState);

	  // Auto-bind the `handleStateChanged` method of the target object if it exists.
	  if (typeof target.handleStateChanged === 'function' && isEvented(target)) {
	    target.on('statechanged', target.handleStateChanged);
	  }

	  return target;
	}

	/**
	 * @file to-title-case.js
	 * @module to-title-case
	 */

	/**
	 * Uppercase the first letter of a string.
	 *
	 * @param {string} string
	 *        String to be uppercased
	 *
	 * @return {string}
	 *         The string with an uppercased first letter
	 */
	function toTitleCase(string) {
	  if (typeof string !== 'string') {
	    return string;
	  }

	  return string.charAt(0).toUpperCase() + string.slice(1);
	}

	/**
	 * Compares the TitleCase versions of the two strings for equality.
	 *
	 * @param {string} str1
	 *        The first string to compare
	 *
	 * @param {string} str2
	 *        The second string to compare
	 *
	 * @return {boolean}
	 *         Whether the TitleCase versions of the strings are equal
	 */
	function titleCaseEquals(str1, str2) {
	  return toTitleCase(str1) === toTitleCase(str2);
	}

	/**
	 * @file merge-options.js
	 * @module merge-options
	 */
	/**
	 * Deep-merge one or more options objects, recursively merging **only** plain
	 * object properties.
	 *
	 * @param   {Object[]} sources
	 *          One or more objects to merge into a new object.
	 *
	 * @returns {Object}
	 *          A new object that is the merged result of all sources.
	 */
	function mergeOptions() {
	  var result = {};

	  for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {
	    sources[_key] = arguments[_key];
	  }

	  sources.forEach(function (source) {
	    if (!source) {
	      return;
	    }

	    each(source, function (value, key) {
	      if (!isPlain(value)) {
	        result[key] = value;
	        return;
	      }

	      if (!isPlain(result[key])) {
	        result[key] = {};
	      }

	      result[key] = mergeOptions(result[key], value);
	    });
	  });

	  return result;
	}

	/**
	 * Player Component - Base class for all UI objects
	 *
	 * @file component.js
	 */
	/**
	 * Base class for all UI Components.
	 * Components are UI objects which represent both a javascript object and an element
	 * in the DOM. They can be children of other components, and can have
	 * children themselves.
	 *
	 * Components can also use methods from {@link EventTarget}
	 */

	var Component = function () {

	  /**
	   * A callback that is called when a component is ready. Does not have any
	   * paramters and any callback value will be ignored.
	   *
	   * @callback Component~ReadyCallback
	   * @this Component
	   */

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Object[]} [options.children]
	   *        An array of children objects to intialize this component with. Children objects have
	   *        a name property that will be used if more than one component of the same type needs to be
	   *        added.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        Function that gets called when the `Component` is ready.
	   */
	  function Component(player, options, ready) {
	    classCallCheck(this, Component);


	    // The component might be the player itself and we can't pass `this` to super
	    if (!player && this.play) {
	      this.player_ = player = this; // eslint-disable-line
	    } else {
	      this.player_ = player;
	    }

	    // Make a copy of prototype.options_ to protect against overriding defaults
	    this.options_ = mergeOptions({}, this.options_);

	    // Updated options with supplied options
	    options = this.options_ = mergeOptions(this.options_, options);

	    // Get ID from options or options element if one is supplied
	    this.id_ = options.id || options.el && options.el.id;

	    // If there was no ID from the options, generate one
	    if (!this.id_) {
	      // Don't require the player ID function in the case of mock players
	      var id = player && player.id && player.id() || 'no_player';

	      this.id_ = id + '_component_' + newGUID();
	    }

	    this.name_ = options.name || null;

	    // Create element if one wasn't provided in options
	    if (options.el) {
	      this.el_ = options.el;
	    } else if (options.createEl !== false) {
	      this.el_ = this.createEl();
	    }

	    // if evented is anything except false, we want to mixin in evented
	    if (options.evented !== false) {
	      // Make this an evented object and use `el_`, if available, as its event bus
	      evented(this, { eventBusKey: this.el_ ? 'el_' : null });
	    }
	    stateful(this, this.constructor.defaultState);

	    this.children_ = [];
	    this.childIndex_ = {};
	    this.childNameIndex_ = {};

	    // Add any child components in options
	    if (options.initChildren !== false) {
	      this.initChildren();
	    }

	    this.ready(ready);
	    // Don't want to trigger ready here or it will before init is actually
	    // finished for all children that run this constructor

	    if (options.reportTouchActivity !== false) {
	      this.enableTouchActivity();
	    }
	  }

	  /**
	   * Dispose of the `Component` and all child components.
	   *
	   * @fires Component#dispose
	   */


	  Component.prototype.dispose = function dispose() {

	    /**
	     * Triggered when a `Component` is disposed.
	     *
	     * @event Component#dispose
	     * @type {EventTarget~Event}
	     *
	     * @property {boolean} [bubbles=false]
	     *           set to false so that the close event does not
	     *           bubble up
	     */
	    this.trigger({ type: 'dispose', bubbles: false });

	    // Dispose all children.
	    if (this.children_) {
	      for (var i = this.children_.length - 1; i >= 0; i--) {
	        if (this.children_[i].dispose) {
	          this.children_[i].dispose();
	        }
	      }
	    }

	    // Delete child references
	    this.children_ = null;
	    this.childIndex_ = null;
	    this.childNameIndex_ = null;

	    if (this.el_) {
	      // Remove element from DOM
	      if (this.el_.parentNode) {
	        this.el_.parentNode.removeChild(this.el_);
	      }

	      removeData(this.el_);
	      this.el_ = null;
	    }

	    // remove reference to the player after disposing of the element
	    this.player_ = null;
	  };

	  /**
	   * Return the {@link Player} that the `Component` has attached to.
	   *
	   * @return {Player}
	   *         The player that this `Component` has attached to.
	   */


	  Component.prototype.player = function player() {
	    return this.player_;
	  };

	  /**
	   * Deep merge of options objects with new options.
	   * > Note: When both `obj` and `options` contain properties whose values are objects.
	   *         The two properties get merged using {@link module:mergeOptions}
	   *
	   * @param {Object} obj
	   *        The object that contains new options.
	   *
	   * @return {Object}
	   *         A new object of `this.options_` and `obj` merged together.
	   *
	   * @deprecated since version 5
	   */


	  Component.prototype.options = function options(obj) {
	    log.warn('this.options() has been deprecated and will be moved to the constructor in 6.0');

	    if (!obj) {
	      return this.options_;
	    }

	    this.options_ = mergeOptions(this.options_, obj);
	    return this.options_;
	  };

	  /**
	   * Get the `Component`s DOM element
	   *
	   * @return {Element}
	   *         The DOM element for this `Component`.
	   */


	  Component.prototype.el = function el() {
	    return this.el_;
	  };

	  /**
	   * Create the `Component`s DOM element.
	   *
	   * @param {string} [tagName]
	   *        Element's DOM node type. e.g. 'div'
	   *
	   * @param {Object} [properties]
	   *        An object of properties that should be set.
	   *
	   * @param {Object} [attributes]
	   *        An object of attributes that should be set.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  Component.prototype.createEl = function createEl$$1(tagName, properties, attributes) {
	    return createEl(tagName, properties, attributes);
	  };

	  /**
	   * Localize a string given the string in english.
	   *
	   * If tokens are provided, it'll try and run a simple token replacement on the provided string.
	   * The tokens it looks for look like `{1}` with the index being 1-indexed into the tokens array.
	   *
	   * If a `defaultValue` is provided, it'll use that over `string`,
	   * if a value isn't found in provided language files.
	   * This is useful if you want to have a descriptive key for token replacement
	   * but have a succinct localized string and not require `en.json` to be included.
	   *
	   * Currently, it is used for the progress bar timing.
	   * ```js
	   * {
	   *   "progress bar timing: currentTime={1} duration={2}": "{1} of {2}"
	   * }
	   * ```
	   * It is then used like so:
	   * ```js
	   * this.localize('progress bar timing: currentTime={1} duration{2}',
	   *               [this.player_.currentTime(), this.player_.duration()],
	   *               '{1} of {2}');
	   * ```
	   *
	   * Which outputs something like: `01:23 of 24:56`.
	   *
	   *
	   * @param {string} string
	   *        The string to localize and the key to lookup in the language files.
	   * @param {string[]} [tokens]
	   *        If the current item has token replacements, provide the tokens here.
	   * @param {string} [defaultValue]
	   *        Defaults to `string`. Can be a default value to use for token replacement
	   *        if the lookup key is needed to be separate.
	   *
	   * @return {string}
	   *         The localized string or if no localization exists the english string.
	   */


	  Component.prototype.localize = function localize(string, tokens) {
	    var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : string;

	    var code = this.player_.language && this.player_.language();
	    var languages = this.player_.languages && this.player_.languages();
	    var language = languages && languages[code];
	    var primaryCode = code && code.split('-')[0];
	    var primaryLang = languages && languages[primaryCode];

	    var localizedString = defaultValue;

	    if (language && language[string]) {
	      localizedString = language[string];
	    } else if (primaryLang && primaryLang[string]) {
	      localizedString = primaryLang[string];
	    }

	    if (tokens) {
	      localizedString = localizedString.replace(/\{(\d+)\}/g, function (match, index) {
	        var value = tokens[index - 1];
	        var ret = value;

	        if (typeof value === 'undefined') {
	          ret = match;
	        }

	        return ret;
	      });
	    }

	    return localizedString;
	  };

	  /**
	   * Return the `Component`s DOM element. This is where children get inserted.
	   * This will usually be the the same as the element returned in {@link Component#el}.
	   *
	   * @return {Element}
	   *         The content element for this `Component`.
	   */


	  Component.prototype.contentEl = function contentEl() {
	    return this.contentEl_ || this.el_;
	  };

	  /**
	   * Get this `Component`s ID
	   *
	   * @return {string}
	   *         The id of this `Component`
	   */


	  Component.prototype.id = function id() {
	    return this.id_;
	  };

	  /**
	   * Get the `Component`s name. The name gets used to reference the `Component`
	   * and is set during registration.
	   *
	   * @return {string}
	   *         The name of this `Component`.
	   */


	  Component.prototype.name = function name() {
	    return this.name_;
	  };

	  /**
	   * Get an array of all child components
	   *
	   * @return {Array}
	   *         The children
	   */


	  Component.prototype.children = function children() {
	    return this.children_;
	  };

	  /**
	   * Returns the child `Component` with the given `id`.
	   *
	   * @param {string} id
	   *        The id of the child `Component` to get.
	   *
	   * @return {Component|undefined}
	   *         The child `Component` with the given `id` or undefined.
	   */


	  Component.prototype.getChildById = function getChildById(id) {
	    return this.childIndex_[id];
	  };

	  /**
	   * Returns the child `Component` with the given `name`.
	   *
	   * @param {string} name
	   *        The name of the child `Component` to get.
	   *
	   * @return {Component|undefined}
	   *         The child `Component` with the given `name` or undefined.
	   */


	  Component.prototype.getChild = function getChild(name) {
	    if (!name) {
	      return;
	    }

	    name = toTitleCase(name);

	    return this.childNameIndex_[name];
	  };

	  /**
	   * Add a child `Component` inside the current `Component`.
	   *
	   *
	   * @param {string|Component} child
	   *        The name or instance of a child to add.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of options that will get passed to children of
	   *        the child.
	   *
	   * @param {number} [index=this.children_.length]
	   *        The index to attempt to add a child into.
	   *
	   * @return {Component}
	   *         The `Component` that gets added as a child. When using a string the
	   *         `Component` will get created by this process.
	   */


	  Component.prototype.addChild = function addChild(child) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.children_.length;

	    var component = void 0;
	    var componentName = void 0;

	    // If child is a string, create component with options
	    if (typeof child === 'string') {
	      componentName = toTitleCase(child);

	      var componentClassName = options.componentClass || componentName;

	      // Set name through options
	      options.name = componentName;

	      // Create a new object & element for this controls set
	      // If there's no .player_, this is a player
	      var ComponentClass = Component.getComponent(componentClassName);

	      if (!ComponentClass) {
	        throw new Error('Component ' + componentClassName + ' does not exist');
	      }

	      // data stored directly on the videojs object may be
	      // misidentified as a component to retain
	      // backwards-compatibility with 4.x. check to make sure the
	      // component class can be instantiated.
	      if (typeof ComponentClass !== 'function') {
	        return null;
	      }

	      component = new ComponentClass(this.player_ || this, options);

	      // child is a component instance
	    } else {
	      component = child;
	    }

	    this.children_.splice(index, 0, component);

	    if (typeof component.id === 'function') {
	      this.childIndex_[component.id()] = component;
	    }

	    // If a name wasn't used to create the component, check if we can use the
	    // name function of the component
	    componentName = componentName || component.name && toTitleCase(component.name());

	    if (componentName) {
	      this.childNameIndex_[componentName] = component;
	    }

	    // Add the UI object's element to the container div (box)
	    // Having an element is not required
	    if (typeof component.el === 'function' && component.el()) {
	      var childNodes = this.contentEl().children;
	      var refNode = childNodes[index] || null;

	      this.contentEl().insertBefore(component.el(), refNode);
	    }

	    // Return so it can stored on parent object if desired.
	    return component;
	  };

	  /**
	   * Remove a child `Component` from this `Component`s list of children. Also removes
	   * the child `Component`s element from this `Component`s element.
	   *
	   * @param {Component} component
	   *        The child `Component` to remove.
	   */


	  Component.prototype.removeChild = function removeChild(component) {
	    if (typeof component === 'string') {
	      component = this.getChild(component);
	    }

	    if (!component || !this.children_) {
	      return;
	    }

	    var childFound = false;

	    for (var i = this.children_.length - 1; i >= 0; i--) {
	      if (this.children_[i] === component) {
	        childFound = true;
	        this.children_.splice(i, 1);
	        break;
	      }
	    }

	    if (!childFound) {
	      return;
	    }

	    this.childIndex_[component.id()] = null;
	    this.childNameIndex_[component.name()] = null;

	    var compEl = component.el();

	    if (compEl && compEl.parentNode === this.contentEl()) {
	      this.contentEl().removeChild(component.el());
	    }
	  };

	  /**
	   * Add and initialize default child `Component`s based upon options.
	   */


	  Component.prototype.initChildren = function initChildren() {
	    var _this = this;

	    var children = this.options_.children;

	    if (children) {
	      // `this` is `parent`
	      var parentOptions = this.options_;

	      var handleAdd = function handleAdd(child) {
	        var name = child.name;
	        var opts = child.opts;

	        // Allow options for children to be set at the parent options
	        // e.g. videojs(id, { controlBar: false });
	        // instead of videojs(id, { children: { controlBar: false });
	        if (parentOptions[name] !== undefined) {
	          opts = parentOptions[name];
	        }

	        // Allow for disabling default components
	        // e.g. options['children']['posterImage'] = false
	        if (opts === false) {
	          return;
	        }

	        // Allow options to be passed as a simple boolean if no configuration
	        // is necessary.
	        if (opts === true) {
	          opts = {};
	        }

	        // We also want to pass the original player options
	        // to each component as well so they don't need to
	        // reach back into the player for options later.
	        opts.playerOptions = _this.options_.playerOptions;

	        // Create and add the child component.
	        // Add a direct reference to the child by name on the parent instance.
	        // If two of the same component are used, different names should be supplied
	        // for each
	        var newChild = _this.addChild(name, opts);

	        if (newChild) {
	          _this[name] = newChild;
	        }
	      };

	      // Allow for an array of children details to passed in the options
	      var workingChildren = void 0;
	      var Tech = Component.getComponent('Tech');

	      if (Array.isArray(children)) {
	        workingChildren = children;
	      } else {
	        workingChildren = Object.keys(children);
	      }

	      workingChildren
	      // children that are in this.options_ but also in workingChildren  would
	      // give us extra children we do not want. So, we want to filter them out.
	      .concat(Object.keys(this.options_).filter(function (child) {
	        return !workingChildren.some(function (wchild) {
	          if (typeof wchild === 'string') {
	            return child === wchild;
	          }
	          return child === wchild.name;
	        });
	      })).map(function (child) {
	        var name = void 0;
	        var opts = void 0;

	        if (typeof child === 'string') {
	          name = child;
	          opts = children[name] || _this.options_[name] || {};
	        } else {
	          name = child.name;
	          opts = child;
	        }

	        return { name: name, opts: opts };
	      }).filter(function (child) {
	        // we have to make sure that child.name isn't in the techOrder since
	        // techs are registerd as Components but can't aren't compatible
	        // See https://github.com/videojs/video.js/issues/2772
	        var c = Component.getComponent(child.opts.componentClass || toTitleCase(child.name));

	        return c && !Tech.isTech(c);
	      }).forEach(handleAdd);
	    }
	  };

	  /**
	   * Builds the default DOM class name. Should be overriden by sub-components.
	   *
	   * @return {string}
	   *         The DOM class name for this object.
	   *
	   * @abstract
	   */


	  Component.prototype.buildCSSClass = function buildCSSClass() {
	    // Child classes can include a function that does:
	    // return 'CLASS NAME' + this._super();
	    return '';
	  };

	  /**
	   * Bind a listener to the component's ready state.
	   * Different from event listeners in that if the ready event has already happened
	   * it will trigger the function immediately.
	   *
	   * @return {Component}
	   *         Returns itself; method can be chained.
	   */


	  Component.prototype.ready = function ready(fn) {
	    var sync = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	    if (!fn) {
	      return;
	    }

	    if (!this.isReady_) {
	      this.readyQueue_ = this.readyQueue_ || [];
	      this.readyQueue_.push(fn);
	      return;
	    }

	    if (sync) {
	      fn.call(this);
	    } else {
	      // Call the function asynchronously by default for consistency
	      this.setTimeout(fn, 1);
	    }
	  };

	  /**
	   * Trigger all the ready listeners for this `Component`.
	   *
	   * @fires Component#ready
	   */


	  Component.prototype.triggerReady = function triggerReady() {
	    this.isReady_ = true;

	    // Ensure ready is triggered asynchronously
	    this.setTimeout(function () {
	      var readyQueue = this.readyQueue_;

	      // Reset Ready Queue
	      this.readyQueue_ = [];

	      if (readyQueue && readyQueue.length > 0) {
	        readyQueue.forEach(function (fn) {
	          fn.call(this);
	        }, this);
	      }

	      // Allow for using event listeners also
	      /**
	       * Triggered when a `Component` is ready.
	       *
	       * @event Component#ready
	       * @type {EventTarget~Event}
	       */
	      this.trigger('ready');
	    }, 1);
	  };

	  /**
	   * Find a single DOM element matching a `selector`. This can be within the `Component`s
	   * `contentEl()` or another custom context.
	   *
	   * @param {string} selector
	   *        A valid CSS selector, which will be passed to `querySelector`.
	   *
	   * @param {Element|string} [context=this.contentEl()]
	   *        A DOM element within which to query. Can also be a selector string in
	   *        which case the first matching element will get used as context. If
	   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
	   *        nothing it falls back to `document`.
	   *
	   * @return {Element|null}
	   *         the dom element that was found, or null
	   *
	   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
	   */


	  Component.prototype.$ = function $$$1(selector, context) {
	    return $(selector, context || this.contentEl());
	  };

	  /**
	   * Finds all DOM element matching a `selector`. This can be within the `Component`s
	   * `contentEl()` or another custom context.
	   *
	   * @param {string} selector
	   *        A valid CSS selector, which will be passed to `querySelectorAll`.
	   *
	   * @param {Element|string} [context=this.contentEl()]
	   *        A DOM element within which to query. Can also be a selector string in
	   *        which case the first matching element will get used as context. If
	   *        missing `this.contentEl()` gets used. If  `this.contentEl()` returns
	   *        nothing it falls back to `document`.
	   *
	   * @return {NodeList}
	   *         a list of dom elements that were found
	   *
	   * @see [Information on CSS Selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Selectors)
	   */


	  Component.prototype.$$ = function $$$$1(selector, context) {
	    return $$(selector, context || this.contentEl());
	  };

	  /**
	   * Check if a component's element has a CSS class name.
	   *
	   * @param {string} classToCheck
	   *        CSS class name to check.
	   *
	   * @return {boolean}
	   *         - True if the `Component` has the class.
	   *         - False if the `Component` does not have the class`
	   */


	  Component.prototype.hasClass = function hasClass$$1(classToCheck) {
	    return hasClass(this.el_, classToCheck);
	  };

	  /**
	   * Add a CSS class name to the `Component`s element.
	   *
	   * @param {string} classToAdd
	   *        CSS class name to add
	   */


	  Component.prototype.addClass = function addClass$$1(classToAdd) {
	    addClass(this.el_, classToAdd);
	  };

	  /**
	   * Remove a CSS class name from the `Component`s element.
	   *
	   * @param {string} classToRemove
	   *        CSS class name to remove
	   */


	  Component.prototype.removeClass = function removeClass$$1(classToRemove) {
	    removeClass(this.el_, classToRemove);
	  };

	  /**
	   * Add or remove a CSS class name from the component's element.
	   * - `classToToggle` gets added when {@link Component#hasClass} would return false.
	   * - `classToToggle` gets removed when {@link Component#hasClass} would return true.
	   *
	   * @param  {string} classToToggle
	   *         The class to add or remove based on (@link Component#hasClass}
	   *
	   * @param  {boolean|Dom~predicate} [predicate]
	   *         An {@link Dom~predicate} function or a boolean
	   */


	  Component.prototype.toggleClass = function toggleClass$$1(classToToggle, predicate) {
	    toggleClass(this.el_, classToToggle, predicate);
	  };

	  /**
	   * Show the `Component`s element if it is hidden by removing the
	   * 'vjs-hidden' class name from it.
	   */


	  Component.prototype.show = function show() {
	    this.removeClass('vjs-hidden');
	  };

	  /**
	   * Hide the `Component`s element if it is currently showing by adding the
	   * 'vjs-hidden` class name to it.
	   */


	  Component.prototype.hide = function hide() {
	    this.addClass('vjs-hidden');
	  };

	  /**
	   * Lock a `Component`s element in its visible state by adding the 'vjs-lock-showing'
	   * class name to it. Used during fadeIn/fadeOut.
	   *
	   * @private
	   */


	  Component.prototype.lockShowing = function lockShowing() {
	    this.addClass('vjs-lock-showing');
	  };

	  /**
	   * Unlock a `Component`s element from its visible state by removing the 'vjs-lock-showing'
	   * class name from it. Used during fadeIn/fadeOut.
	   *
	   * @private
	   */


	  Component.prototype.unlockShowing = function unlockShowing() {
	    this.removeClass('vjs-lock-showing');
	  };

	  /**
	   * Get the value of an attribute on the `Component`s element.
	   *
	   * @param {string} attribute
	   *        Name of the attribute to get the value from.
	   *
	   * @return {string|null}
	   *         - The value of the attribute that was asked for.
	   *         - Can be an empty string on some browsers if the attribute does not exist
	   *           or has no value
	   *         - Most browsers will return null if the attibute does not exist or has
	   *           no value.
	   *
	   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute}
	   */


	  Component.prototype.getAttribute = function getAttribute$$1(attribute) {
	    return getAttribute(this.el_, attribute);
	  };

	  /**
	   * Set the value of an attribute on the `Component`'s element
	   *
	   * @param {string} attribute
	   *        Name of the attribute to set.
	   *
	   * @param {string} value
	   *        Value to set the attribute to.
	   *
	   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute}
	   */


	  Component.prototype.setAttribute = function setAttribute$$1(attribute, value) {
	    setAttribute(this.el_, attribute, value);
	  };

	  /**
	   * Remove an attribute from the `Component`s element.
	   *
	   * @param {string} attribute
	   *        Name of the attribute to remove.
	   *
	   * @see [DOM API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute}
	   */


	  Component.prototype.removeAttribute = function removeAttribute$$1(attribute) {
	    removeAttribute(this.el_, attribute);
	  };

	  /**
	   * Get or set the width of the component based upon the CSS styles.
	   * See {@link Component#dimension} for more detailed information.
	   *
	   * @param {number|string} [num]
	   *        The width that you want to set postfixed with '%', 'px' or nothing.
	   *
	   * @param {boolean} [skipListeners]
	   *        Skip the componentresize event trigger
	   *
	   * @return {number|string}
	   *         The width when getting, zero if there is no width. Can be a string
	   *           postpixed with '%' or 'px'.
	   */


	  Component.prototype.width = function width(num, skipListeners) {
	    return this.dimension('width', num, skipListeners);
	  };

	  /**
	   * Get or set the height of the component based upon the CSS styles.
	   * See {@link Component#dimension} for more detailed information.
	   *
	   * @param {number|string} [num]
	   *        The height that you want to set postfixed with '%', 'px' or nothing.
	   *
	   * @param {boolean} [skipListeners]
	   *        Skip the componentresize event trigger
	   *
	   * @return {number|string}
	   *         The width when getting, zero if there is no width. Can be a string
	   *         postpixed with '%' or 'px'.
	   */


	  Component.prototype.height = function height(num, skipListeners) {
	    return this.dimension('height', num, skipListeners);
	  };

	  /**
	   * Set both the width and height of the `Component` element at the same time.
	   *
	   * @param  {number|string} width
	   *         Width to set the `Component`s element to.
	   *
	   * @param  {number|string} height
	   *         Height to set the `Component`s element to.
	   */


	  Component.prototype.dimensions = function dimensions(width, height) {
	    // Skip componentresize listeners on width for optimization
	    this.width(width, true);
	    this.height(height);
	  };

	  /**
	   * Get or set width or height of the `Component` element. This is the shared code
	   * for the {@link Component#width} and {@link Component#height}.
	   *
	   * Things to know:
	   * - If the width or height in an number this will return the number postfixed with 'px'.
	   * - If the width/height is a percent this will return the percent postfixed with '%'
	   * - Hidden elements have a width of 0 with `window.getComputedStyle`. This function
	   *   defaults to the `Component`s `style.width` and falls back to `window.getComputedStyle`.
	   *   See [this]{@link http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/}
	   *   for more information
	   * - If you want the computed style of the component, use {@link Component#currentWidth}
	   *   and {@link {Component#currentHeight}
	   *
	   * @fires Component#componentresize
	   *
	   * @param {string} widthOrHeight
	   8        'width' or 'height'
	   *
	   * @param  {number|string} [num]
	   8         New dimension
	   *
	   * @param  {boolean} [skipListeners]
	   *         Skip componentresize event trigger
	   *
	   * @return {number}
	   *         The dimension when getting or 0 if unset
	   */


	  Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {
	    if (num !== undefined) {
	      // Set to zero if null or literally NaN (NaN !== NaN)
	      if (num === null || num !== num) {
	        num = 0;
	      }

	      // Check if using css width/height (% or px) and adjust
	      if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {
	        this.el_.style[widthOrHeight] = num;
	      } else if (num === 'auto') {
	        this.el_.style[widthOrHeight] = '';
	      } else {
	        this.el_.style[widthOrHeight] = num + 'px';
	      }

	      // skipListeners allows us to avoid triggering the resize event when setting both width and height
	      if (!skipListeners) {
	        /**
	         * Triggered when a component is resized.
	         *
	         * @event Component#componentresize
	         * @type {EventTarget~Event}
	         */
	        this.trigger('componentresize');
	      }

	      return;
	    }

	    // Not setting a value, so getting it
	    // Make sure element exists
	    if (!this.el_) {
	      return 0;
	    }

	    // Get dimension value from style
	    var val = this.el_.style[widthOrHeight];
	    var pxIndex = val.indexOf('px');

	    if (pxIndex !== -1) {
	      // Return the pixel value with no 'px'
	      return parseInt(val.slice(0, pxIndex), 10);
	    }

	    // No px so using % or no style was set, so falling back to offsetWidth/height
	    // If component has display:none, offset will return 0
	    // TODO: handle display:none and no dimension style using px
	    return parseInt(this.el_['offset' + toTitleCase(widthOrHeight)], 10);
	  };

	  /**
	   * Get the computed width or the height of the component's element.
	   *
	   * Uses `window.getComputedStyle`.
	   *
	   * @param {string} widthOrHeight
	   *        A string containing 'width' or 'height'. Whichever one you want to get.
	   *
	   * @return {number}
	   *         The dimension that gets asked for or 0 if nothing was set
	   *         for that dimension.
	   */


	  Component.prototype.currentDimension = function currentDimension(widthOrHeight) {
	    var computedWidthOrHeight = 0;

	    if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {
	      throw new Error('currentDimension only accepts width or height value');
	    }

	    if (typeof window.getComputedStyle === 'function') {
	      var computedStyle = window.getComputedStyle(this.el_);

	      computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];
	    }

	    // remove 'px' from variable and parse as integer
	    computedWidthOrHeight = parseFloat(computedWidthOrHeight);

	    // if the computed value is still 0, it's possible that the browser is lying
	    // and we want to check the offset values.
	    // This code also runs on IE8 and wherever getComputedStyle doesn't exist.
	    if (computedWidthOrHeight === 0) {
	      var rule = 'offset' + toTitleCase(widthOrHeight);

	      computedWidthOrHeight = this.el_[rule];
	    }

	    return computedWidthOrHeight;
	  };

	  /**
	   * An object that contains width and height values of the `Component`s
	   * computed style. Uses `window.getComputedStyle`.
	   *
	   * @typedef {Object} Component~DimensionObject
	   *
	   * @property {number} width
	   *           The width of the `Component`s computed style.
	   *
	   * @property {number} height
	   *           The height of the `Component`s computed style.
	   */

	  /**
	   * Get an object that contains computed width and height values of the
	   * component's element.
	   *
	   * Uses `window.getComputedStyle`.
	   *
	   * @return {Component~DimensionObject}
	   *         The computed dimensions of the component's element.
	   */


	  Component.prototype.currentDimensions = function currentDimensions() {
	    return {
	      width: this.currentDimension('width'),
	      height: this.currentDimension('height')
	    };
	  };

	  /**
	   * Get the computed width of the component's element.
	   *
	   * Uses `window.getComputedStyle`.
	   *
	   * @return {number}
	   *         The computed width of the component's element.
	   */


	  Component.prototype.currentWidth = function currentWidth() {
	    return this.currentDimension('width');
	  };

	  /**
	   * Get the computed height of the component's element.
	   *
	   * Uses `window.getComputedStyle`.
	   *
	   * @return {number}
	   *         The computed height of the component's element.
	   */


	  Component.prototype.currentHeight = function currentHeight() {
	    return this.currentDimension('height');
	  };

	  /**
	   * Set the focus to this component
	   */


	  Component.prototype.focus = function focus() {
	    this.el_.focus();
	  };

	  /**
	   * Remove the focus from this component
	   */


	  Component.prototype.blur = function blur() {
	    this.el_.blur();
	  };

	  /**
	   * Emit a 'tap' events when touch event support gets detected. This gets used to
	   * support toggling the controls through a tap on the video. They get enabled
	   * because every sub-component would have extra overhead otherwise.
	   *
	   * @private
	   * @fires Component#tap
	   * @listens Component#touchstart
	   * @listens Component#touchmove
	   * @listens Component#touchleave
	   * @listens Component#touchcancel
	   * @listens Component#touchend
	    */


	  Component.prototype.emitTapEvents = function emitTapEvents() {
	    // Track the start time so we can determine how long the touch lasted
	    var touchStart = 0;
	    var firstTouch = null;

	    // Maximum movement allowed during a touch event to still be considered a tap
	    // Other popular libs use anywhere from 2 (hammer.js) to 15,
	    // so 10 seems like a nice, round number.
	    var tapMovementThreshold = 10;

	    // The maximum length a touch can be while still being considered a tap
	    var touchTimeThreshold = 200;

	    var couldBeTap = void 0;

	    this.on('touchstart', function (event) {
	      // If more than one finger, don't consider treating this as a click
	      if (event.touches.length === 1) {
	        // Copy pageX/pageY from the object
	        firstTouch = {
	          pageX: event.touches[0].pageX,
	          pageY: event.touches[0].pageY
	        };
	        // Record start time so we can detect a tap vs. "touch and hold"
	        touchStart = new Date().getTime();
	        // Reset couldBeTap tracking
	        couldBeTap = true;
	      }
	    });

	    this.on('touchmove', function (event) {
	      // If more than one finger, don't consider treating this as a click
	      if (event.touches.length > 1) {
	        couldBeTap = false;
	      } else if (firstTouch) {
	        // Some devices will throw touchmoves for all but the slightest of taps.
	        // So, if we moved only a small distance, this could still be a tap
	        var xdiff = event.touches[0].pageX - firstTouch.pageX;
	        var ydiff = event.touches[0].pageY - firstTouch.pageY;
	        var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);

	        if (touchDistance > tapMovementThreshold) {
	          couldBeTap = false;
	        }
	      }
	    });

	    var noTap = function noTap() {
	      couldBeTap = false;
	    };

	    // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
	    this.on('touchleave', noTap);
	    this.on('touchcancel', noTap);

	    // When the touch ends, measure how long it took and trigger the appropriate
	    // event
	    this.on('touchend', function (event) {
	      firstTouch = null;
	      // Proceed only if the touchmove/leave/cancel event didn't happen
	      if (couldBeTap === true) {
	        // Measure how long the touch lasted
	        var touchTime = new Date().getTime() - touchStart;

	        // Make sure the touch was less than the threshold to be considered a tap
	        if (touchTime < touchTimeThreshold) {
	          // Don't let browser turn this into a click
	          event.preventDefault();
	          /**
	           * Triggered when a `Component` is tapped.
	           *
	           * @event Component#tap
	           * @type {EventTarget~Event}
	           */
	          this.trigger('tap');
	          // It may be good to copy the touchend event object and change the
	          // type to tap, if the other event properties aren't exact after
	          // Events.fixEvent runs (e.g. event.target)
	        }
	      }
	    });
	  };

	  /**
	   * This function reports user activity whenever touch events happen. This can get
	   * turned off by any sub-components that wants touch events to act another way.
	   *
	   * Report user touch activity when touch events occur. User activity gets used to
	   * determine when controls should show/hide. It is simple when it comes to mouse
	   * events, because any mouse event should show the controls. So we capture mouse
	   * events that bubble up to the player and report activity when that happens.
	   * With touch events it isn't as easy as `touchstart` and `touchend` toggle player
	   * controls. So touch events can't help us at the player level either.
	   *
	   * User activity gets checked asynchronously. So what could happen is a tap event
	   * on the video turns the controls off. Then the `touchend` event bubbles up to
	   * the player. Which, if it reported user activity, would turn the controls right
	   * back on. We also don't want to completely block touch events from bubbling up.
	   * Furthermore a `touchmove` event and anything other than a tap, should not turn
	   * controls back on.
	   *
	   * @listens Component#touchstart
	   * @listens Component#touchmove
	   * @listens Component#touchend
	   * @listens Component#touchcancel
	   */


	  Component.prototype.enableTouchActivity = function enableTouchActivity() {
	    // Don't continue if the root player doesn't support reporting user activity
	    if (!this.player() || !this.player().reportUserActivity) {
	      return;
	    }

	    // listener for reporting that the user is active
	    var report = bind(this.player(), this.player().reportUserActivity);

	    var touchHolding = void 0;

	    this.on('touchstart', function () {
	      report();
	      // For as long as the they are touching the device or have their mouse down,
	      // we consider them active even if they're not moving their finger or mouse.
	      // So we want to continue to update that they are active
	      this.clearInterval(touchHolding);
	      // report at the same interval as activityCheck
	      touchHolding = this.setInterval(report, 250);
	    });

	    var touchEnd = function touchEnd(event) {
	      report();
	      // stop the interval that maintains activity if the touch is holding
	      this.clearInterval(touchHolding);
	    };

	    this.on('touchmove', report);
	    this.on('touchend', touchEnd);
	    this.on('touchcancel', touchEnd);
	  };

	  /**
	   * A callback that has no parameters and is bound into `Component`s context.
	   *
	   * @callback Component~GenericCallback
	   * @this Component
	   */

	  /**
	   * Creates a function that runs after an `x` millisecond timeout. This function is a
	   * wrapper around `window.setTimeout`. There are a few reasons to use this one
	   * instead though:
	   * 1. It gets cleared via  {@link Component#clearTimeout} when
	   *    {@link Component#dispose} gets called.
	   * 2. The function callback will gets turned into a {@link Component~GenericCallback}
	   *
	   * > Note: You can't use `window.clearTimeout` on the id returned by this function. This
	   *         will cause its dispose listener not to get cleaned up! Please use
	   *         {@link Component#clearTimeout} or {@link Component#dispose} instead.
	   *
	   * @param {Component~GenericCallback} fn
	   *        The function that will be run after `timeout`.
	   *
	   * @param {number} timeout
	   *        Timeout in milliseconds to delay before executing the specified function.
	   *
	   * @return {number}
	   *         Returns a timeout ID that gets used to identify the timeout. It can also
	   *         get used in {@link Component#clearTimeout} to clear the timeout that
	   *         was set.
	   *
	   * @listens Component#dispose
	   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout}
	   */


	  Component.prototype.setTimeout = function setTimeout(fn, timeout) {
	    var _this2 = this;

	    // declare as variables so they are properly available in timeout function
	    // eslint-disable-next-line
	    var timeoutId, disposeFn;

	    fn = bind(this, fn);

	    timeoutId = window.setTimeout(function () {
	      _this2.off('dispose', disposeFn);
	      fn();
	    }, timeout);

	    disposeFn = function disposeFn() {
	      return _this2.clearTimeout(timeoutId);
	    };

	    disposeFn.guid = 'vjs-timeout-' + timeoutId;

	    this.on('dispose', disposeFn);

	    return timeoutId;
	  };

	  /**
	   * Clears a timeout that gets created via `window.setTimeout` or
	   * {@link Component#setTimeout}. If you set a timeout via {@link Component#setTimeout}
	   * use this function instead of `window.clearTimout`. If you don't your dispose
	   * listener will not get cleaned up until {@link Component#dispose}!
	   *
	   * @param {number} timeoutId
	   *        The id of the timeout to clear. The return value of
	   *        {@link Component#setTimeout} or `window.setTimeout`.
	   *
	   * @return {number}
	   *         Returns the timeout id that was cleared.
	   *
	   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearTimeout}
	   */


	  Component.prototype.clearTimeout = function clearTimeout(timeoutId) {
	    window.clearTimeout(timeoutId);

	    var disposeFn = function disposeFn() {};

	    disposeFn.guid = 'vjs-timeout-' + timeoutId;

	    this.off('dispose', disposeFn);

	    return timeoutId;
	  };

	  /**
	   * Creates a function that gets run every `x` milliseconds. This function is a wrapper
	   * around `window.setInterval`. There are a few reasons to use this one instead though.
	   * 1. It gets cleared via  {@link Component#clearInterval} when
	   *    {@link Component#dispose} gets called.
	   * 2. The function callback will be a {@link Component~GenericCallback}
	   *
	   * @param {Component~GenericCallback} fn
	   *        The function to run every `x` seconds.
	   *
	   * @param {number} interval
	   *        Execute the specified function every `x` milliseconds.
	   *
	   * @return {number}
	   *         Returns an id that can be used to identify the interval. It can also be be used in
	   *         {@link Component#clearInterval} to clear the interval.
	   *
	   * @listens Component#dispose
	   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setInterval}
	   */


	  Component.prototype.setInterval = function setInterval(fn, interval) {
	    var _this3 = this;

	    fn = bind(this, fn);

	    var intervalId = window.setInterval(fn, interval);

	    var disposeFn = function disposeFn() {
	      return _this3.clearInterval(intervalId);
	    };

	    disposeFn.guid = 'vjs-interval-' + intervalId;

	    this.on('dispose', disposeFn);

	    return intervalId;
	  };

	  /**
	   * Clears an interval that gets created via `window.setInterval` or
	   * {@link Component#setInterval}. If you set an inteval via {@link Component#setInterval}
	   * use this function instead of `window.clearInterval`. If you don't your dispose
	   * listener will not get cleaned up until {@link Component#dispose}!
	   *
	   * @param {number} intervalId
	   *        The id of the interval to clear. The return value of
	   *        {@link Component#setInterval} or `window.setInterval`.
	   *
	   * @return {number}
	   *         Returns the interval id that was cleared.
	   *
	   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/clearInterval}
	   */


	  Component.prototype.clearInterval = function clearInterval(intervalId) {
	    window.clearInterval(intervalId);

	    var disposeFn = function disposeFn() {};

	    disposeFn.guid = 'vjs-interval-' + intervalId;

	    this.off('dispose', disposeFn);

	    return intervalId;
	  };

	  /**
	   * Queues up a callback to be passed to requestAnimationFrame (rAF), but
	   * with a few extra bonuses:
	   *
	   * - Supports browsers that do not support rAF by falling back to
	   *   {@link Component#setTimeout}.
	   *
	   * - The callback is turned into a {@link Component~GenericCallback} (i.e.
	   *   bound to the component).
	   *
	   * - Automatic cancellation of the rAF callback is handled if the component
	   *   is disposed before it is called.
	   *
	   * @param  {Component~GenericCallback} fn
	   *         A function that will be bound to this component and executed just
	   *         before the browser's next repaint.
	   *
	   * @return {number}
	   *         Returns an rAF ID that gets used to identify the timeout. It can
	   *         also be used in {@link Component#cancelAnimationFrame} to cancel
	   *         the animation frame callback.
	   *
	   * @listens Component#dispose
	   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame}
	   */


	  Component.prototype.requestAnimationFrame = function requestAnimationFrame(fn) {
	    var _this4 = this;

	    // declare as variables so they are properly available in rAF function
	    // eslint-disable-next-line
	    var id, disposeFn;

	    if (this.supportsRaf_) {
	      fn = bind(this, fn);

	      id = window.requestAnimationFrame(function () {
	        _this4.off('dispose', disposeFn);
	        fn();
	      });

	      disposeFn = function disposeFn() {
	        return _this4.cancelAnimationFrame(id);
	      };

	      disposeFn.guid = 'vjs-raf-' + id;
	      this.on('dispose', disposeFn);

	      return id;
	    }

	    // Fall back to using a timer.
	    return this.setTimeout(fn, 1000 / 60);
	  };

	  /**
	   * Cancels a queued callback passed to {@link Component#requestAnimationFrame}
	   * (rAF).
	   *
	   * If you queue an rAF callback via {@link Component#requestAnimationFrame},
	   * use this function instead of `window.cancelAnimationFrame`. If you don't,
	   * your dispose listener will not get cleaned up until {@link Component#dispose}!
	   *
	   * @param {number} id
	   *        The rAF ID to clear. The return value of {@link Component#requestAnimationFrame}.
	   *
	   * @return {number}
	   *         Returns the rAF ID that was cleared.
	   *
	   * @see [Similar to]{@link https://developer.mozilla.org/en-US/docs/Web/API/window/cancelAnimationFrame}
	   */


	  Component.prototype.cancelAnimationFrame = function cancelAnimationFrame(id) {
	    if (this.supportsRaf_) {
	      window.cancelAnimationFrame(id);

	      var disposeFn = function disposeFn() {};

	      disposeFn.guid = 'vjs-raf-' + id;

	      this.off('dispose', disposeFn);

	      return id;
	    }

	    // Fall back to using a timer.
	    return this.clearTimeout(id);
	  };

	  /**
	   * Register a `Component` with `videojs` given the name and the component.
	   *
	   * > NOTE: {@link Tech}s should not be registered as a `Component`. {@link Tech}s
	   *         should be registered using {@link Tech.registerTech} or
	   *         {@link videojs:videojs.registerTech}.
	   *
	   * > NOTE: This function can also be seen on videojs as
	   *         {@link videojs:videojs.registerComponent}.
	   *
	   * @param {string} name
	   *        The name of the `Component` to register.
	   *
	   * @param {Component} ComponentToRegister
	   *        The `Component` class to register.
	   *
	   * @return {Component}
	   *         The `Component` that was registered.
	   */


	  Component.registerComponent = function registerComponent(name, ComponentToRegister) {
	    if (typeof name !== 'string' || !name) {
	      throw new Error('Illegal component name, "' + name + '"; must be a non-empty string.');
	    }

	    var Tech = Component.getComponent('Tech');

	    // We need to make sure this check is only done if Tech has been registered.
	    var isTech = Tech && Tech.isTech(ComponentToRegister);
	    var isComp = Component === ComponentToRegister || Component.prototype.isPrototypeOf(ComponentToRegister.prototype);

	    if (isTech || !isComp) {
	      var reason = void 0;

	      if (isTech) {
	        reason = 'techs must be registered using Tech.registerTech()';
	      } else {
	        reason = 'must be a Component subclass';
	      }

	      throw new Error('Illegal component, "' + name + '"; ' + reason + '.');
	    }

	    name = toTitleCase(name);

	    if (!Component.components_) {
	      Component.components_ = {};
	    }

	    var Player = Component.getComponent('Player');

	    if (name === 'Player' && Player && Player.players) {
	      var players = Player.players;
	      var playerNames = Object.keys(players);

	      // If we have players that were disposed, then their name will still be
	      // in Players.players. So, we must loop through and verify that the value
	      // for each item is not null. This allows registration of the Player component
	      // after all players have been disposed or before any were created.
	      if (players && playerNames.length > 0 && playerNames.map(function (pname) {
	        return players[pname];
	      }).every(Boolean)) {
	        throw new Error('Can not register Player component after player has been created.');
	      }
	    }

	    Component.components_[name] = ComponentToRegister;

	    return ComponentToRegister;
	  };

	  /**
	   * Get a `Component` based on the name it was registered with.
	   *
	   * @param {string} name
	   *        The Name of the component to get.
	   *
	   * @return {Component}
	   *         The `Component` that got registered under the given name.
	   *
	   * @deprecated In `videojs` 6 this will not return `Component`s that were not
	   *             registered using {@link Component.registerComponent}. Currently we
	   *             check the global `videojs` object for a `Component` name and
	   *             return that if it exists.
	   */


	  Component.getComponent = function getComponent(name) {
	    if (!name) {
	      return;
	    }

	    name = toTitleCase(name);

	    if (Component.components_ && Component.components_[name]) {
	      return Component.components_[name];
	    }
	  };

	  return Component;
	}();

	/**
	 * Whether or not this component supports `requestAnimationFrame`.
	 *
	 * This is exposed primarily for testing purposes.
	 *
	 * @private
	 * @type {Boolean}
	 */


	Component.prototype.supportsRaf_ = typeof window.requestAnimationFrame === 'function' && typeof window.cancelAnimationFrame === 'function';

	Component.registerComponent('Component', Component);

	/**
	 * @file time-ranges.js
	 * @module time-ranges
	 */

	/**
	 * Returns the time for the specified index at the start or end
	 * of a TimeRange object.
	 *
	 * @function time-ranges:indexFunction
	 *
	 * @param {number} [index=0]
	 *        The range number to return the time for.
	 *
	 * @return {number}
	 *         The time that offset at the specified index.
	 *
	 * @depricated index must be set to a value, in the future this will throw an error.
	 */

	/**
	 * An object that contains ranges of time for various reasons.
	 *
	 * @typedef {Object} TimeRange
	 *
	 * @property {number} length
	 *           The number of time ranges represented by this Object
	 *
	 * @property {time-ranges:indexFunction} start
	 *           Returns the time offset at which a specified time range begins.
	 *
	 * @property {time-ranges:indexFunction} end
	 *           Returns the time offset at which a specified time range ends.
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges
	 */

	/**
	 * Check if any of the time ranges are over the maximum index.
	 *
	 * @param {string} fnName
	 *        The function name to use for logging
	 *
	 * @param {number} index
	 *        The index to check
	 *
	 * @param {number} maxIndex
	 *        The maximum possible index
	 *
	 * @throws {Error} if the timeRanges provided are over the maxIndex
	 */
	function rangeCheck(fnName, index, maxIndex) {
	  if (typeof index !== 'number' || index < 0 || index > maxIndex) {
	    throw new Error('Failed to execute \'' + fnName + '\' on \'TimeRanges\': The index provided (' + index + ') is non-numeric or out of bounds (0-' + maxIndex + ').');
	  }
	}

	/**
	 * Get the time for the specified index at the start or end
	 * of a TimeRange object.
	 *
	 * @param {string} fnName
	 *        The function name to use for logging
	 *
	 * @param {string} valueIndex
	 *        The proprety that should be used to get the time. should be 'start' or 'end'
	 *
	 * @param {Array} ranges
	 *        An array of time ranges
	 *
	 * @param {Array} [rangeIndex=0]
	 *        The index to start the search at
	 *
	 * @return {number}
	 *         The time that offset at the specified index.
	 *
	 *
	 * @depricated rangeIndex must be set to a value, in the future this will throw an error.
	 * @throws {Error} if rangeIndex is more than the length of ranges
	 */
	function getRange(fnName, valueIndex, ranges, rangeIndex) {
	  rangeCheck(fnName, rangeIndex, ranges.length - 1);
	  return ranges[rangeIndex][valueIndex];
	}

	/**
	 * Create a time range object given ranges of time.
	 *
	 * @param {Array} [ranges]
	 *        An array of time ranges.
	 */
	function createTimeRangesObj(ranges) {
	  if (ranges === undefined || ranges.length === 0) {
	    return {
	      length: 0,
	      start: function start() {
	        throw new Error('This TimeRanges object is empty');
	      },
	      end: function end() {
	        throw new Error('This TimeRanges object is empty');
	      }
	    };
	  }
	  return {
	    length: ranges.length,
	    start: getRange.bind(null, 'start', 0, ranges),
	    end: getRange.bind(null, 'end', 1, ranges)
	  };
	}

	/**
	 * Should create a fake `TimeRange` object which mimics an HTML5 time range instance.
	 *
	 * @param {number|Array} start
	 *        The start of a single range or an array of ranges
	 *
	 * @param {number} end
	 *        The end of a single range.
	 *
	 * @private
	 */
	function createTimeRanges(start, end) {
	  if (Array.isArray(start)) {
	    return createTimeRangesObj(start);
	  } else if (start === undefined || end === undefined) {
	    return createTimeRangesObj();
	  }
	  return createTimeRangesObj([[start, end]]);
	}

	/**
	 * @file buffer.js
	 * @module buffer
	 */
	/**
	 * Compute the percentage of the media that has been buffered.
	 *
	 * @param {TimeRange} buffered
	 *        The current `TimeRange` object representing buffered time ranges
	 *
	 * @param {number} duration
	 *        Total duration of the media
	 *
	 * @return {number}
	 *         Percent buffered of the total duration in decimal form.
	 */
	function bufferedPercent(buffered, duration) {
	  var bufferedDuration = 0;
	  var start = void 0;
	  var end = void 0;

	  if (!duration) {
	    return 0;
	  }

	  if (!buffered || !buffered.length) {
	    buffered = createTimeRanges(0, 0);
	  }

	  for (var i = 0; i < buffered.length; i++) {
	    start = buffered.start(i);
	    end = buffered.end(i);

	    // buffered end can be bigger than duration by a very small fraction
	    if (end > duration) {
	      end = duration;
	    }

	    bufferedDuration += end - start;
	  }

	  return bufferedDuration / duration;
	}

	/**
	 * @file fullscreen-api.js
	 * @module fullscreen-api
	 * @private
	 */
	/**
	 * Store the browser-specific methods for the fullscreen API.
	 *
	 * @type {Object}
	 * @see [Specification]{@link https://fullscreen.spec.whatwg.org}
	 * @see [Map Approach From Screenfull.js]{@link https://github.com/sindresorhus/screenfull.js}
	 */
	var FullscreenApi = {};

	// browser API methods
	var apiMap = [['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],
	// WebKit
	['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],
	// Old WebKit (Safari 5.1)
	['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'],
	// Mozilla
	['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'],
	// Microsoft
	['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];

	var specApi = apiMap[0];
	var browserApi = void 0;

	// determine the supported set of functions
	for (var i = 0; i < apiMap.length; i++) {
	  // check for exitFullscreen function
	  if (apiMap[i][1] in document) {
	    browserApi = apiMap[i];
	    break;
	  }
	}

	// map the browser API names to the spec API names
	if (browserApi) {
	  for (var _i = 0; _i < browserApi.length; _i++) {
	    FullscreenApi[specApi[_i]] = browserApi[_i];
	  }
	}

	/**
	 * @file media-error.js
	 */
	/**
	 * A Custom `MediaError` class which mimics the standard HTML5 `MediaError` class.
	 *
	 * @param {number|string|Object|MediaError} value
	 *        This can be of multiple types:
	 *        - number: should be a standard error code
	 *        - string: an error message (the code will be 0)
	 *        - Object: arbitrary properties
	 *        - `MediaError` (native): used to populate a video.js `MediaError` object
	 *        - `MediaError` (video.js): will return itself if it's already a
	 *          video.js `MediaError` object.
	 *
	 * @see [MediaError Spec]{@link https://dev.w3.org/html5/spec-author-view/video.html#mediaerror}
	 * @see [Encrypted MediaError Spec]{@link https://www.w3.org/TR/2013/WD-encrypted-media-20130510/#error-codes}
	 *
	 * @class MediaError
	 */
	function MediaError(value) {

	  // Allow redundant calls to this constructor to avoid having `instanceof`
	  // checks peppered around the code.
	  if (value instanceof MediaError) {
	    return value;
	  }

	  if (typeof value === 'number') {
	    this.code = value;
	  } else if (typeof value === 'string') {
	    // default code is zero, so this is a custom error
	    this.message = value;
	  } else if (isObject(value)) {

	    // We assign the `code` property manually because native `MediaError` objects
	    // do not expose it as an own/enumerable property of the object.
	    if (typeof value.code === 'number') {
	      this.code = value.code;
	    }

	    assign(this, value);
	  }

	  if (!this.message) {
	    this.message = MediaError.defaultMessages[this.code] || '';
	  }
	}

	/**
	 * The error code that refers two one of the defined `MediaError` types
	 *
	 * @type {Number}
	 */
	MediaError.prototype.code = 0;

	/**
	 * An optional message that to show with the error. Message is not part of the HTML5
	 * video spec but allows for more informative custom errors.
	 *
	 * @type {String}
	 */
	MediaError.prototype.message = '';

	/**
	 * An optional status code that can be set by plugins to allow even more detail about
	 * the error. For example a plugin might provide a specific HTTP status code and an
	 * error message for that code. Then when the plugin gets that error this class will
	 * know how to display an error message for it. This allows a custom message to show
	 * up on the `Player` error overlay.
	 *
	 * @type {Array}
	 */
	MediaError.prototype.status = null;

	/**
	 * Errors indexed by the W3C standard. The order **CANNOT CHANGE**! See the
	 * specification listed under {@link MediaError} for more information.
	 *
	 * @enum {array}
	 * @readonly
	 * @property {string} 0 - MEDIA_ERR_CUSTOM
	 * @property {string} 1 - MEDIA_ERR_CUSTOM
	 * @property {string} 2 - MEDIA_ERR_ABORTED
	 * @property {string} 3 - MEDIA_ERR_NETWORK
	 * @property {string} 4 - MEDIA_ERR_SRC_NOT_SUPPORTED
	 * @property {string} 5 - MEDIA_ERR_ENCRYPTED
	 */
	MediaError.errorTypes = ['MEDIA_ERR_CUSTOM', 'MEDIA_ERR_ABORTED', 'MEDIA_ERR_NETWORK', 'MEDIA_ERR_DECODE', 'MEDIA_ERR_SRC_NOT_SUPPORTED', 'MEDIA_ERR_ENCRYPTED'];

	/**
	 * The default `MediaError` messages based on the {@link MediaError.errorTypes}.
	 *
	 * @type {Array}
	 * @constant
	 */
	MediaError.defaultMessages = {
	  1: 'You aborted the media playback',
	  2: 'A network error caused the media download to fail part-way.',
	  3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',
	  4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',
	  5: 'The media is encrypted and we do not have the keys to decrypt it.'
	};

	// Add types as properties on MediaError
	// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
	for (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {
	  MediaError[MediaError.errorTypes[errNum]] = errNum;
	  // values should be accessible on both the class and instance
	  MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;
	}

	/**
	 * Returns whether an object is `Promise`-like (i.e. has a `then` method).
	 *
	 * @param  {Object}  value
	 *         An object that may or may not be `Promise`-like.
	 *
	 * @return {Boolean}
	 *         Whether or not the object is `Promise`-like.
	 */
	function isPromise(value) {
	  return value !== undefined && value !== null && typeof value.then === 'function';
	}

	/**
	 * Silence a Promise-like object.
	 *
	 * This is useful for avoiding non-harmful, but potentially confusing "uncaught
	 * play promise" rejection error messages.
	 *
	 * @param  {Object} value
	 *         An object that may or may not be `Promise`-like.
	 */
	function silencePromise(value) {
	  if (isPromise(value)) {
	    value.then(null, function (e) {});
	  }
	}

	/**
	 * @file text-track-list-converter.js Utilities for capturing text track state and
	 * re-creating tracks based on a capture.
	 *
	 * @module text-track-list-converter
	 */

	/**
	 * Examine a single {@link TextTrack} and return a JSON-compatible javascript object that
	 * represents the {@link TextTrack}'s state.
	 *
	 * @param {TextTrack} track
	 *        The text track to query.
	 *
	 * @return {Object}
	 *         A serializable javascript representation of the TextTrack.
	 * @private
	 */
	var trackToJson_ = function trackToJson_(track) {
	  var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {

	    if (track[prop]) {
	      acc[prop] = track[prop];
	    }

	    return acc;
	  }, {
	    cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {
	      return {
	        startTime: cue.startTime,
	        endTime: cue.endTime,
	        text: cue.text,
	        id: cue.id
	      };
	    })
	  });

	  return ret;
	};

	/**
	 * Examine a {@link Tech} and return a JSON-compatible javascript array that represents the
	 * state of all {@link TextTrack}s currently configured. The return array is compatible with
	 * {@link text-track-list-converter:jsonToTextTracks}.
	 *
	 * @param {Tech} tech
	 *        The tech object to query
	 *
	 * @return {Array}
	 *         A serializable javascript representation of the {@link Tech}s
	 *         {@link TextTrackList}.
	 */
	var textTracksToJson = function textTracksToJson(tech) {

	  var trackEls = tech.$$('track');

	  var trackObjs = Array.prototype.map.call(trackEls, function (t) {
	    return t.track;
	  });
	  var tracks = Array.prototype.map.call(trackEls, function (trackEl) {
	    var json = trackToJson_(trackEl.track);

	    if (trackEl.src) {
	      json.src = trackEl.src;
	    }
	    return json;
	  });

	  return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {
	    return trackObjs.indexOf(track) === -1;
	  }).map(trackToJson_));
	};

	/**
	 * Create a set of remote {@link TextTrack}s on a {@link Tech} based on an array of javascript
	 * object {@link TextTrack} representations.
	 *
	 * @param {Array} json
	 *        An array of `TextTrack` representation objects, like those that would be
	 *        produced by `textTracksToJson`.
	 *
	 * @param {Tech} tech
	 *        The `Tech` to create the `TextTrack`s on.
	 */
	var jsonToTextTracks = function jsonToTextTracks(json, tech) {
	  json.forEach(function (track) {
	    var addedTrack = tech.addRemoteTextTrack(track).track;

	    if (!track.src && track.cues) {
	      track.cues.forEach(function (cue) {
	        return addedTrack.addCue(cue);
	      });
	    }
	  });

	  return tech.textTracks();
	};

	var textTrackConverter = { textTracksToJson: textTracksToJson, jsonToTextTracks: jsonToTextTracks, trackToJson_: trackToJson_ };

	/**
	 * @file modal-dialog.js
	 */
	var MODAL_CLASS_NAME = 'vjs-modal-dialog';
	var ESC = 27;

	/**
	 * The `ModalDialog` displays over the video and its controls, which blocks
	 * interaction with the player until it is closed.
	 *
	 * Modal dialogs include a "Close" button and will close when that button
	 * is activated - or when ESC is pressed anywhere.
	 *
	 * @extends Component
	 */

	var ModalDialog = function (_Component) {
	  inherits(ModalDialog, _Component);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Mixed} [options.content=undefined]
	   *        Provide customized content for this modal.
	   *
	   * @param {string} [options.description]
	   *        A text description for the modal, primarily for accessibility.
	   *
	   * @param {boolean} [options.fillAlways=false]
	   *        Normally, modals are automatically filled only the first time
	   *        they open. This tells the modal to refresh its content
	   *        every time it opens.
	   *
	   * @param {string} [options.label]
	   *        A text label for the modal, primarily for accessibility.
	   *
	   * @param {boolean} [options.temporary=true]
	   *        If `true`, the modal can only be opened once; it will be
	   *        disposed as soon as it's closed.
	   *
	   * @param {boolean} [options.uncloseable=false]
	   *        If `true`, the user will not be able to close the modal
	   *        through the UI in the normal ways. Programmatic closing is
	   *        still possible.
	   */
	  function ModalDialog(player, options) {
	    classCallCheck(this, ModalDialog);

	    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.opened_ = _this.hasBeenOpened_ = _this.hasBeenFilled_ = false;

	    _this.closeable(!_this.options_.uncloseable);
	    _this.content(_this.options_.content);

	    // Make sure the contentEl is defined AFTER any children are initialized
	    // because we only want the contents of the modal in the contentEl
	    // (not the UI elements like the close button).
	    _this.contentEl_ = createEl('div', {
	      className: MODAL_CLASS_NAME + '-content'
	    }, {
	      role: 'document'
	    });

	    _this.descEl_ = createEl('p', {
	      className: MODAL_CLASS_NAME + '-description vjs-control-text',
	      id: _this.el().getAttribute('aria-describedby')
	    });

	    textContent(_this.descEl_, _this.description());
	    _this.el_.appendChild(_this.descEl_);
	    _this.el_.appendChild(_this.contentEl_);
	    return _this;
	  }

	  /**
	   * Create the `ModalDialog`'s DOM element
	   *
	   * @return {Element}
	   *         The DOM element that gets created.
	   */


	  ModalDialog.prototype.createEl = function createEl$$1() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass(),
	      tabIndex: -1
	    }, {
	      'aria-describedby': this.id() + '_description',
	      'aria-hidden': 'true',
	      'aria-label': this.label(),
	      'role': 'dialog'
	    });
	  };

	  ModalDialog.prototype.dispose = function dispose() {
	    this.contentEl_ = null;
	    this.descEl_ = null;
	    this.previouslyActiveEl_ = null;

	    _Component.prototype.dispose.call(this);
	  };

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  ModalDialog.prototype.buildCSSClass = function buildCSSClass() {
	    return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Handles `keydown` events on the document, looking for ESC, which closes
	   * the modal.
	   *
	   * @param {EventTarget~Event} e
	   *        The keypress that triggered this event.
	   *
	   * @listens keydown
	   */


	  ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {
	    if (e.which === ESC && this.closeable()) {
	      this.close();
	    }
	  };

	  /**
	   * Returns the label string for this modal. Primarily used for accessibility.
	   *
	   * @return {string}
	   *         the localized or raw label of this modal.
	   */


	  ModalDialog.prototype.label = function label() {
	    return this.localize(this.options_.label || 'Modal Window');
	  };

	  /**
	   * Returns the description string for this modal. Primarily used for
	   * accessibility.
	   *
	   * @return {string}
	   *         The localized or raw description of this modal.
	   */


	  ModalDialog.prototype.description = function description() {
	    var desc = this.options_.description || this.localize('This is a modal window.');

	    // Append a universal closeability message if the modal is closeable.
	    if (this.closeable()) {
	      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');
	    }

	    return desc;
	  };

	  /**
	   * Opens the modal.
	   *
	   * @fires ModalDialog#beforemodalopen
	   * @fires ModalDialog#modalopen
	   */


	  ModalDialog.prototype.open = function open() {
	    if (!this.opened_) {
	      var player = this.player();

	      /**
	        * Fired just before a `ModalDialog` is opened.
	        *
	        * @event ModalDialog#beforemodalopen
	        * @type {EventTarget~Event}
	        */
	      this.trigger('beforemodalopen');
	      this.opened_ = true;

	      // Fill content if the modal has never opened before and
	      // never been filled.
	      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {
	        this.fill();
	      }

	      // If the player was playing, pause it and take note of its previously
	      // playing state.
	      this.wasPlaying_ = !player.paused();

	      if (this.options_.pauseOnOpen && this.wasPlaying_) {
	        player.pause();
	      }

	      if (this.closeable()) {
	        this.on(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));
	      }

	      // Hide controls and note if they were enabled.
	      this.hadControls_ = player.controls();
	      player.controls(false);

	      this.show();
	      this.conditionalFocus_();
	      this.el().setAttribute('aria-hidden', 'false');

	      /**
	        * Fired just after a `ModalDialog` is opened.
	        *
	        * @event ModalDialog#modalopen
	        * @type {EventTarget~Event}
	        */
	      this.trigger('modalopen');
	      this.hasBeenOpened_ = true;
	    }
	  };

	  /**
	   * If the `ModalDialog` is currently open or closed.
	   *
	   * @param  {boolean} [value]
	   *         If given, it will open (`true`) or close (`false`) the modal.
	   *
	   * @return {boolean}
	   *         the current open state of the modaldialog
	   */


	  ModalDialog.prototype.opened = function opened(value) {
	    if (typeof value === 'boolean') {
	      this[value ? 'open' : 'close']();
	    }
	    return this.opened_;
	  };

	  /**
	   * Closes the modal, does nothing if the `ModalDialog` is
	   * not open.
	   *
	   * @fires ModalDialog#beforemodalclose
	   * @fires ModalDialog#modalclose
	   */


	  ModalDialog.prototype.close = function close() {
	    if (!this.opened_) {
	      return;
	    }
	    var player = this.player();

	    /**
	      * Fired just before a `ModalDialog` is closed.
	      *
	      * @event ModalDialog#beforemodalclose
	      * @type {EventTarget~Event}
	      */
	    this.trigger('beforemodalclose');
	    this.opened_ = false;

	    if (this.wasPlaying_ && this.options_.pauseOnOpen) {
	      player.play();
	    }

	    if (this.closeable()) {
	      this.off(this.el_.ownerDocument, 'keydown', bind(this, this.handleKeyPress));
	    }

	    if (this.hadControls_) {
	      player.controls(true);
	    }

	    this.hide();
	    this.el().setAttribute('aria-hidden', 'true');

	    /**
	      * Fired just after a `ModalDialog` is closed.
	      *
	      * @event ModalDialog#modalclose
	      * @type {EventTarget~Event}
	      */
	    this.trigger('modalclose');
	    this.conditionalBlur_();

	    if (this.options_.temporary) {
	      this.dispose();
	    }
	  };

	  /**
	   * Check to see if the `ModalDialog` is closeable via the UI.
	   *
	   * @param  {boolean} [value]
	   *         If given as a boolean, it will set the `closeable` option.
	   *
	   * @return {boolean}
	   *         Returns the final value of the closable option.
	   */


	  ModalDialog.prototype.closeable = function closeable(value) {
	    if (typeof value === 'boolean') {
	      var closeable = this.closeable_ = !!value;
	      var close = this.getChild('closeButton');

	      // If this is being made closeable and has no close button, add one.
	      if (closeable && !close) {

	        // The close button should be a child of the modal - not its
	        // content element, so temporarily change the content element.
	        var temp = this.contentEl_;

	        this.contentEl_ = this.el_;
	        close = this.addChild('closeButton', { controlText: 'Close Modal Dialog' });
	        this.contentEl_ = temp;
	        this.on(close, 'close', this.close);
	      }

	      // If this is being made uncloseable and has a close button, remove it.
	      if (!closeable && close) {
	        this.off(close, 'close', this.close);
	        this.removeChild(close);
	        close.dispose();
	      }
	    }
	    return this.closeable_;
	  };

	  /**
	   * Fill the modal's content element with the modal's "content" option.
	   * The content element will be emptied before this change takes place.
	   */


	  ModalDialog.prototype.fill = function fill() {
	    this.fillWith(this.content());
	  };

	  /**
	   * Fill the modal's content element with arbitrary content.
	   * The content element will be emptied before this change takes place.
	   *
	   * @fires ModalDialog#beforemodalfill
	   * @fires ModalDialog#modalfill
	   *
	   * @param {Mixed} [content]
	   *        The same rules apply to this as apply to the `content` option.
	   */


	  ModalDialog.prototype.fillWith = function fillWith(content) {
	    var contentEl = this.contentEl();
	    var parentEl = contentEl.parentNode;
	    var nextSiblingEl = contentEl.nextSibling;

	    /**
	     * Fired just before a `ModalDialog` is filled with content.
	     *
	     * @event ModalDialog#beforemodalfill
	     * @type {EventTarget~Event}
	     */
	    this.trigger('beforemodalfill');
	    this.hasBeenFilled_ = true;

	    // Detach the content element from the DOM before performing
	    // manipulation to avoid modifying the live DOM multiple times.
	    parentEl.removeChild(contentEl);
	    this.empty();
	    insertContent(contentEl, content);
	    /**
	     * Fired just after a `ModalDialog` is filled with content.
	     *
	     * @event ModalDialog#modalfill
	     * @type {EventTarget~Event}
	     */
	    this.trigger('modalfill');

	    // Re-inject the re-filled content element.
	    if (nextSiblingEl) {
	      parentEl.insertBefore(contentEl, nextSiblingEl);
	    } else {
	      parentEl.appendChild(contentEl);
	    }

	    // make sure that the close button is last in the dialog DOM
	    var closeButton = this.getChild('closeButton');

	    if (closeButton) {
	      parentEl.appendChild(closeButton.el_);
	    }
	  };

	  /**
	   * Empties the content element. This happens anytime the modal is filled.
	   *
	   * @fires ModalDialog#beforemodalempty
	   * @fires ModalDialog#modalempty
	   */


	  ModalDialog.prototype.empty = function empty() {
	    /**
	     * Fired just before a `ModalDialog` is emptied.
	     *
	     * @event ModalDialog#beforemodalempty
	     * @type {EventTarget~Event}
	     */
	    this.trigger('beforemodalempty');
	    emptyEl(this.contentEl());

	    /**
	     * Fired just after a `ModalDialog` is emptied.
	     *
	     * @event ModalDialog#modalempty
	     * @type {EventTarget~Event}
	     */
	    this.trigger('modalempty');
	  };

	  /**
	   * Gets or sets the modal content, which gets normalized before being
	   * rendered into the DOM.
	   *
	   * This does not update the DOM or fill the modal, but it is called during
	   * that process.
	   *
	   * @param  {Mixed} [value]
	   *         If defined, sets the internal content value to be used on the
	   *         next call(s) to `fill`. This value is normalized before being
	   *         inserted. To "clear" the internal content value, pass `null`.
	   *
	   * @return {Mixed}
	   *         The current content of the modal dialog
	   */


	  ModalDialog.prototype.content = function content(value) {
	    if (typeof value !== 'undefined') {
	      this.content_ = value;
	    }
	    return this.content_;
	  };

	  /**
	   * conditionally focus the modal dialog if focus was previously on the player.
	   *
	   * @private
	   */


	  ModalDialog.prototype.conditionalFocus_ = function conditionalFocus_() {
	    var activeEl = document.activeElement;
	    var playerEl = this.player_.el_;

	    this.previouslyActiveEl_ = null;

	    if (playerEl.contains(activeEl) || playerEl === activeEl) {
	      this.previouslyActiveEl_ = activeEl;

	      this.focus();

	      this.on(document, 'keydown', this.handleKeyDown);
	    }
	  };

	  /**
	   * conditionally blur the element and refocus the last focused element
	   *
	   * @private
	   */


	  ModalDialog.prototype.conditionalBlur_ = function conditionalBlur_() {
	    if (this.previouslyActiveEl_) {
	      this.previouslyActiveEl_.focus();
	      this.previouslyActiveEl_ = null;
	    }

	    this.off(document, 'keydown', this.handleKeyDown);
	  };

	  /**
	   * Keydown handler. Attached when modal is focused.
	   *
	   * @listens keydown
	   */


	  ModalDialog.prototype.handleKeyDown = function handleKeyDown(event) {
	    // exit early if it isn't a tab key
	    if (event.which !== 9) {
	      return;
	    }

	    var focusableEls = this.focusableEls_();
	    var activeEl = this.el_.querySelector(':focus');
	    var focusIndex = void 0;

	    for (var i = 0; i < focusableEls.length; i++) {
	      if (activeEl === focusableEls[i]) {
	        focusIndex = i;
	        break;
	      }
	    }

	    if (document.activeElement === this.el_) {
	      focusIndex = 0;
	    }

	    if (event.shiftKey && focusIndex === 0) {
	      focusableEls[focusableEls.length - 1].focus();
	      event.preventDefault();
	    } else if (!event.shiftKey && focusIndex === focusableEls.length - 1) {
	      focusableEls[0].focus();
	      event.preventDefault();
	    }
	  };

	  /**
	   * get all focusable elements
	   *
	   * @private
	   */


	  ModalDialog.prototype.focusableEls_ = function focusableEls_() {
	    var allChildren = this.el_.querySelectorAll('*');

	    return Array.prototype.filter.call(allChildren, function (child) {
	      return (child instanceof window.HTMLAnchorElement || child instanceof window.HTMLAreaElement) && child.hasAttribute('href') || (child instanceof window.HTMLInputElement || child instanceof window.HTMLSelectElement || child instanceof window.HTMLTextAreaElement || child instanceof window.HTMLButtonElement) && !child.hasAttribute('disabled') || child instanceof window.HTMLIFrameElement || child instanceof window.HTMLObjectElement || child instanceof window.HTMLEmbedElement || child.hasAttribute('tabindex') && child.getAttribute('tabindex') !== -1 || child.hasAttribute('contenteditable');
	    });
	  };

	  return ModalDialog;
	}(Component);

	/**
	 * Default options for `ModalDialog` default options.
	 *
	 * @type {Object}
	 * @private
	 */


	ModalDialog.prototype.options_ = {
	  pauseOnOpen: true,
	  temporary: true
	};

	Component.registerComponent('ModalDialog', ModalDialog);

	/**
	 * @file track-list.js
	 */
	/**
	 * Common functionaliy between {@link TextTrackList}, {@link AudioTrackList}, and
	 * {@link VideoTrackList}
	 *
	 * @extends EventTarget
	 */

	var TrackList = function (_EventTarget) {
	  inherits(TrackList, _EventTarget);

	  /**
	   * Create an instance of this class
	   *
	   * @param {Track[]} tracks
	   *        A list of tracks to initialize the list with.
	   *
	   * @param {Object} [list]
	   *        The child object with inheritance done manually for ie8.
	   *
	   * @abstract
	   */
	  function TrackList() {
	    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    var _ret;

	    var list = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	    classCallCheck(this, TrackList);

	    var _this = possibleConstructorReturn(this, _EventTarget.call(this));

	    if (!list) {
	      list = _this; // eslint-disable-line
	      if (IS_IE8) {
	        list = document.createElement('custom');
	        for (var prop in TrackList.prototype) {
	          if (prop !== 'constructor') {
	            list[prop] = TrackList.prototype[prop];
	          }
	        }
	      }
	    }

	    list.tracks_ = [];

	    /**
	     * @memberof TrackList
	     * @member {number} length
	     *         The current number of `Track`s in the this Trackist.
	     * @instance
	     */
	    Object.defineProperty(list, 'length', {
	      get: function get$$1() {
	        return this.tracks_.length;
	      }
	    });

	    for (var i = 0; i < tracks.length; i++) {
	      list.addTrack(tracks[i]);
	    }

	    // must return the object, as for ie8 it will not be this
	    // but a reference to a document object
	    return _ret = list, possibleConstructorReturn(_this, _ret);
	  }

	  /**
	   * Add a {@link Track} to the `TrackList`
	   *
	   * @param {Track} track
	   *        The audio, video, or text track to add to the list.
	   *
	   * @fires TrackList#addtrack
	   */


	  TrackList.prototype.addTrack = function addTrack(track) {
	    var index = this.tracks_.length;

	    if (!('' + index in this)) {
	      Object.defineProperty(this, index, {
	        get: function get$$1() {
	          return this.tracks_[index];
	        }
	      });
	    }

	    // Do not add duplicate tracks
	    if (this.tracks_.indexOf(track) === -1) {
	      this.tracks_.push(track);
	      /**
	       * Triggered when a track is added to a track list.
	       *
	       * @event TrackList#addtrack
	       * @type {EventTarget~Event}
	       * @property {Track} track
	       *           A reference to track that was added.
	       */
	      this.trigger({
	        track: track,
	        type: 'addtrack'
	      });
	    }
	  };

	  /**
	   * Remove a {@link Track} from the `TrackList`
	   *
	   * @param {Track} rtrack
	   *        The audio, video, or text track to remove from the list.
	   *
	   * @fires TrackList#removetrack
	   */


	  TrackList.prototype.removeTrack = function removeTrack(rtrack) {
	    var track = void 0;

	    for (var i = 0, l = this.length; i < l; i++) {
	      if (this[i] === rtrack) {
	        track = this[i];
	        if (track.off) {
	          track.off();
	        }

	        this.tracks_.splice(i, 1);

	        break;
	      }
	    }

	    if (!track) {
	      return;
	    }

	    /**
	     * Triggered when a track is removed from track list.
	     *
	     * @event TrackList#removetrack
	     * @type {EventTarget~Event}
	     * @property {Track} track
	     *           A reference to track that was removed.
	     */
	    this.trigger({
	      track: track,
	      type: 'removetrack'
	    });
	  };

	  /**
	   * Get a Track from the TrackList by a tracks id
	   *
	   * @param {String} id - the id of the track to get
	   * @method getTrackById
	   * @return {Track}
	   * @private
	   */


	  TrackList.prototype.getTrackById = function getTrackById(id) {
	    var result = null;

	    for (var i = 0, l = this.length; i < l; i++) {
	      var track = this[i];

	      if (track.id === id) {
	        result = track;
	        break;
	      }
	    }

	    return result;
	  };

	  return TrackList;
	}(EventTarget);

	/**
	 * Triggered when a different track is selected/enabled.
	 *
	 * @event TrackList#change
	 * @type {EventTarget~Event}
	 */

	/**
	 * Events that can be called with on + eventName. See {@link EventHandler}.
	 *
	 * @property {Object} TrackList#allowedEvents_
	 * @private
	 */


	TrackList.prototype.allowedEvents_ = {
	  change: 'change',
	  addtrack: 'addtrack',
	  removetrack: 'removetrack'
	};

	// emulate attribute EventHandler support to allow for feature detection
	for (var event in TrackList.prototype.allowedEvents_) {
	  TrackList.prototype['on' + event] = null;
	}

	/**
	 * @file audio-track-list.js
	 */
	/**
	 * Anywhere we call this function we diverge from the spec
	 * as we only support one enabled audiotrack at a time
	 *
	 * @param {AudioTrackList} list
	 *        list to work on
	 *
	 * @param {AudioTrack} track
	 *        The track to skip
	 *
	 * @private
	 */
	var disableOthers = function disableOthers(list, track) {
	  for (var i = 0; i < list.length; i++) {
	    if (!Object.keys(list[i]).length || track.id === list[i].id) {
	      continue;
	    }
	    // another audio track is enabled, disable it
	    list[i].enabled = false;
	  }
	};

	/**
	 * The current list of {@link AudioTrack} for a media file.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist}
	 * @extends TrackList
	 */

	var AudioTrackList = function (_TrackList) {
	  inherits(AudioTrackList, _TrackList);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {AudioTrack[]} [tracks=[]]
	   *        A list of `AudioTrack` to instantiate the list with.
	   */
	  function AudioTrackList() {
	    var _this, _ret;

	    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	    classCallCheck(this, AudioTrackList);

	    var list = void 0;

	    // make sure only 1 track is enabled
	    // sorted from last index to first index
	    for (var i = tracks.length - 1; i >= 0; i--) {
	      if (tracks[i].enabled) {
	        disableOthers(tracks, tracks[i]);
	        break;
	      }
	    }

	    // IE8 forces us to implement inheritance ourselves
	    // as it does not support Object.defineProperty properly
	    if (IS_IE8) {
	      list = document.createElement('custom');
	      for (var prop in TrackList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = TrackList.prototype[prop];
	        }
	      }
	      for (var _prop in AudioTrackList.prototype) {
	        if (_prop !== 'constructor') {
	          list[_prop] = AudioTrackList.prototype[_prop];
	        }
	      }
	    }

	    list = (_this = possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
	    list.changing_ = false;

	    return _ret = list, possibleConstructorReturn(_this, _ret);
	  }

	  /**
	   * Add an {@link AudioTrack} to the `AudioTrackList`.
	   *
	   * @param {AudioTrack} track
	   *        The AudioTrack to add to the list
	   *
	   * @fires TrackList#addtrack
	   */


	  AudioTrackList.prototype.addTrack = function addTrack(track) {
	    var _this2 = this;

	    if (track.enabled) {
	      disableOthers(this, track);
	    }

	    _TrackList.prototype.addTrack.call(this, track);
	    // native tracks don't have this
	    if (!track.addEventListener) {
	      return;
	    }

	    /**
	     * @listens AudioTrack#enabledchange
	     * @fires TrackList#change
	     */
	    track.addEventListener('enabledchange', function () {
	      // when we are disabling other tracks (since we don't support
	      // more than one track at a time) we will set changing_
	      // to true so that we don't trigger additional change events
	      if (_this2.changing_) {
	        return;
	      }
	      _this2.changing_ = true;
	      disableOthers(_this2, track);
	      _this2.changing_ = false;
	      _this2.trigger('change');
	    });
	  };

	  return AudioTrackList;
	}(TrackList);

	/**
	 * @file video-track-list.js
	 */
	/**
	 * Un-select all other {@link VideoTrack}s that are selected.
	 *
	 * @param {VideoTrackList} list
	 *        list to work on
	 *
	 * @param {VideoTrack} track
	 *        The track to skip
	 *
	 * @private
	 */
	var disableOthers$1 = function disableOthers(list, track) {
	  for (var i = 0; i < list.length; i++) {
	    if (!Object.keys(list[i]).length || track.id === list[i].id) {
	      continue;
	    }
	    // another video track is enabled, disable it
	    list[i].selected = false;
	  }
	};

	/**
	 * The current list of {@link VideoTrack} for a video.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist}
	 * @extends TrackList
	 */

	var VideoTrackList = function (_TrackList) {
	  inherits(VideoTrackList, _TrackList);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {VideoTrack[]} [tracks=[]]
	   *        A list of `VideoTrack` to instantiate the list with.
	   */
	  function VideoTrackList() {
	    var _this, _ret;

	    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	    classCallCheck(this, VideoTrackList);

	    var list = void 0;

	    // make sure only 1 track is enabled
	    // sorted from last index to first index
	    for (var i = tracks.length - 1; i >= 0; i--) {
	      if (tracks[i].selected) {
	        disableOthers$1(tracks, tracks[i]);
	        break;
	      }
	    }

	    // IE8 forces us to implement inheritance ourselves
	    // as it does not support Object.defineProperty properly
	    if (IS_IE8) {
	      list = document.createElement('custom');
	      for (var prop in TrackList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = TrackList.prototype[prop];
	        }
	      }
	      for (var _prop in VideoTrackList.prototype) {
	        if (_prop !== 'constructor') {
	          list[_prop] = VideoTrackList.prototype[_prop];
	        }
	      }
	    }

	    list = (_this = possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
	    list.changing_ = false;

	    /**
	     * @member {number} VideoTrackList#selectedIndex
	     *         The current index of the selected {@link VideoTrack`}.
	     */
	    Object.defineProperty(list, 'selectedIndex', {
	      get: function get$$1() {
	        for (var _i = 0; _i < this.length; _i++) {
	          if (this[_i].selected) {
	            return _i;
	          }
	        }
	        return -1;
	      },
	      set: function set$$1() {}
	    });

	    return _ret = list, possibleConstructorReturn(_this, _ret);
	  }

	  /**
	   * Add a {@link VideoTrack} to the `VideoTrackList`.
	   *
	   * @param {VideoTrack} track
	   *        The VideoTrack to add to the list
	   *
	   * @fires TrackList#addtrack
	   */


	  VideoTrackList.prototype.addTrack = function addTrack(track) {
	    var _this2 = this;

	    if (track.selected) {
	      disableOthers$1(this, track);
	    }

	    _TrackList.prototype.addTrack.call(this, track);
	    // native tracks don't have this
	    if (!track.addEventListener) {
	      return;
	    }

	    /**
	     * @listens VideoTrack#selectedchange
	     * @fires TrackList#change
	     */
	    track.addEventListener('selectedchange', function () {
	      if (_this2.changing_) {
	        return;
	      }
	      _this2.changing_ = true;
	      disableOthers$1(_this2, track);
	      _this2.changing_ = false;
	      _this2.trigger('change');
	    });
	  };

	  return VideoTrackList;
	}(TrackList);

	/**
	 * @file text-track-list.js
	 */
	/**
	 * The current list of {@link TextTrack} for a media file.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist}
	 * @extends TrackList
	 */

	var TextTrackList = function (_TrackList) {
	  inherits(TextTrackList, _TrackList);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {TextTrack[]} [tracks=[]]
	   *        A list of `TextTrack` to instantiate the list with.
	   */
	  function TextTrackList() {
	    var _this, _ret;

	    var tracks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	    classCallCheck(this, TextTrackList);

	    var list = void 0;

	    // IE8 forces us to implement inheritance ourselves
	    // as it does not support Object.defineProperty properly
	    if (IS_IE8) {
	      list = document.createElement('custom');
	      for (var prop in TrackList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = TrackList.prototype[prop];
	        }
	      }
	      for (var _prop in TextTrackList.prototype) {
	        if (_prop !== 'constructor') {
	          list[_prop] = TextTrackList.prototype[_prop];
	        }
	      }
	    }

	    list = (_this = possibleConstructorReturn(this, _TrackList.call(this, tracks, list)), _this);
	    return _ret = list, possibleConstructorReturn(_this, _ret);
	  }

	  /**
	   * Add a {@link TextTrack} to the `TextTrackList`
	   *
	   * @param {TextTrack} track
	   *        The text track to add to the list.
	   *
	   * @fires TrackList#addtrack
	   */


	  TextTrackList.prototype.addTrack = function addTrack(track) {
	    _TrackList.prototype.addTrack.call(this, track);

	    /**
	     * @listens TextTrack#modechange
	     * @fires TrackList#change
	     */
	    track.addEventListener('modechange', bind(this, function () {
	      this.trigger('change');
	    }));

	    var nonLanguageTextTrackKind = ['metadata', 'chapters'];

	    if (nonLanguageTextTrackKind.indexOf(track.kind) === -1) {
	      track.addEventListener('modechange', bind(this, function () {
	        this.trigger('selectedlanguagechange');
	      }));
	    }
	  };

	  return TextTrackList;
	}(TrackList);

	/**
	 * @file html-track-element-list.js
	 */

	/**
	 * The current list of {@link HtmlTrackElement}s.
	 */

	var HtmlTrackElementList = function () {

	  /**
	   * Create an instance of this class.
	   *
	   * @param {HtmlTrackElement[]} [tracks=[]]
	   *        A list of `HtmlTrackElement` to instantiate the list with.
	   */
	  function HtmlTrackElementList() {
	    var trackElements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	    classCallCheck(this, HtmlTrackElementList);

	    var list = this; // eslint-disable-line

	    if (IS_IE8) {
	      list = document.createElement('custom');

	      for (var prop in HtmlTrackElementList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = HtmlTrackElementList.prototype[prop];
	        }
	      }
	    }

	    list.trackElements_ = [];

	    /**
	     * @memberof HtmlTrackElementList
	     * @member {number} length
	     *         The current number of `Track`s in the this Trackist.
	     * @instance
	     */
	    Object.defineProperty(list, 'length', {
	      get: function get$$1() {
	        return this.trackElements_.length;
	      }
	    });

	    for (var i = 0, length = trackElements.length; i < length; i++) {
	      list.addTrackElement_(trackElements[i]);
	    }

	    if (IS_IE8) {
	      return list;
	    }
	  }

	  /**
	   * Add an {@link HtmlTrackElement} to the `HtmlTrackElementList`
	   *
	   * @param {HtmlTrackElement} trackElement
	   *        The track element to add to the list.
	   *
	   * @private
	   */


	  HtmlTrackElementList.prototype.addTrackElement_ = function addTrackElement_(trackElement) {
	    var index = this.trackElements_.length;

	    if (!('' + index in this)) {
	      Object.defineProperty(this, index, {
	        get: function get$$1() {
	          return this.trackElements_[index];
	        }
	      });
	    }

	    // Do not add duplicate elements
	    if (this.trackElements_.indexOf(trackElement) === -1) {
	      this.trackElements_.push(trackElement);
	    }
	  };

	  /**
	   * Get an {@link HtmlTrackElement} from the `HtmlTrackElementList` given an
	   * {@link TextTrack}.
	   *
	   * @param {TextTrack} track
	   *        The track associated with a track element.
	   *
	   * @return {HtmlTrackElement|undefined}
	   *         The track element that was found or undefined.
	   *
	   * @private
	   */


	  HtmlTrackElementList.prototype.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {
	    var trackElement_ = void 0;

	    for (var i = 0, length = this.trackElements_.length; i < length; i++) {
	      if (track === this.trackElements_[i].track) {
	        trackElement_ = this.trackElements_[i];

	        break;
	      }
	    }

	    return trackElement_;
	  };

	  /**
	   * Remove a {@link HtmlTrackElement} from the `HtmlTrackElementList`
	   *
	   * @param {HtmlTrackElement} trackElement
	   *        The track element to remove from the list.
	   *
	   * @private
	   */


	  HtmlTrackElementList.prototype.removeTrackElement_ = function removeTrackElement_(trackElement) {
	    for (var i = 0, length = this.trackElements_.length; i < length; i++) {
	      if (trackElement === this.trackElements_[i]) {
	        this.trackElements_.splice(i, 1);

	        break;
	      }
	    }
	  };

	  return HtmlTrackElementList;
	}();

	/**
	 * @file text-track-cue-list.js
	 */
	/**
	 * @typedef {Object} TextTrackCueList~TextTrackCue
	 *
	 * @property {string} id
	 *           The unique id for this text track cue
	 *
	 * @property {number} startTime
	 *           The start time for this text track cue
	 *
	 * @property {number} endTime
	 *           The end time for this text track cue
	 *
	 * @property {boolean} pauseOnExit
	 *           Pause when the end time is reached if true.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcue}
	 */

	/**
	 * A List of TextTrackCues.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist}
	 */

	var TextTrackCueList = function () {

	  /**
	   * Create an instance of this class..
	   *
	   * @param {Array} cues
	   *        A list of cues to be initialized with
	   */
	  function TextTrackCueList(cues) {
	    classCallCheck(this, TextTrackCueList);

	    var list = this; // eslint-disable-line

	    if (IS_IE8) {
	      list = document.createElement('custom');

	      for (var prop in TextTrackCueList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = TextTrackCueList.prototype[prop];
	        }
	      }
	    }

	    TextTrackCueList.prototype.setCues_.call(list, cues);

	    /**
	     * @memberof TextTrackCueList
	     * @member {number} length
	     *         The current number of `TextTrackCue`s in the TextTrackCueList.
	     * @instance
	     */
	    Object.defineProperty(list, 'length', {
	      get: function get$$1() {
	        return this.length_;
	      }
	    });

	    if (IS_IE8) {
	      return list;
	    }
	  }

	  /**
	   * A setter for cues in this list. Creates getters
	   * an an index for the cues.
	   *
	   * @param {Array} cues
	   *        An array of cues to set
	   *
	   * @private
	   */


	  TextTrackCueList.prototype.setCues_ = function setCues_(cues) {
	    var oldLength = this.length || 0;
	    var i = 0;
	    var l = cues.length;

	    this.cues_ = cues;
	    this.length_ = cues.length;

	    var defineProp = function defineProp(index) {
	      if (!('' + index in this)) {
	        Object.defineProperty(this, '' + index, {
	          get: function get$$1() {
	            return this.cues_[index];
	          }
	        });
	      }
	    };

	    if (oldLength < l) {
	      i = oldLength;

	      for (; i < l; i++) {
	        defineProp.call(this, i);
	      }
	    }
	  };

	  /**
	   * Get a `TextTrackCue` that is currently in the `TextTrackCueList` by id.
	   *
	   * @param {string} id
	   *        The id of the cue that should be searched for.
	   *
	   * @return {TextTrackCueList~TextTrackCue|null}
	   *         A single cue or null if none was found.
	   */


	  TextTrackCueList.prototype.getCueById = function getCueById(id) {
	    var result = null;

	    for (var i = 0, l = this.length; i < l; i++) {
	      var cue = this[i];

	      if (cue.id === id) {
	        result = cue;
	        break;
	      }
	    }

	    return result;
	  };

	  return TextTrackCueList;
	}();

	/**
	 * @file track-kinds.js
	 */

	/**
	 * All possible `VideoTrackKind`s
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind
	 * @typedef VideoTrack~Kind
	 * @enum
	 */
	var VideoTrackKind = {
	  alternative: 'alternative',
	  captions: 'captions',
	  main: 'main',
	  sign: 'sign',
	  subtitles: 'subtitles',
	  commentary: 'commentary'
	};

	/**
	 * All possible `AudioTrackKind`s
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind
	 * @typedef AudioTrack~Kind
	 * @enum
	 */
	var AudioTrackKind = {
	  'alternative': 'alternative',
	  'descriptions': 'descriptions',
	  'main': 'main',
	  'main-desc': 'main-desc',
	  'translation': 'translation',
	  'commentary': 'commentary'
	};

	/**
	 * All possible `TextTrackKind`s
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-texttrack-kind
	 * @typedef TextTrack~Kind
	 * @enum
	 */
	var TextTrackKind = {
	  subtitles: 'subtitles',
	  captions: 'captions',
	  descriptions: 'descriptions',
	  chapters: 'chapters',
	  metadata: 'metadata'
	};

	/**
	 * All possible `TextTrackMode`s
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode
	 * @typedef TextTrack~Mode
	 * @enum
	 */
	var TextTrackMode = {
	  disabled: 'disabled',
	  hidden: 'hidden',
	  showing: 'showing'
	};

	/**
	 * @file track.js
	 */
	/**
	 * A Track class that contains all of the common functionality for {@link AudioTrack},
	 * {@link VideoTrack}, and {@link TextTrack}.
	 *
	 * > Note: This class should not be used directly
	 *
	 * @see {@link https://html.spec.whatwg.org/multipage/embedded-content.html}
	 * @extends EventTarget
	 * @abstract
	 */

	var Track = function (_EventTarget) {
	  inherits(Track, _EventTarget);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Object} [options={}]
	   *        Object of option names and values
	   *
	   * @param {string} [options.kind='']
	   *        A valid kind for the track type you are creating.
	   *
	   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
	   *        A unique id for this AudioTrack.
	   *
	   * @param {string} [options.label='']
	   *        The menu label for this track.
	   *
	   * @param {string} [options.language='']
	   *        A valid two character language code.
	   *
	   * @abstract
	   */
	  function Track() {
	    var _ret;

	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    classCallCheck(this, Track);

	    var _this = possibleConstructorReturn(this, _EventTarget.call(this));

	    var track = _this; // eslint-disable-line

	    if (IS_IE8) {
	      track = document.createElement('custom');
	      for (var prop in Track.prototype) {
	        if (prop !== 'constructor') {
	          track[prop] = Track.prototype[prop];
	        }
	      }
	    }

	    var trackProps = {
	      id: options.id || 'vjs_track_' + newGUID(),
	      kind: options.kind || '',
	      label: options.label || '',
	      language: options.language || ''
	    };

	    /**
	     * @memberof Track
	     * @member {string} id
	     *         The id of this track. Cannot be changed after creation.
	     * @instance
	     *
	     * @readonly
	     */

	    /**
	     * @memberof Track
	     * @member {string} kind
	     *         The kind of track that this is. Cannot be changed after creation.
	     * @instance
	     *
	     * @readonly
	     */

	    /**
	     * @memberof Track
	     * @member {string} label
	     *         The label of this track. Cannot be changed after creation.
	     * @instance
	     *
	     * @readonly
	     */

	    /**
	     * @memberof Track
	     * @member {string} language
	     *         The two letter language code for this track. Cannot be changed after
	     *         creation.
	     * @instance
	     *
	     * @readonly
	     */

	    var _loop = function _loop(key) {
	      Object.defineProperty(track, key, {
	        get: function get$$1() {
	          return trackProps[key];
	        },
	        set: function set$$1() {}
	      });
	    };

	    for (var key in trackProps) {
	      _loop(key);
	    }

	    return _ret = track, possibleConstructorReturn(_this, _ret);
	  }

	  return Track;
	}(EventTarget);

	/**
	 * @file url.js
	 * @module url
	 */
	/**
	 * @typedef {Object} url:URLObject
	 *
	 * @property {string} protocol
	 *           The protocol of the url that was parsed.
	 *
	 * @property {string} hostname
	 *           The hostname of the url that was parsed.
	 *
	 * @property {string} port
	 *           The port of the url that was parsed.
	 *
	 * @property {string} pathname
	 *           The pathname of the url that was parsed.
	 *
	 * @property {string} search
	 *           The search query of the url that was parsed.
	 *
	 * @property {string} hash
	 *           The hash of the url that was parsed.
	 *
	 * @property {string} host
	 *           The host of the url that was parsed.
	 */

	/**
	 * Resolve and parse the elements of a URL.
	 *
	 * @param  {String} url
	 *         The url to parse
	 *
	 * @return {url:URLObject}
	 *         An object of url details
	 */
	var parseUrl = function parseUrl(url) {
	  var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];

	  // add the url to an anchor and let the browser parse the URL
	  var a = document.createElement('a');

	  a.href = url;

	  // IE8 (and 9?) Fix
	  // ie8 doesn't parse the URL correctly until the anchor is actually
	  // added to the body, and an innerHTML is needed to trigger the parsing
	  var addToBody = a.host === '' && a.protocol !== 'file:';
	  var div = void 0;

	  if (addToBody) {
	    div = document.createElement('div');
	    div.innerHTML = '<a href="' + url + '"></a>';
	    a = div.firstChild;
	    // prevent the div from affecting layout
	    div.setAttribute('style', 'display:none; position:absolute;');
	    document.body.appendChild(div);
	  }

	  // Copy the specific URL properties to a new object
	  // This is also needed for IE8 because the anchor loses its
	  // properties when it's removed from the dom
	  var details = {};

	  for (var i = 0; i < props.length; i++) {
	    details[props[i]] = a[props[i]];
	  }

	  // IE9 adds the port to the host property unlike everyone else. If
	  // a port identifier is added for standard ports, strip it.
	  if (details.protocol === 'http:') {
	    details.host = details.host.replace(/:80$/, '');
	  }

	  if (details.protocol === 'https:') {
	    details.host = details.host.replace(/:443$/, '');
	  }

	  if (!details.protocol) {
	    details.protocol = window.location.protocol;
	  }

	  if (addToBody) {
	    document.body.removeChild(div);
	  }

	  return details;
	};

	/**
	 * Get absolute version of relative URL. Used to tell flash correct URL.
	 *
	 *
	 * @param  {string} url
	 *         URL to make absolute
	 *
	 * @return {string}
	 *         Absolute URL
	 *
	 * @see http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue
	 */
	var getAbsoluteURL = function getAbsoluteURL(url) {
	  // Check if absolute URL
	  if (!url.match(/^https?:\/\//)) {
	    // Convert to absolute URL. Flash hosted off-site needs an absolute URL.
	    var div = document.createElement('div');

	    div.innerHTML = '<a href="' + url + '">x</a>';
	    url = div.firstChild.href;
	  }

	  return url;
	};

	/**
	 * Returns the extension of the passed file name. It will return an empty string
	 * if passed an invalid path.
	 *
	 * @param {string} path
	 *        The fileName path like '/path/to/file.mp4'
	 *
	 * @returns {string}
	 *          The extension in lower case or an empty string if no
	 *          extension could be found.
	 */
	var getFileExtension = function getFileExtension(path) {
	  if (typeof path === 'string') {
	    var splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i;
	    var pathParts = splitPathRe.exec(path);

	    if (pathParts) {
	      return pathParts.pop().toLowerCase();
	    }
	  }

	  return '';
	};

	/**
	 * Returns whether the url passed is a cross domain request or not.
	 *
	 * @param {string} url
	 *        The url to check.
	 *
	 * @return {boolean}
	 *         Whether it is a cross domain request or not.
	 */
	var isCrossOrigin = function isCrossOrigin(url) {
	  var winLoc = window.location;
	  var urlInfo = parseUrl(url);

	  // IE8 protocol relative urls will return ':' for protocol
	  var srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;

	  // Check if url is for another domain/origin
	  // IE8 doesn't know location.origin, so we won't rely on it here
	  var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;

	  return crossOrigin;
	};

	var Url = (Object.freeze || Object)({
		parseUrl: parseUrl,
		getAbsoluteURL: getAbsoluteURL,
		getFileExtension: getFileExtension,
		isCrossOrigin: isCrossOrigin
	});

	/**
	 * @file text-track.js
	 */
	/**
	 * Takes a webvtt file contents and parses it into cues
	 *
	 * @param {string} srcContent
	 *        webVTT file contents
	 *
	 * @param {TextTrack} track
	 *        TextTrack to add cues to. Cues come from the srcContent.
	 *
	 * @private
	 */
	var parseCues = function parseCues(srcContent, track) {
	  var parser = new window.WebVTT.Parser(window, window.vttjs, window.WebVTT.StringDecoder());
	  var errors = [];

	  parser.oncue = function (cue) {
	    track.addCue(cue);
	  };

	  parser.onparsingerror = function (error) {
	    errors.push(error);
	  };

	  parser.onflush = function () {
	    track.trigger({
	      type: 'loadeddata',
	      target: track
	    });
	  };

	  parser.parse(srcContent);
	  if (errors.length > 0) {
	    if (window.console && window.console.groupCollapsed) {
	      window.console.groupCollapsed('Text Track parsing errors for ' + track.src);
	    }
	    errors.forEach(function (error) {
	      return log.error(error);
	    });
	    if (window.console && window.console.groupEnd) {
	      window.console.groupEnd();
	    }
	  }

	  parser.flush();
	};

	/**
	 * Load a `TextTrack` from a specifed url.
	 *
	 * @param {string} src
	 *        Url to load track from.
	 *
	 * @param {TextTrack} track
	 *        Track to add cues to. Comes from the content at the end of `url`.
	 *
	 * @private
	 */
	var loadTrack = function loadTrack(src, track) {
	  var opts = {
	    uri: src
	  };
	  var crossOrigin = isCrossOrigin(src);

	  if (crossOrigin) {
	    opts.cors = crossOrigin;
	  }

	  xhr(opts, bind(this, function (err, response, responseBody) {
	    if (err) {
	      return log.error(err, response);
	    }

	    track.loaded_ = true;

	    // Make sure that vttjs has loaded, otherwise, wait till it finished loading
	    // NOTE: this is only used for the alt/video.novtt.js build
	    if (typeof window.WebVTT !== 'function') {
	      if (track.tech_) {
	        var loadHandler = function loadHandler() {
	          return parseCues(responseBody, track);
	        };

	        track.tech_.on('vttjsloaded', loadHandler);
	        track.tech_.on('vttjserror', function () {
	          log.error('vttjs failed to load, stopping trying to process ' + track.src);
	          track.tech_.off('vttjsloaded', loadHandler);
	        });
	      }
	    } else {
	      parseCues(responseBody, track);
	    }
	  }));
	};

	/**
	 * A representation of a single `TextTrack`.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack}
	 * @extends Track
	 */

	var TextTrack = function (_Track) {
	  inherits(TextTrack, _Track);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Object} options={}
	   *        Object of option names and values
	   *
	   * @param {Tech} options.tech
	   *        A reference to the tech that owns this TextTrack.
	   *
	   * @param {TextTrack~Kind} [options.kind='subtitles']
	   *        A valid text track kind.
	   *
	   * @param {TextTrack~Mode} [options.mode='disabled']
	   *        A valid text track mode.
	   *
	   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
	   *        A unique id for this TextTrack.
	   *
	   * @param {string} [options.label='']
	   *        The menu label for this track.
	   *
	   * @param {string} [options.language='']
	   *        A valid two character language code.
	   *
	   * @param {string} [options.srclang='']
	   *        A valid two character language code. An alternative, but deprioritized
	   *        vesion of `options.language`
	   *
	   * @param {string} [options.src]
	   *        A url to TextTrack cues.
	   *
	   * @param {boolean} [options.default]
	   *        If this track should default to on or off.
	   */
	  function TextTrack() {
	    var _this, _ret;

	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    classCallCheck(this, TextTrack);

	    if (!options.tech) {
	      throw new Error('A tech was not provided.');
	    }

	    var settings = mergeOptions(options, {
	      kind: TextTrackKind[options.kind] || 'subtitles',
	      language: options.language || options.srclang || ''
	    });
	    var mode = TextTrackMode[settings.mode] || 'disabled';
	    var default_ = settings['default'];

	    if (settings.kind === 'metadata' || settings.kind === 'chapters') {
	      mode = 'hidden';
	    }
	    // on IE8 this will be a document element
	    // for every other browser this will be a normal object
	    var tt = (_this = possibleConstructorReturn(this, _Track.call(this, settings)), _this);

	    tt.tech_ = settings.tech;

	    if (IS_IE8) {
	      for (var prop in TextTrack.prototype) {
	        if (prop !== 'constructor') {
	          tt[prop] = TextTrack.prototype[prop];
	        }
	      }
	    }

	    tt.cues_ = [];
	    tt.activeCues_ = [];

	    var cues = new TextTrackCueList(tt.cues_);
	    var activeCues = new TextTrackCueList(tt.activeCues_);
	    var changed = false;
	    var timeupdateHandler = bind(tt, function () {

	      // Accessing this.activeCues for the side-effects of updating itself
	      // due to it's nature as a getter function. Do not remove or cues will
	      // stop updating!
	      // Use the setter to prevent deletion from uglify (pure_getters rule)
	      this.activeCues = this.activeCues;
	      if (changed) {
	        this.trigger('cuechange');
	        changed = false;
	      }
	    });

	    if (mode !== 'disabled') {
	      tt.tech_.ready(function () {
	        tt.tech_.on('timeupdate', timeupdateHandler);
	      }, true);
	    }

	    /**
	     * @memberof TextTrack
	     * @member {boolean} default
	     *         If this track was set to be on or off by default. Cannot be changed after
	     *         creation.
	     * @instance
	     *
	     * @readonly
	     */
	    Object.defineProperty(tt, 'default', {
	      get: function get$$1() {
	        return default_;
	      },
	      set: function set$$1() {}
	    });

	    /**
	     * @memberof TextTrack
	     * @member {string} mode
	     *         Set the mode of this TextTrack to a valid {@link TextTrack~Mode}. Will
	     *         not be set if setting to an invalid mode.
	     * @instance
	     *
	     * @fires TextTrack#modechange
	     */
	    Object.defineProperty(tt, 'mode', {
	      get: function get$$1() {
	        return mode;
	      },
	      set: function set$$1(newMode) {
	        var _this2 = this;

	        if (!TextTrackMode[newMode]) {
	          return;
	        }
	        mode = newMode;
	        if (mode !== 'disabled') {

	          this.tech_.ready(function () {
	            _this2.tech_.on('timeupdate', timeupdateHandler);
	          }, true);
	        } else {
	          this.tech_.off('timeupdate', timeupdateHandler);
	        }
	        /**
	         * An event that fires when mode changes on this track. This allows
	         * the TextTrackList that holds this track to act accordingly.
	         *
	         * > Note: This is not part of the spec!
	         *
	         * @event TextTrack#modechange
	         * @type {EventTarget~Event}
	         */
	        this.trigger('modechange');
	      }
	    });

	    /**
	     * @memberof TextTrack
	     * @member {TextTrackCueList} cues
	     *         The text track cue list for this TextTrack.
	     * @instance
	     */
	    Object.defineProperty(tt, 'cues', {
	      get: function get$$1() {
	        if (!this.loaded_) {
	          return null;
	        }

	        return cues;
	      },
	      set: function set$$1() {}
	    });

	    /**
	     * @memberof TextTrack
	     * @member {TextTrackCueList} activeCues
	     *         The list text track cues that are currently active for this TextTrack.
	     * @instance
	     */
	    Object.defineProperty(tt, 'activeCues', {
	      get: function get$$1() {
	        if (!this.loaded_) {
	          return null;
	        }

	        // nothing to do
	        if (this.cues.length === 0) {
	          return activeCues;
	        }

	        var ct = this.tech_.currentTime();
	        var active = [];

	        for (var i = 0, l = this.cues.length; i < l; i++) {
	          var cue = this.cues[i];

	          if (cue.startTime <= ct && cue.endTime >= ct) {
	            active.push(cue);
	          } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {
	            active.push(cue);
	          }
	        }

	        changed = false;

	        if (active.length !== this.activeCues_.length) {
	          changed = true;
	        } else {
	          for (var _i = 0; _i < active.length; _i++) {
	            if (this.activeCues_.indexOf(active[_i]) === -1) {
	              changed = true;
	            }
	          }
	        }

	        this.activeCues_ = active;
	        activeCues.setCues_(this.activeCues_);

	        return activeCues;
	      },


	      // /!\ Keep this setter empty (see the timeupdate handler above)
	      set: function set$$1() {}
	    });

	    if (settings.src) {
	      tt.src = settings.src;
	      loadTrack(settings.src, tt);
	    } else {
	      tt.loaded_ = true;
	    }

	    return _ret = tt, possibleConstructorReturn(_this, _ret);
	  }

	  /**
	   * Add a cue to the internal list of cues.
	   *
	   * @param {TextTrack~Cue} cue
	   *        The cue to add to our internal list
	   */


	  TextTrack.prototype.addCue = function addCue(originalCue) {
	    var cue = originalCue;

	    if (window.vttjs && !(originalCue instanceof window.vttjs.VTTCue)) {
	      cue = new window.vttjs.VTTCue(originalCue.startTime, originalCue.endTime, originalCue.text);

	      for (var prop in originalCue) {
	        if (!(prop in cue)) {
	          cue[prop] = originalCue[prop];
	        }
	      }

	      // make sure that `id` is copied over
	      cue.id = originalCue.id;
	      cue.originalCue_ = originalCue;
	    }

	    var tracks = this.tech_.textTracks();

	    for (var i = 0; i < tracks.length; i++) {
	      if (tracks[i] !== this) {
	        tracks[i].removeCue(cue);
	      }
	    }

	    this.cues_.push(cue);
	    this.cues.setCues_(this.cues_);
	  };

	  /**
	   * Remove a cue from our internal list
	   *
	   * @param {TextTrack~Cue} removeCue
	   *        The cue to remove from our internal list
	   */


	  TextTrack.prototype.removeCue = function removeCue(_removeCue) {
	    var i = this.cues_.length;

	    while (i--) {
	      var cue = this.cues_[i];

	      if (cue === _removeCue || cue.originalCue_ && cue.originalCue_ === _removeCue) {
	        this.cues_.splice(i, 1);
	        this.cues.setCues_(this.cues_);
	        break;
	      }
	    }
	  };

	  return TextTrack;
	}(Track);

	/**
	 * cuechange - One or more cues in the track have become active or stopped being active.
	 */


	TextTrack.prototype.allowedEvents_ = {
	  cuechange: 'cuechange'
	};

	/**
	 * A representation of a single `AudioTrack`. If it is part of an {@link AudioTrackList}
	 * only one `AudioTrack` in the list will be enabled at a time.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack}
	 * @extends Track
	 */

	var AudioTrack = function (_Track) {
	  inherits(AudioTrack, _Track);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Object} [options={}]
	   *        Object of option names and values
	   *
	   * @param {AudioTrack~Kind} [options.kind='']
	   *        A valid audio track kind
	   *
	   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
	   *        A unique id for this AudioTrack.
	   *
	   * @param {string} [options.label='']
	   *        The menu label for this track.
	   *
	   * @param {string} [options.language='']
	   *        A valid two character language code.
	   *
	   * @param {boolean} [options.enabled]
	   *        If this track is the one that is currently playing. If this track is part of
	   *        an {@link AudioTrackList}, only one {@link AudioTrack} will be enabled.
	   */
	  function AudioTrack() {
	    var _this, _ret;

	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    classCallCheck(this, AudioTrack);

	    var settings = mergeOptions(options, {
	      kind: AudioTrackKind[options.kind] || ''
	    });
	    // on IE8 this will be a document element
	    // for every other browser this will be a normal object
	    var track = (_this = possibleConstructorReturn(this, _Track.call(this, settings)), _this);
	    var enabled = false;

	    if (IS_IE8) {
	      for (var prop in AudioTrack.prototype) {
	        if (prop !== 'constructor') {
	          track[prop] = AudioTrack.prototype[prop];
	        }
	      }
	    }
	    /**
	     * @memberof AudioTrack
	     * @member {boolean} enabled
	     *         If this `AudioTrack` is enabled or not. When setting this will
	     *         fire {@link AudioTrack#enabledchange} if the state of enabled is changed.
	     * @instance
	     *
	     * @fires VideoTrack#selectedchange
	     */
	    Object.defineProperty(track, 'enabled', {
	      get: function get$$1() {
	        return enabled;
	      },
	      set: function set$$1(newEnabled) {
	        // an invalid or unchanged value
	        if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {
	          return;
	        }
	        enabled = newEnabled;

	        /**
	         * An event that fires when enabled changes on this track. This allows
	         * the AudioTrackList that holds this track to act accordingly.
	         *
	         * > Note: This is not part of the spec! Native tracks will do
	         *         this internally without an event.
	         *
	         * @event AudioTrack#enabledchange
	         * @type {EventTarget~Event}
	         */
	        this.trigger('enabledchange');
	      }
	    });

	    // if the user sets this track to selected then
	    // set selected to that true value otherwise
	    // we keep it false
	    if (settings.enabled) {
	      track.enabled = settings.enabled;
	    }
	    track.loaded_ = true;

	    return _ret = track, possibleConstructorReturn(_this, _ret);
	  }

	  return AudioTrack;
	}(Track);

	/**
	 * A representation of a single `VideoTrack`.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack}
	 * @extends Track
	 */

	var VideoTrack = function (_Track) {
	  inherits(VideoTrack, _Track);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Object} [options={}]
	   *        Object of option names and values
	   *
	   * @param {string} [options.kind='']
	   *        A valid {@link VideoTrack~Kind}
	   *
	   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
	   *        A unique id for this AudioTrack.
	   *
	   * @param {string} [options.label='']
	   *        The menu label for this track.
	   *
	   * @param {string} [options.language='']
	   *        A valid two character language code.
	   *
	   * @param {boolean} [options.selected]
	   *        If this track is the one that is currently playing.
	   */
	  function VideoTrack() {
	    var _this, _ret;

	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    classCallCheck(this, VideoTrack);

	    var settings = mergeOptions(options, {
	      kind: VideoTrackKind[options.kind] || ''
	    });

	    // on IE8 this will be a document element
	    // for every other browser this will be a normal object
	    var track = (_this = possibleConstructorReturn(this, _Track.call(this, settings)), _this);
	    var selected = false;

	    if (IS_IE8) {
	      for (var prop in VideoTrack.prototype) {
	        if (prop !== 'constructor') {
	          track[prop] = VideoTrack.prototype[prop];
	        }
	      }
	    }

	    /**
	     * @memberof VideoTrack
	     * @member {boolean} selected
	     *         If this `VideoTrack` is selected or not. When setting this will
	     *         fire {@link VideoTrack#selectedchange} if the state of selected changed.
	     * @instance
	     *
	     * @fires VideoTrack#selectedchange
	     */
	    Object.defineProperty(track, 'selected', {
	      get: function get$$1() {
	        return selected;
	      },
	      set: function set$$1(newSelected) {
	        // an invalid or unchanged value
	        if (typeof newSelected !== 'boolean' || newSelected === selected) {
	          return;
	        }
	        selected = newSelected;

	        /**
	         * An event that fires when selected changes on this track. This allows
	         * the VideoTrackList that holds this track to act accordingly.
	         *
	         * > Note: This is not part of the spec! Native tracks will do
	         *         this internally without an event.
	         *
	         * @event VideoTrack#selectedchange
	         * @type {EventTarget~Event}
	         */
	        this.trigger('selectedchange');
	      }
	    });

	    // if the user sets this track to selected then
	    // set selected to that true value otherwise
	    // we keep it false
	    if (settings.selected) {
	      track.selected = settings.selected;
	    }

	    return _ret = track, possibleConstructorReturn(_this, _ret);
	  }

	  return VideoTrack;
	}(Track);

	/**
	 * @file html-track-element.js
	 */

	/**
	 * @memberof HTMLTrackElement
	 * @typedef {HTMLTrackElement~ReadyState}
	 * @enum {number}
	 */
	var NONE = 0;
	var LOADING = 1;
	var LOADED = 2;
	var ERROR = 3;

	/**
	 * A single track represented in the DOM.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement}
	 * @extends EventTarget
	 */

	var HTMLTrackElement = function (_EventTarget) {
	  inherits(HTMLTrackElement, _EventTarget);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Object} options={}
	   *        Object of option names and values
	   *
	   * @param {Tech} options.tech
	   *        A reference to the tech that owns this HTMLTrackElement.
	   *
	   * @param {TextTrack~Kind} [options.kind='subtitles']
	   *        A valid text track kind.
	   *
	   * @param {TextTrack~Mode} [options.mode='disabled']
	   *        A valid text track mode.
	   *
	   * @param {string} [options.id='vjs_track_' + Guid.newGUID()]
	   *        A unique id for this TextTrack.
	   *
	   * @param {string} [options.label='']
	   *        The menu label for this track.
	   *
	   * @param {string} [options.language='']
	   *        A valid two character language code.
	   *
	   * @param {string} [options.srclang='']
	   *        A valid two character language code. An alternative, but deprioritized
	   *        vesion of `options.language`
	   *
	   * @param {string} [options.src]
	   *        A url to TextTrack cues.
	   *
	   * @param {boolean} [options.default]
	   *        If this track should default to on or off.
	   */
	  function HTMLTrackElement() {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    classCallCheck(this, HTMLTrackElement);

	    var _this = possibleConstructorReturn(this, _EventTarget.call(this));

	    var readyState = void 0;
	    var trackElement = _this; // eslint-disable-line

	    if (IS_IE8) {
	      trackElement = document.createElement('custom');

	      for (var prop in HTMLTrackElement.prototype) {
	        if (prop !== 'constructor') {
	          trackElement[prop] = HTMLTrackElement.prototype[prop];
	        }
	      }
	    }

	    var track = new TextTrack(options);

	    trackElement.kind = track.kind;
	    trackElement.src = track.src;
	    trackElement.srclang = track.language;
	    trackElement.label = track.label;
	    trackElement['default'] = track['default'];

	    /**
	     * @memberof HTMLTrackElement
	     * @member {HTMLTrackElement~ReadyState} readyState
	     *         The current ready state of the track element.
	     * @instance
	     */
	    Object.defineProperty(trackElement, 'readyState', {
	      get: function get$$1() {
	        return readyState;
	      }
	    });

	    /**
	     * @memberof HTMLTrackElement
	     * @member {TextTrack} track
	     *         The underlying TextTrack object.
	     * @instance
	     *
	     */
	    Object.defineProperty(trackElement, 'track', {
	      get: function get$$1() {
	        return track;
	      }
	    });

	    readyState = NONE;

	    /**
	     * @listens TextTrack#loadeddata
	     * @fires HTMLTrackElement#load
	     */
	    track.addEventListener('loadeddata', function () {
	      readyState = LOADED;

	      trackElement.trigger({
	        type: 'load',
	        target: trackElement
	      });
	    });

	    if (IS_IE8) {
	      var _ret;

	      return _ret = trackElement, possibleConstructorReturn(_this, _ret);
	    }
	    return _this;
	  }

	  return HTMLTrackElement;
	}(EventTarget);

	HTMLTrackElement.prototype.allowedEvents_ = {
	  load: 'load'
	};

	HTMLTrackElement.NONE = NONE;
	HTMLTrackElement.LOADING = LOADING;
	HTMLTrackElement.LOADED = LOADED;
	HTMLTrackElement.ERROR = ERROR;

	/*
	 * This file contains all track properties that are used in
	 * player.js, tech.js, html5.js and possibly other techs in the future.
	 */

	var NORMAL = {
	  audio: {
	    ListClass: AudioTrackList,
	    TrackClass: AudioTrack,
	    capitalName: 'Audio'
	  },
	  video: {
	    ListClass: VideoTrackList,
	    TrackClass: VideoTrack,
	    capitalName: 'Video'
	  },
	  text: {
	    ListClass: TextTrackList,
	    TrackClass: TextTrack,
	    capitalName: 'Text'
	  }
	};

	Object.keys(NORMAL).forEach(function (type) {
	  NORMAL[type].getterName = type + 'Tracks';
	  NORMAL[type].privateName = type + 'Tracks_';
	});

	var REMOTE = {
	  remoteText: {
	    ListClass: TextTrackList,
	    TrackClass: TextTrack,
	    capitalName: 'RemoteText',
	    getterName: 'remoteTextTracks',
	    privateName: 'remoteTextTracks_'
	  },
	  remoteTextEl: {
	    ListClass: HtmlTrackElementList,
	    TrackClass: HTMLTrackElement,
	    capitalName: 'RemoteTextTrackEls',
	    getterName: 'remoteTextTrackEls',
	    privateName: 'remoteTextTrackEls_'
	  }
	};

	var ALL = mergeOptions(NORMAL, REMOTE);

	REMOTE.names = Object.keys(REMOTE);
	NORMAL.names = Object.keys(NORMAL);
	ALL.names = [].concat(REMOTE.names).concat(NORMAL.names);

	/**
	 * @file tech.js
	 */

	/**
	 * An Object containing a structure like: `{src: 'url', type: 'mimetype'}` or string
	 * that just contains the src url alone.
	 * * `var SourceObject = {src: 'http://ex.com/video.mp4', type: 'video/mp4'};`
	   * `var SourceString = 'http://example.com/some-video.mp4';`
	 *
	 * @typedef {Object|string} Tech~SourceObject
	 *
	 * @property {string} src
	 *           The url to the source
	 *
	 * @property {string} type
	 *           The mime type of the source
	 */

	/**
	 * A function used by {@link Tech} to create a new {@link TextTrack}.
	 *
	 * @private
	 *
	 * @param {Tech} self
	 *        An instance of the Tech class.
	 *
	 * @param {string} kind
	 *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
	 *
	 * @param {string} [label]
	 *        Label to identify the text track
	 *
	 * @param {string} [language]
	 *        Two letter language abbreviation
	 *
	 * @param {Object} [options={}]
	 *        An object with additional text track options
	 *
	 * @return {TextTrack}
	 *          The text track that was created.
	 */
	function createTrackHelper(self, kind, label, language) {
	  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

	  var tracks = self.textTracks();

	  options.kind = kind;

	  if (label) {
	    options.label = label;
	  }
	  if (language) {
	    options.language = language;
	  }
	  options.tech = self;

	  var track = new ALL.text.TrackClass(options);

	  tracks.addTrack(track);

	  return track;
	}

	/**
	 * This is the base class for media playback technology controllers, such as
	 * {@link Flash} and {@link HTML5}
	 *
	 * @extends Component
	 */

	var Tech = function (_Component) {
	  inherits(Tech, _Component);

	  /**
	   * Create an instance of this Tech.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} ready
	   *        Callback function to call when the `HTML5` Tech is ready.
	   */
	  function Tech() {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var ready = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {};
	    classCallCheck(this, Tech);

	    // we don't want the tech to report user activity automatically.
	    // This is done manually in addControlsListeners
	    options.reportTouchActivity = false;

	    // keep track of whether the current source has played at all to
	    // implement a very limited played()
	    var _this = possibleConstructorReturn(this, _Component.call(this, null, options, ready));

	    _this.hasStarted_ = false;
	    _this.on('playing', function () {
	      this.hasStarted_ = true;
	    });
	    _this.on('loadstart', function () {
	      this.hasStarted_ = false;
	    });

	    ALL.names.forEach(function (name) {
	      var props = ALL[name];

	      if (options && options[props.getterName]) {
	        _this[props.privateName] = options[props.getterName];
	      }
	    });

	    // Manually track progress in cases where the browser/flash player doesn't report it.
	    if (!_this.featuresProgressEvents) {
	      _this.manualProgressOn();
	    }

	    // Manually track timeupdates in cases where the browser/flash player doesn't report it.
	    if (!_this.featuresTimeupdateEvents) {
	      _this.manualTimeUpdatesOn();
	    }

	    ['Text', 'Audio', 'Video'].forEach(function (track) {
	      if (options['native' + track + 'Tracks'] === false) {
	        _this['featuresNative' + track + 'Tracks'] = false;
	      }
	    });

	    if (options.nativeCaptions === false || options.nativeTextTracks === false) {
	      _this.featuresNativeTextTracks = false;
	    } else if (options.nativeCaptions === true || options.nativeTextTracks === true) {
	      _this.featuresNativeTextTracks = true;
	    }

	    if (!_this.featuresNativeTextTracks) {
	      _this.emulateTextTracks();
	    }

	    _this.autoRemoteTextTracks_ = new ALL.text.ListClass();

	    _this.initTrackListeners();

	    // Turn on component tap events only if not using native controls
	    if (!options.nativeControlsForTouch) {
	      _this.emitTapEvents();
	    }

	    if (_this.constructor) {
	      _this.name_ = _this.constructor.name || 'Unknown Tech';
	    }
	    return _this;
	  }

	  /**
	   * A special function to trigger source set in a way that will allow player
	   * to re-trigger if the player or tech are not ready yet.
	   *
	   * @fires Tech#sourceset
	   * @param {string} src The source string at the time of the source changing.
	   */


	  Tech.prototype.triggerSourceset = function triggerSourceset(src) {
	    var _this2 = this;

	    if (!this.isReady_) {
	      // on initial ready we have to trigger source set
	      // 1ms after ready so that player can watch for it.
	      this.one('ready', function () {
	        return _this2.setTimeout(function () {
	          return _this2.triggerSourceset(src);
	        }, 1);
	      });
	    }

	    /**
	     * Fired when the source is set on the tech causing the media element
	     * to reload.
	     *
	     * @see {@link Player#event:sourceset}
	     * @event Tech#sourceset
	     * @type {EventTarget~Event}
	     */
	    this.trigger({
	      src: src,
	      type: 'sourceset'
	    });
	  };

	  /* Fallbacks for unsupported event types
	  ================================================================================ */

	  /**
	   * Polyfill the `progress` event for browsers that don't support it natively.
	   *
	   * @see {@link Tech#trackProgress}
	   */


	  Tech.prototype.manualProgressOn = function manualProgressOn() {
	    this.on('durationchange', this.onDurationChange);

	    this.manualProgress = true;

	    // Trigger progress watching when a source begins loading
	    this.one('ready', this.trackProgress);
	  };

	  /**
	   * Turn off the polyfill for `progress` events that was created in
	   * {@link Tech#manualProgressOn}
	   */


	  Tech.prototype.manualProgressOff = function manualProgressOff() {
	    this.manualProgress = false;
	    this.stopTrackingProgress();

	    this.off('durationchange', this.onDurationChange);
	  };

	  /**
	   * This is used to trigger a `progress` event when the buffered percent changes. It
	   * sets an interval function that will be called every 500 milliseconds to check if the
	   * buffer end percent has changed.
	   *
	   * > This function is called by {@link Tech#manualProgressOn}
	   *
	   * @param {EventTarget~Event} event
	   *        The `ready` event that caused this to run.
	   *
	   * @listens Tech#ready
	   * @fires Tech#progress
	   */


	  Tech.prototype.trackProgress = function trackProgress(event) {
	    this.stopTrackingProgress();
	    this.progressInterval = this.setInterval(bind(this, function () {
	      // Don't trigger unless buffered amount is greater than last time

	      var numBufferedPercent = this.bufferedPercent();

	      if (this.bufferedPercent_ !== numBufferedPercent) {
	        /**
	         * See {@link Player#progress}
	         *
	         * @event Tech#progress
	         * @type {EventTarget~Event}
	         */
	        this.trigger('progress');
	      }

	      this.bufferedPercent_ = numBufferedPercent;

	      if (numBufferedPercent === 1) {
	        this.stopTrackingProgress();
	      }
	    }), 500);
	  };

	  /**
	   * Update our internal duration on a `durationchange` event by calling
	   * {@link Tech#duration}.
	   *
	   * @param {EventTarget~Event} event
	   *        The `durationchange` event that caused this to run.
	   *
	   * @listens Tech#durationchange
	   */


	  Tech.prototype.onDurationChange = function onDurationChange(event) {
	    this.duration_ = this.duration();
	  };

	  /**
	   * Get and create a `TimeRange` object for buffering.
	   *
	   * @return {TimeRange}
	   *         The time range object that was created.
	   */


	  Tech.prototype.buffered = function buffered() {
	    return createTimeRanges(0, 0);
	  };

	  /**
	   * Get the percentage of the current video that is currently buffered.
	   *
	   * @return {number}
	   *         A number from 0 to 1 that represents the decimal percentage of the
	   *         video that is buffered.
	   *
	   */


	  Tech.prototype.bufferedPercent = function bufferedPercent$$1() {
	    return bufferedPercent(this.buffered(), this.duration_);
	  };

	  /**
	   * Turn off the polyfill for `progress` events that was created in
	   * {@link Tech#manualProgressOn}
	   * Stop manually tracking progress events by clearing the interval that was set in
	   * {@link Tech#trackProgress}.
	   */


	  Tech.prototype.stopTrackingProgress = function stopTrackingProgress() {
	    this.clearInterval(this.progressInterval);
	  };

	  /**
	   * Polyfill the `timeupdate` event for browsers that don't support it.
	   *
	   * @see {@link Tech#trackCurrentTime}
	   */


	  Tech.prototype.manualTimeUpdatesOn = function manualTimeUpdatesOn() {
	    this.manualTimeUpdates = true;

	    this.on('play', this.trackCurrentTime);
	    this.on('pause', this.stopTrackingCurrentTime);
	  };

	  /**
	   * Turn off the polyfill for `timeupdate` events that was created in
	   * {@link Tech#manualTimeUpdatesOn}
	   */


	  Tech.prototype.manualTimeUpdatesOff = function manualTimeUpdatesOff() {
	    this.manualTimeUpdates = false;
	    this.stopTrackingCurrentTime();
	    this.off('play', this.trackCurrentTime);
	    this.off('pause', this.stopTrackingCurrentTime);
	  };

	  /**
	   * Sets up an interval function to track current time and trigger `timeupdate` every
	   * 250 milliseconds.
	   *
	   * @listens Tech#play
	   * @triggers Tech#timeupdate
	   */


	  Tech.prototype.trackCurrentTime = function trackCurrentTime() {
	    if (this.currentTimeInterval) {
	      this.stopTrackingCurrentTime();
	    }
	    this.currentTimeInterval = this.setInterval(function () {
	      /**
	       * Triggered at an interval of 250ms to indicated that time is passing in the video.
	       *
	       * @event Tech#timeupdate
	       * @type {EventTarget~Event}
	       */
	      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });

	      // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
	    }, 250);
	  };

	  /**
	   * Stop the interval function created in {@link Tech#trackCurrentTime} so that the
	   * `timeupdate` event is no longer triggered.
	   *
	   * @listens {Tech#pause}
	   */


	  Tech.prototype.stopTrackingCurrentTime = function stopTrackingCurrentTime() {
	    this.clearInterval(this.currentTimeInterval);

	    // #1002 - if the video ends right before the next timeupdate would happen,
	    // the progress bar won't make it all the way to the end
	    this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
	  };

	  /**
	   * Turn off all event polyfills, clear the `Tech`s {@link AudioTrackList},
	   * {@link VideoTrackList}, and {@link TextTrackList}, and dispose of this Tech.
	   *
	   * @fires Component#dispose
	   */


	  Tech.prototype.dispose = function dispose() {

	    // clear out all tracks because we can't reuse them between techs
	    this.clearTracks(NORMAL.names);

	    // Turn off any manual progress or timeupdate tracking
	    if (this.manualProgress) {
	      this.manualProgressOff();
	    }

	    if (this.manualTimeUpdates) {
	      this.manualTimeUpdatesOff();
	    }

	    _Component.prototype.dispose.call(this);
	  };

	  /**
	   * Clear out a single `TrackList` or an array of `TrackLists` given their names.
	   *
	   * > Note: Techs without source handlers should call this between sources for `video`
	   *         & `audio` tracks. You don't want to use them between tracks!
	   *
	   * @param {string[]|string} types
	   *        TrackList names to clear, valid names are `video`, `audio`, and
	   *        `text`.
	   */


	  Tech.prototype.clearTracks = function clearTracks(types) {
	    var _this3 = this;

	    types = [].concat(types);
	    // clear out all tracks because we can't reuse them between techs
	    types.forEach(function (type) {
	      var list = _this3[type + 'Tracks']() || [];
	      var i = list.length;

	      while (i--) {
	        var track = list[i];

	        if (type === 'text') {
	          _this3.removeRemoteTextTrack(track);
	        }
	        list.removeTrack(track);
	      }
	    });
	  };

	  /**
	   * Remove any TextTracks added via addRemoteTextTrack that are
	   * flagged for automatic garbage collection
	   */


	  Tech.prototype.cleanupAutoTextTracks = function cleanupAutoTextTracks() {
	    var list = this.autoRemoteTextTracks_ || [];
	    var i = list.length;

	    while (i--) {
	      var track = list[i];

	      this.removeRemoteTextTrack(track);
	    }
	  };

	  /**
	   * Reset the tech, which will removes all sources and reset the internal readyState.
	   *
	   * @abstract
	   */


	  Tech.prototype.reset = function reset() {};

	  /**
	   * Get or set an error on the Tech.
	   *
	   * @param {MediaError} [err]
	   *        Error to set on the Tech
	   *
	   * @return {MediaError|null}
	   *         The current error object on the tech, or null if there isn't one.
	   */


	  Tech.prototype.error = function error(err) {
	    if (err !== undefined) {
	      this.error_ = new MediaError(err);
	      this.trigger('error');
	    }
	    return this.error_;
	  };

	  /**
	   * Returns the `TimeRange`s that have been played through for the current source.
	   *
	   * > NOTE: This implementation is incomplete. It does not track the played `TimeRange`.
	   *         It only checks wether the source has played at all or not.
	   *
	   * @return {TimeRange}
	   *         - A single time range if this video has played
	   *         - An empty set of ranges if not.
	   */


	  Tech.prototype.played = function played() {
	    if (this.hasStarted_) {
	      return createTimeRanges(0, 0);
	    }
	    return createTimeRanges();
	  };

	  /**
	   * Causes a manual time update to occur if {@link Tech#manualTimeUpdatesOn} was
	   * previously called.
	   *
	   * @fires Tech#timeupdate
	   */


	  Tech.prototype.setCurrentTime = function setCurrentTime() {
	    // improve the accuracy of manual timeupdates
	    if (this.manualTimeUpdates) {
	      /**
	       * A manual `timeupdate` event.
	       *
	       * @event Tech#timeupdate
	       * @type {EventTarget~Event}
	       */
	      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
	    }
	  };

	  /**
	   * Turn on listeners for {@link VideoTrackList}, {@link {AudioTrackList}, and
	   * {@link TextTrackList} events.
	   *
	   * This adds {@link EventTarget~EventListeners} for `addtrack`, and  `removetrack`.
	   *
	   * @fires Tech#audiotrackchange
	   * @fires Tech#videotrackchange
	   * @fires Tech#texttrackchange
	   */


	  Tech.prototype.initTrackListeners = function initTrackListeners() {
	    var _this4 = this;

	    /**
	     * Triggered when tracks are added or removed on the Tech {@link AudioTrackList}
	     *
	     * @event Tech#audiotrackchange
	     * @type {EventTarget~Event}
	     */

	    /**
	     * Triggered when tracks are added or removed on the Tech {@link VideoTrackList}
	     *
	     * @event Tech#videotrackchange
	     * @type {EventTarget~Event}
	     */

	    /**
	     * Triggered when tracks are added or removed on the Tech {@link TextTrackList}
	     *
	     * @event Tech#texttrackchange
	     * @type {EventTarget~Event}
	     */
	    NORMAL.names.forEach(function (name) {
	      var props = NORMAL[name];
	      var trackListChanges = function trackListChanges() {
	        _this4.trigger(name + 'trackchange');
	      };

	      var tracks = _this4[props.getterName]();

	      tracks.addEventListener('removetrack', trackListChanges);
	      tracks.addEventListener('addtrack', trackListChanges);

	      _this4.on('dispose', function () {
	        tracks.removeEventListener('removetrack', trackListChanges);
	        tracks.removeEventListener('addtrack', trackListChanges);
	      });
	    });
	  };

	  /**
	   * Emulate TextTracks using vtt.js if necessary
	   *
	   * @fires Tech#vttjsloaded
	   * @fires Tech#vttjserror
	   */


	  Tech.prototype.addWebVttScript_ = function addWebVttScript_() {
	    var _this5 = this;

	    if (window.WebVTT) {
	      return;
	    }

	    // Initially, Tech.el_ is a child of a dummy-div wait until the Component system
	    // signals that the Tech is ready at which point Tech.el_ is part of the DOM
	    // before inserting the WebVTT script
	    if (document.body.contains(this.el())) {

	      // load via require if available and vtt.js script location was not passed in
	      // as an option. novtt builds will turn the above require call into an empty object
	      // which will cause this if check to always fail.
	      if (!this.options_['vtt.js'] && isPlain(vtt) && Object.keys(vtt).length > 0) {
	        this.trigger('vttjsloaded');
	        return;
	      }

	      // load vtt.js via the script location option or the cdn of no location was
	      // passed in
	      var script = document.createElement('script');

	      script.src = this.options_['vtt.js'] || 'https://vjs.zencdn.net/vttjs/0.12.4/vtt.min.js';
	      script.onload = function () {
	        /**
	         * Fired when vtt.js is loaded.
	         *
	         * @event Tech#vttjsloaded
	         * @type {EventTarget~Event}
	         */
	        _this5.trigger('vttjsloaded');
	      };
	      script.onerror = function () {
	        /**
	         * Fired when vtt.js was not loaded due to an error
	         *
	         * @event Tech#vttjsloaded
	         * @type {EventTarget~Event}
	         */
	        _this5.trigger('vttjserror');
	      };
	      this.on('dispose', function () {
	        script.onload = null;
	        script.onerror = null;
	      });
	      // but have not loaded yet and we set it to true before the inject so that
	      // we don't overwrite the injected window.WebVTT if it loads right away
	      window.WebVTT = true;
	      this.el().parentNode.appendChild(script);
	    } else {
	      this.ready(this.addWebVttScript_);
	    }
	  };

	  /**
	   * Emulate texttracks
	   *
	   */


	  Tech.prototype.emulateTextTracks = function emulateTextTracks() {
	    var _this6 = this;

	    var tracks = this.textTracks();
	    var remoteTracks = this.remoteTextTracks();
	    var handleAddTrack = function handleAddTrack(e) {
	      return tracks.addTrack(e.track);
	    };
	    var handleRemoveTrack = function handleRemoveTrack(e) {
	      return tracks.removeTrack(e.track);
	    };

	    remoteTracks.on('addtrack', handleAddTrack);
	    remoteTracks.on('removetrack', handleRemoveTrack);

	    this.addWebVttScript_();

	    var updateDisplay = function updateDisplay() {
	      return _this6.trigger('texttrackchange');
	    };

	    var textTracksChanges = function textTracksChanges() {
	      updateDisplay();

	      for (var i = 0; i < tracks.length; i++) {
	        var track = tracks[i];

	        track.removeEventListener('cuechange', updateDisplay);
	        if (track.mode === 'showing') {
	          track.addEventListener('cuechange', updateDisplay);
	        }
	      }
	    };

	    textTracksChanges();
	    tracks.addEventListener('change', textTracksChanges);
	    tracks.addEventListener('addtrack', textTracksChanges);
	    tracks.addEventListener('removetrack', textTracksChanges);

	    this.on('dispose', function () {
	      remoteTracks.off('addtrack', handleAddTrack);
	      remoteTracks.off('removetrack', handleRemoveTrack);
	      tracks.removeEventListener('change', textTracksChanges);
	      tracks.removeEventListener('addtrack', textTracksChanges);
	      tracks.removeEventListener('removetrack', textTracksChanges);

	      for (var i = 0; i < tracks.length; i++) {
	        var track = tracks[i];

	        track.removeEventListener('cuechange', updateDisplay);
	      }
	    });
	  };

	  /**
	   * Create and returns a remote {@link TextTrack} object.
	   *
	   * @param {string} kind
	   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
	   *
	   * @param {string} [label]
	   *        Label to identify the text track
	   *
	   * @param {string} [language]
	   *        Two letter language abbreviation
	   *
	   * @return {TextTrack}
	   *         The TextTrack that gets created.
	   */


	  Tech.prototype.addTextTrack = function addTextTrack(kind, label, language) {
	    if (!kind) {
	      throw new Error('TextTrack kind is required but was not provided');
	    }

	    return createTrackHelper(this, kind, label, language);
	  };

	  /**
	   * Create an emulated TextTrack for use by addRemoteTextTrack
	   *
	   * This is intended to be overridden by classes that inherit from
	   * Tech in order to create native or custom TextTracks.
	   *
	   * @param {Object} options
	   *        The object should contain the options to initialize the TextTrack with.
	   *
	   * @param {string} [options.kind]
	   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
	   *
	   * @param {string} [options.label].
	   *        Label to identify the text track
	   *
	   * @param {string} [options.language]
	   *        Two letter language abbreviation.
	   *
	   * @return {HTMLTrackElement}
	   *         The track element that gets created.
	   */


	  Tech.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {
	    var track = mergeOptions(options, {
	      tech: this
	    });

	    return new REMOTE.remoteTextEl.TrackClass(track);
	  };

	  /**
	   * Creates a remote text track object and returns an html track element.
	   *
	   * > Note: This can be an emulated {@link HTMLTrackElement} or a native one.
	   *
	   * @param {Object} options
	   *        See {@link Tech#createRemoteTextTrack} for more detailed properties.
	   *
	   * @param {boolean} [manualCleanup=true]
	   *        - When false: the TextTrack will be automatically removed from the video
	   *          element whenever the source changes
	   *        - When True: The TextTrack will have to be cleaned up manually
	   *
	   * @return {HTMLTrackElement}
	   *         An Html Track Element.
	   *
	   * @deprecated The default functionality for this function will be equivalent
	   *             to "manualCleanup=false" in the future. The manualCleanup parameter will
	   *             also be removed.
	   */


	  Tech.prototype.addRemoteTextTrack = function addRemoteTextTrack() {
	    var _this7 = this;

	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var manualCleanup = arguments[1];

	    var htmlTrackElement = this.createRemoteTextTrack(options);

	    if (manualCleanup !== true && manualCleanup !== false) {
	      // deprecation warning
	      log.warn('Calling addRemoteTextTrack without explicitly setting the "manualCleanup" parameter to `true` is deprecated and default to `false` in future version of video.js');
	      manualCleanup = true;
	    }

	    // store HTMLTrackElement and TextTrack to remote list
	    this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
	    this.remoteTextTracks().addTrack(htmlTrackElement.track);

	    if (manualCleanup !== true) {
	      // create the TextTrackList if it doesn't exist
	      this.ready(function () {
	        return _this7.autoRemoteTextTracks_.addTrack(htmlTrackElement.track);
	      });
	    }

	    return htmlTrackElement;
	  };

	  /**
	   * Remove a remote text track from the remote `TextTrackList`.
	   *
	   * @param {TextTrack} track
	   *        `TextTrack` to remove from the `TextTrackList`
	   */


	  Tech.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
	    var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);

	    // remove HTMLTrackElement and TextTrack from remote list
	    this.remoteTextTrackEls().removeTrackElement_(trackElement);
	    this.remoteTextTracks().removeTrack(track);
	    this.autoRemoteTextTracks_.removeTrack(track);
	  };

	  /**
	   * Gets available media playback quality metrics as specified by the W3C's Media
	   * Playback Quality API.
	   *
	   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
	   *
	   * @return {Object}
	   *         An object with supported media playback quality metrics
	   *
	   * @abstract
	   */


	  Tech.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
	    return {};
	  };

	  /**
	   * A method to set a poster from a `Tech`.
	   *
	   * @abstract
	   */


	  Tech.prototype.setPoster = function setPoster() {};

	  /**
	   * A method to check for the presence of the 'playsinine' <video> attribute.
	   *
	   * @abstract
	   */


	  Tech.prototype.playsinline = function playsinline() {};

	  /**
	   * A method to set or unset the 'playsinine' <video> attribute.
	   *
	   * @abstract
	   */


	  Tech.prototype.setPlaysinline = function setPlaysinline() {};

	  /*
	   * Check if the tech can support the given mime-type.
	   *
	   * The base tech does not support any type, but source handlers might
	   * overwrite this.
	   *
	   * @param  {string} type
	   *         The mimetype to check for support
	   *
	   * @return {string}
	   *         'probably', 'maybe', or empty string
	   *
	   * @see [Spec]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType}
	   *
	   * @abstract
	   */


	  Tech.prototype.canPlayType = function canPlayType() {
	    return '';
	  };

	  /**
	   * Check if the type is supported by this tech.
	   *
	   * The base tech does not support any type, but source handlers might
	   * overwrite this.
	   *
	   * @param {string} type
	   *        The media type to check
	   * @return {string} Returns the native video element's response
	   */


	  Tech.canPlayType = function canPlayType() {
	    return '';
	  };

	  /**
	   * Check if the tech can support the given source
	   * @param {Object} srcObj
	   *        The source object
	   * @param {Object} options
	   *        The options passed to the tech
	   * @return {string} 'probably', 'maybe', or '' (empty string)
	   */


	  Tech.canPlaySource = function canPlaySource(srcObj, options) {
	    return Tech.canPlayType(srcObj.type);
	  };

	  /*
	   * Return whether the argument is a Tech or not.
	   * Can be passed either a Class like `Html5` or a instance like `player.tech_`
	   *
	   * @param {Object} component
	   *        The item to check
	   *
	   * @return {boolean}
	   *         Whether it is a tech or not
	   *         - True if it is a tech
	   *         - False if it is not
	   */


	  Tech.isTech = function isTech(component) {
	    return component.prototype instanceof Tech || component instanceof Tech || component === Tech;
	  };

	  /**
	   * Registers a `Tech` into a shared list for videojs.
	   *
	   * @param {string} name
	   *        Name of the `Tech` to register.
	   *
	   * @param {Object} tech
	   *        The `Tech` class to register.
	   */


	  Tech.registerTech = function registerTech(name, tech) {
	    if (!Tech.techs_) {
	      Tech.techs_ = {};
	    }

	    if (!Tech.isTech(tech)) {
	      throw new Error('Tech ' + name + ' must be a Tech');
	    }

	    if (!Tech.canPlayType) {
	      throw new Error('Techs must have a static canPlayType method on them');
	    }
	    if (!Tech.canPlaySource) {
	      throw new Error('Techs must have a static canPlaySource method on them');
	    }

	    name = toTitleCase(name);

	    Tech.techs_[name] = tech;
	    if (name !== 'Tech') {
	      // camel case the techName for use in techOrder
	      Tech.defaultTechOrder_.push(name);
	    }
	    return tech;
	  };

	  /**
	   * Get a `Tech` from the shared list by name.
	   *
	   * @param {string} name
	   *        `camelCase` or `TitleCase` name of the Tech to get
	   *
	   * @return {Tech|undefined}
	   *         The `Tech` or undefined if there was no tech with the name requsted.
	   */


	  Tech.getTech = function getTech(name) {
	    if (!name) {
	      return;
	    }

	    name = toTitleCase(name);

	    if (Tech.techs_ && Tech.techs_[name]) {
	      return Tech.techs_[name];
	    }

	    if (window && window.videojs && window.videojs[name]) {
	      log.warn('The ' + name + ' tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)');
	      return window.videojs[name];
	    }
	  };

	  return Tech;
	}(Component);

	/**
	 * Get the {@link VideoTrackList}
	 *
	 * @returns {VideoTrackList}
	 * @method Tech.prototype.videoTracks
	 */

	/**
	 * Get the {@link AudioTrackList}
	 *
	 * @returns {AudioTrackList}
	 * @method Tech.prototype.audioTracks
	 */

	/**
	 * Get the {@link TextTrackList}
	 *
	 * @returns {TextTrackList}
	 * @method Tech.prototype.textTracks
	 */

	/**
	 * Get the remote element {@link TextTrackList}
	 *
	 * @returns {TextTrackList}
	 * @method Tech.prototype.remoteTextTracks
	 */

	/**
	 * Get the remote element {@link HtmlTrackElementList}
	 *
	 * @returns {HtmlTrackElementList}
	 * @method Tech.prototype.remoteTextTrackEls
	 */

	ALL.names.forEach(function (name) {
	  var props = ALL[name];

	  Tech.prototype[props.getterName] = function () {
	    this[props.privateName] = this[props.privateName] || new props.ListClass();
	    return this[props.privateName];
	  };
	});

	/**
	 * List of associated text tracks
	 *
	 * @type {TextTrackList}
	 * @private
	 * @property Tech#textTracks_
	 */

	/**
	 * List of associated audio tracks.
	 *
	 * @type {AudioTrackList}
	 * @private
	 * @property Tech#audioTracks_
	 */

	/**
	 * List of associated video tracks.
	 *
	 * @type {VideoTrackList}
	 * @private
	 * @property Tech#videoTracks_
	 */

	/**
	 * Boolean indicating wether the `Tech` supports volume control.
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresVolumeControl = true;

	/**
	 * Boolean indicating whether the `Tech` supports muting volume.
	 *
	 * @type {bolean}
	 * @default
	 */
	Tech.prototype.featuresMuteControl = true;

	/**
	 * Boolean indicating whether the `Tech` supports fullscreen resize control.
	 * Resizing plugins using request fullscreen reloads the plugin
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresFullscreenResize = false;

	/**
	 * Boolean indicating wether the `Tech` supports changing the speed at which the video
	 * plays. Examples:
	 *   - Set player to play 2x (twice) as fast
	 *   - Set player to play 0.5x (half) as fast
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresPlaybackRate = false;

	/**
	 * Boolean indicating wether the `Tech` supports the `progress` event. This is currently
	 * not triggered by video-js-swf. This will be used to determine if
	 * {@link Tech#manualProgressOn} should be called.
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresProgressEvents = false;

	/**
	 * Boolean indicating wether the `Tech` supports the `sourceset` event.
	 *
	 * A tech should set this to `true` and then use {@link Tech#triggerSourceset}
	 * to trigger a {@link Tech#event:sourceset} at the earliest time after getting
	 * a new source.
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresSourceset = false;

	/**
	 * Boolean indicating wether the `Tech` supports the `timeupdate` event. This is currently
	 * not triggered by video-js-swf. This will be used to determine if
	 * {@link Tech#manualTimeUpdates} should be called.
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresTimeupdateEvents = false;

	/**
	 * Boolean indicating wether the `Tech` supports the native `TextTrack`s.
	 * This will help us integrate with native `TextTrack`s if the browser supports them.
	 *
	 * @type {boolean}
	 * @default
	 */
	Tech.prototype.featuresNativeTextTracks = false;

	/**
	 * A functional mixin for techs that want to use the Source Handler pattern.
	 * Source handlers are scripts for handling specific formats.
	 * The source handler pattern is used for adaptive formats (HLS, DASH) that
	 * manually load video data and feed it into a Source Buffer (Media Source Extensions)
	 * Example: `Tech.withSourceHandlers.call(MyTech);`
	 *
	 * @param {Tech} _Tech
	 *        The tech to add source handler functions to.
	 *
	 * @mixes Tech~SourceHandlerAdditions
	 */
	Tech.withSourceHandlers = function (_Tech) {

	  /**
	   * Register a source handler
	   *
	   * @param {Function} handler
	   *        The source handler class
	   *
	   * @param {number} [index]
	   *        Register it at the following index
	   */
	  _Tech.registerSourceHandler = function (handler, index) {
	    var handlers = _Tech.sourceHandlers;

	    if (!handlers) {
	      handlers = _Tech.sourceHandlers = [];
	    }

	    if (index === undefined) {
	      // add to the end of the list
	      index = handlers.length;
	    }

	    handlers.splice(index, 0, handler);
	  };

	  /**
	   * Check if the tech can support the given type. Also checks the
	   * Techs sourceHandlers.
	   *
	   * @param {string} type
	   *         The mimetype to check.
	   *
	   * @return {string}
	   *         'probably', 'maybe', or '' (empty string)
	   */
	  _Tech.canPlayType = function (type) {
	    var handlers = _Tech.sourceHandlers || [];
	    var can = void 0;

	    for (var i = 0; i < handlers.length; i++) {
	      can = handlers[i].canPlayType(type);

	      if (can) {
	        return can;
	      }
	    }

	    return '';
	  };

	  /**
	   * Returns the first source handler that supports the source.
	   *
	   * TODO: Answer question: should 'probably' be prioritized over 'maybe'
	   *
	   * @param {Tech~SourceObject} source
	   *        The source object
	   *
	   * @param {Object} options
	   *        The options passed to the tech
	   *
	   * @return {SourceHandler|null}
	   *          The first source handler that supports the source or null if
	   *          no SourceHandler supports the source
	   */
	  _Tech.selectSourceHandler = function (source, options) {
	    var handlers = _Tech.sourceHandlers || [];
	    var can = void 0;

	    for (var i = 0; i < handlers.length; i++) {
	      can = handlers[i].canHandleSource(source, options);

	      if (can) {
	        return handlers[i];
	      }
	    }

	    return null;
	  };

	  /**
	   * Check if the tech can support the given source.
	   *
	   * @param {Tech~SourceObject} srcObj
	   *        The source object
	   *
	   * @param {Object} options
	   *        The options passed to the tech
	   *
	   * @return {string}
	   *         'probably', 'maybe', or '' (empty string)
	   */
	  _Tech.canPlaySource = function (srcObj, options) {
	    var sh = _Tech.selectSourceHandler(srcObj, options);

	    if (sh) {
	      return sh.canHandleSource(srcObj, options);
	    }

	    return '';
	  };

	  /**
	   * When using a source handler, prefer its implementation of
	   * any function normally provided by the tech.
	   */
	  var deferrable = ['seekable', 'seeking', 'duration'];

	  /**
	   * A wrapper around {@link Tech#seekable} that will call a `SourceHandler`s seekable
	   * function if it exists, with a fallback to the Techs seekable function.
	   *
	   * @method _Tech.seekable
	   */

	  /**
	   * A wrapper around {@link Tech#duration} that will call a `SourceHandler`s duration
	   * function if it exists, otherwise it will fallback to the techs duration function.
	   *
	   * @method _Tech.duration
	   */

	  deferrable.forEach(function (fnName) {
	    var originalFn = this[fnName];

	    if (typeof originalFn !== 'function') {
	      return;
	    }

	    this[fnName] = function () {
	      if (this.sourceHandler_ && this.sourceHandler_[fnName]) {
	        return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);
	      }
	      return originalFn.apply(this, arguments);
	    };
	  }, _Tech.prototype);

	  /**
	   * Create a function for setting the source using a source object
	   * and source handlers.
	   * Should never be called unless a source handler was found.
	   *
	   * @param {Tech~SourceObject} source
	   *        A source object with src and type keys
	   */
	  _Tech.prototype.setSource = function (source) {
	    var sh = _Tech.selectSourceHandler(source, this.options_);

	    if (!sh) {
	      // Fall back to a native source hander when unsupported sources are
	      // deliberately set
	      if (_Tech.nativeSourceHandler) {
	        sh = _Tech.nativeSourceHandler;
	      } else {
	        log.error('No source hander found for the current source.');
	      }
	    }

	    // Dispose any existing source handler
	    this.disposeSourceHandler();
	    this.off('dispose', this.disposeSourceHandler);

	    if (sh !== _Tech.nativeSourceHandler) {
	      this.currentSource_ = source;
	    }

	    this.sourceHandler_ = sh.handleSource(source, this, this.options_);
	    this.on('dispose', this.disposeSourceHandler);
	  };

	  /**
	   * Clean up any existing SourceHandlers and listeners when the Tech is disposed.
	   *
	   * @listens Tech#dispose
	   */
	  _Tech.prototype.disposeSourceHandler = function () {
	    // if we have a source and get another one
	    // then we are loading something new
	    // than clear all of our current tracks
	    if (this.currentSource_) {
	      this.clearTracks(['audio', 'video']);
	      this.currentSource_ = null;
	    }

	    // always clean up auto-text tracks
	    this.cleanupAutoTextTracks();

	    if (this.sourceHandler_) {

	      if (this.sourceHandler_.dispose) {
	        this.sourceHandler_.dispose();
	      }

	      this.sourceHandler_ = null;
	    }
	  };
	};

	// The base Tech class needs to be registered as a Component. It is the only
	// Tech that can be registered as a Component.
	Component.registerComponent('Tech', Tech);
	Tech.registerTech('Tech', Tech);

	/**
	 * A list of techs that should be added to techOrder on Players
	 *
	 * @private
	 */
	Tech.defaultTechOrder_ = [];

	var middlewares = {};
	var middlewareInstances = {};

	var TERMINATOR = {};

	function use(type, middleware) {
	  middlewares[type] = middlewares[type] || [];
	  middlewares[type].push(middleware);
	}



	function setSource(player, src, next) {
	  player.setTimeout(function () {
	    return setSourceHelper(src, middlewares[src.type], next, player);
	  }, 1);
	}

	function setTech(middleware, tech) {
	  middleware.forEach(function (mw) {
	    return mw.setTech && mw.setTech(tech);
	  });
	}

	/**
	 * Calls a getter on the tech first, through each middleware
	 * from right to left to the player.
	 */
	function get$1(middleware, tech, method) {
	  return middleware.reduceRight(middlewareIterator(method), tech[method]());
	}

	/**
	 * Takes the argument given to the player and calls the setter method on each
	 * middlware from left to right to the tech.
	 */
	function set$1(middleware, tech, method, arg) {
	  return tech[method](middleware.reduce(middlewareIterator(method), arg));
	}

	/**
	 * Takes the argument given to the player and calls the `call` version of the method
	 * on each middleware from left to right.
	 * Then, call the passed in method on the tech and return the result unchanged
	 * back to the player, through middleware, this time from right to left.
	 */
	function mediate(middleware, tech, method) {
	  var arg = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

	  var callMethod = 'call' + toTitleCase(method);
	  var middlewareValue = middleware.reduce(middlewareIterator(callMethod), arg);
	  var terminated = middlewareValue === TERMINATOR;
	  var returnValue = terminated ? null : tech[method](middlewareValue);

	  executeRight(middleware, method, returnValue, terminated);

	  return returnValue;
	}

	var allowedGetters = {
	  buffered: 1,
	  currentTime: 1,
	  duration: 1,
	  seekable: 1,
	  played: 1,
	  paused: 1
	};

	var allowedSetters = {
	  setCurrentTime: 1
	};

	var allowedMediators = {
	  play: 1,
	  pause: 1
	};

	function middlewareIterator(method) {
	  return function (value, mw) {
	    // if the previous middleware terminated, pass along the termination
	    if (value === TERMINATOR) {
	      return TERMINATOR;
	    }

	    if (mw[method]) {
	      return mw[method](value);
	    }

	    return value;
	  };
	}

	function executeRight(mws, method, value, terminated) {
	  for (var i = mws.length - 1; i >= 0; i--) {
	    var mw = mws[i];

	    if (mw[method]) {
	      mw[method](terminated, value);
	    }
	  }
	}

	function clearCacheForPlayer(player) {
	  middlewareInstances[player.id()] = null;
	}

	/**
	 * {
	 *  [playerId]: [[mwFactory, mwInstance], ...]
	 * }
	 */
	function getOrCreateFactory(player, mwFactory) {
	  var mws = middlewareInstances[player.id()];
	  var mw = null;

	  if (mws === undefined || mws === null) {
	    mw = mwFactory(player);
	    middlewareInstances[player.id()] = [[mwFactory, mw]];
	    return mw;
	  }

	  for (var i = 0; i < mws.length; i++) {
	    var _mws$i = mws[i],
	        mwf = _mws$i[0],
	        mwi = _mws$i[1];


	    if (mwf !== mwFactory) {
	      continue;
	    }

	    mw = mwi;
	  }

	  if (mw === null) {
	    mw = mwFactory(player);
	    mws.push([mwFactory, mw]);
	  }

	  return mw;
	}

	function setSourceHelper() {
	  var src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var middleware = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
	  var next = arguments[2];
	  var player = arguments[3];
	  var acc = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
	  var lastRun = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
	  var mwFactory = middleware[0],
	      mwrest = middleware.slice(1);

	  // if mwFactory is a string, then we're at a fork in the road

	  if (typeof mwFactory === 'string') {
	    setSourceHelper(src, middlewares[mwFactory], next, player, acc, lastRun);

	    // if we have an mwFactory, call it with the player to get the mw,
	    // then call the mw's setSource method
	  } else if (mwFactory) {
	    var mw = getOrCreateFactory(player, mwFactory);

	    // if setSource isn't present, implicitly select this middleware
	    if (!mw.setSource) {
	      acc.push(mw);
	      return setSourceHelper(src, mwrest, next, player, acc, lastRun);
	    }

	    mw.setSource(assign({}, src), function (err, _src) {

	      // something happened, try the next middleware on the current level
	      // make sure to use the old src
	      if (err) {
	        return setSourceHelper(src, mwrest, next, player, acc, lastRun);
	      }

	      // we've succeeded, now we need to go deeper
	      acc.push(mw);

	      // if it's the same type, continue down the current chain
	      // otherwise, we want to go down the new chain
	      setSourceHelper(_src, src.type === _src.type ? mwrest : middlewares[_src.type], next, player, acc, lastRun);
	    });
	  } else if (mwrest.length) {
	    setSourceHelper(src, mwrest, next, player, acc, lastRun);
	  } else if (lastRun) {
	    next(src, acc);
	  } else {
	    setSourceHelper(src, middlewares['*'], next, player, acc, true);
	  }
	}

	/**
	 * Mimetypes
	 *
	 * @see http://hul.harvard.edu/ois/////systems/wax/wax-public-help/mimetypes.htm
	 * @typedef Mimetypes~Kind
	 * @enum
	 */
	var MimetypesKind = {
	  opus: 'video/ogg',
	  ogv: 'video/ogg',
	  mp4: 'video/mp4',
	  mov: 'video/mp4',
	  m4v: 'video/mp4',
	  mkv: 'video/x-matroska',
	  mp3: 'audio/mpeg',
	  aac: 'audio/aac',
	  oga: 'audio/ogg',
	  m3u8: 'application/x-mpegURL'
	};

	/**
	 * Get the mimetype of a given src url if possible
	 *
	 * @param {string} src
	 *        The url to the src
	 *
	 * @return {string}
	 *         return the mimetype if it was known or empty string otherwise
	 */
	var getMimetype = function getMimetype() {
	  var src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

	  var ext = getFileExtension(src);
	  var mimetype = MimetypesKind[ext.toLowerCase()];

	  return mimetype || '';
	};

	/**
	 * Find the mime type of a given source string if possible. Uses the player
	 * source cache.
	 *
	 * @param {Player} player
	 *        The player object
	 *
	 * @param {string} src
	 *        The source string
	 *
	 * @return {string}
	 *         The type that was found
	 */
	var findMimetype = function findMimetype(player, src) {
	  if (!src) {
	    return '';
	  }

	  // 1. check for the type in the `source` cache
	  if (player.cache_.source.src === src && player.cache_.source.type) {
	    return player.cache_.source.type;
	  }

	  // 2. see if we have this source in our `currentSources` cache
	  var matchingSources = player.cache_.sources.filter(function (s) {
	    return s.src === src;
	  });

	  if (matchingSources.length) {
	    return matchingSources[0].type;
	  }

	  // 3. look for the src url in source elements and use the type there
	  var sources = player.$$('source');

	  for (var i = 0; i < sources.length; i++) {
	    var s = sources[i];

	    if (s.type && s.src && s.src === src) {
	      return s.type;
	    }
	  }

	  // 4. finally fallback to our list of mime types based on src url extension
	  return getMimetype(src);
	};

	/**
	 * @module filter-source
	 */
	/**
	 * Filter out single bad source objects or multiple source objects in an
	 * array. Also flattens nested source object arrays into a 1 dimensional
	 * array of source objects.
	 *
	 * @param {Tech~SourceObject|Tech~SourceObject[]} src
	 *        The src object to filter
	 *
	 * @return {Tech~SourceObject[]}
	 *         An array of sourceobjects containing only valid sources
	 *
	 * @private
	 */
	var filterSource = function filterSource(src) {
	  // traverse array
	  if (Array.isArray(src)) {
	    var newsrc = [];

	    src.forEach(function (srcobj) {
	      srcobj = filterSource(srcobj);

	      if (Array.isArray(srcobj)) {
	        newsrc = newsrc.concat(srcobj);
	      } else if (isObject(srcobj)) {
	        newsrc.push(srcobj);
	      }
	    });

	    src = newsrc;
	  } else if (typeof src === 'string' && src.trim()) {
	    // convert string into object
	    src = [fixSource({ src: src })];
	  } else if (isObject(src) && typeof src.src === 'string' && src.src && src.src.trim()) {
	    // src is already valid
	    src = [fixSource(src)];
	  } else {
	    // invalid source, turn it into an empty array
	    src = [];
	  }

	  return src;
	};

	/**
	 * Checks src mimetype, adding it when possible
	 *
	 * @param {Tech~SourceObject} src
	 *        The src object to check
	 * @return {Tech~SourceObject}
	 *        src Object with known type
	 */
	function fixSource(src) {
	  var mimetype = getMimetype(src.src);

	  if (!src.type && mimetype) {
	    src.type = mimetype;
	  }

	  return src;
	}

	/**
	 * @file loader.js
	 */
	/**
	 * The `MediaLoader` is the `Component` that decides which playback technology to load
	 * when a player is initialized.
	 *
	 * @extends Component
	 */

	var MediaLoader = function (_Component) {
	  inherits(MediaLoader, _Component);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should attach to.
	   *
	   * @param {Object} [options]
	   *        The key/value stroe of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function that is run when this component is ready.
	   */
	  function MediaLoader(player, options, ready) {
	    classCallCheck(this, MediaLoader);

	    // MediaLoader has no element
	    var options_ = mergeOptions({ createEl: false }, options);

	    // If there are no sources when the player is initialized,
	    // load the first supported playback technology.

	    var _this = possibleConstructorReturn(this, _Component.call(this, player, options_, ready));

	    if (!options.playerOptions.sources || options.playerOptions.sources.length === 0) {
	      for (var i = 0, j = options.playerOptions.techOrder; i < j.length; i++) {
	        var techName = toTitleCase(j[i]);
	        var tech = Tech.getTech(techName);

	        // Support old behavior of techs being registered as components.
	        // Remove once that deprecated behavior is removed.
	        if (!techName) {
	          tech = Component.getComponent(techName);
	        }

	        // Check if the browser supports this technology
	        if (tech && tech.isSupported()) {
	          player.loadTech_(techName);
	          break;
	        }
	      }
	    } else {
	      // Loop through playback technologies (HTML5, Flash) and check for support.
	      // Then load the best source.
	      // A few assumptions here:
	      //   All playback technologies respect preload false.
	      player.src(options.playerOptions.sources);
	    }
	    return _this;
	  }

	  return MediaLoader;
	}(Component);

	Component.registerComponent('MediaLoader', MediaLoader);

	/**
	 * @file button.js
	 */
	/**
	 * Clickable Component which is clickable or keyboard actionable,
	 * but is not a native HTML button.
	 *
	 * @extends Component
	 */

	var ClickableComponent = function (_Component) {
	  inherits(ClickableComponent, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param  {Player} player
	   *         The `Player` that this class should be attached to.
	   *
	   * @param  {Object} [options]
	   *         The key/value store of player options.
	   */
	  function ClickableComponent(player, options) {
	    classCallCheck(this, ClickableComponent);

	    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.emitTapEvents();

	    _this.enable();
	    return _this;
	  }

	  /**
	   * Create the `Component`s DOM element.
	   *
	   * @param {string} [tag=div]
	   *        The element's node type.
	   *
	   * @param {Object} [props={}]
	   *        An object of properties that should be set on the element.
	   *
	   * @param {Object} [attributes={}]
	   *        An object of attributes that should be set on the element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  ClickableComponent.prototype.createEl = function createEl$$1() {
	    var tag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'div';
	    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	    props = assign({
	      innerHTML: '<span aria-hidden="true" class="vjs-icon-placeholder"></span>',
	      className: this.buildCSSClass(),
	      tabIndex: 0
	    }, props);

	    if (tag === 'button') {
	      log.error('Creating a ClickableComponent with an HTML element of ' + tag + ' is not supported; use a Button instead.');
	    }

	    // Add ARIA attributes for clickable element which is not a native HTML button
	    attributes = assign({
	      role: 'button'
	    }, attributes);

	    this.tabIndex_ = props.tabIndex;

	    var el = _Component.prototype.createEl.call(this, tag, props, attributes);

	    this.createControlTextEl(el);

	    return el;
	  };

	  ClickableComponent.prototype.dispose = function dispose() {
	    // remove controlTextEl_ on dipose
	    this.controlTextEl_ = null;

	    _Component.prototype.dispose.call(this);
	  };

	  /**
	   * Create a control text element on this `Component`
	   *
	   * @param {Element} [el]
	   *        Parent element for the control text.
	   *
	   * @return {Element}
	   *         The control text element that gets created.
	   */


	  ClickableComponent.prototype.createControlTextEl = function createControlTextEl(el) {
	    this.controlTextEl_ = createEl('span', {
	      className: 'vjs-control-text'
	    }, {
	      // let the screen reader user know that the text of the element may change
	      'aria-live': 'polite'
	    });

	    if (el) {
	      el.appendChild(this.controlTextEl_);
	    }

	    this.controlText(this.controlText_, el);

	    return this.controlTextEl_;
	  };

	  /**
	   * Get or set the localize text to use for the controls on the `Component`.
	   *
	   * @param {string} [text]
	   *        Control text for element.
	   *
	   * @param {Element} [el=this.el()]
	   *        Element to set the title on.
	   *
	   * @return {string}
	   *         - The control text when getting
	   */


	  ClickableComponent.prototype.controlText = function controlText(text) {
	    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.el();

	    if (text === undefined) {
	      return this.controlText_ || 'Need Text';
	    }

	    var localizedText = this.localize(text);

	    this.controlText_ = text;
	    textContent(this.controlTextEl_, localizedText);
	    if (!this.nonIconControl) {
	      // Set title attribute if only an icon is shown
	      el.setAttribute('title', localizedText);
	    }
	  };

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  ClickableComponent.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-control vjs-button ' + _Component.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Enable this `Component`s element.
	   */


	  ClickableComponent.prototype.enable = function enable() {
	    if (!this.enabled_) {
	      this.enabled_ = true;
	      this.removeClass('vjs-disabled');
	      this.el_.setAttribute('aria-disabled', 'false');
	      if (typeof this.tabIndex_ !== 'undefined') {
	        this.el_.setAttribute('tabIndex', this.tabIndex_);
	      }
	      this.on(['tap', 'click'], this.handleClick);
	      this.on('focus', this.handleFocus);
	      this.on('blur', this.handleBlur);
	    }
	  };

	  /**
	   * Disable this `Component`s element.
	   */


	  ClickableComponent.prototype.disable = function disable() {
	    this.enabled_ = false;
	    this.addClass('vjs-disabled');
	    this.el_.setAttribute('aria-disabled', 'true');
	    if (typeof this.tabIndex_ !== 'undefined') {
	      this.el_.removeAttribute('tabIndex');
	    }
	    this.off(['tap', 'click'], this.handleClick);
	    this.off('focus', this.handleFocus);
	    this.off('blur', this.handleBlur);
	  };

	  /**
	   * This gets called when a `ClickableComponent` gets:
	   * - Clicked (via the `click` event, listening starts in the constructor)
	   * - Tapped (via the `tap` event, listening starts in the constructor)
	   * - The following things happen in order:
	   *   1. {@link ClickableComponent#handleFocus} is called via a `focus` event on the
	   *      `ClickableComponent`.
	   *   2. {@link ClickableComponent#handleFocus} adds a listener for `keydown` on using
	   *      {@link ClickableComponent#handleKeyPress}.
	   *   3. `ClickableComponent` has not had a `blur` event (`blur` means that focus was lost). The user presses
	   *      the space or enter key.
	   *   4. {@link ClickableComponent#handleKeyPress} calls this function with the `keydown`
	   *      event as a parameter.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   * @abstract
	   */


	  ClickableComponent.prototype.handleClick = function handleClick(event) {};

	  /**
	   * This gets called when a `ClickableComponent` gains focus via a `focus` event.
	   * Turns on listening for `keydown` events. When they happen it
	   * calls `this.handleKeyPress`.
	   *
	   * @param {EventTarget~Event} event
	   *        The `focus` event that caused this function to be called.
	   *
	   * @listens focus
	   */


	  ClickableComponent.prototype.handleFocus = function handleFocus(event) {
	    on(document, 'keydown', bind(this, this.handleKeyPress));
	  };

	  /**
	   * Called when this ClickableComponent has focus and a key gets pressed down. By
	   * default it will call `this.handleClick` when the key is space or enter.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown` event that caused this function to be called.
	   *
	   * @listens keydown
	   */


	  ClickableComponent.prototype.handleKeyPress = function handleKeyPress(event) {

	    // Support Space (32) or Enter (13) key operation to fire a click event
	    if (event.which === 32 || event.which === 13) {
	      event.preventDefault();
	      this.trigger('click');
	    } else if (_Component.prototype.handleKeyPress) {

	      // Pass keypress handling up for unsupported keys
	      _Component.prototype.handleKeyPress.call(this, event);
	    }
	  };

	  /**
	   * Called when a `ClickableComponent` loses focus. Turns off the listener for
	   * `keydown` events. Which Stops `this.handleKeyPress` from getting called.
	   *
	   * @param {EventTarget~Event} event
	   *        The `blur` event that caused this function to be called.
	   *
	   * @listens blur
	   */


	  ClickableComponent.prototype.handleBlur = function handleBlur(event) {
	    off(document, 'keydown', bind(this, this.handleKeyPress));
	  };

	  return ClickableComponent;
	}(Component);

	Component.registerComponent('ClickableComponent', ClickableComponent);

	/**
	 * @file poster-image.js
	 */
	/**
	 * A `ClickableComponent` that handles showing the poster image for the player.
	 *
	 * @extends ClickableComponent
	 */

	var PosterImage = function (_ClickableComponent) {
	  inherits(PosterImage, _ClickableComponent);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should attach to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function PosterImage(player, options) {
	    classCallCheck(this, PosterImage);

	    var _this = possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));

	    _this.update();
	    player.on('posterchange', bind(_this, _this.update));
	    return _this;
	  }

	  /**
	   * Clean up and dispose of the `PosterImage`.
	   */


	  PosterImage.prototype.dispose = function dispose() {
	    this.player().off('posterchange', this.update);
	    _ClickableComponent.prototype.dispose.call(this);
	  };

	  /**
	   * Create the `PosterImage`s DOM element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  PosterImage.prototype.createEl = function createEl$$1() {
	    var el = createEl('div', {
	      className: 'vjs-poster',

	      // Don't want poster to be tabbable.
	      tabIndex: -1
	    });

	    // To ensure the poster image resizes while maintaining its original aspect
	    // ratio, use a div with `background-size` when available. For browsers that
	    // do not support `background-size` (e.g. IE8), fall back on using a regular
	    // img element.
	    if (!BACKGROUND_SIZE_SUPPORTED) {
	      this.fallbackImg_ = createEl('img');
	      el.appendChild(this.fallbackImg_);
	    }

	    return el;
	  };

	  /**
	   * An {@link EventTarget~EventListener} for {@link Player#posterchange} events.
	   *
	   * @listens Player#posterchange
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `Player#posterchange` event that triggered this function.
	   */


	  PosterImage.prototype.update = function update(event) {
	    var url = this.player().poster();

	    this.setSrc(url);

	    // If there's no poster source we should display:none on this component
	    // so it's not still clickable or right-clickable
	    if (url) {
	      this.show();
	    } else {
	      this.hide();
	    }
	  };

	  /**
	   * Set the source of the `PosterImage` depending on the display method.
	   *
	   * @param {string} url
	   *        The URL to the source for the `PosterImage`.
	   */


	  PosterImage.prototype.setSrc = function setSrc(url) {
	    if (this.fallbackImg_) {
	      this.fallbackImg_.src = url;
	    } else {
	      var backgroundImage = '';

	      // Any falsey values should stay as an empty string, otherwise
	      // this will throw an extra error
	      if (url) {
	        backgroundImage = 'url("' + url + '")';
	      }

	      this.el_.style.backgroundImage = backgroundImage;
	    }
	  };

	  /**
	   * An {@link EventTarget~EventListener} for clicks on the `PosterImage`. See
	   * {@link ClickableComponent#handleClick} for instances where this will be triggered.
	   *
	   * @listens tap
	   * @listens click
	   * @listens keydown
	   *
	   * @param {EventTarget~Event} event
	   +        The `click`, `tap` or `keydown` event that caused this function to be called.
	   */


	  PosterImage.prototype.handleClick = function handleClick(event) {
	    // We don't want a click to trigger playback when controls are disabled
	    if (!this.player_.controls()) {
	      return;
	    }

	    if (this.player_.paused()) {
	      silencePromise(this.player_.play());
	    } else {
	      this.player_.pause();
	    }
	  };

	  return PosterImage;
	}(ClickableComponent);

	Component.registerComponent('PosterImage', PosterImage);

	/**
	 * @file text-track-display.js
	 */
	var darkGray = '#222';
	var lightGray = '#ccc';
	var fontMap = {
	  monospace: 'monospace',
	  sansSerif: 'sans-serif',
	  serif: 'serif',
	  monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
	  monospaceSerif: '"Courier New", monospace',
	  proportionalSansSerif: 'sans-serif',
	  proportionalSerif: 'serif',
	  casual: '"Comic Sans MS", Impact, fantasy',
	  script: '"Monotype Corsiva", cursive',
	  smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
	};

	/**
	 * Construct an rgba color from a given hex color code.
	 *
	 * @param {number} color
	 *        Hex number for color, like #f0e or #f604e2.
	 *
	 * @param {number} opacity
	 *        Value for opacity, 0.0 - 1.0.
	 *
	 * @return {string}
	 *         The rgba color that was created, like 'rgba(255, 0, 0, 0.3)'.
	 */
	function constructColor(color, opacity) {
	  var hex = void 0;

	  if (color.length === 4) {
	    // color looks like "#f0e"
	    hex = color[1] + color[1] + color[2] + color[2] + color[3] + color[3];
	  } else if (color.length === 7) {
	    // color looks like "#f604e2"
	    hex = color.slice(1);
	  } else {
	    throw new Error('Invalid color code provided, ' + color + '; must be formatted as e.g. #f0e or #f604e2.');
	  }
	  return 'rgba(' + parseInt(hex.slice(0, 2), 16) + ',' + parseInt(hex.slice(2, 4), 16) + ',' + parseInt(hex.slice(4, 6), 16) + ',' + opacity + ')';
	}

	/**
	 * Try to update the style of a DOM element. Some style changes will throw an error,
	 * particularly in IE8. Those should be noops.
	 *
	 * @param {Element} el
	 *        The DOM element to be styled.
	 *
	 * @param {string} style
	 *        The CSS property on the element that should be styled.
	 *
	 * @param {string} rule
	 *        The style rule that should be applied to the property.
	 *
	 * @private
	 */
	function tryUpdateStyle(el, style, rule) {
	  try {
	    el.style[style] = rule;
	  } catch (e) {

	    // Satisfies linter.
	    return;
	  }
	}

	/**
	 * The component for displaying text track cues.
	 *
	 * @extends Component
	 */

	var TextTrackDisplay = function (_Component) {
	  inherits(TextTrackDisplay, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function to call when `TextTrackDisplay` is ready.
	   */
	  function TextTrackDisplay(player, options, ready) {
	    classCallCheck(this, TextTrackDisplay);

	    var _this = possibleConstructorReturn(this, _Component.call(this, player, options, ready));

	    var updateDisplayHandler = bind(_this, _this.updateDisplay);

	    player.on('loadstart', bind(_this, _this.toggleDisplay));
	    player.on('texttrackchange', updateDisplayHandler);
	    player.on('loadstart', bind(_this, _this.preselectTrack));

	    // This used to be called during player init, but was causing an error
	    // if a track should show by default and the display hadn't loaded yet.
	    // Should probably be moved to an external track loader when we support
	    // tracks that don't need a display.
	    player.ready(bind(_this, function () {
	      if (player.tech_ && player.tech_.featuresNativeTextTracks) {
	        this.hide();
	        return;
	      }

	      player.on('fullscreenchange', updateDisplayHandler);
	      player.on('playerresize', updateDisplayHandler);

	      if (window.addEventListener) {
	        window.addEventListener('orientationchange', updateDisplayHandler);
	      }
	      player.on('dispose', function () {
	        return window.removeEventListener('orientationchange', updateDisplayHandler);
	      });

	      var tracks = this.options_.playerOptions.tracks || [];

	      for (var i = 0; i < tracks.length; i++) {
	        this.player_.addRemoteTextTrack(tracks[i], true);
	      }

	      this.preselectTrack();
	    }));
	    return _this;
	  }

	  /**
	  * Preselect a track following this precedence:
	  * - matches the previously selected {@link TextTrack}'s language and kind
	  * - matches the previously selected {@link TextTrack}'s language only
	  * - is the first default captions track
	  * - is the first default descriptions track
	  *
	  * @listens Player#loadstart
	  */


	  TextTrackDisplay.prototype.preselectTrack = function preselectTrack() {
	    var modes = { captions: 1, subtitles: 1 };
	    var trackList = this.player_.textTracks();
	    var userPref = this.player_.cache_.selectedLanguage;
	    var firstDesc = void 0;
	    var firstCaptions = void 0;
	    var preferredTrack = void 0;

	    for (var i = 0; i < trackList.length; i++) {
	      var track = trackList[i];

	      if (userPref && userPref.enabled && userPref.language === track.language) {
	        // Always choose the track that matches both language and kind
	        if (track.kind === userPref.kind) {
	          preferredTrack = track;
	          // or choose the first track that matches language
	        } else if (!preferredTrack) {
	          preferredTrack = track;
	        }

	        // clear everything if offTextTrackMenuItem was clicked
	      } else if (userPref && !userPref.enabled) {
	        preferredTrack = null;
	        firstDesc = null;
	        firstCaptions = null;
	      } else if (track['default']) {
	        if (track.kind === 'descriptions' && !firstDesc) {
	          firstDesc = track;
	        } else if (track.kind in modes && !firstCaptions) {
	          firstCaptions = track;
	        }
	      }
	    }

	    // The preferredTrack matches the user preference and takes
	    // precendence over all the other tracks.
	    // So, display the preferredTrack before the first default track
	    // and the subtitles/captions track before the descriptions track
	    if (preferredTrack) {
	      preferredTrack.mode = 'showing';
	    } else if (firstCaptions) {
	      firstCaptions.mode = 'showing';
	    } else if (firstDesc) {
	      firstDesc.mode = 'showing';
	    }
	  };

	  /**
	   * Turn display of {@link TextTrack}'s from the current state into the other state.
	   * There are only two states:
	   * - 'shown'
	   * - 'hidden'
	   *
	   * @listens Player#loadstart
	   */


	  TextTrackDisplay.prototype.toggleDisplay = function toggleDisplay() {
	    if (this.player_.tech_ && this.player_.tech_.featuresNativeTextTracks) {
	      this.hide();
	    } else {
	      this.show();
	    }
	  };

	  /**
	   * Create the {@link Component}'s DOM element.
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  TextTrackDisplay.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-text-track-display'
	    }, {
	      'aria-live': 'off',
	      'aria-atomic': 'true'
	    });
	  };

	  /**
	   * Clear all displayed {@link TextTrack}s.
	   */


	  TextTrackDisplay.prototype.clearDisplay = function clearDisplay() {
	    if (typeof window.WebVTT === 'function') {
	      window.WebVTT.processCues(window, [], this.el_);
	    }
	  };

	  /**
	   * Update the displayed TextTrack when a either a {@link Player#texttrackchange} or
	   * a {@link Player#fullscreenchange} is fired.
	   *
	   * @listens Player#texttrackchange
	   * @listens Player#fullscreenchange
	   */


	  TextTrackDisplay.prototype.updateDisplay = function updateDisplay() {
	    var tracks = this.player_.textTracks();

	    this.clearDisplay();

	    // Track display prioritization model: if multiple tracks are 'showing',
	    //  display the first 'subtitles' or 'captions' track which is 'showing',
	    //  otherwise display the first 'descriptions' track which is 'showing'

	    var descriptionsTrack = null;
	    var captionsSubtitlesTrack = null;
	    var i = tracks.length;

	    while (i--) {
	      var track = tracks[i];

	      if (track.mode === 'showing') {
	        if (track.kind === 'descriptions') {
	          descriptionsTrack = track;
	        } else {
	          captionsSubtitlesTrack = track;
	        }
	      }
	    }

	    if (captionsSubtitlesTrack) {
	      if (this.getAttribute('aria-live') !== 'off') {
	        this.setAttribute('aria-live', 'off');
	      }
	      this.updateForTrack(captionsSubtitlesTrack);
	    } else if (descriptionsTrack) {
	      if (this.getAttribute('aria-live') !== 'assertive') {
	        this.setAttribute('aria-live', 'assertive');
	      }
	      this.updateForTrack(descriptionsTrack);
	    }
	  };

	  /**
	   * Add an {@link Texttrack} to to the {@link Tech}s {@link TextTrackList}.
	   *
	   * @param {TextTrack} track
	   *        Text track object to be added to the list.
	   */


	  TextTrackDisplay.prototype.updateForTrack = function updateForTrack(track) {
	    if (typeof window.WebVTT !== 'function' || !track.activeCues) {
	      return;
	    }

	    var cues = [];

	    for (var _i = 0; _i < track.activeCues.length; _i++) {
	      cues.push(track.activeCues[_i]);
	    }

	    window.WebVTT.processCues(window, cues, this.el_);

	    if (!this.player_.textTrackSettings) {
	      return;
	    }

	    var overrides = this.player_.textTrackSettings.getValues();

	    var i = cues.length;

	    while (i--) {
	      var cue = cues[i];

	      if (!cue) {
	        continue;
	      }

	      var cueDiv = cue.displayState;

	      if (overrides.color) {
	        cueDiv.firstChild.style.color = overrides.color;
	      }
	      if (overrides.textOpacity) {
	        tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));
	      }
	      if (overrides.backgroundColor) {
	        cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;
	      }
	      if (overrides.backgroundOpacity) {
	        tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));
	      }
	      if (overrides.windowColor) {
	        if (overrides.windowOpacity) {
	          tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));
	        } else {
	          cueDiv.style.backgroundColor = overrides.windowColor;
	        }
	      }
	      if (overrides.edgeStyle) {
	        if (overrides.edgeStyle === 'dropshadow') {
	          cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;
	        } else if (overrides.edgeStyle === 'raised') {
	          cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;
	        } else if (overrides.edgeStyle === 'depressed') {
	          cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;
	        } else if (overrides.edgeStyle === 'uniform') {
	          cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;
	        }
	      }
	      if (overrides.fontPercent && overrides.fontPercent !== 1) {
	        var fontSize = window.parseFloat(cueDiv.style.fontSize);

	        cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';
	        cueDiv.style.height = 'auto';
	        cueDiv.style.top = 'auto';
	        cueDiv.style.bottom = '2px';
	      }
	      if (overrides.fontFamily && overrides.fontFamily !== 'default') {
	        if (overrides.fontFamily === 'small-caps') {
	          cueDiv.firstChild.style.fontVariant = 'small-caps';
	        } else {
	          cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];
	        }
	      }
	    }
	  };

	  return TextTrackDisplay;
	}(Component);

	Component.registerComponent('TextTrackDisplay', TextTrackDisplay);

	/**
	 * @file loading-spinner.js
	 */
	/**
	 * A loading spinner for use during waiting/loading events.
	 *
	 * @extends Component
	 */

	var LoadingSpinner = function (_Component) {
	  inherits(LoadingSpinner, _Component);

	  function LoadingSpinner() {
	    classCallCheck(this, LoadingSpinner);
	    return possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Create the `LoadingSpinner`s DOM element.
	   *
	   * @return {Element}
	   *         The dom element that gets created.
	   */
	  LoadingSpinner.prototype.createEl = function createEl$$1() {
	    var isAudio = this.player_.isAudio();
	    var playerType = this.localize(isAudio ? 'Audio Player' : 'Video Player');
	    var controlText = createEl('span', {
	      className: 'vjs-control-text',
	      innerHTML: this.localize('{1} is loading.', [playerType])
	    });

	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-loading-spinner',
	      dir: 'ltr'
	    });

	    el.appendChild(controlText);

	    return el;
	  };

	  return LoadingSpinner;
	}(Component);

	Component.registerComponent('LoadingSpinner', LoadingSpinner);

	/**
	 * @file button.js
	 */
	/**
	 * Base class for all buttons.
	 *
	 * @extends ClickableComponent
	 */

	var Button = function (_ClickableComponent) {
	  inherits(Button, _ClickableComponent);

	  function Button() {
	    classCallCheck(this, Button);
	    return possibleConstructorReturn(this, _ClickableComponent.apply(this, arguments));
	  }

	  /**
	   * Create the `Button`s DOM element.
	   *
	   * @param {string} [tag="button"]
	   *        The element's node type. This argument is IGNORED: no matter what
	   *        is passed, it will always create a `button` element.
	   *
	   * @param {Object} [props={}]
	   *        An object of properties that should be set on the element.
	   *
	   * @param {Object} [attributes={}]
	   *        An object of attributes that should be set on the element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */
	  Button.prototype.createEl = function createEl(tag) {
	    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	    tag = 'button';

	    props = assign({
	      innerHTML: '<span aria-hidden="true" class="vjs-icon-placeholder"></span>',
	      className: this.buildCSSClass()
	    }, props);

	    // Add attributes for button element
	    attributes = assign({

	      // Necessary since the default button type is "submit"
	      type: 'button'
	    }, attributes);

	    var el = Component.prototype.createEl.call(this, tag, props, attributes);

	    this.createControlTextEl(el);

	    return el;
	  };

	  /**
	   * Add a child `Component` inside of this `Button`.
	   *
	   * @param {string|Component} child
	   *        The name or instance of a child to add.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of options that will get passed to children of
	   *        the child.
	   *
	   * @return {Component}
	   *         The `Component` that gets added as a child. When using a string the
	   *         `Component` will get created by this process.
	   *
	   * @deprecated since version 5
	   */


	  Button.prototype.addChild = function addChild(child) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    var className = this.constructor.name;

	    log.warn('Adding an actionable (user controllable) child to a Button (' + className + ') is not supported; use a ClickableComponent instead.');

	    // Avoid the error message generated by ClickableComponent's addChild method
	    return Component.prototype.addChild.call(this, child, options);
	  };

	  /**
	   * Enable the `Button` element so that it can be activated or clicked. Use this with
	   * {@link Button#disable}.
	   */


	  Button.prototype.enable = function enable() {
	    _ClickableComponent.prototype.enable.call(this);
	    this.el_.removeAttribute('disabled');
	  };

	  /**
	   * Disable the `Button` element so that it cannot be activated or clicked. Use this with
	   * {@link Button#enable}.
	   */


	  Button.prototype.disable = function disable() {
	    _ClickableComponent.prototype.disable.call(this);
	    this.el_.setAttribute('disabled', 'disabled');
	  };

	  /**
	   * This gets called when a `Button` has focus and `keydown` is triggered via a key
	   * press.
	   *
	   * @param {EventTarget~Event} event
	   *        The event that caused this function to get called.
	   *
	   * @listens keydown
	   */


	  Button.prototype.handleKeyPress = function handleKeyPress(event) {

	    // Ignore Space (32) or Enter (13) key operation, which is handled by the browser for a button.
	    if (event.which === 32 || event.which === 13) {
	      return;
	    }

	    // Pass keypress handling up for unsupported keys
	    _ClickableComponent.prototype.handleKeyPress.call(this, event);
	  };

	  return Button;
	}(ClickableComponent);

	Component.registerComponent('Button', Button);

	/**
	 * @file big-play-button.js
	 */
	/**
	 * The initial play button that shows before the video has played. The hiding of the
	 * `BigPlayButton` get done via CSS and `Player` states.
	 *
	 * @extends Button
	 */

	var BigPlayButton = function (_Button) {
	  inherits(BigPlayButton, _Button);

	  function BigPlayButton(player, options) {
	    classCallCheck(this, BigPlayButton);

	    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

	    _this.mouseused_ = false;

	    _this.on('mousedown', _this.handleMouseDown);
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object. Always returns 'vjs-big-play-button'.
	   */


	  BigPlayButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-big-play-button';
	  };

	  /**
	   * This gets called when a `BigPlayButton` "clicked". See {@link ClickableComponent}
	   * for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  BigPlayButton.prototype.handleClick = function handleClick(event) {
	    var playPromise = this.player_.play();

	    // exit early if clicked via the mouse
	    if (this.mouseused_ && event.clientX && event.clientY) {
	      silencePromise(playPromise);
	      return;
	    }

	    var cb = this.player_.getChild('controlBar');
	    var playToggle = cb && cb.getChild('playToggle');

	    if (!playToggle) {
	      this.player_.focus();
	      return;
	    }

	    var playFocus = function playFocus() {
	      return playToggle.focus();
	    };

	    if (isPromise(playPromise)) {
	      playPromise.then(playFocus, function () {});
	    } else {
	      this.setTimeout(playFocus, 1);
	    }
	  };

	  BigPlayButton.prototype.handleKeyPress = function handleKeyPress(event) {
	    this.mouseused_ = false;

	    _Button.prototype.handleKeyPress.call(this, event);
	  };

	  BigPlayButton.prototype.handleMouseDown = function handleMouseDown(event) {
	    this.mouseused_ = true;
	  };

	  return BigPlayButton;
	}(Button);

	/**
	 * The text that should display over the `BigPlayButton`s controls. Added to for localization.
	 *
	 * @type {string}
	 * @private
	 */


	BigPlayButton.prototype.controlText_ = 'Play Video';

	Component.registerComponent('BigPlayButton', BigPlayButton);

	/**
	 * @file close-button.js
	 */
	/**
	 * The `CloseButton` is a `{@link Button}` that fires a `close` event when
	 * it gets clicked.
	 *
	 * @extends Button
	 */

	var CloseButton = function (_Button) {
	  inherits(CloseButton, _Button);

	  /**
	   * Creates an instance of the this class.
	   *
	   * @param  {Player} player
	   *         The `Player` that this class should be attached to.
	   *
	   * @param  {Object} [options]
	   *         The key/value store of player options.
	   */
	  function CloseButton(player, options) {
	    classCallCheck(this, CloseButton);

	    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

	    _this.controlText(options && options.controlText || _this.localize('Close'));
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  CloseButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-close-button ' + _Button.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * This gets called when a `CloseButton` gets clicked. See
	   * {@link ClickableComponent#handleClick} for more information on when this will be
	   * triggered
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   * @fires CloseButton#close
	   */


	  CloseButton.prototype.handleClick = function handleClick(event) {

	    /**
	     * Triggered when the a `CloseButton` is clicked.
	     *
	     * @event CloseButton#close
	     * @type {EventTarget~Event}
	     *
	     * @property {boolean} [bubbles=false]
	     *           set to false so that the close event does not
	     *           bubble up to parents if there is no listener
	     */
	    this.trigger({ type: 'close', bubbles: false });
	  };

	  return CloseButton;
	}(Button);

	Component.registerComponent('CloseButton', CloseButton);

	/**
	 * @file play-toggle.js
	 */
	/**
	 * Button to toggle between play and pause.
	 *
	 * @extends Button
	 */

	var PlayToggle = function (_Button) {
	  inherits(PlayToggle, _Button);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function PlayToggle(player, options) {
	    classCallCheck(this, PlayToggle);

	    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

	    _this.on(player, 'play', _this.handlePlay);
	    _this.on(player, 'pause', _this.handlePause);
	    _this.on(player, 'ended', _this.handleEnded);
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  PlayToggle.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-play-control ' + _Button.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * This gets called when an `PlayToggle` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  PlayToggle.prototype.handleClick = function handleClick(event) {
	    if (this.player_.paused()) {
	      this.player_.play();
	    } else {
	      this.player_.pause();
	    }
	  };

	  /**
	   * This gets called once after the video has ended and the user seeks so that
	   * we can change the replay button back to a play button.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The event that caused this function to run.
	   *
	   * @listens Player#seeked
	   */


	  PlayToggle.prototype.handleSeeked = function handleSeeked(event) {
	    this.removeClass('vjs-ended');

	    if (this.player_.paused()) {
	      this.handlePause(event);
	    } else {
	      this.handlePlay(event);
	    }
	  };

	  /**
	   * Add the vjs-playing class to the element so it can change appearance.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The event that caused this function to run.
	   *
	   * @listens Player#play
	   */


	  PlayToggle.prototype.handlePlay = function handlePlay(event) {
	    this.removeClass('vjs-ended');
	    this.removeClass('vjs-paused');
	    this.addClass('vjs-playing');
	    // change the button text to "Pause"
	    this.controlText('Pause');
	  };

	  /**
	   * Add the vjs-paused class to the element so it can change appearance.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The event that caused this function to run.
	   *
	   * @listens Player#pause
	   */


	  PlayToggle.prototype.handlePause = function handlePause(event) {
	    this.removeClass('vjs-playing');
	    this.addClass('vjs-paused');
	    // change the button text to "Play"
	    this.controlText('Play');
	  };

	  /**
	   * Add the vjs-ended class to the element so it can change appearance
	   *
	   * @param {EventTarget~Event} [event]
	   *        The event that caused this function to run.
	   *
	   * @listens Player#ended
	   */


	  PlayToggle.prototype.handleEnded = function handleEnded(event) {
	    this.removeClass('vjs-playing');
	    this.addClass('vjs-ended');
	    // change the button text to "Replay"
	    this.controlText('Replay');

	    // on the next seek remove the replay button
	    this.one(this.player_, 'seeked', this.handleSeeked);
	  };

	  return PlayToggle;
	}(Button);

	/**
	 * The text that should display over the `PlayToggle`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	PlayToggle.prototype.controlText_ = 'Play';

	Component.registerComponent('PlayToggle', PlayToggle);

	/**
	 * @file format-time.js
	 * @module format-time
	 */

	/**
	* Format seconds as a time string, H:MM:SS or M:SS. Supplying a guide (in seconds)
	* will force a number of leading zeros to cover the length of the guide.
	*
	* @param {number} seconds
	*        Number of seconds to be turned into a string
	*
	* @param {number} guide
	*        Number (in seconds) to model the string after
	*
	* @return {string}
	*         Time formatted as H:MM:SS or M:SS
	*/
	var defaultImplementation = function defaultImplementation(seconds, guide) {
	  seconds = seconds < 0 ? 0 : seconds;
	  var s = Math.floor(seconds % 60);
	  var m = Math.floor(seconds / 60 % 60);
	  var h = Math.floor(seconds / 3600);
	  var gm = Math.floor(guide / 60 % 60);
	  var gh = Math.floor(guide / 3600);

	  // handle invalid times
	  if (isNaN(seconds) || seconds === Infinity) {
	    // '-' is false for all relational operators (e.g. <, >=) so this setting
	    // will add the minimum number of fields specified by the guide
	    h = m = s = '-';
	  }

	  // Check if we need to show hours
	  h = h > 0 || gh > 0 ? h + ':' : '';

	  // If hours are showing, we may need to add a leading zero.
	  // Always show at least one digit of minutes.
	  m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';

	  // Check if leading zero is need for seconds
	  s = s < 10 ? '0' + s : s;

	  return h + m + s;
	};

	var implementation = defaultImplementation;

	/**
	 * Replaces the default formatTime implementation with a custom implementation.
	 *
	 * @param {Function} customImplementation
	 *        A function which will be used in place of the default formatTime implementation.
	 *        Will receive the current time in seconds and the guide (in seconds) as arguments.
	 */
	function setFormatTime(customImplementation) {
	  implementation = customImplementation;
	}

	/**
	 * Resets formatTime to the default implementation.
	 */
	function resetFormatTime() {
	  implementation = defaultImplementation;
	}

	var formatTime = function (seconds) {
	  var guide = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : seconds;

	  return implementation(seconds, guide);
	};

	/**
	 * @file time-display.js
	 */
	/**
	 * Displays the time left in the video
	 *
	 * @extends Component
	 */

	var TimeDisplay = function (_Component) {
	  inherits(TimeDisplay, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function TimeDisplay(player, options) {
	    classCallCheck(this, TimeDisplay);

	    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.throttledUpdateContent = throttle(bind(_this, _this.updateContent), 25);
	    _this.on(player, 'timeupdate', _this.throttledUpdateContent);
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  TimeDisplay.prototype.createEl = function createEl$$1(plainName) {
	    var className = this.buildCSSClass();
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: className + ' vjs-time-control vjs-control',
	      innerHTML: '<span class="vjs-control-text">' + this.localize(this.labelText_) + '\xA0</span>'
	    });

	    this.contentEl_ = createEl('span', {
	      className: className + '-display'
	    }, {
	      // tell screen readers not to automatically read the time as it changes
	      'aria-live': 'off'
	    });

	    this.updateTextNode_();
	    el.appendChild(this.contentEl_);
	    return el;
	  };

	  TimeDisplay.prototype.dispose = function dispose() {
	    this.contentEl_ = null;
	    this.textNode_ = null;

	    _Component.prototype.dispose.call(this);
	  };

	  /**
	   * Updates the "remaining time" text node with new content using the
	   * contents of the `formattedTime_` property.
	   *
	   * @private
	   */


	  TimeDisplay.prototype.updateTextNode_ = function updateTextNode_() {
	    if (!this.contentEl_) {
	      return;
	    }

	    while (this.contentEl_.firstChild) {
	      this.contentEl_.removeChild(this.contentEl_.firstChild);
	    }

	    this.textNode_ = document.createTextNode(this.formattedTime_ || this.formatTime_(0));
	    this.contentEl_.appendChild(this.textNode_);
	  };

	  /**
	   * Generates a formatted time for this component to use in display.
	   *
	   * @param  {number} time
	   *         A numeric time, in seconds.
	   *
	   * @return {string}
	   *         A formatted time
	   *
	   * @private
	   */


	  TimeDisplay.prototype.formatTime_ = function formatTime_(time) {
	    return formatTime(time);
	  };

	  /**
	   * Updates the time display text node if it has what was passed in changed
	   * the formatted time.
	   *
	   * @param {number} time
	   *        The time to update to
	   *
	   * @private
	   */


	  TimeDisplay.prototype.updateFormattedTime_ = function updateFormattedTime_(time) {
	    var formattedTime = this.formatTime_(time);

	    if (formattedTime === this.formattedTime_) {
	      return;
	    }

	    this.formattedTime_ = formattedTime;
	    this.requestAnimationFrame(this.updateTextNode_);
	  };

	  /**
	   * To be filled out in the child class, should update the displayed time
	   * in accordance with the fact that the current time has changed.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `timeupdate`  event that caused this to run.
	   *
	   * @listens Player#timeupdate
	   */


	  TimeDisplay.prototype.updateContent = function updateContent(event) {};

	  return TimeDisplay;
	}(Component);

	/**
	 * The text that is added to the `TimeDisplay` for screen reader users.
	 *
	 * @type {string}
	 * @private
	 */


	TimeDisplay.prototype.labelText_ = 'Time';

	/**
	 * The text that should display over the `TimeDisplay`s controls. Added to for localization.
	 *
	 * @type {string}
	 * @private
	 *
	 * @deprecated in v7; controlText_ is not used in non-active display Components
	 */
	TimeDisplay.prototype.controlText_ = 'Time';

	Component.registerComponent('TimeDisplay', TimeDisplay);

	/**
	 * @file current-time-display.js
	 */
	/**
	 * Displays the current time
	 *
	 * @extends Component
	 */

	var CurrentTimeDisplay = function (_TimeDisplay) {
	  inherits(CurrentTimeDisplay, _TimeDisplay);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function CurrentTimeDisplay(player, options) {
	    classCallCheck(this, CurrentTimeDisplay);

	    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));

	    _this.on(player, 'ended', _this.handleEnded);
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  CurrentTimeDisplay.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-current-time';
	  };

	  /**
	   * Update current time display
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `timeupdate` event that caused this function to run.
	   *
	   * @listens Player#timeupdate
	   */


	  CurrentTimeDisplay.prototype.updateContent = function updateContent(event) {
	    // Allows for smooth scrubbing, when player can't keep up.
	    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();

	    this.updateFormattedTime_(time);
	  };

	  /**
	   * When the player fires ended there should be no time left. Sadly
	   * this is not always the case, lets make it seem like that is the case
	   * for users.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `ended` event that caused this to run.
	   *
	   * @listens Player#ended
	   */


	  CurrentTimeDisplay.prototype.handleEnded = function handleEnded(event) {
	    if (!this.player_.duration()) {
	      return;
	    }
	    this.updateFormattedTime_(this.player_.duration());
	  };

	  return CurrentTimeDisplay;
	}(TimeDisplay);

	/**
	 * The text that is added to the `CurrentTimeDisplay` for screen reader users.
	 *
	 * @type {string}
	 * @private
	 */


	CurrentTimeDisplay.prototype.labelText_ = 'Current Time';

	/**
	 * The text that should display over the `CurrentTimeDisplay`s controls. Added to for localization.
	 *
	 * @type {string}
	 * @private
	 *
	 * @deprecated in v7; controlText_ is not used in non-active display Components
	 */
	CurrentTimeDisplay.prototype.controlText_ = 'Current Time';

	Component.registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);

	/**
	 * @file duration-display.js
	 */
	/**
	 * Displays the duration
	 *
	 * @extends Component
	 */

	var DurationDisplay = function (_TimeDisplay) {
	  inherits(DurationDisplay, _TimeDisplay);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function DurationDisplay(player, options) {
	    classCallCheck(this, DurationDisplay);

	    // we do not want to/need to throttle duration changes,
	    // as they should always display the changed duration as
	    // it has changed
	    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));

	    _this.on(player, 'durationchange', _this.updateContent);

	    // Also listen for timeupdate (in the parent) and loadedmetadata because removing those
	    // listeners could have broken dependent applications/libraries. These
	    // can likely be removed for 7.0.
	    _this.on(player, 'loadedmetadata', _this.throttledUpdateContent);
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  DurationDisplay.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-duration';
	  };

	  /**
	   * Update duration time display.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `durationchange`, `timeupdate`, or `loadedmetadata` event that caused
	   *        this function to be called.
	   *
	   * @listens Player#durationchange
	   * @listens Player#timeupdate
	   * @listens Player#loadedmetadata
	   */


	  DurationDisplay.prototype.updateContent = function updateContent(event) {
	    var duration = this.player_.duration();

	    if (duration && this.duration_ !== duration) {
	      this.duration_ = duration;
	      this.updateFormattedTime_(duration);
	    }
	  };

	  return DurationDisplay;
	}(TimeDisplay);

	/**
	 * The text that is added to the `DurationDisplay` for screen reader users.
	 *
	 * @type {string}
	 * @private
	 */


	DurationDisplay.prototype.labelText_ = 'Duration';

	/**
	 * The text that should display over the `DurationDisplay`s controls. Added to for localization.
	 *
	 * @type {string}
	 * @private
	 *
	 * @deprecated in v7; controlText_ is not used in non-active display Components
	 */
	DurationDisplay.prototype.controlText_ = 'Duration';

	Component.registerComponent('DurationDisplay', DurationDisplay);

	/**
	 * @file time-divider.js
	 */
	/**
	 * The separator between the current time and duration.
	 * Can be hidden if it's not needed in the design.
	 *
	 * @extends Component
	 */

	var TimeDivider = function (_Component) {
	  inherits(TimeDivider, _Component);

	  function TimeDivider() {
	    classCallCheck(this, TimeDivider);
	    return possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */
	  TimeDivider.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-time-control vjs-time-divider',
	      innerHTML: '<div><span>/</span></div>'
	    });
	  };

	  return TimeDivider;
	}(Component);

	Component.registerComponent('TimeDivider', TimeDivider);

	/**
	 * @file remaining-time-display.js
	 */
	/**
	 * Displays the time left in the video
	 *
	 * @extends Component
	 */

	var RemainingTimeDisplay = function (_TimeDisplay) {
	  inherits(RemainingTimeDisplay, _TimeDisplay);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function RemainingTimeDisplay(player, options) {
	    classCallCheck(this, RemainingTimeDisplay);

	    var _this = possibleConstructorReturn(this, _TimeDisplay.call(this, player, options));

	    _this.on(player, 'durationchange', _this.throttledUpdateContent);
	    _this.on(player, 'ended', _this.handleEnded);
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  RemainingTimeDisplay.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-remaining-time';
	  };

	  /**
	   * The remaining time display prefixes numbers with a "minus" character.
	   *
	   * @param  {number} time
	   *         A numeric time, in seconds.
	   *
	   * @return {string}
	   *         A formatted time
	   *
	   * @private
	   */


	  RemainingTimeDisplay.prototype.formatTime_ = function formatTime_(time) {
	    // TODO: The "-" should be decorative, and not announced by a screen reader
	    return '-' + _TimeDisplay.prototype.formatTime_.call(this, time);
	  };

	  /**
	   * Update remaining time display.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `timeupdate` or `durationchange` event that caused this to run.
	   *
	   * @listens Player#timeupdate
	   * @listens Player#durationchange
	   */


	  RemainingTimeDisplay.prototype.updateContent = function updateContent(event) {
	    if (!this.player_.duration()) {
	      return;
	    }

	    // @deprecated We should only use remainingTimeDisplay
	    // as of video.js 7
	    if (this.player_.remainingTimeDisplay) {
	      this.updateFormattedTime_(this.player_.remainingTimeDisplay());
	    } else {
	      this.updateFormattedTime_(this.player_.remainingTime());
	    }
	  };

	  /**
	   * When the player fires ended there should be no time left. Sadly
	   * this is not always the case, lets make it seem like that is the case
	   * for users.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `ended` event that caused this to run.
	   *
	   * @listens Player#ended
	   */


	  RemainingTimeDisplay.prototype.handleEnded = function handleEnded(event) {
	    if (!this.player_.duration()) {
	      return;
	    }
	    this.updateFormattedTime_(0);
	  };

	  return RemainingTimeDisplay;
	}(TimeDisplay);

	/**
	 * The text that is added to the `RemainingTimeDisplay` for screen reader users.
	 *
	 * @type {string}
	 * @private
	 */


	RemainingTimeDisplay.prototype.labelText_ = 'Remaining Time';

	/**
	 * The text that should display over the `RemainingTimeDisplay`s controls. Added to for localization.
	 *
	 * @type {string}
	 * @private
	 *
	 * @deprecated in v7; controlText_ is not used in non-active display Components
	 */
	RemainingTimeDisplay.prototype.controlText_ = 'Remaining Time';

	Component.registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);

	/**
	 * @file live-display.js
	 */
	// TODO - Future make it click to snap to live

	/**
	 * Displays the live indicator when duration is Infinity.
	 *
	 * @extends Component
	 */

	var LiveDisplay = function (_Component) {
	  inherits(LiveDisplay, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function LiveDisplay(player, options) {
	    classCallCheck(this, LiveDisplay);

	    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.updateShowing();
	    _this.on(_this.player(), 'durationchange', _this.updateShowing);
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  LiveDisplay.prototype.createEl = function createEl$$1() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-live-control vjs-control'
	    });

	    this.contentEl_ = createEl('div', {
	      className: 'vjs-live-display',
	      innerHTML: '<span class="vjs-control-text">' + this.localize('Stream Type') + '\xA0</span>' + this.localize('LIVE')
	    }, {
	      'aria-live': 'off'
	    });

	    el.appendChild(this.contentEl_);
	    return el;
	  };

	  LiveDisplay.prototype.dispose = function dispose() {
	    this.contentEl_ = null;

	    _Component.prototype.dispose.call(this);
	  };

	  /**
	   * Check the duration to see if the LiveDisplay should be showing or not. Then show/hide
	   * it accordingly
	   *
	   * @param {EventTarget~Event} [event]
	   *        The {@link Player#durationchange} event that caused this function to run.
	   *
	   * @listens Player#durationchange
	   */


	  LiveDisplay.prototype.updateShowing = function updateShowing(event) {
	    if (this.player().duration() === Infinity) {
	      this.show();
	    } else {
	      this.hide();
	    }
	  };

	  return LiveDisplay;
	}(Component);

	Component.registerComponent('LiveDisplay', LiveDisplay);

	/**
	 * @file slider.js
	 */
	/**
	 * The base functionality for a slider. Can be vertical or horizontal.
	 * For instance the volume bar or the seek bar on a video is a slider.
	 *
	 * @extends Component
	 */

	var Slider = function (_Component) {
	  inherits(Slider, _Component);

	  /**
	   * Create an instance of this class
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function Slider(player, options) {
	    classCallCheck(this, Slider);

	    // Set property names to bar to match with the child Slider class is looking for
	    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.bar = _this.getChild(_this.options_.barName);

	    // Set a horizontal or vertical class on the slider depending on the slider type
	    _this.vertical(!!_this.options_.vertical);

	    _this.enable();
	    return _this;
	  }

	  /**
	   * Are controls are currently enabled for this slider or not.
	   *
	   * @return {boolean}
	   *         true if controls are enabled, false otherwise
	   */


	  Slider.prototype.enabled = function enabled() {
	    return this.enabled_;
	  };

	  /**
	   * Enable controls for this slider if they are disabled
	   */


	  Slider.prototype.enable = function enable() {
	    if (this.enabled()) {
	      return;
	    }

	    this.on('mousedown', this.handleMouseDown);
	    this.on('touchstart', this.handleMouseDown);
	    this.on('focus', this.handleFocus);
	    this.on('blur', this.handleBlur);
	    this.on('click', this.handleClick);

	    this.on(this.player_, 'controlsvisible', this.update);

	    if (this.playerEvent) {
	      this.on(this.player_, this.playerEvent, this.update);
	    }

	    this.removeClass('disabled');
	    this.setAttribute('tabindex', 0);

	    this.enabled_ = true;
	  };

	  /**
	   * Disable controls for this slider if they are enabled
	   */


	  Slider.prototype.disable = function disable() {
	    if (!this.enabled()) {
	      return;
	    }
	    var doc = this.bar.el_.ownerDocument;

	    this.off('mousedown', this.handleMouseDown);
	    this.off('touchstart', this.handleMouseDown);
	    this.off('focus', this.handleFocus);
	    this.off('blur', this.handleBlur);
	    this.off('click', this.handleClick);
	    this.off(this.player_, 'controlsvisible', this.update);
	    this.off(doc, 'mousemove', this.handleMouseMove);
	    this.off(doc, 'mouseup', this.handleMouseUp);
	    this.off(doc, 'touchmove', this.handleMouseMove);
	    this.off(doc, 'touchend', this.handleMouseUp);
	    this.removeAttribute('tabindex');

	    this.addClass('disabled');

	    if (this.playerEvent) {
	      this.off(this.player_, this.playerEvent, this.update);
	    }
	    this.enabled_ = false;
	  };

	  /**
	   * Create the `Button`s DOM element.
	   *
	   * @param {string} type
	   *        Type of element to create.
	   *
	   * @param {Object} [props={}]
	   *        List of properties in Object form.
	   *
	   * @param {Object} [attributes={}]
	   *        list of attributes in Object form.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  Slider.prototype.createEl = function createEl$$1(type) {
	    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	    // Add the slider element class to all sub classes
	    props.className = props.className + ' vjs-slider';
	    props = assign({
	      tabIndex: 0
	    }, props);

	    attributes = assign({
	      'role': 'slider',
	      'aria-valuenow': 0,
	      'aria-valuemin': 0,
	      'aria-valuemax': 100,
	      'tabIndex': 0
	    }, attributes);

	    return _Component.prototype.createEl.call(this, type, props, attributes);
	  };

	  /**
	   * Handle `mousedown` or `touchstart` events on the `Slider`.
	   *
	   * @param {EventTarget~Event} event
	   *        `mousedown` or `touchstart` event that triggered this function
	   *
	   * @listens mousedown
	   * @listens touchstart
	   * @fires Slider#slideractive
	   */


	  Slider.prototype.handleMouseDown = function handleMouseDown(event) {
	    var doc = this.bar.el_.ownerDocument;

	    if (event.type === 'mousedown') {
	      event.preventDefault();
	    }
	    // Do not call preventDefault() on touchstart in Chrome
	    // to avoid console warnings. Use a 'touch-action: none' style
	    // instead to prevent unintented scrolling.
	    // https://developers.google.com/web/updates/2017/01/scrolling-intervention
	    if (event.type === 'touchstart' && !IS_CHROME) {
	      event.preventDefault();
	    }
	    blockTextSelection();

	    this.addClass('vjs-sliding');
	    /**
	     * Triggered when the slider is in an active state
	     *
	     * @event Slider#slideractive
	     * @type {EventTarget~Event}
	     */
	    this.trigger('slideractive');

	    this.on(doc, 'mousemove', this.handleMouseMove);
	    this.on(doc, 'mouseup', this.handleMouseUp);
	    this.on(doc, 'touchmove', this.handleMouseMove);
	    this.on(doc, 'touchend', this.handleMouseUp);

	    this.handleMouseMove(event);
	  };

	  /**
	   * Handle the `mousemove`, `touchmove`, and `mousedown` events on this `Slider`.
	   * The `mousemove` and `touchmove` events will only only trigger this function during
	   * `mousedown` and `touchstart`. This is due to {@link Slider#handleMouseDown} and
	   * {@link Slider#handleMouseUp}.
	   *
	   * @param {EventTarget~Event} event
	   *        `mousedown`, `mousemove`, `touchstart`, or `touchmove` event that triggered
	   *        this function
	   *
	   * @listens mousemove
	   * @listens touchmove
	   */


	  Slider.prototype.handleMouseMove = function handleMouseMove(event) {};

	  /**
	   * Handle `mouseup` or `touchend` events on the `Slider`.
	   *
	   * @param {EventTarget~Event} event
	   *        `mouseup` or `touchend` event that triggered this function.
	   *
	   * @listens touchend
	   * @listens mouseup
	   * @fires Slider#sliderinactive
	   */


	  Slider.prototype.handleMouseUp = function handleMouseUp() {
	    var doc = this.bar.el_.ownerDocument;

	    unblockTextSelection();

	    this.removeClass('vjs-sliding');
	    /**
	     * Triggered when the slider is no longer in an active state.
	     *
	     * @event Slider#sliderinactive
	     * @type {EventTarget~Event}
	     */
	    this.trigger('sliderinactive');

	    this.off(doc, 'mousemove', this.handleMouseMove);
	    this.off(doc, 'mouseup', this.handleMouseUp);
	    this.off(doc, 'touchmove', this.handleMouseMove);
	    this.off(doc, 'touchend', this.handleMouseUp);

	    this.update();
	  };

	  /**
	   * Update the progress bar of the `Slider`.
	   *
	   * @returns {number}
	   *          The percentage of progress the progress bar represents as a
	   *          number from 0 to 1.
	   */


	  Slider.prototype.update = function update() {

	    // In VolumeBar init we have a setTimeout for update that pops and update
	    // to the end of the execution stack. The player is destroyed before then
	    // update will cause an error
	    if (!this.el_) {
	      return;
	    }

	    // If scrubbing, we could use a cached value to make the handle keep up
	    // with the user's mouse. On HTML5 browsers scrubbing is really smooth, but
	    // some flash players are slow, so we might want to utilize this later.
	    // var progress =  (this.player_.scrubbing()) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();
	    var progress = this.getPercent();
	    var bar = this.bar;

	    // If there's no bar...
	    if (!bar) {
	      return;
	    }

	    // Protect against no duration and other division issues
	    if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {
	      progress = 0;
	    }

	    // Convert to a percentage for setting
	    var percentage = (progress * 100).toFixed(2) + '%';
	    var style = bar.el().style;

	    // Set the new bar width or height
	    if (this.vertical()) {
	      style.height = percentage;
	    } else {
	      style.width = percentage;
	    }

	    return progress;
	  };

	  /**
	   * Calculate distance for slider
	   *
	   * @param {EventTarget~Event} event
	   *        The event that caused this function to run.
	   *
	   * @return {number}
	   *         The current position of the Slider.
	   *         - postition.x for vertical `Slider`s
	   *         - postition.y for horizontal `Slider`s
	   */


	  Slider.prototype.calculateDistance = function calculateDistance(event) {
	    var position = getPointerPosition(this.el_, event);

	    if (this.vertical()) {
	      return position.y;
	    }
	    return position.x;
	  };

	  /**
	   * Handle a `focus` event on this `Slider`.
	   *
	   * @param {EventTarget~Event} event
	   *        The `focus` event that caused this function to run.
	   *
	   * @listens focus
	   */


	  Slider.prototype.handleFocus = function handleFocus() {
	    this.on(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
	  };

	  /**
	   * Handle a `keydown` event on the `Slider`. Watches for left, rigth, up, and down
	   * arrow keys. This function will only be called when the slider has focus. See
	   * {@link Slider#handleFocus} and {@link Slider#handleBlur}.
	   *
	   * @param {EventTarget~Event} event
	   *        the `keydown` event that caused this function to run.
	   *
	   * @listens keydown
	   */


	  Slider.prototype.handleKeyPress = function handleKeyPress(event) {
	    // Left and Down Arrows
	    if (event.which === 37 || event.which === 40) {
	      event.preventDefault();
	      this.stepBack();

	      // Up and Right Arrows
	    } else if (event.which === 38 || event.which === 39) {
	      event.preventDefault();
	      this.stepForward();
	    }
	  };

	  /**
	   * Handle a `blur` event on this `Slider`.
	   *
	   * @param {EventTarget~Event} event
	   *        The `blur` event that caused this function to run.
	   *
	   * @listens blur
	   */

	  Slider.prototype.handleBlur = function handleBlur() {
	    this.off(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
	  };

	  /**
	   * Listener for click events on slider, used to prevent clicks
	   *   from bubbling up to parent elements like button menus.
	   *
	   * @param {Object} event
	   *        Event that caused this object to run
	   */


	  Slider.prototype.handleClick = function handleClick(event) {
	    event.stopImmediatePropagation();
	    event.preventDefault();
	  };

	  /**
	   * Get/set if slider is horizontal for vertical
	   *
	   * @param {boolean} [bool]
	   *        - true if slider is vertical,
	   *        - false is horizontal
	   *
	   * @return {boolean}
	   *         - true if slider is vertical, and getting
	   *         - false if the slider is horizontal, and getting
	   */


	  Slider.prototype.vertical = function vertical(bool) {
	    if (bool === undefined) {
	      return this.vertical_ || false;
	    }

	    this.vertical_ = !!bool;

	    if (this.vertical_) {
	      this.addClass('vjs-slider-vertical');
	    } else {
	      this.addClass('vjs-slider-horizontal');
	    }
	  };

	  return Slider;
	}(Component);

	Component.registerComponent('Slider', Slider);

	/**
	 * @file load-progress-bar.js
	 */
	/**
	 * Shows loading progress
	 *
	 * @extends Component
	 */

	var LoadProgressBar = function (_Component) {
	  inherits(LoadProgressBar, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function LoadProgressBar(player, options) {
	    classCallCheck(this, LoadProgressBar);

	    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.partEls_ = [];
	    _this.on(player, 'progress', _this.update);
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  LoadProgressBar.prototype.createEl = function createEl$$1() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-load-progress',
	      innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Loaded') + '</span>: 0%</span>'
	    });
	  };

	  LoadProgressBar.prototype.dispose = function dispose() {
	    this.partEls_ = null;

	    _Component.prototype.dispose.call(this);
	  };

	  /**
	   * Update progress bar
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `progress` event that caused this function to run.
	   *
	   * @listens Player#progress
	   */


	  LoadProgressBar.prototype.update = function update(event) {
	    var buffered = this.player_.buffered();
	    var duration = this.player_.duration();
	    var bufferedEnd = this.player_.bufferedEnd();
	    var children = this.partEls_;

	    // get the percent width of a time compared to the total end
	    var percentify = function percentify(time, end) {
	      // no NaN
	      var percent = time / end || 0;

	      return (percent >= 1 ? 1 : percent) * 100 + '%';
	    };

	    // update the width of the progress bar
	    this.el_.style.width = percentify(bufferedEnd, duration);

	    // add child elements to represent the individual buffered time ranges
	    for (var i = 0; i < buffered.length; i++) {
	      var start = buffered.start(i);
	      var end = buffered.end(i);
	      var part = children[i];

	      if (!part) {
	        part = this.el_.appendChild(createEl());
	        children[i] = part;
	      }

	      // set the percent based on the width of the progress bar (bufferedEnd)
	      part.style.left = percentify(start, bufferedEnd);
	      part.style.width = percentify(end - start, bufferedEnd);
	    }

	    // remove unused buffered range elements
	    for (var _i = children.length; _i > buffered.length; _i--) {
	      this.el_.removeChild(children[_i - 1]);
	    }
	    children.length = buffered.length;
	  };

	  return LoadProgressBar;
	}(Component);

	Component.registerComponent('LoadProgressBar', LoadProgressBar);

	/**
	 * @file time-tooltip.js
	 */
	/**
	 * Time tooltips display a time above the progress bar.
	 *
	 * @extends Component
	 */

	var TimeTooltip = function (_Component) {
	  inherits(TimeTooltip, _Component);

	  function TimeTooltip() {
	    classCallCheck(this, TimeTooltip);
	    return possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Create the time tooltip DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */
	  TimeTooltip.prototype.createEl = function createEl$$1() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-time-tooltip'
	    });
	  };

	  /**
	   * Updates the position of the time tooltip relative to the `SeekBar`.
	   *
	   * @param {Object} seekBarRect
	   *        The `ClientRect` for the {@link SeekBar} element.
	   *
	   * @param {number} seekBarPoint
	   *        A number from 0 to 1, representing a horizontal reference point
	   *        from the left edge of the {@link SeekBar}
	   */


	  TimeTooltip.prototype.update = function update(seekBarRect, seekBarPoint, content) {
	    var tooltipRect = getBoundingClientRect(this.el_);
	    var playerRect = getBoundingClientRect(this.player_.el());
	    var seekBarPointPx = seekBarRect.width * seekBarPoint;

	    // do nothing if either rect isn't available
	    // for example, if the player isn't in the DOM for testing
	    if (!playerRect || !tooltipRect) {
	      return;
	    }

	    // This is the space left of the `seekBarPoint` available within the bounds
	    // of the player. We calculate any gap between the left edge of the player
	    // and the left edge of the `SeekBar` and add the number of pixels in the
	    // `SeekBar` before hitting the `seekBarPoint`
	    var spaceLeftOfPoint = seekBarRect.left - playerRect.left + seekBarPointPx;

	    // This is the space right of the `seekBarPoint` available within the bounds
	    // of the player. We calculate the number of pixels from the `seekBarPoint`
	    // to the right edge of the `SeekBar` and add to that any gap between the
	    // right edge of the `SeekBar` and the player.
	    var spaceRightOfPoint = seekBarRect.width - seekBarPointPx + (playerRect.right - seekBarRect.right);

	    // This is the number of pixels by which the tooltip will need to be pulled
	    // further to the right to center it over the `seekBarPoint`.
	    var pullTooltipBy = tooltipRect.width / 2;

	    // Adjust the `pullTooltipBy` distance to the left or right depending on
	    // the results of the space calculations above.
	    if (spaceLeftOfPoint < pullTooltipBy) {
	      pullTooltipBy += pullTooltipBy - spaceLeftOfPoint;
	    } else if (spaceRightOfPoint < pullTooltipBy) {
	      pullTooltipBy = spaceRightOfPoint;
	    }

	    // Due to the imprecision of decimal/ratio based calculations and varying
	    // rounding behaviors, there are cases where the spacing adjustment is off
	    // by a pixel or two. This adds insurance to these calculations.
	    if (pullTooltipBy < 0) {
	      pullTooltipBy = 0;
	    } else if (pullTooltipBy > tooltipRect.width) {
	      pullTooltipBy = tooltipRect.width;
	    }

	    this.el_.style.right = '-' + pullTooltipBy + 'px';
	    textContent(this.el_, content);
	  };

	  return TimeTooltip;
	}(Component);

	Component.registerComponent('TimeTooltip', TimeTooltip);

	/**
	 * @file play-progress-bar.js
	 */
	/**
	 * Used by {@link SeekBar} to display media playback progress as part of the
	 * {@link ProgressControl}.
	 *
	 * @extends Component
	 */

	var PlayProgressBar = function (_Component) {
	  inherits(PlayProgressBar, _Component);

	  function PlayProgressBar() {
	    classCallCheck(this, PlayProgressBar);
	    return possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Create the the DOM element for this class.
	   *
	   * @return {Element}
	   *         The element that was created.
	   */
	  PlayProgressBar.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-play-progress vjs-slider-bar',
	      innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
	    });
	  };

	  /**
	   * Enqueues updates to its own DOM as well as the DOM of its
	   * {@link TimeTooltip} child.
	   *
	   * @param {Object} seekBarRect
	   *        The `ClientRect` for the {@link SeekBar} element.
	   *
	   * @param {number} seekBarPoint
	   *        A number from 0 to 1, representing a horizontal reference point
	   *        from the left edge of the {@link SeekBar}
	   */


	  PlayProgressBar.prototype.update = function update(seekBarRect, seekBarPoint) {
	    var _this2 = this;

	    // If there is an existing rAF ID, cancel it so we don't over-queue.
	    if (this.rafId_) {
	      this.cancelAnimationFrame(this.rafId_);
	    }

	    this.rafId_ = this.requestAnimationFrame(function () {
	      var time = _this2.player_.scrubbing() ? _this2.player_.getCache().currentTime : _this2.player_.currentTime();

	      var content = formatTime(time, _this2.player_.duration());
	      var timeTooltip = _this2.getChild('timeTooltip');

	      if (timeTooltip) {
	        timeTooltip.update(seekBarRect, seekBarPoint, content);
	      }
	    });
	  };

	  return PlayProgressBar;
	}(Component);

	/**
	 * Default options for {@link PlayProgressBar}.
	 *
	 * @type {Object}
	 * @private
	 */


	PlayProgressBar.prototype.options_ = {
	  children: []
	};

	// Time tooltips should not be added to a player on mobile devices or IE8
	if ((!IE_VERSION || IE_VERSION > 8) && !IS_IOS && !IS_ANDROID) {
	  PlayProgressBar.prototype.options_.children.push('timeTooltip');
	}

	Component.registerComponent('PlayProgressBar', PlayProgressBar);

	/**
	 * @file mouse-time-display.js
	 */
	/**
	 * The {@link MouseTimeDisplay} component tracks mouse movement over the
	 * {@link ProgressControl}. It displays an indicator and a {@link TimeTooltip}
	 * indicating the time which is represented by a given point in the
	 * {@link ProgressControl}.
	 *
	 * @extends Component
	 */

	var MouseTimeDisplay = function (_Component) {
	  inherits(MouseTimeDisplay, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The {@link Player} that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function MouseTimeDisplay(player, options) {
	    classCallCheck(this, MouseTimeDisplay);

	    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.update = throttle(bind(_this, _this.update), 25);
	    return _this;
	  }

	  /**
	   * Create the DOM element for this class.
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  MouseTimeDisplay.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-mouse-display'
	    });
	  };

	  /**
	   * Enqueues updates to its own DOM as well as the DOM of its
	   * {@link TimeTooltip} child.
	   *
	   * @param {Object} seekBarRect
	   *        The `ClientRect` for the {@link SeekBar} element.
	   *
	   * @param {number} seekBarPoint
	   *        A number from 0 to 1, representing a horizontal reference point
	   *        from the left edge of the {@link SeekBar}
	   */


	  MouseTimeDisplay.prototype.update = function update(seekBarRect, seekBarPoint) {
	    var _this2 = this;

	    // If there is an existing rAF ID, cancel it so we don't over-queue.
	    if (this.rafId_) {
	      this.cancelAnimationFrame(this.rafId_);
	    }

	    this.rafId_ = this.requestAnimationFrame(function () {
	      var duration = _this2.player_.duration();
	      var content = formatTime(seekBarPoint * duration, duration);

	      _this2.el_.style.left = seekBarRect.width * seekBarPoint + 'px';
	      _this2.getChild('timeTooltip').update(seekBarRect, seekBarPoint, content);
	    });
	  };

	  return MouseTimeDisplay;
	}(Component);

	/**
	 * Default options for `MouseTimeDisplay`
	 *
	 * @type {Object}
	 * @private
	 */


	MouseTimeDisplay.prototype.options_ = {
	  children: ['timeTooltip']
	};

	Component.registerComponent('MouseTimeDisplay', MouseTimeDisplay);

	/**
	 * @file seek-bar.js
	 */
	// The number of seconds the `step*` functions move the timeline.
	var STEP_SECONDS = 5;

	// The interval at which the bar should update as it progresses.
	var UPDATE_REFRESH_INTERVAL = 30;

	/**
	 * Seek bar and container for the progress bars. Uses {@link PlayProgressBar}
	 * as its `bar`.
	 *
	 * @extends Slider
	 */

	var SeekBar = function (_Slider) {
	  inherits(SeekBar, _Slider);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function SeekBar(player, options) {
	    classCallCheck(this, SeekBar);

	    var _this = possibleConstructorReturn(this, _Slider.call(this, player, options));

	    _this.setEventHandlers_();
	    return _this;
	  }

	  /**
	   * Sets the event handlers
	   *
	   * @private
	   */


	  SeekBar.prototype.setEventHandlers_ = function setEventHandlers_() {
	    var _this2 = this;

	    this.update = throttle(bind(this, this.update), UPDATE_REFRESH_INTERVAL);

	    this.on(this.player_, 'timeupdate', this.update);
	    this.on(this.player_, 'ended', this.handleEnded);

	    // when playing, let's ensure we smoothly update the play progress bar
	    // via an interval
	    this.updateInterval = null;

	    this.on(this.player_, ['playing'], function () {
	      _this2.clearInterval(_this2.updateInterval);

	      _this2.updateInterval = _this2.setInterval(function () {
	        _this2.requestAnimationFrame(function () {
	          _this2.update();
	        });
	      }, UPDATE_REFRESH_INTERVAL);
	    });

	    this.on(this.player_, ['ended', 'pause', 'waiting'], function () {
	      _this2.clearInterval(_this2.updateInterval);
	    });

	    this.on(this.player_, ['timeupdate', 'ended'], this.update);
	  };

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  SeekBar.prototype.createEl = function createEl$$1() {
	    return _Slider.prototype.createEl.call(this, 'div', {
	      className: 'vjs-progress-holder'
	    }, {
	      'aria-label': this.localize('Progress Bar')
	    });
	  };

	  /**
	   * This function updates the play progress bar and accessiblity
	   * attributes to whatever is passed in.
	   *
	   * @param {number} currentTime
	   *        The currentTime value that should be used for accessiblity
	   *
	   * @param {number} percent
	   *        The percentage as a decimal that the bar should be filled from 0-1.
	   *
	   * @private
	   */


	  SeekBar.prototype.update_ = function update_(currentTime, percent) {
	    var duration = this.player_.duration();

	    // machine readable value of progress bar (percentage complete)
	    this.el_.setAttribute('aria-valuenow', (percent * 100).toFixed(2));

	    // human readable value of progress bar (time complete)
	    this.el_.setAttribute('aria-valuetext', this.localize('progress bar timing: currentTime={1} duration={2}', [formatTime(currentTime, duration), formatTime(duration, duration)], '{1} of {2}'));

	    // Update the `PlayProgressBar`.
	    this.bar.update(getBoundingClientRect(this.el_), percent);
	  };

	  /**
	   * Update the seek bar's UI.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `timeupdate` or `ended` event that caused this to run.
	   *
	   * @listens Player#timeupdate
	   *
	   * @returns {number}
	   *          The current percent at a number from 0-1
	   */


	  SeekBar.prototype.update = function update(event) {
	    var percent = _Slider.prototype.update.call(this);

	    this.update_(this.getCurrentTime_(), percent);
	    return percent;
	  };

	  /**
	   * Get the value of current time but allows for smooth scrubbing,
	   * when player can't keep up.
	   *
	   * @return {number}
	   *         The current time value to display
	   *
	   * @private
	   */


	  SeekBar.prototype.getCurrentTime_ = function getCurrentTime_() {
	    return this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
	  };

	  /**
	   * We want the seek bar to be full on ended
	   * no matter what the actual internal values are. so we force it.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `timeupdate` or `ended` event that caused this to run.
	   *
	   * @listens Player#ended
	   */


	  SeekBar.prototype.handleEnded = function handleEnded(event) {
	    this.update_(this.player_.duration(), 1);
	  };

	  /**
	   * Get the percentage of media played so far.
	   *
	   * @return {number}
	   *         The percentage of media played so far (0 to 1).
	   */


	  SeekBar.prototype.getPercent = function getPercent() {
	    var percent = this.getCurrentTime_() / this.player_.duration();

	    return percent >= 1 ? 1 : percent;
	  };

	  /**
	   * Handle mouse down on seek bar
	   *
	   * @param {EventTarget~Event} event
	   *        The `mousedown` event that caused this to run.
	   *
	   * @listens mousedown
	   */


	  SeekBar.prototype.handleMouseDown = function handleMouseDown(event) {
	    if (!isSingleLeftClick(event)) {
	      return;
	    }

	    // Stop event propagation to prevent double fire in progress-control.js
	    event.stopPropagation();
	    this.player_.scrubbing(true);

	    this.videoWasPlaying = !this.player_.paused();
	    this.player_.pause();

	    _Slider.prototype.handleMouseDown.call(this, event);
	  };

	  /**
	   * Handle mouse move on seek bar
	   *
	   * @param {EventTarget~Event} event
	   *        The `mousemove` event that caused this to run.
	   *
	   * @listens mousemove
	   */


	  SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {
	    if (!isSingleLeftClick(event)) {
	      return;
	    }

	    var newTime = this.calculateDistance(event) * this.player_.duration();

	    // Don't let video end while scrubbing.
	    if (newTime === this.player_.duration()) {
	      newTime = newTime - 0.1;
	    }

	    // Set new time (tell player to seek to new time)
	    this.player_.currentTime(newTime);
	  };

	  SeekBar.prototype.enable = function enable() {
	    _Slider.prototype.enable.call(this);
	    var mouseTimeDisplay = this.getChild('mouseTimeDisplay');

	    if (!mouseTimeDisplay) {
	      return;
	    }

	    mouseTimeDisplay.show();
	  };

	  SeekBar.prototype.disable = function disable() {
	    _Slider.prototype.disable.call(this);
	    var mouseTimeDisplay = this.getChild('mouseTimeDisplay');

	    if (!mouseTimeDisplay) {
	      return;
	    }

	    mouseTimeDisplay.hide();
	  };

	  /**
	   * Handle mouse up on seek bar
	   *
	   * @param {EventTarget~Event} event
	   *        The `mouseup` event that caused this to run.
	   *
	   * @listens mouseup
	   */


	  SeekBar.prototype.handleMouseUp = function handleMouseUp(event) {
	    _Slider.prototype.handleMouseUp.call(this, event);

	    // Stop event propagation to prevent double fire in progress-control.js
	    if (event) {
	      event.stopPropagation();
	    }
	    this.player_.scrubbing(false);

	    /**
	     * Trigger timeupdate because we're done seeking and the time has changed.
	     * This is particularly useful for if the player is paused to time the time displays.
	     *
	     * @event Tech#timeupdate
	     * @type {EventTarget~Event}
	     */
	    this.player_.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
	    if (this.videoWasPlaying) {
	      silencePromise(this.player_.play());
	    }
	  };

	  /**
	   * Move more quickly fast forward for keyboard-only users
	   */


	  SeekBar.prototype.stepForward = function stepForward() {
	    this.player_.currentTime(this.player_.currentTime() + STEP_SECONDS);
	  };

	  /**
	   * Move more quickly rewind for keyboard-only users
	   */


	  SeekBar.prototype.stepBack = function stepBack() {
	    this.player_.currentTime(this.player_.currentTime() - STEP_SECONDS);
	  };

	  /**
	   * Toggles the playback state of the player
	   * This gets called when enter or space is used on the seekbar
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown` event that caused this function to be called
	   *
	   */


	  SeekBar.prototype.handleAction = function handleAction(event) {
	    if (this.player_.paused()) {
	      this.player_.play();
	    } else {
	      this.player_.pause();
	    }
	  };

	  /**
	   * Called when this SeekBar has focus and a key gets pressed down. By
	   * default it will call `this.handleAction` when the key is space or enter.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown` event that caused this function to be called.
	   *
	   * @listens keydown
	   */


	  SeekBar.prototype.handleKeyPress = function handleKeyPress(event) {

	    // Support Space (32) or Enter (13) key operation to fire a click event
	    if (event.which === 32 || event.which === 13) {
	      event.preventDefault();
	      this.handleAction(event);
	    } else if (_Slider.prototype.handleKeyPress) {

	      // Pass keypress handling up for unsupported keys
	      _Slider.prototype.handleKeyPress.call(this, event);
	    }
	  };

	  return SeekBar;
	}(Slider);

	/**
	 * Default options for the `SeekBar`
	 *
	 * @type {Object}
	 * @private
	 */


	SeekBar.prototype.options_ = {
	  children: ['loadProgressBar', 'playProgressBar'],
	  barName: 'playProgressBar'
	};

	// MouseTimeDisplay tooltips should not be added to a player on mobile devices or IE8
	if ((!IE_VERSION || IE_VERSION > 8) && !IS_IOS && !IS_ANDROID) {
	  SeekBar.prototype.options_.children.splice(1, 0, 'mouseTimeDisplay');
	}

	/**
	 * Call the update event for this Slider when this event happens on the player.
	 *
	 * @type {string}
	 */
	SeekBar.prototype.playerEvent = 'timeupdate';

	Component.registerComponent('SeekBar', SeekBar);

	/**
	 * @file progress-control.js
	 */
	/**
	 * The Progress Control component contains the seek bar, load progress,
	 * and play progress.
	 *
	 * @extends Component
	 */

	var ProgressControl = function (_Component) {
	  inherits(ProgressControl, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function ProgressControl(player, options) {
	    classCallCheck(this, ProgressControl);

	    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.handleMouseMove = throttle(bind(_this, _this.handleMouseMove), 25);
	    _this.throttledHandleMouseSeek = throttle(bind(_this, _this.handleMouseSeek), 25);

	    _this.enable();
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  ProgressControl.prototype.createEl = function createEl$$1() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-progress-control vjs-control'
	    });
	  };

	  /**
	   * When the mouse moves over the `ProgressControl`, the pointer position
	   * gets passed down to the `MouseTimeDisplay` component.
	   *
	   * @param {EventTarget~Event} event
	   *        The `mousemove` event that caused this function to run.
	   *
	   * @listen mousemove
	   */


	  ProgressControl.prototype.handleMouseMove = function handleMouseMove(event) {
	    var seekBar = this.getChild('seekBar');

	    if (seekBar) {
	      var mouseTimeDisplay = seekBar.getChild('mouseTimeDisplay');
	      var seekBarEl = seekBar.el();
	      var seekBarRect = getBoundingClientRect(seekBarEl);
	      var seekBarPoint = getPointerPosition(seekBarEl, event).x;

	      // The default skin has a gap on either side of the `SeekBar`. This means
	      // that it's possible to trigger this behavior outside the boundaries of
	      // the `SeekBar`. This ensures we stay within it at all times.
	      if (seekBarPoint > 1) {
	        seekBarPoint = 1;
	      } else if (seekBarPoint < 0) {
	        seekBarPoint = 0;
	      }

	      if (mouseTimeDisplay) {
	        mouseTimeDisplay.update(seekBarRect, seekBarPoint);
	      }
	    }
	  };

	  /**
	   * A throttled version of the {@link ProgressControl#handleMouseSeek} listener.
	   *
	   * @method ProgressControl#throttledHandleMouseSeek
	   * @param {EventTarget~Event} event
	   *        The `mousemove` event that caused this function to run.
	   *
	   * @listen mousemove
	   * @listen touchmove
	   */

	  /**
	   * Handle `mousemove` or `touchmove` events on the `ProgressControl`.
	   *
	   * @param {EventTarget~Event} event
	   *        `mousedown` or `touchstart` event that triggered this function
	   *
	   * @listens mousemove
	   * @listens touchmove
	   */


	  ProgressControl.prototype.handleMouseSeek = function handleMouseSeek(event) {
	    var seekBar = this.getChild('seekBar');

	    if (seekBar) {
	      seekBar.handleMouseMove(event);
	    }
	  };

	  /**
	   * Are controls are currently enabled for this progress control.
	   *
	   * @return {boolean}
	   *         true if controls are enabled, false otherwise
	   */


	  ProgressControl.prototype.enabled = function enabled() {
	    return this.enabled_;
	  };

	  /**
	   * Disable all controls on the progress control and its children
	   */


	  ProgressControl.prototype.disable = function disable() {
	    this.children().forEach(function (child) {
	      return child.disable && child.disable();
	    });

	    if (!this.enabled()) {
	      return;
	    }

	    this.off(['mousedown', 'touchstart'], this.handleMouseDown);
	    this.off(this.el_, 'mousemove', this.handleMouseMove);
	    this.handleMouseUp();

	    this.addClass('disabled');

	    this.enabled_ = false;
	  };

	  /**
	   * Enable all controls on the progress control and its children
	   */


	  ProgressControl.prototype.enable = function enable() {
	    this.children().forEach(function (child) {
	      return child.enable && child.enable();
	    });

	    if (this.enabled()) {
	      return;
	    }

	    this.on(['mousedown', 'touchstart'], this.handleMouseDown);
	    this.on(this.el_, 'mousemove', this.handleMouseMove);
	    this.removeClass('disabled');

	    this.enabled_ = true;
	  };

	  /**
	   * Handle `mousedown` or `touchstart` events on the `ProgressControl`.
	   *
	   * @param {EventTarget~Event} event
	   *        `mousedown` or `touchstart` event that triggered this function
	   *
	   * @listens mousedown
	   * @listens touchstart
	   */


	  ProgressControl.prototype.handleMouseDown = function handleMouseDown(event) {
	    var doc = this.el_.ownerDocument;
	    var seekBar = this.getChild('seekBar');

	    if (seekBar) {
	      seekBar.handleMouseDown(event);
	    }

	    this.on(doc, 'mousemove', this.throttledHandleMouseSeek);
	    this.on(doc, 'touchmove', this.throttledHandleMouseSeek);
	    this.on(doc, 'mouseup', this.handleMouseUp);
	    this.on(doc, 'touchend', this.handleMouseUp);
	  };

	  /**
	   * Handle `mouseup` or `touchend` events on the `ProgressControl`.
	   *
	   * @param {EventTarget~Event} event
	   *        `mouseup` or `touchend` event that triggered this function.
	   *
	   * @listens touchend
	   * @listens mouseup
	   */


	  ProgressControl.prototype.handleMouseUp = function handleMouseUp(event) {
	    var doc = this.el_.ownerDocument;
	    var seekBar = this.getChild('seekBar');

	    if (seekBar) {
	      seekBar.handleMouseUp(event);
	    }

	    this.off(doc, 'mousemove', this.throttledHandleMouseSeek);
	    this.off(doc, 'touchmove', this.throttledHandleMouseSeek);
	    this.off(doc, 'mouseup', this.handleMouseUp);
	    this.off(doc, 'touchend', this.handleMouseUp);
	  };

	  return ProgressControl;
	}(Component);

	/**
	 * Default options for `ProgressControl`
	 *
	 * @type {Object}
	 * @private
	 */


	ProgressControl.prototype.options_ = {
	  children: ['seekBar']
	};

	Component.registerComponent('ProgressControl', ProgressControl);

	/**
	 * @file fullscreen-toggle.js
	 */
	/**
	 * Toggle fullscreen video
	 *
	 * @extends Button
	 */

	var FullscreenToggle = function (_Button) {
	  inherits(FullscreenToggle, _Button);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function FullscreenToggle(player, options) {
	    classCallCheck(this, FullscreenToggle);

	    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

	    _this.on(player, 'fullscreenchange', _this.handleFullscreenChange);

	    if (document[FullscreenApi.fullscreenEnabled] === false) {
	      _this.disable();
	    }
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  FullscreenToggle.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-fullscreen-control ' + _Button.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Handles fullscreenchange on the player and change control text accordingly.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The {@link Player#fullscreenchange} event that caused this function to be
	   *        called.
	   *
	   * @listens Player#fullscreenchange
	   */


	  FullscreenToggle.prototype.handleFullscreenChange = function handleFullscreenChange(event) {
	    if (this.player_.isFullscreen()) {
	      this.controlText('Non-Fullscreen');
	    } else {
	      this.controlText('Fullscreen');
	    }
	  };

	  /**
	   * This gets called when an `FullscreenToggle` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  FullscreenToggle.prototype.handleClick = function handleClick(event) {
	    if (!this.player_.isFullscreen()) {
	      this.player_.requestFullscreen();
	    } else {
	      this.player_.exitFullscreen();
	    }
	  };

	  return FullscreenToggle;
	}(Button);

	/**
	 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	FullscreenToggle.prototype.controlText_ = 'Fullscreen';

	Component.registerComponent('FullscreenToggle', FullscreenToggle);

	/**
	 * Check if volume control is supported and if it isn't hide the
	 * `Component` that was passed  using the `vjs-hidden` class.
	 *
	 * @param {Component} self
	 *        The component that should be hidden if volume is unsupported
	 *
	 * @param {Player} player
	 *        A reference to the player
	 *
	 * @private
	 */
	var checkVolumeSupport = function checkVolumeSupport(self, player) {
	  // hide volume controls when they're not supported by the current tech
	  if (player.tech_ && !player.tech_.featuresVolumeControl) {
	    self.addClass('vjs-hidden');
	  }

	  self.on(player, 'loadstart', function () {
	    if (!player.tech_.featuresVolumeControl) {
	      self.addClass('vjs-hidden');
	    } else {
	      self.removeClass('vjs-hidden');
	    }
	  });
	};

	/**
	 * @file volume-level.js
	 */
	/**
	 * Shows volume level
	 *
	 * @extends Component
	 */

	var VolumeLevel = function (_Component) {
	  inherits(VolumeLevel, _Component);

	  function VolumeLevel() {
	    classCallCheck(this, VolumeLevel);
	    return possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */
	  VolumeLevel.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-volume-level',
	      innerHTML: '<span class="vjs-control-text"></span>'
	    });
	  };

	  return VolumeLevel;
	}(Component);

	Component.registerComponent('VolumeLevel', VolumeLevel);

	/**
	 * @file volume-bar.js
	 */
	// Required children
	/**
	 * The bar that contains the volume level and can be clicked on to adjust the level
	 *
	 * @extends Slider
	 */

	var VolumeBar = function (_Slider) {
	  inherits(VolumeBar, _Slider);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function VolumeBar(player, options) {
	    classCallCheck(this, VolumeBar);

	    var _this = possibleConstructorReturn(this, _Slider.call(this, player, options));

	    _this.on('slideractive', _this.updateLastVolume_);
	    _this.on(player, 'volumechange', _this.updateARIAAttributes);
	    player.ready(function () {
	      return _this.updateARIAAttributes();
	    });
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  VolumeBar.prototype.createEl = function createEl$$1() {
	    return _Slider.prototype.createEl.call(this, 'div', {
	      className: 'vjs-volume-bar vjs-slider-bar'
	    }, {
	      'aria-label': this.localize('Volume Level'),
	      'aria-live': 'polite'
	    });
	  };

	  /**
	   * Handle mouse down on volume bar
	   *
	   * @param {EventTarget~Event} event
	   *        The `mousedown` event that caused this to run.
	   *
	   * @listens mousedown
	   */


	  VolumeBar.prototype.handleMouseDown = function handleMouseDown(event) {
	    if (!isSingleLeftClick(event)) {
	      return;
	    }

	    _Slider.prototype.handleMouseDown.call(this, event);
	  };

	  /**
	   * Handle movement events on the {@link VolumeMenuButton}.
	   *
	   * @param {EventTarget~Event} event
	   *        The event that caused this function to run.
	   *
	   * @listens mousemove
	   */


	  VolumeBar.prototype.handleMouseMove = function handleMouseMove(event) {
	    if (!isSingleLeftClick(event)) {
	      return;
	    }

	    this.checkMuted();
	    this.player_.volume(this.calculateDistance(event));
	  };

	  /**
	   * If the player is muted unmute it.
	   */


	  VolumeBar.prototype.checkMuted = function checkMuted() {
	    if (this.player_.muted()) {
	      this.player_.muted(false);
	    }
	  };

	  /**
	   * Get percent of volume level
	   *
	   * @return {number}
	   *         Volume level percent as a decimal number.
	   */


	  VolumeBar.prototype.getPercent = function getPercent() {
	    if (this.player_.muted()) {
	      return 0;
	    }
	    return this.player_.volume();
	  };

	  /**
	   * Increase volume level for keyboard users
	   */


	  VolumeBar.prototype.stepForward = function stepForward() {
	    this.checkMuted();
	    this.player_.volume(this.player_.volume() + 0.1);
	  };

	  /**
	   * Decrease volume level for keyboard users
	   */


	  VolumeBar.prototype.stepBack = function stepBack() {
	    this.checkMuted();
	    this.player_.volume(this.player_.volume() - 0.1);
	  };

	  /**
	   * Update ARIA accessibility attributes
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `volumechange` event that caused this function to run.
	   *
	   * @listens Player#volumechange
	   */


	  VolumeBar.prototype.updateARIAAttributes = function updateARIAAttributes(event) {
	    var ariaValue = this.player_.muted() ? 0 : this.volumeAsPercentage_();

	    this.el_.setAttribute('aria-valuenow', ariaValue);
	    this.el_.setAttribute('aria-valuetext', ariaValue + '%');
	  };

	  /**
	   * Returns the current value of the player volume as a percentage
	   *
	   * @private
	   */


	  VolumeBar.prototype.volumeAsPercentage_ = function volumeAsPercentage_() {
	    return Math.round(this.player_.volume() * 100);
	  };

	  /**
	   * When user starts dragging the VolumeBar, store the volume and listen for
	   * the end of the drag. When the drag ends, if the volume was set to zero,
	   * set lastVolume to the stored volume.
	   *
	   * @listens slideractive
	   * @private
	   */


	  VolumeBar.prototype.updateLastVolume_ = function updateLastVolume_() {
	    var _this2 = this;

	    var volumeBeforeDrag = this.player_.volume();

	    this.one('sliderinactive', function () {
	      if (_this2.player_.volume() === 0) {
	        _this2.player_.lastVolume_(volumeBeforeDrag);
	      }
	    });
	  };

	  return VolumeBar;
	}(Slider);

	/**
	 * Default options for the `VolumeBar`
	 *
	 * @type {Object}
	 * @private
	 */


	VolumeBar.prototype.options_ = {
	  children: ['volumeLevel'],
	  barName: 'volumeLevel'
	};

	/**
	 * Call the update event for this Slider when this event happens on the player.
	 *
	 * @type {string}
	 */
	VolumeBar.prototype.playerEvent = 'volumechange';

	Component.registerComponent('VolumeBar', VolumeBar);

	/**
	 * @file volume-control.js
	 */
	// Required children
	/**
	 * The component for controlling the volume level
	 *
	 * @extends Component
	 */

	var VolumeControl = function (_Component) {
	  inherits(VolumeControl, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   */
	  function VolumeControl(player) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    classCallCheck(this, VolumeControl);

	    options.vertical = options.vertical || false;

	    // Pass the vertical option down to the VolumeBar if
	    // the VolumeBar is turned on.
	    if (typeof options.volumeBar === 'undefined' || isPlain(options.volumeBar)) {
	      options.volumeBar = options.volumeBar || {};
	      options.volumeBar.vertical = options.vertical;
	    }

	    // hide this control if volume support is missing
	    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

	    checkVolumeSupport(_this, player);

	    _this.throttledHandleMouseMove = throttle(bind(_this, _this.handleMouseMove), 25);

	    _this.on('mousedown', _this.handleMouseDown);
	    _this.on('touchstart', _this.handleMouseDown);

	    // while the slider is active (the mouse has been pressed down and
	    // is dragging) or in focus we do not want to hide the VolumeBar
	    _this.on(_this.volumeBar, ['focus', 'slideractive'], function () {
	      _this.volumeBar.addClass('vjs-slider-active');
	      _this.addClass('vjs-slider-active');
	      _this.trigger('slideractive');
	    });

	    _this.on(_this.volumeBar, ['blur', 'sliderinactive'], function () {
	      _this.volumeBar.removeClass('vjs-slider-active');
	      _this.removeClass('vjs-slider-active');
	      _this.trigger('sliderinactive');
	    });
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  VolumeControl.prototype.createEl = function createEl() {
	    var orientationClass = 'vjs-volume-horizontal';

	    if (this.options_.vertical) {
	      orientationClass = 'vjs-volume-vertical';
	    }

	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-volume-control vjs-control ' + orientationClass
	    });
	  };

	  /**
	   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
	   *
	   * @param {EventTarget~Event} event
	   *        `mousedown` or `touchstart` event that triggered this function
	   *
	   * @listens mousedown
	   * @listens touchstart
	   */


	  VolumeControl.prototype.handleMouseDown = function handleMouseDown(event) {
	    var doc = this.el_.ownerDocument;

	    this.on(doc, 'mousemove', this.throttledHandleMouseMove);
	    this.on(doc, 'touchmove', this.throttledHandleMouseMove);
	    this.on(doc, 'mouseup', this.handleMouseUp);
	    this.on(doc, 'touchend', this.handleMouseUp);
	  };

	  /**
	   * Handle `mouseup` or `touchend` events on the `VolumeControl`.
	   *
	   * @param {EventTarget~Event} event
	   *        `mouseup` or `touchend` event that triggered this function.
	   *
	   * @listens touchend
	   * @listens mouseup
	   */


	  VolumeControl.prototype.handleMouseUp = function handleMouseUp(event) {
	    var doc = this.el_.ownerDocument;

	    this.off(doc, 'mousemove', this.throttledHandleMouseMove);
	    this.off(doc, 'touchmove', this.throttledHandleMouseMove);
	    this.off(doc, 'mouseup', this.handleMouseUp);
	    this.off(doc, 'touchend', this.handleMouseUp);
	  };

	  /**
	   * Handle `mousedown` or `touchstart` events on the `VolumeControl`.
	   *
	   * @param {EventTarget~Event} event
	   *        `mousedown` or `touchstart` event that triggered this function
	   *
	   * @listens mousedown
	   * @listens touchstart
	   */


	  VolumeControl.prototype.handleMouseMove = function handleMouseMove(event) {
	    this.volumeBar.handleMouseMove(event);
	  };

	  return VolumeControl;
	}(Component);

	/**
	 * Default options for the `VolumeControl`
	 *
	 * @type {Object}
	 * @private
	 */


	VolumeControl.prototype.options_ = {
	  children: ['volumeBar']
	};

	Component.registerComponent('VolumeControl', VolumeControl);

	/**
	 * Check if muting volume is supported and if it isn't hide the mute toggle
	 * button.
	 *
	 * @param {Component} self
	 *        A reference to the mute toggle button
	 *
	 * @param {Player} player
	 *        A reference to the player
	 *
	 * @private
	 */
	var checkMuteSupport = function checkMuteSupport(self, player) {
	  // hide mute toggle button if it's not supported by the current tech
	  if (player.tech_ && !player.tech_.featuresMuteControl) {
	    self.addClass('vjs-hidden');
	  }

	  self.on(player, 'loadstart', function () {
	    if (!player.tech_.featuresMuteControl) {
	      self.addClass('vjs-hidden');
	    } else {
	      self.removeClass('vjs-hidden');
	    }
	  });
	};

	/**
	 * @file mute-toggle.js
	 */
	/**
	 * A button component for muting the audio.
	 *
	 * @extends Button
	 */

	var MuteToggle = function (_Button) {
	  inherits(MuteToggle, _Button);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function MuteToggle(player, options) {
	    classCallCheck(this, MuteToggle);

	    // hide this control if volume support is missing
	    var _this = possibleConstructorReturn(this, _Button.call(this, player, options));

	    checkMuteSupport(_this, player);

	    _this.on(player, ['loadstart', 'volumechange'], _this.update);
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  MuteToggle.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-mute-control ' + _Button.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * This gets called when an `MuteToggle` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  MuteToggle.prototype.handleClick = function handleClick(event) {
	    var vol = this.player_.volume();
	    var lastVolume = this.player_.lastVolume_();

	    if (vol === 0) {
	      var volumeToSet = lastVolume < 0.1 ? 0.1 : lastVolume;

	      this.player_.volume(volumeToSet);
	      this.player_.muted(false);
	    } else {
	      this.player_.muted(this.player_.muted() ? false : true);
	    }
	  };

	  /**
	   * Update the `MuteToggle` button based on the state of `volume` and `muted`
	   * on the player.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The {@link Player#loadstart} event if this function was called
	   *        through an event.
	   *
	   * @listens Player#loadstart
	   * @listens Player#volumechange
	   */


	  MuteToggle.prototype.update = function update(event) {
	    this.updateIcon_();
	    this.updateControlText_();
	  };

	  /**
	   * Update the appearance of the `MuteToggle` icon.
	   *
	   * Possible states (given `level` variable below):
	   * - 0: crossed out
	   * - 1: zero bars of volume
	   * - 2: one bar of volume
	   * - 3: two bars of volume
	   *
	   * @private
	   */


	  MuteToggle.prototype.updateIcon_ = function updateIcon_() {
	    var vol = this.player_.volume();
	    var level = 3;

	    // in iOS when a player is loaded with muted attribute
	    // and volume is changed with a native mute button
	    // we want to make sure muted state is updated
	    if (IS_IOS) {
	      this.player_.muted(this.player_.tech_.el_.muted);
	    }

	    if (vol === 0 || this.player_.muted()) {
	      level = 0;
	    } else if (vol < 0.33) {
	      level = 1;
	    } else if (vol < 0.67) {
	      level = 2;
	    }

	    // TODO improve muted icon classes
	    for (var i = 0; i < 4; i++) {
	      removeClass(this.el_, 'vjs-vol-' + i);
	    }
	    addClass(this.el_, 'vjs-vol-' + level);
	  };

	  /**
	   * If `muted` has changed on the player, update the control text
	   * (`title` attribute on `vjs-mute-control` element and content of
	   * `vjs-control-text` element).
	   *
	   * @private
	   */


	  MuteToggle.prototype.updateControlText_ = function updateControlText_() {
	    var soundOff = this.player_.muted() || this.player_.volume() === 0;
	    var text = soundOff ? 'Unmute' : 'Mute';

	    if (this.controlText() !== text) {
	      this.controlText(text);
	    }
	  };

	  return MuteToggle;
	}(Button);

	/**
	 * The text that should display over the `MuteToggle`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	MuteToggle.prototype.controlText_ = 'Mute';

	Component.registerComponent('MuteToggle', MuteToggle);

	/**
	 * @file volume-control.js
	 */
	// Required children
	/**
	 * A Component to contain the MuteToggle and VolumeControl so that
	 * they can work together.
	 *
	 * @extends Component
	 */

	var VolumePanel = function (_Component) {
	  inherits(VolumePanel, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   */
	  function VolumePanel(player) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    classCallCheck(this, VolumePanel);

	    if (typeof options.inline !== 'undefined') {
	      options.inline = options.inline;
	    } else {
	      options.inline = true;
	    }

	    // pass the inline option down to the VolumeControl as vertical if
	    // the VolumeControl is on.
	    if (typeof options.volumeControl === 'undefined' || isPlain(options.volumeControl)) {
	      options.volumeControl = options.volumeControl || {};
	      options.volumeControl.vertical = !options.inline;
	    }

	    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.on(player, ['loadstart'], _this.volumePanelState_);

	    // while the slider is active (the mouse has been pressed down and
	    // is dragging) we do not want to hide the VolumeBar
	    _this.on(_this.volumeControl, ['slideractive'], _this.sliderActive_);

	    _this.on(_this.volumeControl, ['sliderinactive'], _this.sliderInactive_);
	    return _this;
	  }

	  /**
	   * Add vjs-slider-active class to the VolumePanel
	   *
	   * @listens VolumeControl#slideractive
	   * @private
	   */


	  VolumePanel.prototype.sliderActive_ = function sliderActive_() {
	    this.addClass('vjs-slider-active');
	  };

	  /**
	   * Removes vjs-slider-active class to the VolumePanel
	   *
	   * @listens VolumeControl#sliderinactive
	   * @private
	   */


	  VolumePanel.prototype.sliderInactive_ = function sliderInactive_() {
	    this.removeClass('vjs-slider-active');
	  };

	  /**
	   * Adds vjs-hidden or vjs-mute-toggle-only to the VolumePanel
	   * depending on MuteToggle and VolumeControl state
	   *
	   * @listens Player#loadstart
	   * @private
	   */


	  VolumePanel.prototype.volumePanelState_ = function volumePanelState_() {
	    // hide volume panel if neither volume control or mute toggle
	    // are displayed
	    if (this.volumeControl.hasClass('vjs-hidden') && this.muteToggle.hasClass('vjs-hidden')) {
	      this.addClass('vjs-hidden');
	    }

	    // if only mute toggle is visible we don't want
	    // volume panel expanding when hovered or active
	    if (this.volumeControl.hasClass('vjs-hidden') && !this.muteToggle.hasClass('vjs-hidden')) {
	      this.addClass('vjs-mute-toggle-only');
	    }
	  };

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  VolumePanel.prototype.createEl = function createEl() {
	    var orientationClass = 'vjs-volume-panel-horizontal';

	    if (!this.options_.inline) {
	      orientationClass = 'vjs-volume-panel-vertical';
	    }

	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-volume-panel vjs-control ' + orientationClass
	    });
	  };

	  return VolumePanel;
	}(Component);

	/**
	 * Default options for the `VolumeControl`
	 *
	 * @type {Object}
	 * @private
	 */


	VolumePanel.prototype.options_ = {
	  children: ['muteToggle', 'volumeControl']
	};

	Component.registerComponent('VolumePanel', VolumePanel);

	/**
	 * @file menu.js
	 */
	/**
	 * The Menu component is used to build popup menus, including subtitle and
	 * captions selection menus.
	 *
	 * @extends Component
	 */

	var Menu = function (_Component) {
	  inherits(Menu, _Component);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Player} player
	   *        the player that this component should attach to
	   *
	   * @param {Object} [options]
	   *        Object of option names and values
	   *
	   */
	  function Menu(player, options) {
	    classCallCheck(this, Menu);

	    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

	    if (options) {
	      _this.menuButton_ = options.menuButton;
	    }

	    _this.focusedChild_ = -1;

	    _this.on('keydown', _this.handleKeyPress);
	    return _this;
	  }

	  /**
	   * Add a {@link MenuItem} to the menu.
	   *
	   * @param {Object|string} component
	   *        The name or instance of the `MenuItem` to add.
	   *
	   */


	  Menu.prototype.addItem = function addItem(component) {
	    this.addChild(component);
	    component.on('click', bind(this, function (event) {
	      // Unpress the associated MenuButton, and move focus back to it
	      if (this.menuButton_) {
	        this.menuButton_.unpressButton();

	        // don't focus menu button if item is a caption settings item
	        // because focus will move elsewhere and it logs an error on IE8
	        if (component.name() !== 'CaptionSettingsMenuItem') {
	          this.menuButton_.focus();
	        }
	      }
	    }));
	  };

	  /**
	   * Create the `Menu`s DOM element.
	   *
	   * @return {Element}
	   *         the element that was created
	   */


	  Menu.prototype.createEl = function createEl$$1() {
	    var contentElType = this.options_.contentElType || 'ul';

	    this.contentEl_ = createEl(contentElType, {
	      className: 'vjs-menu-content'
	    });

	    this.contentEl_.setAttribute('role', 'menu');

	    var el = _Component.prototype.createEl.call(this, 'div', {
	      append: this.contentEl_,
	      className: 'vjs-menu'
	    });

	    el.appendChild(this.contentEl_);

	    // Prevent clicks from bubbling up. Needed for Menu Buttons,
	    // where a click on the parent is significant
	    on(el, 'click', function (event) {
	      event.preventDefault();
	      event.stopImmediatePropagation();
	    });

	    return el;
	  };

	  Menu.prototype.dispose = function dispose() {
	    this.contentEl_ = null;

	    _Component.prototype.dispose.call(this);
	  };

	  /**
	   * Handle a `keydown` event on this menu. This listener is added in the constructor.
	   *
	   * @param {EventTarget~Event} event
	   *        A `keydown` event that happened on the menu.
	   *
	   * @listens keydown
	   */


	  Menu.prototype.handleKeyPress = function handleKeyPress(event) {
	    // Left and Down Arrows
	    if (event.which === 37 || event.which === 40) {
	      event.preventDefault();
	      this.stepForward();

	      // Up and Right Arrows
	    } else if (event.which === 38 || event.which === 39) {
	      event.preventDefault();
	      this.stepBack();
	    }
	  };

	  /**
	   * Move to next (lower) menu item for keyboard users.
	   */


	  Menu.prototype.stepForward = function stepForward() {
	    var stepChild = 0;

	    if (this.focusedChild_ !== undefined) {
	      stepChild = this.focusedChild_ + 1;
	    }
	    this.focus(stepChild);
	  };

	  /**
	   * Move to previous (higher) menu item for keyboard users.
	   */


	  Menu.prototype.stepBack = function stepBack() {
	    var stepChild = 0;

	    if (this.focusedChild_ !== undefined) {
	      stepChild = this.focusedChild_ - 1;
	    }
	    this.focus(stepChild);
	  };

	  /**
	   * Set focus on a {@link MenuItem} in the `Menu`.
	   *
	   * @param {Object|string} [item=0]
	   *        Index of child item set focus on.
	   */


	  Menu.prototype.focus = function focus() {
	    var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

	    var children = this.children().slice();
	    var haveTitle = children.length && children[0].className && /vjs-menu-title/.test(children[0].className);

	    if (haveTitle) {
	      children.shift();
	    }

	    if (children.length > 0) {
	      if (item < 0) {
	        item = 0;
	      } else if (item >= children.length) {
	        item = children.length - 1;
	      }

	      this.focusedChild_ = item;

	      children[item].el_.focus();
	    }
	  };

	  return Menu;
	}(Component);

	Component.registerComponent('Menu', Menu);

	/**
	 * @file menu-button.js
	 */
	/**
	 * A `MenuButton` class for any popup {@link Menu}.
	 *
	 * @extends Component
	 */

	var MenuButton = function (_Component) {
	  inherits(MenuButton, _Component);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   */
	  function MenuButton(player) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    classCallCheck(this, MenuButton);

	    var _this = possibleConstructorReturn(this, _Component.call(this, player, options));

	    _this.menuButton_ = new Button(player, options);

	    _this.menuButton_.controlText(_this.controlText_);
	    _this.menuButton_.el_.setAttribute('aria-haspopup', 'true');

	    // Add buildCSSClass values to the button, not the wrapper
	    var buttonClass = Button.prototype.buildCSSClass();

	    _this.menuButton_.el_.className = _this.buildCSSClass() + ' ' + buttonClass;
	    _this.menuButton_.removeClass('vjs-control');

	    _this.addChild(_this.menuButton_);

	    _this.update();

	    _this.enabled_ = true;

	    _this.on(_this.menuButton_, 'tap', _this.handleClick);
	    _this.on(_this.menuButton_, 'click', _this.handleClick);
	    _this.on(_this.menuButton_, 'focus', _this.handleFocus);
	    _this.on(_this.menuButton_, 'blur', _this.handleBlur);

	    _this.on('keydown', _this.handleSubmenuKeyPress);
	    return _this;
	  }

	  /**
	   * Update the menu based on the current state of its items.
	   */


	  MenuButton.prototype.update = function update() {
	    var menu = this.createMenu();

	    if (this.menu) {
	      this.menu.dispose();
	      this.removeChild(this.menu);
	    }

	    this.menu = menu;
	    this.addChild(menu);

	    /**
	     * Track the state of the menu button
	     *
	     * @type {Boolean}
	     * @private
	     */
	    this.buttonPressed_ = false;
	    this.menuButton_.el_.setAttribute('aria-expanded', 'false');

	    if (this.items && this.items.length <= this.hideThreshold_) {
	      this.hide();
	    } else {
	      this.show();
	    }
	  };

	  /**
	   * Create the menu and add all items to it.
	   *
	   * @return {Menu}
	   *         The constructed menu
	   */


	  MenuButton.prototype.createMenu = function createMenu() {
	    var menu = new Menu(this.player_, { menuButton: this });

	    /**
	     * Hide the menu if the number of items is less than or equal to this threshold. This defaults
	     * to 0 and whenever we add items which can be hidden to the menu we'll increment it. We list
	     * it here because every time we run `createMenu` we need to reset the value.
	     *
	     * @protected
	     * @type {Number}
	     */
	    this.hideThreshold_ = 0;

	    // Add a title list item to the top
	    if (this.options_.title) {
	      var title = createEl('li', {
	        className: 'vjs-menu-title',
	        innerHTML: toTitleCase(this.options_.title),
	        tabIndex: -1
	      });

	      this.hideThreshold_ += 1;

	      menu.children_.unshift(title);
	      prependTo(title, menu.contentEl());
	    }

	    this.items = this.createItems();

	    if (this.items) {
	      // Add menu items to the menu
	      for (var i = 0; i < this.items.length; i++) {
	        menu.addItem(this.items[i]);
	      }
	    }

	    return menu;
	  };

	  /**
	   * Create the list of menu items. Specific to each subclass.
	   *
	   * @abstract
	   */


	  MenuButton.prototype.createItems = function createItems() {};

	  /**
	   * Create the `MenuButtons`s DOM element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  MenuButton.prototype.createEl = function createEl$$1() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: this.buildWrapperCSSClass()
	    }, {});
	  };

	  /**
	   * Allow sub components to stack CSS class names for the wrapper element
	   *
	   * @return {string}
	   *         The constructed wrapper DOM `className`
	   */


	  MenuButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
	    var menuButtonClass = 'vjs-menu-button';

	    // If the inline option is passed, we want to use different styles altogether.
	    if (this.options_.inline === true) {
	      menuButtonClass += '-inline';
	    } else {
	      menuButtonClass += '-popup';
	    }

	    // TODO: Fix the CSS so that this isn't necessary
	    var buttonClass = Button.prototype.buildCSSClass();

	    return 'vjs-menu-button ' + menuButtonClass + ' ' + buttonClass + ' ' + _Component.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  MenuButton.prototype.buildCSSClass = function buildCSSClass() {
	    var menuButtonClass = 'vjs-menu-button';

	    // If the inline option is passed, we want to use different styles altogether.
	    if (this.options_.inline === true) {
	      menuButtonClass += '-inline';
	    } else {
	      menuButtonClass += '-popup';
	    }

	    return 'vjs-menu-button ' + menuButtonClass + ' ' + _Component.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Get or set the localized control text that will be used for accessibility.
	   *
	   * > NOTE: This will come from the internal `menuButton_` element.
	   *
	   * @param {string} [text]
	   *        Control text for element.
	   *
	   * @param {Element} [el=this.menuButton_.el()]
	   *        Element to set the title on.
	   *
	   * @return {string}
	   *         - The control text when getting
	   */


	  MenuButton.prototype.controlText = function controlText(text) {
	    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.menuButton_.el();

	    return this.menuButton_.controlText(text, el);
	  };

	  /**
	   * Handle a click on a `MenuButton`.
	   * See {@link ClickableComponent#handleClick} for instances where this is called.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  MenuButton.prototype.handleClick = function handleClick(event) {
	    // When you click the button it adds focus, which will show the menu.
	    // So we'll remove focus when the mouse leaves the button. Focus is needed
	    // for tab navigation.

	    this.one(this.menu.contentEl(), 'mouseleave', bind(this, function (e) {
	      this.unpressButton();
	      this.el_.blur();
	    }));
	    if (this.buttonPressed_) {
	      this.unpressButton();
	    } else {
	      this.pressButton();
	    }
	  };

	  /**
	   * Set the focus to the actual button, not to this element
	   */


	  MenuButton.prototype.focus = function focus() {
	    this.menuButton_.focus();
	  };

	  /**
	   * Remove the focus from the actual button, not this element
	   */


	  MenuButton.prototype.blur = function blur() {
	    this.menuButton_.blur();
	  };

	  /**
	   * This gets called when a `MenuButton` gains focus via a `focus` event.
	   * Turns on listening for `keydown` events. When they happen it
	   * calls `this.handleKeyPress`.
	   *
	   * @param {EventTarget~Event} event
	   *        The `focus` event that caused this function to be called.
	   *
	   * @listens focus
	   */


	  MenuButton.prototype.handleFocus = function handleFocus() {
	    on(document, 'keydown', bind(this, this.handleKeyPress));
	  };

	  /**
	   * Called when a `MenuButton` loses focus. Turns off the listener for
	   * `keydown` events. Which Stops `this.handleKeyPress` from getting called.
	   *
	   * @param {EventTarget~Event} event
	   *        The `blur` event that caused this function to be called.
	   *
	   * @listens blur
	   */


	  MenuButton.prototype.handleBlur = function handleBlur() {
	    off(document, 'keydown', bind(this, this.handleKeyPress));
	  };

	  /**
	   * Handle tab, escape, down arrow, and up arrow keys for `MenuButton`. See
	   * {@link ClickableComponent#handleKeyPress} for instances where this is called.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown` event that caused this function to be called.
	   *
	   * @listens keydown
	   */


	  MenuButton.prototype.handleKeyPress = function handleKeyPress(event) {

	    // Escape (27) key or Tab (9) key unpress the 'button'
	    if (event.which === 27 || event.which === 9) {
	      if (this.buttonPressed_) {
	        this.unpressButton();
	      }
	      // Don't preventDefault for Tab key - we still want to lose focus
	      if (event.which !== 9) {
	        event.preventDefault();
	        // Set focus back to the menu button's button
	        this.menuButton_.el_.focus();
	      }
	      // Up (38) key or Down (40) key press the 'button'
	    } else if (event.which === 38 || event.which === 40) {
	      if (!this.buttonPressed_) {
	        this.pressButton();
	        event.preventDefault();
	      }
	    }
	  };

	  /**
	   * Handle a `keydown` event on a sub-menu. The listener for this is added in
	   * the constructor.
	   *
	   * @param {EventTarget~Event} event
	   *        Key press event
	   *
	   * @listens keydown
	   */


	  MenuButton.prototype.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {

	    // Escape (27) key or Tab (9) key unpress the 'button'
	    if (event.which === 27 || event.which === 9) {
	      if (this.buttonPressed_) {
	        this.unpressButton();
	      }
	      // Don't preventDefault for Tab key - we still want to lose focus
	      if (event.which !== 9) {
	        event.preventDefault();
	        // Set focus back to the menu button's button
	        this.menuButton_.el_.focus();
	      }
	    }
	  };

	  /**
	   * Put the current `MenuButton` into a pressed state.
	   */


	  MenuButton.prototype.pressButton = function pressButton() {
	    if (this.enabled_) {
	      this.buttonPressed_ = true;
	      this.menu.lockShowing();
	      this.menuButton_.el_.setAttribute('aria-expanded', 'true');

	      // set the focus into the submenu, except on iOS where it is resulting in
	      // undesired scrolling behavior when the player is in an iframe
	      if (IS_IOS && isInFrame()) {
	        // Return early so that the menu isn't focused
	        return;
	      }

	      this.menu.focus();
	    }
	  };

	  /**
	   * Take the current `MenuButton` out of a pressed state.
	   */


	  MenuButton.prototype.unpressButton = function unpressButton() {
	    if (this.enabled_) {
	      this.buttonPressed_ = false;
	      this.menu.unlockShowing();
	      this.menuButton_.el_.setAttribute('aria-expanded', 'false');
	    }
	  };

	  /**
	   * Disable the `MenuButton`. Don't allow it to be clicked.
	   */


	  MenuButton.prototype.disable = function disable() {
	    this.unpressButton();

	    this.enabled_ = false;
	    this.addClass('vjs-disabled');

	    this.menuButton_.disable();
	  };

	  /**
	   * Enable the `MenuButton`. Allow it to be clicked.
	   */


	  MenuButton.prototype.enable = function enable() {
	    this.enabled_ = true;
	    this.removeClass('vjs-disabled');

	    this.menuButton_.enable();
	  };

	  return MenuButton;
	}(Component);

	Component.registerComponent('MenuButton', MenuButton);

	/**
	 * @file track-button.js
	 */
	/**
	 * The base class for buttons that toggle specific  track types (e.g. subtitles).
	 *
	 * @extends MenuButton
	 */

	var TrackButton = function (_MenuButton) {
	  inherits(TrackButton, _MenuButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function TrackButton(player, options) {
	    classCallCheck(this, TrackButton);

	    var tracks = options.tracks;

	    var _this = possibleConstructorReturn(this, _MenuButton.call(this, player, options));

	    if (_this.items.length <= 1) {
	      _this.hide();
	    }

	    if (!tracks) {
	      return possibleConstructorReturn(_this);
	    }

	    var updateHandler = bind(_this, _this.update);

	    tracks.addEventListener('removetrack', updateHandler);
	    tracks.addEventListener('addtrack', updateHandler);
	    _this.player_.on('ready', updateHandler);

	    _this.player_.on('dispose', function () {
	      tracks.removeEventListener('removetrack', updateHandler);
	      tracks.removeEventListener('addtrack', updateHandler);
	    });
	    return _this;
	  }

	  return TrackButton;
	}(MenuButton);

	Component.registerComponent('TrackButton', TrackButton);

	/**
	 * @file menu-item.js
	 */
	/**
	 * The component for a menu item. `<li>`
	 *
	 * @extends ClickableComponent
	 */

	var MenuItem = function (_ClickableComponent) {
	  inherits(MenuItem, _ClickableComponent);

	  /**
	   * Creates an instance of the this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   *
	   */
	  function MenuItem(player, options) {
	    classCallCheck(this, MenuItem);

	    var _this = possibleConstructorReturn(this, _ClickableComponent.call(this, player, options));

	    _this.selectable = options.selectable;
	    _this.isSelected_ = options.selected || false;
	    _this.multiSelectable = options.multiSelectable;

	    _this.selected(_this.isSelected_);

	    if (_this.selectable) {
	      if (_this.multiSelectable) {
	        _this.el_.setAttribute('role', 'menuitemcheckbox');
	      } else {
	        _this.el_.setAttribute('role', 'menuitemradio');
	      }
	    } else {
	      _this.el_.setAttribute('role', 'menuitem');
	    }
	    return _this;
	  }

	  /**
	   * Create the `MenuItem's DOM element
	   *
	   * @param {string} [type=li]
	   *        Element's node type, not actually used, always set to `li`.
	   *
	   * @param {Object} [props={}]
	   *        An object of properties that should be set on the element
	   *
	   * @param {Object} [attrs={}]
	   *        An object of attributes that should be set on the element
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  MenuItem.prototype.createEl = function createEl(type, props, attrs) {
	    // The control is textual, not just an icon
	    this.nonIconControl = true;

	    return _ClickableComponent.prototype.createEl.call(this, 'li', assign({
	      className: 'vjs-menu-item',
	      innerHTML: '<span class="vjs-menu-item-text">' + this.localize(this.options_.label) + '</span>',
	      tabIndex: -1
	    }, props), attrs);
	  };

	  /**
	   * Any click on a `MenuItem` puts it into the selected state.
	   * See {@link ClickableComponent#handleClick} for instances where this is called.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  MenuItem.prototype.handleClick = function handleClick(event) {
	    this.selected(true);
	  };

	  /**
	   * Set the state for this menu item as selected or not.
	   *
	   * @param {boolean} selected
	   *        if the menu item is selected or not
	   */


	  MenuItem.prototype.selected = function selected(_selected) {
	    if (this.selectable) {
	      if (_selected) {
	        this.addClass('vjs-selected');
	        this.el_.setAttribute('aria-checked', 'true');
	        // aria-checked isn't fully supported by browsers/screen readers,
	        // so indicate selected state to screen reader in the control text.
	        this.controlText(', selected');
	        this.isSelected_ = true;
	      } else {
	        this.removeClass('vjs-selected');
	        this.el_.setAttribute('aria-checked', 'false');
	        // Indicate un-selected state to screen reader
	        this.controlText('');
	        this.isSelected_ = false;
	      }
	    }
	  };

	  return MenuItem;
	}(ClickableComponent);

	Component.registerComponent('MenuItem', MenuItem);

	/**
	 * @file text-track-menu-item.js
	 */
	/**
	 * The specific menu item type for selecting a language within a text track kind
	 *
	 * @extends MenuItem
	 */

	var TextTrackMenuItem = function (_MenuItem) {
	  inherits(TextTrackMenuItem, _MenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function TextTrackMenuItem(player, options) {
	    classCallCheck(this, TextTrackMenuItem);

	    var track = options.track;
	    var tracks = player.textTracks();

	    // Modify options for parent MenuItem class's init.
	    options.label = track.label || track.language || 'Unknown';
	    options.selected = track.mode === 'showing';

	    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

	    _this.track = track;
	    var changeHandler = function changeHandler() {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      _this.handleTracksChange.apply(_this, args);
	    };
	    var selectedLanguageChangeHandler = function selectedLanguageChangeHandler() {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      _this.handleSelectedLanguageChange.apply(_this, args);
	    };

	    player.on(['loadstart', 'texttrackchange'], changeHandler);
	    tracks.addEventListener('change', changeHandler);
	    tracks.addEventListener('selectedlanguagechange', selectedLanguageChangeHandler);
	    _this.on('dispose', function () {
	      player.off(['loadstart', 'texttrackchange'], changeHandler);
	      tracks.removeEventListener('change', changeHandler);
	      tracks.removeEventListener('selectedlanguagechange', selectedLanguageChangeHandler);
	    });

	    // iOS7 doesn't dispatch change events to TextTrackLists when an
	    // associated track's mode changes. Without something like
	    // Object.observe() (also not present on iOS7), it's not
	    // possible to detect changes to the mode attribute and polyfill
	    // the change event. As a poor substitute, we manually dispatch
	    // change events whenever the controls modify the mode.
	    if (tracks.onchange === undefined) {
	      var event = void 0;

	      _this.on(['tap', 'click'], function () {
	        if (_typeof(window.Event) !== 'object') {
	          // Android 2.3 throws an Illegal Constructor error for window.Event
	          try {
	            event = new window.Event('change');
	          } catch (err) {
	            // continue regardless of error
	          }
	        }

	        if (!event) {
	          event = document.createEvent('Event');
	          event.initEvent('change', true, true);
	        }

	        tracks.dispatchEvent(event);
	      });
	    }

	    // set the default state based on current tracks
	    _this.handleTracksChange();
	    return _this;
	  }

	  /**
	   * This gets called when an `TextTrackMenuItem` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} event
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  TextTrackMenuItem.prototype.handleClick = function handleClick(event) {
	    var kind = this.track.kind;
	    var kinds = this.track.kinds;
	    var tracks = this.player_.textTracks();

	    if (!kinds) {
	      kinds = [kind];
	    }

	    _MenuItem.prototype.handleClick.call(this, event);

	    if (!tracks) {
	      return;
	    }

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      if (track === this.track && kinds.indexOf(track.kind) > -1) {
	        if (track.mode !== 'showing') {
	          track.mode = 'showing';
	        }
	      } else if (track.mode !== 'disabled') {
	        track.mode = 'disabled';
	      }
	    }
	  };

	  /**
	   * Handle text track list change
	   *
	   * @param {EventTarget~Event} event
	   *        The `change` event that caused this function to be called.
	   *
	   * @listens TextTrackList#change
	   */


	  TextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
	    var shouldBeSelected = this.track.mode === 'showing';

	    // Prevent redundant selected() calls because they may cause
	    // screen readers to read the appended control text unnecessarily
	    if (shouldBeSelected !== this.isSelected_) {
	      this.selected(shouldBeSelected);
	    }
	  };

	  TextTrackMenuItem.prototype.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {
	    if (this.track.mode === 'showing') {
	      var selectedLanguage = this.player_.cache_.selectedLanguage;

	      // Don't replace the kind of track across the same language
	      if (selectedLanguage && selectedLanguage.enabled && selectedLanguage.language === this.track.language && selectedLanguage.kind !== this.track.kind) {
	        return;
	      }

	      this.player_.cache_.selectedLanguage = {
	        enabled: true,
	        language: this.track.language,
	        kind: this.track.kind
	      };
	    }
	  };

	  TextTrackMenuItem.prototype.dispose = function dispose() {
	    // remove reference to track object on dispose
	    this.track = null;

	    _MenuItem.prototype.dispose.call(this);
	  };

	  return TextTrackMenuItem;
	}(MenuItem);

	Component.registerComponent('TextTrackMenuItem', TextTrackMenuItem);

	/**
	 * @file off-text-track-menu-item.js
	 */
	/**
	 * A special menu item for turning of a specific type of text track
	 *
	 * @extends TextTrackMenuItem
	 */

	var OffTextTrackMenuItem = function (_TextTrackMenuItem) {
	  inherits(OffTextTrackMenuItem, _TextTrackMenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function OffTextTrackMenuItem(player, options) {
	    classCallCheck(this, OffTextTrackMenuItem);

	    // Create pseudo track info
	    // Requires options['kind']
	    options.track = {
	      player: player,
	      kind: options.kind,
	      kinds: options.kinds,
	      'default': false,
	      mode: 'disabled'
	    };

	    if (!options.kinds) {
	      options.kinds = [options.kind];
	    }

	    if (options.label) {
	      options.track.label = options.label;
	    } else {
	      options.track.label = options.kinds.join(' and ') + ' off';
	    }

	    // MenuItem is selectable
	    options.selectable = true;
	    // MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
	    options.multiSelectable = false;

	    return possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));
	  }

	  /**
	   * Handle text track change
	   *
	   * @param {EventTarget~Event} event
	   *        The event that caused this function to run
	   */


	  OffTextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
	    var tracks = this.player().textTracks();
	    var shouldBeSelected = true;

	    for (var i = 0, l = tracks.length; i < l; i++) {
	      var track = tracks[i];

	      if (this.options_.kinds.indexOf(track.kind) > -1 && track.mode === 'showing') {
	        shouldBeSelected = false;
	        break;
	      }
	    }

	    // Prevent redundant selected() calls because they may cause
	    // screen readers to read the appended control text unnecessarily
	    if (shouldBeSelected !== this.isSelected_) {
	      this.selected(shouldBeSelected);
	    }
	  };

	  OffTextTrackMenuItem.prototype.handleSelectedLanguageChange = function handleSelectedLanguageChange(event) {
	    var tracks = this.player().textTracks();
	    var allHidden = true;

	    for (var i = 0, l = tracks.length; i < l; i++) {
	      var track = tracks[i];

	      if (['captions', 'descriptions', 'subtitles'].indexOf(track.kind) > -1 && track.mode === 'showing') {
	        allHidden = false;
	        break;
	      }
	    }

	    if (allHidden) {
	      this.player_.cache_.selectedLanguage = {
	        enabled: false
	      };
	    }
	  };

	  return OffTextTrackMenuItem;
	}(TextTrackMenuItem);

	Component.registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);

	/**
	 * @file text-track-button.js
	 */
	/**
	 * The base class for buttons that toggle specific text track types (e.g. subtitles)
	 *
	 * @extends MenuButton
	 */

	var TextTrackButton = function (_TrackButton) {
	  inherits(TextTrackButton, _TrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   */
	  function TextTrackButton(player) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    classCallCheck(this, TextTrackButton);

	    options.tracks = player.textTracks();

	    return possibleConstructorReturn(this, _TrackButton.call(this, player, options));
	  }

	  /**
	   * Create a menu item for each text track
	   *
	   * @param {TextTrackMenuItem[]} [items=[]]
	   *        Existing array of items to use during creation
	   *
	   * @return {TextTrackMenuItem[]}
	   *         Array of menu items that were created
	   */


	  TextTrackButton.prototype.createItems = function createItems() {
	    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
	    var TrackMenuItem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TextTrackMenuItem;


	    // Label is an overide for the [track] off label
	    // USed to localise captions/subtitles
	    var label = void 0;

	    if (this.label_) {
	      label = this.label_ + ' off';
	    }
	    // Add an OFF menu item to turn all tracks off
	    items.push(new OffTextTrackMenuItem(this.player_, {
	      kinds: this.kinds_,
	      kind: this.kind_,
	      label: label
	    }));

	    this.hideThreshold_ += 1;

	    var tracks = this.player_.textTracks();

	    if (!Array.isArray(this.kinds_)) {
	      this.kinds_ = [this.kind_];
	    }

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      // only add tracks that are of an appropriate kind and have a label
	      if (this.kinds_.indexOf(track.kind) > -1) {

	        var item = new TrackMenuItem(this.player_, {
	          track: track,
	          // MenuItem is selectable
	          selectable: true,
	          // MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
	          multiSelectable: false
	        });

	        item.addClass('vjs-' + track.kind + '-menu-item');
	        items.push(item);
	      }
	    }

	    return items;
	  };

	  return TextTrackButton;
	}(TrackButton);

	Component.registerComponent('TextTrackButton', TextTrackButton);

	/**
	 * @file chapters-track-menu-item.js
	 */
	/**
	 * The chapter track menu item
	 *
	 * @extends MenuItem
	 */

	var ChaptersTrackMenuItem = function (_MenuItem) {
	  inherits(ChaptersTrackMenuItem, _MenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function ChaptersTrackMenuItem(player, options) {
	    classCallCheck(this, ChaptersTrackMenuItem);

	    var track = options.track;
	    var cue = options.cue;
	    var currentTime = player.currentTime();

	    // Modify options for parent MenuItem class's init.
	    options.selectable = true;
	    options.multiSelectable = false;
	    options.label = cue.text;
	    options.selected = cue.startTime <= currentTime && currentTime < cue.endTime;

	    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

	    _this.track = track;
	    _this.cue = cue;
	    track.addEventListener('cuechange', bind(_this, _this.update));
	    return _this;
	  }

	  /**
	   * This gets called when an `ChaptersTrackMenuItem` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  ChaptersTrackMenuItem.prototype.handleClick = function handleClick(event) {
	    _MenuItem.prototype.handleClick.call(this);
	    this.player_.currentTime(this.cue.startTime);
	    this.update(this.cue.startTime);
	  };

	  /**
	   * Update chapter menu item
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `cuechange` event that caused this function to run.
	   *
	   * @listens TextTrack#cuechange
	   */


	  ChaptersTrackMenuItem.prototype.update = function update(event) {
	    var cue = this.cue;
	    var currentTime = this.player_.currentTime();

	    // vjs.log(currentTime, cue.startTime);
	    this.selected(cue.startTime <= currentTime && currentTime < cue.endTime);
	  };

	  return ChaptersTrackMenuItem;
	}(MenuItem);

	Component.registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);

	/**
	 * @file chapters-button.js
	 */
	/**
	 * The button component for toggling and selecting chapters
	 * Chapters act much differently than other text tracks
	 * Cues are navigation vs. other tracks of alternative languages
	 *
	 * @extends TextTrackButton
	 */

	var ChaptersButton = function (_TextTrackButton) {
	  inherits(ChaptersButton, _TextTrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function to call when this function is ready.
	   */
	  function ChaptersButton(player, options, ready) {
	    classCallCheck(this, ChaptersButton);
	    return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  ChaptersButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };

	  ChaptersButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
	    return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
	  };

	  /**
	   * Update the menu based on the current state of its items.
	   *
	   * @param {EventTarget~Event} [event]
	   *        An event that triggered this function to run.
	   *
	   * @listens TextTrackList#addtrack
	   * @listens TextTrackList#removetrack
	   * @listens TextTrackList#change
	   */


	  ChaptersButton.prototype.update = function update(event) {
	    if (!this.track_ || event && (event.type === 'addtrack' || event.type === 'removetrack')) {
	      this.setTrack(this.findChaptersTrack());
	    }
	    _TextTrackButton.prototype.update.call(this);
	  };

	  /**
	   * Set the currently selected track for the chapters button.
	   *
	   * @param {TextTrack} track
	   *        The new track to select. Nothing will change if this is the currently selected
	   *        track.
	   */


	  ChaptersButton.prototype.setTrack = function setTrack(track) {
	    if (this.track_ === track) {
	      return;
	    }

	    if (!this.updateHandler_) {
	      this.updateHandler_ = this.update.bind(this);
	    }

	    // here this.track_ refers to the old track instance
	    if (this.track_) {
	      var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);

	      if (remoteTextTrackEl) {
	        remoteTextTrackEl.removeEventListener('load', this.updateHandler_);
	      }

	      this.track_ = null;
	    }

	    this.track_ = track;

	    // here this.track_ refers to the new track instance
	    if (this.track_) {
	      this.track_.mode = 'hidden';

	      var _remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(this.track_);

	      if (_remoteTextTrackEl) {
	        _remoteTextTrackEl.addEventListener('load', this.updateHandler_);
	      }
	    }
	  };

	  /**
	   * Find the track object that is currently in use by this ChaptersButton
	   *
	   * @return {TextTrack|undefined}
	   *         The current track or undefined if none was found.
	   */


	  ChaptersButton.prototype.findChaptersTrack = function findChaptersTrack() {
	    var tracks = this.player_.textTracks() || [];

	    for (var i = tracks.length - 1; i >= 0; i--) {
	      // We will always choose the last track as our chaptersTrack
	      var track = tracks[i];

	      if (track.kind === this.kind_) {
	        return track;
	      }
	    }
	  };

	  /**
	   * Get the caption for the ChaptersButton based on the track label. This will also
	   * use the current tracks localized kind as a fallback if a label does not exist.
	   *
	   * @return {string}
	   *         The tracks current label or the localized track kind.
	   */


	  ChaptersButton.prototype.getMenuCaption = function getMenuCaption() {
	    if (this.track_ && this.track_.label) {
	      return this.track_.label;
	    }
	    return this.localize(toTitleCase(this.kind_));
	  };

	  /**
	   * Create menu from chapter track
	   *
	   * @return {Menu}
	   *         New menu for the chapter buttons
	   */


	  ChaptersButton.prototype.createMenu = function createMenu() {
	    this.options_.title = this.getMenuCaption();
	    return _TextTrackButton.prototype.createMenu.call(this);
	  };

	  /**
	   * Create a menu item for each text track
	   *
	   * @return {TextTrackMenuItem[]}
	   *         Array of menu items
	   */


	  ChaptersButton.prototype.createItems = function createItems() {
	    var items = [];

	    if (!this.track_) {
	      return items;
	    }

	    var cues = this.track_.cues;

	    if (!cues) {
	      return items;
	    }

	    for (var i = 0, l = cues.length; i < l; i++) {
	      var cue = cues[i];
	      var mi = new ChaptersTrackMenuItem(this.player_, { track: this.track_, cue: cue });

	      items.push(mi);
	    }

	    return items;
	  };

	  return ChaptersButton;
	}(TextTrackButton);

	/**
	 * `kind` of TextTrack to look for to associate it with this menu.
	 *
	 * @type {string}
	 * @private
	 */


	ChaptersButton.prototype.kind_ = 'chapters';

	/**
	 * The text that should display over the `ChaptersButton`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */
	ChaptersButton.prototype.controlText_ = 'Chapters';

	Component.registerComponent('ChaptersButton', ChaptersButton);

	/**
	 * @file descriptions-button.js
	 */
	/**
	 * The button component for toggling and selecting descriptions
	 *
	 * @extends TextTrackButton
	 */

	var DescriptionsButton = function (_TextTrackButton) {
	  inherits(DescriptionsButton, _TextTrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function to call when this component is ready.
	   */
	  function DescriptionsButton(player, options, ready) {
	    classCallCheck(this, DescriptionsButton);

	    var _this = possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));

	    var tracks = player.textTracks();
	    var changeHandler = bind(_this, _this.handleTracksChange);

	    tracks.addEventListener('change', changeHandler);
	    _this.on('dispose', function () {
	      tracks.removeEventListener('change', changeHandler);
	    });
	    return _this;
	  }

	  /**
	   * Handle text track change
	   *
	   * @param {EventTarget~Event} event
	   *        The event that caused this function to run
	   *
	   * @listens TextTrackList#change
	   */


	  DescriptionsButton.prototype.handleTracksChange = function handleTracksChange(event) {
	    var tracks = this.player().textTracks();
	    var disabled = false;

	    // Check whether a track of a different kind is showing
	    for (var i = 0, l = tracks.length; i < l; i++) {
	      var track = tracks[i];

	      if (track.kind !== this.kind_ && track.mode === 'showing') {
	        disabled = true;
	        break;
	      }
	    }

	    // If another track is showing, disable this menu button
	    if (disabled) {
	      this.disable();
	    } else {
	      this.enable();
	    }
	  };

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  DescriptionsButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };

	  DescriptionsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
	    return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
	  };

	  return DescriptionsButton;
	}(TextTrackButton);

	/**
	 * `kind` of TextTrack to look for to associate it with this menu.
	 *
	 * @type {string}
	 * @private
	 */


	DescriptionsButton.prototype.kind_ = 'descriptions';

	/**
	 * The text that should display over the `DescriptionsButton`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */
	DescriptionsButton.prototype.controlText_ = 'Descriptions';

	Component.registerComponent('DescriptionsButton', DescriptionsButton);

	/**
	 * @file subtitles-button.js
	 */
	/**
	 * The button component for toggling and selecting subtitles
	 *
	 * @extends TextTrackButton
	 */

	var SubtitlesButton = function (_TextTrackButton) {
	  inherits(SubtitlesButton, _TextTrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function to call when this component is ready.
	   */
	  function SubtitlesButton(player, options, ready) {
	    classCallCheck(this, SubtitlesButton);
	    return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  SubtitlesButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };

	  SubtitlesButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
	    return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
	  };

	  return SubtitlesButton;
	}(TextTrackButton);

	/**
	 * `kind` of TextTrack to look for to associate it with this menu.
	 *
	 * @type {string}
	 * @private
	 */


	SubtitlesButton.prototype.kind_ = 'subtitles';

	/**
	 * The text that should display over the `SubtitlesButton`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */
	SubtitlesButton.prototype.controlText_ = 'Subtitles';

	Component.registerComponent('SubtitlesButton', SubtitlesButton);

	/**
	 * @file caption-settings-menu-item.js
	 */
	/**
	 * The menu item for caption track settings menu
	 *
	 * @extends TextTrackMenuItem
	 */

	var CaptionSettingsMenuItem = function (_TextTrackMenuItem) {
	  inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function CaptionSettingsMenuItem(player, options) {
	    classCallCheck(this, CaptionSettingsMenuItem);

	    options.track = {
	      player: player,
	      kind: options.kind,
	      label: options.kind + ' settings',
	      selectable: false,
	      'default': false,
	      mode: 'disabled'
	    };

	    // CaptionSettingsMenuItem has no concept of 'selected'
	    options.selectable = false;

	    options.name = 'CaptionSettingsMenuItem';

	    var _this = possibleConstructorReturn(this, _TextTrackMenuItem.call(this, player, options));

	    _this.addClass('vjs-texttrack-settings');
	    _this.controlText(', opens ' + options.kind + ' settings dialog');
	    return _this;
	  }

	  /**
	   * This gets called when an `CaptionSettingsMenuItem` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  CaptionSettingsMenuItem.prototype.handleClick = function handleClick(event) {
	    this.player().getChild('textTrackSettings').open();
	  };

	  return CaptionSettingsMenuItem;
	}(TextTrackMenuItem);

	Component.registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);

	/**
	 * @file captions-button.js
	 */
	/**
	 * The button component for toggling and selecting captions
	 *
	 * @extends TextTrackButton
	 */

	var CaptionsButton = function (_TextTrackButton) {
	  inherits(CaptionsButton, _TextTrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        The function to call when this component is ready.
	   */
	  function CaptionsButton(player, options, ready) {
	    classCallCheck(this, CaptionsButton);
	    return possibleConstructorReturn(this, _TextTrackButton.call(this, player, options, ready));
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  CaptionsButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-captions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };

	  CaptionsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
	    return 'vjs-captions-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
	  };

	  /**
	   * Create caption menu items
	   *
	   * @return {CaptionSettingsMenuItem[]}
	   *         The array of current menu items.
	   */


	  CaptionsButton.prototype.createItems = function createItems() {
	    var items = [];

	    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {
	      items.push(new CaptionSettingsMenuItem(this.player_, { kind: this.kind_ }));

	      this.hideThreshold_ += 1;
	    }

	    return _TextTrackButton.prototype.createItems.call(this, items);
	  };

	  return CaptionsButton;
	}(TextTrackButton);

	/**
	 * `kind` of TextTrack to look for to associate it with this menu.
	 *
	 * @type {string}
	 * @private
	 */


	CaptionsButton.prototype.kind_ = 'captions';

	/**
	 * The text that should display over the `CaptionsButton`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */
	CaptionsButton.prototype.controlText_ = 'Captions';

	Component.registerComponent('CaptionsButton', CaptionsButton);

	/**
	 * @file subs-caps-menu-item.js
	 */
	/**
	 * SubsCapsMenuItem has an [cc] icon to distinguish captions from subtitles
	 * in the SubsCapsMenu.
	 *
	 * @extends TextTrackMenuItem
	 */

	var SubsCapsMenuItem = function (_TextTrackMenuItem) {
	  inherits(SubsCapsMenuItem, _TextTrackMenuItem);

	  function SubsCapsMenuItem() {
	    classCallCheck(this, SubsCapsMenuItem);
	    return possibleConstructorReturn(this, _TextTrackMenuItem.apply(this, arguments));
	  }

	  SubsCapsMenuItem.prototype.createEl = function createEl(type, props, attrs) {
	    var innerHTML = '<span class="vjs-menu-item-text">' + this.localize(this.options_.label);

	    if (this.options_.track.kind === 'captions') {
	      innerHTML += '\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> ' + this.localize('Captions') + '</span>\n      ';
	    }

	    innerHTML += '</span>';

	    var el = _TextTrackMenuItem.prototype.createEl.call(this, type, assign({
	      innerHTML: innerHTML
	    }, props), attrs);

	    return el;
	  };

	  return SubsCapsMenuItem;
	}(TextTrackMenuItem);

	Component.registerComponent('SubsCapsMenuItem', SubsCapsMenuItem);

	/**
	 * @file sub-caps-button.js
	 */
	/**
	 * The button component for toggling and selecting captions and/or subtitles
	 *
	 * @extends TextTrackButton
	 */

	var SubsCapsButton = function (_TextTrackButton) {
	  inherits(SubsCapsButton, _TextTrackButton);

	  function SubsCapsButton(player) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    classCallCheck(this, SubsCapsButton);

	    // Although North America uses "captions" in most cases for
	    // "captions and subtitles" other locales use "subtitles"
	    var _this = possibleConstructorReturn(this, _TextTrackButton.call(this, player, options));

	    _this.label_ = 'subtitles';
	    if (['en', 'en-us', 'en-ca', 'fr-ca'].indexOf(_this.player_.language_) > -1) {
	      _this.label_ = 'captions';
	    }
	    _this.menuButton_.controlText(toTitleCase(_this.label_));
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  SubsCapsButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-subs-caps-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };

	  SubsCapsButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
	    return 'vjs-subs-caps-button ' + _TextTrackButton.prototype.buildWrapperCSSClass.call(this);
	  };

	  /**
	   * Create caption/subtitles menu items
	   *
	   * @return {CaptionSettingsMenuItem[]}
	   *         The array of current menu items.
	   */


	  SubsCapsButton.prototype.createItems = function createItems() {
	    var items = [];

	    if (!(this.player().tech_ && this.player().tech_.featuresNativeTextTracks) && this.player().getChild('textTrackSettings')) {
	      items.push(new CaptionSettingsMenuItem(this.player_, { kind: this.label_ }));

	      this.hideThreshold_ += 1;
	    }

	    items = _TextTrackButton.prototype.createItems.call(this, items, SubsCapsMenuItem);
	    return items;
	  };

	  return SubsCapsButton;
	}(TextTrackButton);

	/**
	 * `kind`s of TextTrack to look for to associate it with this menu.
	 *
	 * @type {array}
	 * @private
	 */


	SubsCapsButton.prototype.kinds_ = ['captions', 'subtitles'];

	/**
	 * The text that should display over the `SubsCapsButton`s controls.
	 *
	 *
	 * @type {string}
	 * @private
	 */
	SubsCapsButton.prototype.controlText_ = 'Subtitles';

	Component.registerComponent('SubsCapsButton', SubsCapsButton);

	/**
	 * @file audio-track-menu-item.js
	 */
	/**
	 * An {@link AudioTrack} {@link MenuItem}
	 *
	 * @extends MenuItem
	 */

	var AudioTrackMenuItem = function (_MenuItem) {
	  inherits(AudioTrackMenuItem, _MenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function AudioTrackMenuItem(player, options) {
	    classCallCheck(this, AudioTrackMenuItem);

	    var track = options.track;
	    var tracks = player.audioTracks();

	    // Modify options for parent MenuItem class's init.
	    options.label = track.label || track.language || 'Unknown';
	    options.selected = track.enabled;

	    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

	    _this.track = track;

	    _this.addClass('vjs-' + track.kind + '-menu-item');

	    var changeHandler = function changeHandler() {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      _this.handleTracksChange.apply(_this, args);
	    };

	    tracks.addEventListener('change', changeHandler);
	    _this.on('dispose', function () {
	      tracks.removeEventListener('change', changeHandler);
	    });
	    return _this;
	  }

	  AudioTrackMenuItem.prototype.createEl = function createEl(type, props, attrs) {
	    var innerHTML = '<span class="vjs-menu-item-text">' + this.localize(this.options_.label);

	    if (this.options_.track.kind === 'main-desc') {
	      innerHTML += '\n        <span aria-hidden="true" class="vjs-icon-placeholder"></span>\n        <span class="vjs-control-text"> ' + this.localize('Descriptions') + '</span>\n      ';
	    }

	    innerHTML += '</span>';

	    var el = _MenuItem.prototype.createEl.call(this, type, assign({
	      innerHTML: innerHTML
	    }, props), attrs);

	    return el;
	  };

	  /**
	   * This gets called when an `AudioTrackMenuItem is "clicked". See {@link ClickableComponent}
	   * for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  AudioTrackMenuItem.prototype.handleClick = function handleClick(event) {
	    var tracks = this.player_.audioTracks();

	    _MenuItem.prototype.handleClick.call(this, event);

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      track.enabled = track === this.track;
	    }
	  };

	  /**
	   * Handle any {@link AudioTrack} change.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The {@link AudioTrackList#change} event that caused this to run.
	   *
	   * @listens AudioTrackList#change
	   */


	  AudioTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
	    this.selected(this.track.enabled);
	  };

	  return AudioTrackMenuItem;
	}(MenuItem);

	Component.registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);

	/**
	 * @file audio-track-button.js
	 */
	/**
	 * The base class for buttons that toggle specific {@link AudioTrack} types.
	 *
	 * @extends TrackButton
	 */

	var AudioTrackButton = function (_TrackButton) {
	  inherits(AudioTrackButton, _TrackButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options={}]
	   *        The key/value store of player options.
	   */
	  function AudioTrackButton(player) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    classCallCheck(this, AudioTrackButton);

	    options.tracks = player.audioTracks();

	    return possibleConstructorReturn(this, _TrackButton.call(this, player, options));
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  AudioTrackButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-audio-button ' + _TrackButton.prototype.buildCSSClass.call(this);
	  };

	  AudioTrackButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
	    return 'vjs-audio-button ' + _TrackButton.prototype.buildWrapperCSSClass.call(this);
	  };

	  /**
	   * Create a menu item for each audio track
	   *
	   * @param {AudioTrackMenuItem[]} [items=[]]
	   *        An array of existing menu items to use.
	   *
	   * @return {AudioTrackMenuItem[]}
	   *         An array of menu items
	   */


	  AudioTrackButton.prototype.createItems = function createItems() {
	    var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

	    // if there's only one audio track, there no point in showing it
	    this.hideThreshold_ = 1;

	    var tracks = this.player_.audioTracks();

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      items.push(new AudioTrackMenuItem(this.player_, {
	        track: track,
	        // MenuItem is selectable
	        selectable: true,
	        // MenuItem is NOT multiSelectable (i.e. only one can be marked "selected" at a time)
	        multiSelectable: false
	      }));
	    }

	    return items;
	  };

	  return AudioTrackButton;
	}(TrackButton);

	/**
	 * The text that should display over the `AudioTrackButton`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	AudioTrackButton.prototype.controlText_ = 'Audio Track';
	Component.registerComponent('AudioTrackButton', AudioTrackButton);

	/**
	 * @file playback-rate-menu-item.js
	 */
	/**
	 * The specific menu item type for selecting a playback rate.
	 *
	 * @extends MenuItem
	 */

	var PlaybackRateMenuItem = function (_MenuItem) {
	  inherits(PlaybackRateMenuItem, _MenuItem);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function PlaybackRateMenuItem(player, options) {
	    classCallCheck(this, PlaybackRateMenuItem);

	    var label = options.rate;
	    var rate = parseFloat(label, 10);

	    // Modify options for parent MenuItem class's init.
	    options.label = label;
	    options.selected = rate === 1;
	    options.selectable = true;
	    options.multiSelectable = false;

	    var _this = possibleConstructorReturn(this, _MenuItem.call(this, player, options));

	    _this.label = label;
	    _this.rate = rate;

	    _this.on(player, 'ratechange', _this.update);
	    return _this;
	  }

	  /**
	   * This gets called when an `PlaybackRateMenuItem` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  PlaybackRateMenuItem.prototype.handleClick = function handleClick(event) {
	    _MenuItem.prototype.handleClick.call(this);
	    this.player().playbackRate(this.rate);
	  };

	  /**
	   * Update the PlaybackRateMenuItem when the playbackrate changes.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `ratechange` event that caused this function to run.
	   *
	   * @listens Player#ratechange
	   */


	  PlaybackRateMenuItem.prototype.update = function update(event) {
	    this.selected(this.player().playbackRate() === this.rate);
	  };

	  return PlaybackRateMenuItem;
	}(MenuItem);

	/**
	 * The text that should display over the `PlaybackRateMenuItem`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	PlaybackRateMenuItem.prototype.contentElType = 'button';

	Component.registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);

	/**
	 * @file playback-rate-menu-button.js
	 */
	/**
	 * The component for controlling the playback rate.
	 *
	 * @extends MenuButton
	 */

	var PlaybackRateMenuButton = function (_MenuButton) {
	  inherits(PlaybackRateMenuButton, _MenuButton);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   */
	  function PlaybackRateMenuButton(player, options) {
	    classCallCheck(this, PlaybackRateMenuButton);

	    var _this = possibleConstructorReturn(this, _MenuButton.call(this, player, options));

	    _this.updateVisibility();
	    _this.updateLabel();

	    _this.on(player, 'loadstart', _this.updateVisibility);
	    _this.on(player, 'ratechange', _this.updateLabel);
	    return _this;
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  PlaybackRateMenuButton.prototype.createEl = function createEl$$1() {
	    var el = _MenuButton.prototype.createEl.call(this);

	    this.labelEl_ = createEl('div', {
	      className: 'vjs-playback-rate-value',
	      innerHTML: '1x'
	    });

	    el.appendChild(this.labelEl_);

	    return el;
	  };

	  PlaybackRateMenuButton.prototype.dispose = function dispose() {
	    this.labelEl_ = null;

	    _MenuButton.prototype.dispose.call(this);
	  };

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */


	  PlaybackRateMenuButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-playback-rate ' + _MenuButton.prototype.buildCSSClass.call(this);
	  };

	  PlaybackRateMenuButton.prototype.buildWrapperCSSClass = function buildWrapperCSSClass() {
	    return 'vjs-playback-rate ' + _MenuButton.prototype.buildWrapperCSSClass.call(this);
	  };

	  /**
	   * Create the playback rate menu
	   *
	   * @return {Menu}
	   *         Menu object populated with {@link PlaybackRateMenuItem}s
	   */


	  PlaybackRateMenuButton.prototype.createMenu = function createMenu() {
	    var menu = new Menu(this.player());
	    var rates = this.playbackRates();

	    if (rates) {
	      for (var i = rates.length - 1; i >= 0; i--) {
	        menu.addChild(new PlaybackRateMenuItem(this.player(), { rate: rates[i] + 'x' }));
	      }
	    }

	    return menu;
	  };

	  /**
	   * Updates ARIA accessibility attributes
	   */


	  PlaybackRateMenuButton.prototype.updateARIAAttributes = function updateARIAAttributes() {
	    // Current playback rate
	    this.el().setAttribute('aria-valuenow', this.player().playbackRate());
	  };

	  /**
	   * This gets called when an `PlaybackRateMenuButton` is "clicked". See
	   * {@link ClickableComponent} for more detailed information on what a click can be.
	   *
	   * @param {EventTarget~Event} [event]
	   *        The `keydown`, `tap`, or `click` event that caused this function to be
	   *        called.
	   *
	   * @listens tap
	   * @listens click
	   */


	  PlaybackRateMenuButton.prototype.handleClick = function handleClick(event) {
	    // select next rate option
	    var currentRate = this.player().playbackRate();
	    var rates = this.playbackRates();

	    // this will select first one if the last one currently selected
	    var newRate = rates[0];

	    for (var i = 0; i < rates.length; i++) {
	      if (rates[i] > currentRate) {
	        newRate = rates[i];
	        break;
	      }
	    }
	    this.player().playbackRate(newRate);
	  };

	  /**
	   * Get possible playback rates
	   *
	   * @return {Array}
	   *         All possible playback rates
	   */


	  PlaybackRateMenuButton.prototype.playbackRates = function playbackRates() {
	    return this.options_.playbackRates || this.options_.playerOptions && this.options_.playerOptions.playbackRates;
	  };

	  /**
	   * Get whether playback rates is supported by the tech
	   * and an array of playback rates exists
	   *
	   * @return {boolean}
	   *         Whether changing playback rate is supported
	   */


	  PlaybackRateMenuButton.prototype.playbackRateSupported = function playbackRateSupported() {
	    return this.player().tech_ && this.player().tech_.featuresPlaybackRate && this.playbackRates() && this.playbackRates().length > 0;
	  };

	  /**
	   * Hide playback rate controls when they're no playback rate options to select
	   *
	   * @param {EventTarget~Event} [event]
	   *        The event that caused this function to run.
	   *
	   * @listens Player#loadstart
	   */


	  PlaybackRateMenuButton.prototype.updateVisibility = function updateVisibility(event) {
	    if (this.playbackRateSupported()) {
	      this.removeClass('vjs-hidden');
	    } else {
	      this.addClass('vjs-hidden');
	    }
	  };

	  /**
	   * Update button label when rate changed
	   *
	   * @param {EventTarget~Event} [event]
	   *        The event that caused this function to run.
	   *
	   * @listens Player#ratechange
	   */


	  PlaybackRateMenuButton.prototype.updateLabel = function updateLabel(event) {
	    if (this.playbackRateSupported()) {
	      this.labelEl_.innerHTML = this.player().playbackRate() + 'x';
	    }
	  };

	  return PlaybackRateMenuButton;
	}(MenuButton);

	/**
	 * The text that should display over the `FullscreenToggle`s controls. Added for localization.
	 *
	 * @type {string}
	 * @private
	 */


	PlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';

	Component.registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);

	/**
	 * @file spacer.js
	 */
	/**
	 * Just an empty spacer element that can be used as an append point for plugins, etc.
	 * Also can be used to create space between elements when necessary.
	 *
	 * @extends Component
	 */

	var Spacer = function (_Component) {
	  inherits(Spacer, _Component);

	  function Spacer() {
	    classCallCheck(this, Spacer);
	    return possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */
	  Spacer.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-spacer ' + _Component.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  Spacer.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass()
	    });
	  };

	  return Spacer;
	}(Component);

	Component.registerComponent('Spacer', Spacer);

	/**
	 * @file custom-control-spacer.js
	 */
	/**
	 * Spacer specifically meant to be used as an insertion point for new plugins, etc.
	 *
	 * @extends Spacer
	 */

	var CustomControlSpacer = function (_Spacer) {
	  inherits(CustomControlSpacer, _Spacer);

	  function CustomControlSpacer() {
	    classCallCheck(this, CustomControlSpacer);
	    return possibleConstructorReturn(this, _Spacer.apply(this, arguments));
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   */
	  CustomControlSpacer.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-custom-control-spacer ' + _Spacer.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */


	  CustomControlSpacer.prototype.createEl = function createEl() {
	    var el = _Spacer.prototype.createEl.call(this, {
	      className: this.buildCSSClass()
	    });

	    // No-flex/table-cell mode requires there be some content
	    // in the cell to fill the remaining space of the table.
	    el.innerHTML = '\xA0';
	    return el;
	  };

	  return CustomControlSpacer;
	}(Spacer);

	Component.registerComponent('CustomControlSpacer', CustomControlSpacer);

	/**
	 * @file control-bar.js
	 */
	// Required children
	/**
	 * Container of main controls.
	 *
	 * @extends Component
	 */

	var ControlBar = function (_Component) {
	  inherits(ControlBar, _Component);

	  function ControlBar() {
	    classCallCheck(this, ControlBar);
	    return possibleConstructorReturn(this, _Component.apply(this, arguments));
	  }

	  /**
	   * Create the `Component`'s DOM element
	   *
	   * @return {Element}
	   *         The element that was created.
	   */
	  ControlBar.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-control-bar',
	      dir: 'ltr'
	    });
	  };

	  return ControlBar;
	}(Component);

	/**
	 * Default options for `ControlBar`
	 *
	 * @type {Object}
	 * @private
	 */


	ControlBar.prototype.options_ = {
	  children: ['playToggle', 'volumePanel', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subsCapsButton', 'audioTrackButton', 'fullscreenToggle']
	};

	Component.registerComponent('ControlBar', ControlBar);

	/**
	 * @file error-display.js
	 */
	/**
	 * A display that indicates an error has occurred. This means that the video
	 * is unplayable.
	 *
	 * @extends ModalDialog
	 */

	var ErrorDisplay = function (_ModalDialog) {
	  inherits(ErrorDisplay, _ModalDialog);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param  {Player} player
	   *         The `Player` that this class should be attached to.
	   *
	   * @param  {Object} [options]
	   *         The key/value store of player options.
	   */
	  function ErrorDisplay(player, options) {
	    classCallCheck(this, ErrorDisplay);

	    var _this = possibleConstructorReturn(this, _ModalDialog.call(this, player, options));

	    _this.on(player, 'error', _this.open);
	    return _this;
	  }

	  /**
	   * Builds the default DOM `className`.
	   *
	   * @return {string}
	   *         The DOM `className` for this object.
	   *
	   * @deprecated Since version 5.
	   */


	  ErrorDisplay.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-error-display ' + _ModalDialog.prototype.buildCSSClass.call(this);
	  };

	  /**
	   * Gets the localized error message based on the `Player`s error.
	   *
	   * @return {string}
	   *         The `Player`s error message localized or an empty string.
	   */


	  ErrorDisplay.prototype.content = function content() {
	    var error = this.player().error();

	    return error ? this.localize(error.message) : '';
	  };

	  return ErrorDisplay;
	}(ModalDialog);

	/**
	 * The default options for an `ErrorDisplay`.
	 *
	 * @private
	 */


	ErrorDisplay.prototype.options_ = mergeOptions(ModalDialog.prototype.options_, {
	  pauseOnOpen: false,
	  fillAlways: true,
	  temporary: false,
	  uncloseable: true
	});

	Component.registerComponent('ErrorDisplay', ErrorDisplay);

	/**
	 * @file text-track-settings.js
	 */
	var LOCAL_STORAGE_KEY = 'vjs-text-track-settings';

	var COLOR_BLACK = ['#000', 'Black'];
	var COLOR_BLUE = ['#00F', 'Blue'];
	var COLOR_CYAN = ['#0FF', 'Cyan'];
	var COLOR_GREEN = ['#0F0', 'Green'];
	var COLOR_MAGENTA = ['#F0F', 'Magenta'];
	var COLOR_RED = ['#F00', 'Red'];
	var COLOR_WHITE = ['#FFF', 'White'];
	var COLOR_YELLOW = ['#FF0', 'Yellow'];

	var OPACITY_OPAQUE = ['1', 'Opaque'];
	var OPACITY_SEMI = ['0.5', 'Semi-Transparent'];
	var OPACITY_TRANS = ['0', 'Transparent'];

	// Configuration for the various <select> elements in the DOM of this component.
	//
	// Possible keys include:
	//
	// `default`:
	//   The default option index. Only needs to be provided if not zero.
	// `parser`:
	//   A function which is used to parse the value from the selected option in
	//   a customized way.
	// `selector`:
	//   The selector used to find the associated <select> element.
	var selectConfigs = {
	  backgroundColor: {
	    selector: '.vjs-bg-color > select',
	    id: 'captions-background-color-%s',
	    label: 'Color',
	    options: [COLOR_BLACK, COLOR_WHITE, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
	  },

	  backgroundOpacity: {
	    selector: '.vjs-bg-opacity > select',
	    id: 'captions-background-opacity-%s',
	    label: 'Transparency',
	    options: [OPACITY_OPAQUE, OPACITY_SEMI, OPACITY_TRANS]
	  },

	  color: {
	    selector: '.vjs-fg-color > select',
	    id: 'captions-foreground-color-%s',
	    label: 'Color',
	    options: [COLOR_WHITE, COLOR_BLACK, COLOR_RED, COLOR_GREEN, COLOR_BLUE, COLOR_YELLOW, COLOR_MAGENTA, COLOR_CYAN]
	  },

	  edgeStyle: {
	    selector: '.vjs-edge-style > select',
	    id: '%s',
	    label: 'Text Edge Style',
	    options: [['none', 'None'], ['raised', 'Raised'], ['depressed', 'Depressed'], ['uniform', 'Uniform'], ['dropshadow', 'Dropshadow']]
	  },

	  fontFamily: {
	    selector: '.vjs-font-family > select',
	    id: 'captions-font-family-%s',
	    label: 'Font Family',
	    options: [['proportionalSansSerif', 'Proportional Sans-Serif'], ['monospaceSansSerif', 'Monospace Sans-Serif'], ['proportionalSerif', 'Proportional Serif'], ['monospaceSerif', 'Monospace Serif'], ['casual', 'Casual'], ['script', 'Script'], ['small-caps', 'Small Caps']]
	  },

	  fontPercent: {
	    selector: '.vjs-font-percent > select',
	    id: 'captions-font-size-%s',
	    label: 'Font Size',
	    options: [['0.50', '50%'], ['0.75', '75%'], ['1.00', '100%'], ['1.25', '125%'], ['1.50', '150%'], ['1.75', '175%'], ['2.00', '200%'], ['3.00', '300%'], ['4.00', '400%']],
	    'default': 2,
	    parser: function parser(v) {
	      return v === '1.00' ? null : Number(v);
	    }
	  },

	  textOpacity: {
	    selector: '.vjs-text-opacity > select',
	    id: 'captions-foreground-opacity-%s',
	    label: 'Transparency',
	    options: [OPACITY_OPAQUE, OPACITY_SEMI]
	  },

	  // Options for this object are defined below.
	  windowColor: {
	    selector: '.vjs-window-color > select',
	    id: 'captions-window-color-%s',
	    label: 'Color'
	  },

	  // Options for this object are defined below.
	  windowOpacity: {
	    selector: '.vjs-window-opacity > select',
	    id: 'captions-window-opacity-%s',
	    label: 'Transparency',
	    options: [OPACITY_TRANS, OPACITY_SEMI, OPACITY_OPAQUE]
	  }
	};

	selectConfigs.windowColor.options = selectConfigs.backgroundColor.options;

	/**
	 * Get the actual value of an option.
	 *
	 * @param  {string} value
	 *         The value to get
	 *
	 * @param  {Function} [parser]
	 *         Optional function to adjust the value.
	 *
	 * @return {Mixed}
	 *         - Will be `undefined` if no value exists
	 *         - Will be `undefined` if the given value is "none".
	 *         - Will be the actual value otherwise.
	 *
	 * @private
	 */
	function parseOptionValue(value, parser) {
	  if (parser) {
	    value = parser(value);
	  }

	  if (value && value !== 'none') {
	    return value;
	  }
	}

	/**
	 * Gets the value of the selected <option> element within a <select> element.
	 *
	 * @param  {Element} el
	 *         the element to look in
	 *
	 * @param  {Function} [parser]
	 *         Optional function to adjust the value.
	 *
	 * @return {Mixed}
	 *         - Will be `undefined` if no value exists
	 *         - Will be `undefined` if the given value is "none".
	 *         - Will be the actual value otherwise.
	 *
	 * @private
	 */
	function getSelectedOptionValue(el, parser) {
	  var value = el.options[el.options.selectedIndex].value;

	  return parseOptionValue(value, parser);
	}

	/**
	 * Sets the selected <option> element within a <select> element based on a
	 * given value.
	 *
	 * @param {Element} el
	 *        The element to look in.
	 *
	 * @param {string} value
	 *        the property to look on.
	 *
	 * @param {Function} [parser]
	 *        Optional function to adjust the value before comparing.
	 *
	 * @private
	 */
	function setSelectedOption(el, value, parser) {
	  if (!value) {
	    return;
	  }

	  for (var i = 0; i < el.options.length; i++) {
	    if (parseOptionValue(el.options[i].value, parser) === value) {
	      el.selectedIndex = i;
	      break;
	    }
	  }
	}

	/**
	 * Manipulate Text Tracks settings.
	 *
	 * @extends ModalDialog
	 */

	var TextTrackSettings = function (_ModalDialog) {
	  inherits(TextTrackSettings, _ModalDialog);

	  /**
	   * Creates an instance of this class.
	   *
	   * @param {Player} player
	   *         The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *         The key/value store of player options.
	   */
	  function TextTrackSettings(player, options) {
	    classCallCheck(this, TextTrackSettings);

	    options.temporary = false;

	    var _this = possibleConstructorReturn(this, _ModalDialog.call(this, player, options));

	    _this.updateDisplay = bind(_this, _this.updateDisplay);

	    // fill the modal and pretend we have opened it
	    _this.fill();
	    _this.hasBeenOpened_ = _this.hasBeenFilled_ = true;

	    _this.endDialog = createEl('p', {
	      className: 'vjs-control-text',
	      textContent: _this.localize('End of dialog window.')
	    });
	    _this.el().appendChild(_this.endDialog);

	    _this.setDefaults();

	    // Grab `persistTextTrackSettings` from the player options if not passed in child options
	    if (options.persistTextTrackSettings === undefined) {
	      _this.options_.persistTextTrackSettings = _this.options_.playerOptions.persistTextTrackSettings;
	    }

	    _this.on(_this.$('.vjs-done-button'), 'click', function () {
	      _this.saveSettings();
	      _this.close();
	    });

	    _this.on(_this.$('.vjs-default-button'), 'click', function () {
	      _this.setDefaults();
	      _this.updateDisplay();
	    });

	    each(selectConfigs, function (config) {
	      _this.on(_this.$(config.selector), 'change', _this.updateDisplay);
	    });

	    if (_this.options_.persistTextTrackSettings) {
	      _this.restoreSettings();
	    }
	    return _this;
	  }

	  TextTrackSettings.prototype.dispose = function dispose() {
	    this.endDialog = null;

	    _ModalDialog.prototype.dispose.call(this);
	  };

	  /**
	   * Create a <select> element with configured options.
	   *
	   * @param {string} key
	   *        Configuration key to use during creation.
	   *
	   * @return {string}
	   *         An HTML string.
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElSelect_ = function createElSelect_(key) {
	    var _this2 = this;

	    var legendId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'label';

	    var config = selectConfigs[key];
	    var id = config.id.replace('%s', this.id_);
	    var selectLabelledbyIds = [legendId, id].join(' ').trim();

	    return ['<' + type + ' id="' + id + '" class="' + (type === 'label' ? 'vjs-label' : '') + '">', this.localize(config.label), '</' + type + '>', '<select aria-labelledby="' + selectLabelledbyIds + '">'].concat(config.options.map(function (o) {
	      var optionId = id + '-' + o[1].replace(/\W+/g, '');

	      return ['<option id="' + optionId + '" value="' + o[0] + '" ', 'aria-labelledby="' + selectLabelledbyIds + ' ' + optionId + '">', _this2.localize(o[1]), '</option>'].join('');
	    })).concat('</select>').join('');
	  };

	  /**
	   * Create foreground color element for the component
	   *
	   * @return {string}
	   *         An HTML string.
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElFgColor_ = function createElFgColor_() {
	    var legendId = 'captions-text-legend-' + this.id_;

	    return ['<fieldset class="vjs-fg-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize('Text'), '</legend>', this.createElSelect_('color', legendId), '<span class="vjs-text-opacity vjs-opacity">', this.createElSelect_('textOpacity', legendId), '</span>', '</fieldset>'].join('');
	  };

	  /**
	   * Create background color element for the component
	   *
	   * @return {string}
	   *         An HTML string.
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElBgColor_ = function createElBgColor_() {
	    var legendId = 'captions-background-' + this.id_;

	    return ['<fieldset class="vjs-bg-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize('Background'), '</legend>', this.createElSelect_('backgroundColor', legendId), '<span class="vjs-bg-opacity vjs-opacity">', this.createElSelect_('backgroundOpacity', legendId), '</span>', '</fieldset>'].join('');
	  };

	  /**
	   * Create window color element for the component
	   *
	   * @return {string}
	   *         An HTML string.
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElWinColor_ = function createElWinColor_() {
	    var legendId = 'captions-window-' + this.id_;

	    return ['<fieldset class="vjs-window-color vjs-track-setting">', '<legend id="' + legendId + '">', this.localize('Window'), '</legend>', this.createElSelect_('windowColor', legendId), '<span class="vjs-window-opacity vjs-opacity">', this.createElSelect_('windowOpacity', legendId), '</span>', '</fieldset>'].join('');
	  };

	  /**
	   * Create color elements for the component
	   *
	   * @return {Element}
	   *         The element that was created
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElColors_ = function createElColors_() {
	    return createEl('div', {
	      className: 'vjs-track-settings-colors',
	      innerHTML: [this.createElFgColor_(), this.createElBgColor_(), this.createElWinColor_()].join('')
	    });
	  };

	  /**
	   * Create font elements for the component
	   *
	   * @return {Element}
	   *         The element that was created.
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElFont_ = function createElFont_() {
	    return createEl('div', {
	      className: 'vjs-track-settings-font',
	      innerHTML: ['<fieldset class="vjs-font-percent vjs-track-setting">', this.createElSelect_('fontPercent', '', 'legend'), '</fieldset>', '<fieldset class="vjs-edge-style vjs-track-setting">', this.createElSelect_('edgeStyle', '', 'legend'), '</fieldset>', '<fieldset class="vjs-font-family vjs-track-setting">', this.createElSelect_('fontFamily', '', 'legend'), '</fieldset>'].join('')
	    });
	  };

	  /**
	   * Create controls for the component
	   *
	   * @return {Element}
	   *         The element that was created.
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.createElControls_ = function createElControls_() {
	    var defaultsDescription = this.localize('restore all settings to the default values');

	    return createEl('div', {
	      className: 'vjs-track-settings-controls',
	      innerHTML: ['<button type="button" class="vjs-default-button" title="' + defaultsDescription + '">', this.localize('Reset'), '<span class="vjs-control-text"> ' + defaultsDescription + '</span>', '</button>', '<button type="button" class="vjs-done-button">' + this.localize('Done') + '</button>'].join('')
	    });
	  };

	  TextTrackSettings.prototype.content = function content() {
	    return [this.createElColors_(), this.createElFont_(), this.createElControls_()];
	  };

	  TextTrackSettings.prototype.label = function label() {
	    return this.localize('Caption Settings Dialog');
	  };

	  TextTrackSettings.prototype.description = function description() {
	    return this.localize('Beginning of dialog window. Escape will cancel and close the window.');
	  };

	  TextTrackSettings.prototype.buildCSSClass = function buildCSSClass() {
	    return _ModalDialog.prototype.buildCSSClass.call(this) + ' vjs-text-track-settings';
	  };

	  /**
	   * Gets an object of text track settings (or null).
	   *
	   * @return {Object}
	   *         An object with config values parsed from the DOM or localStorage.
	   */


	  TextTrackSettings.prototype.getValues = function getValues() {
	    var _this3 = this;

	    return reduce(selectConfigs, function (accum, config, key) {
	      var value = getSelectedOptionValue(_this3.$(config.selector), config.parser);

	      if (value !== undefined) {
	        accum[key] = value;
	      }

	      return accum;
	    }, {});
	  };

	  /**
	   * Sets text track settings from an object of values.
	   *
	   * @param {Object} values
	   *        An object with config values parsed from the DOM or localStorage.
	   */


	  TextTrackSettings.prototype.setValues = function setValues(values) {
	    var _this4 = this;

	    each(selectConfigs, function (config, key) {
	      setSelectedOption(_this4.$(config.selector), values[key], config.parser);
	    });
	  };

	  /**
	   * Sets all `<select>` elements to their default values.
	   */


	  TextTrackSettings.prototype.setDefaults = function setDefaults() {
	    var _this5 = this;

	    each(selectConfigs, function (config) {
	      var index = config.hasOwnProperty('default') ? config['default'] : 0;

	      _this5.$(config.selector).selectedIndex = index;
	    });
	  };

	  /**
	   * Restore texttrack settings from localStorage
	   */


	  TextTrackSettings.prototype.restoreSettings = function restoreSettings() {
	    var values = void 0;

	    try {
	      values = JSON.parse(window.localStorage.getItem(LOCAL_STORAGE_KEY));
	    } catch (err) {
	      log.warn(err);
	    }

	    if (values) {
	      this.setValues(values);
	    }
	  };

	  /**
	   * Save text track settings to localStorage
	   */


	  TextTrackSettings.prototype.saveSettings = function saveSettings() {
	    if (!this.options_.persistTextTrackSettings) {
	      return;
	    }

	    var values = this.getValues();

	    try {
	      if (Object.keys(values).length) {
	        window.localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(values));
	      } else {
	        window.localStorage.removeItem(LOCAL_STORAGE_KEY);
	      }
	    } catch (err) {
	      log.warn(err);
	    }
	  };

	  /**
	   * Update display of text track settings
	   */


	  TextTrackSettings.prototype.updateDisplay = function updateDisplay() {
	    var ttDisplay = this.player_.getChild('textTrackDisplay');

	    if (ttDisplay) {
	      ttDisplay.updateDisplay();
	    }
	  };

	  /**
	   * conditionally blur the element and refocus the captions button
	   *
	   * @private
	   */


	  TextTrackSettings.prototype.conditionalBlur_ = function conditionalBlur_() {
	    this.previouslyActiveEl_ = null;
	    this.off(document, 'keydown', this.handleKeyDown);

	    var cb = this.player_.controlBar;
	    var subsCapsBtn = cb && cb.subsCapsButton;
	    var ccBtn = cb && cb.captionsButton;

	    if (subsCapsBtn) {
	      subsCapsBtn.focus();
	    } else if (ccBtn) {
	      ccBtn.focus();
	    }
	  };

	  return TextTrackSettings;
	}(ModalDialog);

	Component.registerComponent('TextTrackSettings', TextTrackSettings);

	/**
	 * @file resize-manager.js
	 */
	/**
	 * A Resize Manager. It is in charge of triggering `playerresize` on the player in the right conditions.
	 *
	 * It'll either create an iframe and use a debounced resize handler on it or use the new {@link https://wicg.github.io/ResizeObserver/|ResizeObserver}.
	 *
	 * If the ResizeObserver is available natively, it will be used. A polyfill can be passed in as an option.
	 * If a `playerresize` event is not needed, the ResizeManager component can be removed from the player, see the example below.
	 * @example <caption>How to disable the resize manager</caption>
	 * const player = videojs('#vid', {
	 *   resizeManager: false
	 * });
	 *
	 * @see {@link https://wicg.github.io/ResizeObserver/|ResizeObserver specification}
	 *
	 * @extends Component
	 */

	var ResizeManager = function (_Component) {
	  inherits(ResizeManager, _Component);

	  /**
	   * Create the ResizeManager.
	   *
	   * @param {Object} player
	   *        The `Player` that this class should be attached to.
	   *
	   * @param {Object} [options]
	   *        The key/value store of ResizeManager options.
	   *
	   * @param {Object} [options.ResizeObserver]
	   *        A polyfill for ResizeObserver can be passed in here.
	   *        If this is set to null it will ignore the native ResizeObserver and fall back to the iframe fallback.
	   */
	  function ResizeManager(player, options) {
	    classCallCheck(this, ResizeManager);

	    var RESIZE_OBSERVER_AVAILABLE = options.ResizeObserver || window.ResizeObserver;

	    // if `null` was passed, we want to disable the ResizeObserver
	    if (options.ResizeObserver === null) {
	      RESIZE_OBSERVER_AVAILABLE = false;
	    }

	    // Only create an element when ResizeObserver isn't available
	    var options_ = mergeOptions({ createEl: !RESIZE_OBSERVER_AVAILABLE }, options);

	    var _this = possibleConstructorReturn(this, _Component.call(this, player, options_));

	    _this.ResizeObserver = options.ResizeObserver || window.ResizeObserver;
	    _this.loadListener_ = null;
	    _this.resizeObserver_ = null;
	    _this.debouncedHandler_ = debounce(function () {
	      _this.resizeHandler();
	    }, 100, false, _this);

	    if (RESIZE_OBSERVER_AVAILABLE) {
	      _this.resizeObserver_ = new _this.ResizeObserver(_this.debouncedHandler_);
	      _this.resizeObserver_.observe(player.el());
	    } else {
	      _this.loadListener_ = function () {
	        if (!_this.el_ || !_this.el_.contentWindow) {
	          return;
	        }

	        on(_this.el_.contentWindow, 'resize', _this.debouncedHandler_);
	      };

	      _this.one('load', _this.loadListener_);
	    }
	    return _this;
	  }

	  ResizeManager.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'iframe', {
	      className: 'vjs-resize-manager'
	    });
	  };

	  /**
	   * Called when a resize is triggered on the iframe or a resize is observed via the ResizeObserver
	   *
	   * @fires Player#playerresize
	   */


	  ResizeManager.prototype.resizeHandler = function resizeHandler() {
	    /**
	     * Called when the player size has changed
	     *
	     * @event Player#playerresize
	     * @type {EventTarget~Event}
	     */
	    // make sure player is still around to trigger
	    // prevents this from causing an error after dispose
	    if (!this.player_ || !this.player_.trigger) {
	      return;
	    }

	    this.player_.trigger('playerresize');
	  };

	  ResizeManager.prototype.dispose = function dispose() {
	    if (this.debouncedHandler_) {
	      this.debouncedHandler_.cancel();
	    }

	    if (this.resizeObserver_) {
	      if (this.player_.el()) {
	        this.resizeObserver_.unobserve(this.player_.el());
	      }
	      this.resizeObserver_.disconnect();
	    }

	    if (this.el_ && this.el_.contentWindow) {
	      off(this.el_.contentWindow, 'resize', this.debouncedHandler_);
	    }

	    if (this.loadListener_) {
	      this.off('load', this.loadListener_);
	    }

	    this.ResizeObserver = null;
	    this.resizeObserver = null;
	    this.debouncedHandler_ = null;
	    this.loadListener_ = null;
	  };

	  return ResizeManager;
	}(Component);

	Component.registerComponent('ResizeManager', ResizeManager);

	/**
	 * This function is used to fire a sourceset when there is something
	 * similar to `mediaEl.load()` being called. It will try to find the source via
	 * the `src` attribute and then the `<source>` elements. It will then fire `sourceset`
	 * with the source that was found or empty string if we cannot know. If it cannot
	 * find a source then `sourceset` will not be fired.
	 *
	 * @param {Html5} tech
	 *        The tech object that sourceset was setup on
	 *
	 * @return {boolean}
	 *         returns false if the sourceset was not fired and true otherwise.
	 */
	var sourcesetLoad = function sourcesetLoad(tech) {
	  var el = tech.el();

	  // if `el.src` is set, that source will be loaded.
	  if (el.hasAttribute('src')) {
	    tech.triggerSourceset(el.src);
	    return true;
	  }

	  /**
	   * Since there isn't a src property on the media element, source elements will be used for
	   * implementing the source selection algorithm. This happens asynchronously and
	   * for most cases were there is more than one source we cannot tell what source will
	   * be loaded, without re-implementing the source selection algorithm. At this time we are not
	   * going to do that. There are three special cases that we do handle here though:
	   *
	   * 1. If there are no sources, do not fire `sourceset`.
	   * 2. If there is only one `<source>` with a `src` property/attribute that is our `src`
	   * 3. If there is more than one `<source>` but all of them have the same `src` url.
	   *    That will be our src.
	   */
	  var sources = tech.$$('source');
	  var srcUrls = [];
	  var src = '';

	  // if there are no sources, do not fire sourceset
	  if (!sources.length) {
	    return false;
	  }

	  // only count valid/non-duplicate source elements
	  for (var i = 0; i < sources.length; i++) {
	    var url = sources[i].src;

	    if (url && srcUrls.indexOf(url) === -1) {
	      srcUrls.push(url);
	    }
	  }

	  // there were no valid sources
	  if (!srcUrls.length) {
	    return false;
	  }

	  // there is only one valid source element url
	  // use that
	  if (srcUrls.length === 1) {
	    src = srcUrls[0];
	  }

	  tech.triggerSourceset(src);
	  return true;
	};

	/**
	 * our implementation of an `innerHTML` descriptor for browsers
	 * that do not have one.
	 */
	var innerHTMLDescriptorPolyfill = {};

	if (!IS_IE8) {
	  innerHTMLDescriptorPolyfill = Object.defineProperty({}, 'innerHTML', {
	    get: function get() {
	      return this.cloneNode(true).innerHTML;
	    },
	    set: function set(v) {
	      // make a dummy node to use innerHTML on
	      var dummy = document.createElement(this.nodeName.toLowerCase());

	      // set innerHTML to the value provided
	      dummy.innerHTML = v;

	      // make a document fragment to hold the nodes from dummy
	      var docFrag = document.createDocumentFragment();

	      // copy all of the nodes created by the innerHTML on dummy
	      // to the document fragment
	      while (dummy.childNodes.length) {
	        docFrag.appendChild(dummy.childNodes[0]);
	      }

	      // remove content
	      this.innerText = '';

	      // now we add all of that html in one by appending the
	      // document fragment. This is how innerHTML does it.
	      window.Element.prototype.appendChild.call(this, docFrag);

	      // then return the result that innerHTML's setter would
	      return this.innerHTML;
	    }
	  });
	}
	/**
	 * Get a property descriptor given a list of priorities and the
	 * property to get.
	 */
	var getDescriptor = function getDescriptor(priority, prop) {
	  var descriptor = {};

	  for (var i = 0; i < priority.length; i++) {
	    descriptor = Object.getOwnPropertyDescriptor(priority[i], prop);

	    if (descriptor && descriptor.set && descriptor.get) {
	      break;
	    }
	  }

	  descriptor.enumerable = true;
	  descriptor.configurable = true;

	  return descriptor;
	};

	var getInnerHTMLDescriptor = function getInnerHTMLDescriptor(tech) {
	  return getDescriptor([tech.el(), window.HTMLMediaElement.prototype, window.Element.prototype, innerHTMLDescriptorPolyfill], 'innerHTML');
	};

	/**
	 * Patches browser internal functions so that we can tell syncronously
	 * if a `<source>` was appended to the media element. For some reason this
	 * causes a `sourceset` if the the media element is ready and has no source.
	 * This happens when:
	 * - The page has just loaded and the media element does not have a source.
	 * - The media element was emptied of all sources, then `load()` was called.
	 *
	 * It does this by patching the following functions/properties when they are supported:
	 *
	 * - `append()` - can be used to add a `<source>` element to the media element
	 * - `appendChild()` - can be used to add a `<source>` element to the media element
	 * - `insertAdjacentHTML()` -  can be used to add a `<source>` element to the media element
	 * - `innerHTML` -  can be used to add a `<source>` element to the media element
	 *
	 * @param {Html5} tech
	 *        The tech object that sourceset is being setup on.
	 */
	var firstSourceWatch = function firstSourceWatch(tech) {
	  var el = tech.el();

	  // make sure firstSourceWatch isn't setup twice.
	  if (el.resetSourceWatch_) {
	    return;
	  }

	  var old = {};
	  var innerDescriptor = getInnerHTMLDescriptor(tech);
	  var appendWrapper = function appendWrapper(appendFn) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      var retval = appendFn.apply(el, args);

	      sourcesetLoad(tech);

	      return retval;
	    };
	  };

	  ['append', 'appendChild', 'insertAdjacentHTML'].forEach(function (k) {
	    if (!el[k]) {
	      return;
	    }

	    // store the old function
	    old[k] = el[k];

	    // call the old function with a sourceset if a source
	    // was loaded
	    el[k] = appendWrapper(old[k]);
	  });

	  Object.defineProperty(el, 'innerHTML', mergeOptions(innerDescriptor, {
	    set: appendWrapper(innerDescriptor.set)
	  }));

	  el.resetSourceWatch_ = function () {
	    el.resetSourceWatch_ = null;
	    Object.keys(old).forEach(function (k) {
	      el[k] = old[k];
	    });

	    Object.defineProperty(el, 'innerHTML', innerDescriptor);
	  };

	  // on the first sourceset, we need to revert our changes
	  tech.one('sourceset', el.resetSourceWatch_);
	};

	/**
	 * our implementation of a `src` descriptor for browsers
	 * that do not have one.
	 */

	var srcDescriptorPolyfill = {};

	if (!IS_IE8) {
	  srcDescriptorPolyfill = Object.defineProperty({}, 'src', {
	    get: function get() {
	      if (this.hasAttribute('src')) {
	        return getAbsoluteURL(window.Element.prototype.getAttribute.call(this, 'src'));
	      }

	      return '';
	    },
	    set: function set(v) {
	      window.Element.prototype.setAttribute.call(this, 'src', v);

	      return v;
	    }
	  });
	}

	var getSrcDescriptor = function getSrcDescriptor(tech) {
	  return getDescriptor([tech.el(), window.HTMLMediaElement.prototype, srcDescriptorPolyfill], 'src');
	};

	/**
	 * setup `sourceset` handling on the `Html5` tech. This function
	 * patches the following element properties/functions:
	 *
	 * - `src` - to determine when `src` is set
	 * - `setAttribute()` - to determine when `src` is set
	 * - `load()` - this re-triggers the source selection algorithm, and can
	 *              cause a sourceset.
	 *
	 * If there is no source when we are adding `sourceset` support or during a `load()`
	 * we also patch the functions listed in `firstSourceWatch`.
	 *
	 * @param {Html5} tech
	 *        The tech to patch
	 */
	var setupSourceset = function setupSourceset(tech) {
	  if (!tech.featuresSourceset) {
	    return;
	  }

	  var el = tech.el();

	  // make sure sourceset isn't setup twice.
	  if (el.resetSourceset_) {
	    return;
	  }

	  var srcDescriptor = getSrcDescriptor(tech);
	  var oldSetAttribute = el.setAttribute;
	  var oldLoad = el.load;

	  Object.defineProperty(el, 'src', mergeOptions(srcDescriptor, {
	    set: function set(v) {
	      var retval = srcDescriptor.set.call(el, v);

	      // we use the getter here to get the actual value set on src
	      tech.triggerSourceset(el.src);

	      return retval;
	    }
	  }));

	  el.setAttribute = function (n, v) {
	    var retval = oldSetAttribute.call(el, n, v);

	    if (/src/i.test(n)) {
	      tech.triggerSourceset(el.src);
	    }

	    return retval;
	  };

	  el.load = function () {
	    var retval = oldLoad.call(el);

	    // if load was called, but there was no source to fire
	    // sourceset on. We have to watch for a source append
	    // as that can trigger a `sourceset` when the media element
	    // has no source
	    if (!sourcesetLoad(tech)) {
	      tech.triggerSourceset('');
	      firstSourceWatch(tech);
	    }

	    return retval;
	  };

	  if (el.currentSrc) {
	    tech.triggerSourceset(el.currentSrc);
	  } else if (!sourcesetLoad(tech)) {
	    firstSourceWatch(tech);
	  }

	  el.resetSourceset_ = function () {
	    el.resetSourceset_ = null;
	    el.load = oldLoad;
	    el.setAttribute = oldSetAttribute;
	    Object.defineProperty(el, 'src', srcDescriptor);
	    if (el.resetSourceWatch_) {
	      el.resetSourceWatch_();
	    }
	  };
	};

	var _templateObject$2 = taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used.\n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used.\n            This may prevent text tracks from loading.']);

	/**
	 * @file html5.js
	 */
	/**
	 * HTML5 Media Controller - Wrapper for HTML5 Media API
	 *
	 * @mixes Tech~SouceHandlerAdditions
	 * @extends Tech
	 */

	var Html5 = function (_Tech) {
	  inherits(Html5, _Tech);

	  /**
	   * Create an instance of this Tech.
	   *
	   * @param {Object} [options]
	   *        The key/value store of player options.
	   *
	   * @param {Component~ReadyCallback} ready
	   *        Callback function to call when the `HTML5` Tech is ready.
	   */
	  function Html5(options, ready) {
	    classCallCheck(this, Html5);

	    var _this = possibleConstructorReturn(this, _Tech.call(this, options, ready));

	    var source = options.source;
	    var crossoriginTracks = false;

	    // Set the source if one is provided
	    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)
	    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source
	    // anyway so the error gets fired.
	    if (source && (_this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {
	      _this.setSource(source);
	    } else {
	      _this.handleLateInit_(_this.el_);
	    }

	    // setup sourceset after late sourceset/init
	    if (options.enableSourceset) {
	      _this.setupSourcesetHandling_();
	    }

	    if (_this.el_.hasChildNodes()) {

	      var nodes = _this.el_.childNodes;
	      var nodesLength = nodes.length;
	      var removeNodes = [];

	      while (nodesLength--) {
	        var node = nodes[nodesLength];
	        var nodeName = node.nodeName.toLowerCase();

	        if (nodeName === 'track') {
	          if (!_this.featuresNativeTextTracks) {
	            // Empty video tag tracks so the built-in player doesn't use them also.
	            // This may not be fast enough to stop HTML5 browsers from reading the tags
	            // so we'll need to turn off any default tracks if we're manually doing
	            // captions and subtitles. videoElement.textTracks
	            removeNodes.push(node);
	          } else {
	            // store HTMLTrackElement and TextTrack to remote list
	            _this.remoteTextTrackEls().addTrackElement_(node);
	            _this.remoteTextTracks().addTrack(node.track);
	            _this.textTracks().addTrack(node.track);
	            if (!crossoriginTracks && !_this.el_.hasAttribute('crossorigin') && isCrossOrigin(node.src)) {
	              crossoriginTracks = true;
	            }
	          }
	        }
	      }

	      for (var i = 0; i < removeNodes.length; i++) {
	        _this.el_.removeChild(removeNodes[i]);
	      }
	    }

	    _this.proxyNativeTracks_();
	    if (_this.featuresNativeTextTracks && crossoriginTracks) {
	      log.warn(tsml(_templateObject$2));
	    }

	    // prevent iOS Safari from disabling metadata text tracks during native playback
	    _this.restoreMetadataTracksInIOSNativePlayer_();

	    // Determine if native controls should be used
	    // Our goal should be to get the custom controls on mobile solid everywhere
	    // so we can remove this all together. Right now this will block custom
	    // controls on touch enabled laptops like the Chrome Pixel
	    if ((TOUCH_ENABLED || IS_IPHONE || IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {
	      _this.setControls(true);
	    }

	    // on iOS, we want to proxy `webkitbeginfullscreen` and `webkitendfullscreen`
	    // into a `fullscreenchange` event
	    _this.proxyWebkitFullscreen_();

	    _this.triggerReady();
	    return _this;
	  }

	  /**
	   * Dispose of `HTML5` media element and remove all tracks.
	   */


	  Html5.prototype.dispose = function dispose() {
	    if (this.el_ && this.el_.resetSourceset_) {
	      this.el_.resetSourceset_();
	    }
	    Html5.disposeMediaElement(this.el_);
	    this.options_ = null;

	    // tech will handle clearing of the emulated track list
	    _Tech.prototype.dispose.call(this);
	  };

	  /**
	   * Modify the media element so that we can detect when
	   * the source is changed. Fires `sourceset` just after the source has changed
	   */


	  Html5.prototype.setupSourcesetHandling_ = function setupSourcesetHandling_() {
	    setupSourceset(this);
	  };

	  /**
	   * When a captions track is enabled in the iOS Safari native player, all other
	   * tracks are disabled (including metadata tracks), which nulls all of their
	   * associated cue points. This will restore metadata tracks to their pre-fullscreen
	   * state in those cases so that cue points are not needlessly lost.
	   *
	   * @private
	   */


	  Html5.prototype.restoreMetadataTracksInIOSNativePlayer_ = function restoreMetadataTracksInIOSNativePlayer_() {
	    var textTracks = this.textTracks();
	    var metadataTracksPreFullscreenState = void 0;

	    // captures a snapshot of every metadata track's current state
	    var takeMetadataTrackSnapshot = function takeMetadataTrackSnapshot() {
	      metadataTracksPreFullscreenState = [];

	      for (var i = 0; i < textTracks.length; i++) {
	        var track = textTracks[i];

	        if (track.kind === 'metadata') {
	          metadataTracksPreFullscreenState.push({
	            track: track,
	            storedMode: track.mode
	          });
	        }
	      }
	    };

	    // snapshot each metadata track's initial state, and update the snapshot
	    // each time there is a track 'change' event
	    takeMetadataTrackSnapshot();
	    textTracks.addEventListener('change', takeMetadataTrackSnapshot);

	    this.on('dispose', function () {
	      return textTracks.removeEventListener('change', takeMetadataTrackSnapshot);
	    });

	    var restoreTrackMode = function restoreTrackMode() {
	      for (var i = 0; i < metadataTracksPreFullscreenState.length; i++) {
	        var storedTrack = metadataTracksPreFullscreenState[i];

	        if (storedTrack.track.mode === 'disabled' && storedTrack.track.mode !== storedTrack.storedMode) {
	          storedTrack.track.mode = storedTrack.storedMode;
	        }
	      }
	      // we only want this handler to be executed on the first 'change' event
	      textTracks.removeEventListener('change', restoreTrackMode);
	    };

	    // when we enter fullscreen playback, stop updating the snapshot and
	    // restore all track modes to their pre-fullscreen state
	    this.on('webkitbeginfullscreen', function () {
	      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);

	      // remove the listener before adding it just in case it wasn't previously removed
	      textTracks.removeEventListener('change', restoreTrackMode);
	      textTracks.addEventListener('change', restoreTrackMode);
	    });

	    // start updating the snapshot again after leaving fullscreen
	    this.on('webkitendfullscreen', function () {
	      // remove the listener before adding it just in case it wasn't previously removed
	      textTracks.removeEventListener('change', takeMetadataTrackSnapshot);
	      textTracks.addEventListener('change', takeMetadataTrackSnapshot);

	      // remove the restoreTrackMode handler in case it wasn't triggered during fullscreen playback
	      textTracks.removeEventListener('change', restoreTrackMode);
	    });
	  };

	  /**
	   * Proxy all native track list events to our track lists if the browser we are playing
	   * in supports that type of track list.
	   *
	   * @private
	   */


	  Html5.prototype.proxyNativeTracks_ = function proxyNativeTracks_() {
	    var _this2 = this;

	    NORMAL.names.forEach(function (name) {
	      var props = NORMAL[name];
	      var elTracks = _this2.el()[props.getterName];
	      var techTracks = _this2[props.getterName]();

	      if (!_this2['featuresNative' + props.capitalName + 'Tracks'] || !elTracks || !elTracks.addEventListener) {
	        return;
	      }
	      var listeners = {
	        change: function change(e) {
	          techTracks.trigger({
	            type: 'change',
	            target: techTracks,
	            currentTarget: techTracks,
	            srcElement: techTracks
	          });
	        },
	        addtrack: function addtrack(e) {
	          techTracks.addTrack(e.track);
	        },
	        removetrack: function removetrack(e) {
	          techTracks.removeTrack(e.track);
	        }
	      };
	      var removeOldTracks = function removeOldTracks() {
	        var removeTracks = [];

	        for (var i = 0; i < techTracks.length; i++) {
	          var found = false;

	          for (var j = 0; j < elTracks.length; j++) {
	            if (elTracks[j] === techTracks[i]) {
	              found = true;
	              break;
	            }
	          }

	          if (!found) {
	            removeTracks.push(techTracks[i]);
	          }
	        }

	        while (removeTracks.length) {
	          techTracks.removeTrack(removeTracks.shift());
	        }
	      };

	      Object.keys(listeners).forEach(function (eventName) {
	        var listener = listeners[eventName];

	        elTracks.addEventListener(eventName, listener);
	        _this2.on('dispose', function (e) {
	          return elTracks.removeEventListener(eventName, listener);
	        });
	      });

	      // Remove (native) tracks that are not used anymore
	      _this2.on('loadstart', removeOldTracks);
	      _this2.on('dispose', function (e) {
	        return _this2.off('loadstart', removeOldTracks);
	      });
	    });
	  };

	  /**
	   * Create the `Html5` Tech's DOM element.
	   *
	   * @return {Element}
	   *         The element that gets created.
	   */


	  Html5.prototype.createEl = function createEl$$1() {
	    var el = this.options_.tag;

	    // Check if this browser supports moving the element into the box.
	    // On the iPhone video will break if you move the element,
	    // So we have to create a brand new element.
	    // If we ingested the player div, we do not need to move the media element.
	    if (!el || !(this.options_.playerElIngest || this.movingMediaElementInDOM)) {

	      // If the original tag is still there, clone and remove it.
	      if (el) {
	        var clone = el.cloneNode(true);

	        if (el.parentNode) {
	          el.parentNode.insertBefore(clone, el);
	        }
	        Html5.disposeMediaElement(el);
	        el = clone;
	      } else {
	        el = document.createElement('video');

	        // determine if native controls should be used
	        var tagAttributes = this.options_.tag && getAttributes(this.options_.tag);
	        var attributes = mergeOptions({}, tagAttributes);

	        if (!TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {
	          delete attributes.controls;
	        }

	        setAttributes(el, assign(attributes, {
	          id: this.options_.techId,
	          'class': 'vjs-tech'
	        }));
	      }

	      el.playerId = this.options_.playerId;
	    }

	    if (typeof this.options_.preload !== 'undefined') {
	      setAttribute(el, 'preload', this.options_.preload);
	    }

	    // Update specific tag settings, in case they were overridden
	    // `autoplay` has to be *last* so that `muted` and `playsinline` are present
	    // when iOS/Safari or other browsers attempt to autoplay.
	    var settingsAttrs = ['loop', 'muted', 'playsinline', 'autoplay'];

	    for (var i = 0; i < settingsAttrs.length; i++) {
	      var attr = settingsAttrs[i];
	      var value = this.options_[attr];

	      if (typeof value !== 'undefined') {
	        if (value) {
	          setAttribute(el, attr, attr);
	        } else {
	          removeAttribute(el, attr);
	        }
	        el[attr] = value;
	      }
	    }

	    return el;
	  };

	  /**
	   * This will be triggered if the loadstart event has already fired, before videojs was
	   * ready. Two known examples of when this can happen are:
	   * 1. If we're loading the playback object after it has started loading
	   * 2. The media is already playing the (often with autoplay on) then
	   *
	   * This function will fire another loadstart so that videojs can catchup.
	   *
	   * @fires Tech#loadstart
	   *
	   * @return {undefined}
	   *         returns nothing.
	   */


	  Html5.prototype.handleLateInit_ = function handleLateInit_(el) {
	    if (el.networkState === 0 || el.networkState === 3) {
	      // The video element hasn't started loading the source yet
	      // or didn't find a source
	      return;
	    }

	    if (el.readyState === 0) {
	      // NetworkState is set synchronously BUT loadstart is fired at the
	      // end of the current stack, usually before setInterval(fn, 0).
	      // So at this point we know loadstart may have already fired or is
	      // about to fire, and either way the player hasn't seen it yet.
	      // We don't want to fire loadstart prematurely here and cause a
	      // double loadstart so we'll wait and see if it happens between now
	      // and the next loop, and fire it if not.
	      // HOWEVER, we also want to make sure it fires before loadedmetadata
	      // which could also happen between now and the next loop, so we'll
	      // watch for that also.
	      var loadstartFired = false;
	      var setLoadstartFired = function setLoadstartFired() {
	        loadstartFired = true;
	      };

	      this.on('loadstart', setLoadstartFired);

	      var triggerLoadstart = function triggerLoadstart() {
	        // We did miss the original loadstart. Make sure the player
	        // sees loadstart before loadedmetadata
	        if (!loadstartFired) {
	          this.trigger('loadstart');
	        }
	      };

	      this.on('loadedmetadata', triggerLoadstart);

	      this.ready(function () {
	        this.off('loadstart', setLoadstartFired);
	        this.off('loadedmetadata', triggerLoadstart);

	        if (!loadstartFired) {
	          // We did miss the original native loadstart. Fire it now.
	          this.trigger('loadstart');
	        }
	      });

	      return;
	    }

	    // From here on we know that loadstart already fired and we missed it.
	    // The other readyState events aren't as much of a problem if we double
	    // them, so not going to go to as much trouble as loadstart to prevent
	    // that unless we find reason to.
	    var eventsToTrigger = ['loadstart'];

	    // loadedmetadata: newly equal to HAVE_METADATA (1) or greater
	    eventsToTrigger.push('loadedmetadata');

	    // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater
	    if (el.readyState >= 2) {
	      eventsToTrigger.push('loadeddata');
	    }

	    // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater
	    if (el.readyState >= 3) {
	      eventsToTrigger.push('canplay');
	    }

	    // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)
	    if (el.readyState >= 4) {
	      eventsToTrigger.push('canplaythrough');
	    }

	    // We still need to give the player time to add event listeners
	    this.ready(function () {
	      eventsToTrigger.forEach(function (type) {
	        this.trigger(type);
	      }, this);
	    });
	  };

	  /**
	   * Set current time for the `HTML5` tech.
	   *
	   * @param {number} seconds
	   *        Set the current time of the media to this.
	   */


	  Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {
	    try {
	      this.el_.currentTime = seconds;
	    } catch (e) {
	      log(e, 'Video is not ready. (Video.js)');
	      // this.warning(VideoJS.warnings.videoNotReady);
	    }
	  };

	  /**
	   * Get the current duration of the HTML5 media element.
	   *
	   * @return {number}
	   *         The duration of the media or 0 if there is no duration.
	   */


	  Html5.prototype.duration = function duration() {
	    var _this3 = this;

	    // Android Chrome will report duration as Infinity for VOD HLS until after
	    // playback has started, which triggers the live display erroneously.
	    // Return NaN if playback has not started and trigger a durationupdate once
	    // the duration can be reliably known.
	    if (this.el_.duration === Infinity && IS_ANDROID && IS_CHROME && this.el_.currentTime === 0) {
	      // Wait for the first `timeupdate` with currentTime > 0 - there may be
	      // several with 0
	      var checkProgress = function checkProgress() {
	        if (_this3.el_.currentTime > 0) {
	          // Trigger durationchange for genuinely live video
	          if (_this3.el_.duration === Infinity) {
	            _this3.trigger('durationchange');
	          }
	          _this3.off('timeupdate', checkProgress);
	        }
	      };

	      this.on('timeupdate', checkProgress);
	      return NaN;
	    }
	    return this.el_.duration || NaN;
	  };

	  /**
	   * Get the current width of the HTML5 media element.
	   *
	   * @return {number}
	   *         The width of the HTML5 media element.
	   */


	  Html5.prototype.width = function width() {
	    return this.el_.offsetWidth;
	  };

	  /**
	   * Get the current height of the HTML5 media element.
	   *
	   * @return {number}
	   *         The heigth of the HTML5 media element.
	   */


	  Html5.prototype.height = function height() {
	    return this.el_.offsetHeight;
	  };

	  /**
	   * Proxy iOS `webkitbeginfullscreen` and `webkitendfullscreen` into
	   * `fullscreenchange` event.
	   *
	   * @private
	   * @fires fullscreenchange
	   * @listens webkitendfullscreen
	   * @listens webkitbeginfullscreen
	   * @listens webkitbeginfullscreen
	   */


	  Html5.prototype.proxyWebkitFullscreen_ = function proxyWebkitFullscreen_() {
	    var _this4 = this;

	    if (!('webkitDisplayingFullscreen' in this.el_)) {
	      return;
	    }

	    var endFn = function endFn() {
	      this.trigger('fullscreenchange', { isFullscreen: false });
	    };

	    var beginFn = function beginFn() {
	      if ('webkitPresentationMode' in this.el_ && this.el_.webkitPresentationMode !== 'picture-in-picture') {
	        this.one('webkitendfullscreen', endFn);

	        this.trigger('fullscreenchange', { isFullscreen: true });
	      }
	    };

	    this.on('webkitbeginfullscreen', beginFn);
	    this.on('dispose', function () {
	      _this4.off('webkitbeginfullscreen', beginFn);
	      _this4.off('webkitendfullscreen', endFn);
	    });
	  };

	  /**
	   * Check if fullscreen is supported on the current playback device.
	   *
	   * @return {boolean}
	   *         - True if fullscreen is supported.
	   *         - False if fullscreen is not supported.
	   */


	  Html5.prototype.supportsFullScreen = function supportsFullScreen() {
	    if (typeof this.el_.webkitEnterFullScreen === 'function') {
	      var userAgent = window.navigator && window.navigator.userAgent || '';

	      // Seems to be broken in Chromium/Chrome && Safari in Leopard
	      if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {
	        return true;
	      }
	    }
	    return false;
	  };

	  /**
	   * Request that the `HTML5` Tech enter fullscreen.
	   */


	  Html5.prototype.enterFullScreen = function enterFullScreen() {
	    var video = this.el_;

	    if (video.paused && video.networkState <= video.HAVE_METADATA) {
	      // attempt to prime the video element for programmatic access
	      // this isn't necessary on the desktop but shouldn't hurt
	      this.el_.play();

	      // playing and pausing synchronously during the transition to fullscreen
	      // can get iOS ~6.1 devices into a play/pause loop
	      this.setTimeout(function () {
	        video.pause();
	        video.webkitEnterFullScreen();
	      }, 0);
	    } else {
	      video.webkitEnterFullScreen();
	    }
	  };

	  /**
	   * Request that the `HTML5` Tech exit fullscreen.
	   */


	  Html5.prototype.exitFullScreen = function exitFullScreen() {
	    this.el_.webkitExitFullScreen();
	  };

	  /**
	   * A getter/setter for the `Html5` Tech's source object.
	   * > Note: Please use {@link Html5#setSource}
	   *
	   * @param {Tech~SourceObject} [src]
	   *        The source object you want to set on the `HTML5` techs element.
	   *
	   * @return {Tech~SourceObject|undefined}
	   *         - The current source object when a source is not passed in.
	   *         - undefined when setting
	   *
	   * @deprecated Since version 5.
	   */


	  Html5.prototype.src = function src(_src) {
	    if (_src === undefined) {
	      return this.el_.src;
	    }

	    // Setting src through `src` instead of `setSrc` will be deprecated
	    this.setSrc(_src);
	  };

	  /**
	   * Reset the tech by removing all sources and then calling
	   * {@link Html5.resetMediaElement}.
	   */


	  Html5.prototype.reset = function reset() {
	    Html5.resetMediaElement(this.el_);
	  };

	  /**
	   * Get the current source on the `HTML5` Tech. Falls back to returning the source from
	   * the HTML5 media element.
	   *
	   * @return {Tech~SourceObject}
	   *         The current source object from the HTML5 tech. With a fallback to the
	   *         elements source.
	   */


	  Html5.prototype.currentSrc = function currentSrc() {
	    if (this.currentSource_) {
	      return this.currentSource_.src;
	    }
	    return this.el_.currentSrc;
	  };

	  /**
	   * Set controls attribute for the HTML5 media Element.
	   *
	   * @param {string} val
	   *        Value to set the controls attribute to
	   */


	  Html5.prototype.setControls = function setControls(val) {
	    this.el_.controls = !!val;
	  };

	  /**
	   * Create and returns a remote {@link TextTrack} object.
	   *
	   * @param {string} kind
	   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata)
	   *
	   * @param {string} [label]
	   *        Label to identify the text track
	   *
	   * @param {string} [language]
	   *        Two letter language abbreviation
	   *
	   * @return {TextTrack}
	   *         The TextTrack that gets created.
	   */


	  Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {
	    if (!this.featuresNativeTextTracks) {
	      return _Tech.prototype.addTextTrack.call(this, kind, label, language);
	    }

	    return this.el_.addTextTrack(kind, label, language);
	  };

	  /**
	   * Creates either native TextTrack or an emulated TextTrack depending
	   * on the value of `featuresNativeTextTracks`
	   *
	   * @param {Object} options
	   *        The object should contain the options to intialize the TextTrack with.
	   *
	   * @param {string} [options.kind]
	   *        `TextTrack` kind (subtitles, captions, descriptions, chapters, or metadata).
	   *
	   * @param {string} [options.label].
	   *        Label to identify the text track
	   *
	   * @param {string} [options.language]
	   *        Two letter language abbreviation.
	   *
	   * @param {boolean} [options.default]
	   *        Default this track to on.
	   *
	   * @param {string} [options.id]
	   *        The internal id to assign this track.
	   *
	   * @param {string} [options.src]
	   *        A source url for the track.
	   *
	   * @return {HTMLTrackElement}
	   *         The track element that gets created.
	   */


	  Html5.prototype.createRemoteTextTrack = function createRemoteTextTrack(options) {
	    if (!this.featuresNativeTextTracks) {
	      return _Tech.prototype.createRemoteTextTrack.call(this, options);
	    }
	    var htmlTrackElement = document.createElement('track');

	    if (options.kind) {
	      htmlTrackElement.kind = options.kind;
	    }
	    if (options.label) {
	      htmlTrackElement.label = options.label;
	    }
	    if (options.language || options.srclang) {
	      htmlTrackElement.srclang = options.language || options.srclang;
	    }
	    if (options['default']) {
	      htmlTrackElement['default'] = options['default'];
	    }
	    if (options.id) {
	      htmlTrackElement.id = options.id;
	    }
	    if (options.src) {
	      htmlTrackElement.src = options.src;
	    }

	    return htmlTrackElement;
	  };

	  /**
	   * Creates a remote text track object and returns an html track element.
	   *
	   * @param {Object} options The object should contain values for
	   * kind, language, label, and src (location of the WebVTT file)
	   * @param {Boolean} [manualCleanup=true] if set to false, the TextTrack will be
	   * automatically removed from the video element whenever the source changes
	   * @return {HTMLTrackElement} An Html Track Element.
	   * This can be an emulated {@link HTMLTrackElement} or a native one.
	   * @deprecated The default value of the "manualCleanup" parameter will default
	   * to "false" in upcoming versions of Video.js
	   */


	  Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
	    var htmlTrackElement = _Tech.prototype.addRemoteTextTrack.call(this, options, manualCleanup);

	    if (this.featuresNativeTextTracks) {
	      this.el().appendChild(htmlTrackElement);
	    }

	    return htmlTrackElement;
	  };

	  /**
	   * Remove remote `TextTrack` from `TextTrackList` object
	   *
	   * @param {TextTrack} track
	   *        `TextTrack` object to remove
	   */


	  Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
	    _Tech.prototype.removeRemoteTextTrack.call(this, track);

	    if (this.featuresNativeTextTracks) {
	      var tracks = this.$$('track');

	      var i = tracks.length;

	      while (i--) {
	        if (track === tracks[i] || track === tracks[i].track) {
	          this.el().removeChild(tracks[i]);
	        }
	      }
	    }
	  };

	  /**
	   * Gets available media playback quality metrics as specified by the W3C's Media
	   * Playback Quality API.
	   *
	   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
	   *
	   * @return {Object}
	   *         An object with supported media playback quality metrics
	   */


	  Html5.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
	    if (typeof this.el().getVideoPlaybackQuality === 'function') {
	      return this.el().getVideoPlaybackQuality();
	    }

	    var videoPlaybackQuality = {};

	    if (typeof this.el().webkitDroppedFrameCount !== 'undefined' && typeof this.el().webkitDecodedFrameCount !== 'undefined') {
	      videoPlaybackQuality.droppedVideoFrames = this.el().webkitDroppedFrameCount;
	      videoPlaybackQuality.totalVideoFrames = this.el().webkitDecodedFrameCount;
	    }

	    if (window.performance && typeof window.performance.now === 'function') {
	      videoPlaybackQuality.creationTime = window.performance.now();
	    } else if (window.performance && window.performance.timing && typeof window.performance.timing.navigationStart === 'number') {
	      videoPlaybackQuality.creationTime = window.Date.now() - window.performance.timing.navigationStart;
	    }

	    return videoPlaybackQuality;
	  };

	  return Html5;
	}(Tech);

	/* HTML5 Support Testing ---------------------------------------------------- */

	if (isReal()) {

	  /**
	   * Element for testing browser HTML5 media capabilities
	   *
	   * @type {Element}
	   * @constant
	   * @private
	   */
	  Html5.TEST_VID = document.createElement('video');
	  var track = document.createElement('track');

	  track.kind = 'captions';
	  track.srclang = 'en';
	  track.label = 'English';
	  Html5.TEST_VID.appendChild(track);
	}

	/**
	 * Check if HTML5 media is supported by this browser/device.
	 *
	 * @return {boolean}
	 *         - True if HTML5 media is supported.
	 *         - False if HTML5 media is not supported.
	 */
	Html5.isSupported = function () {
	  // IE9 with no Media Player is a LIAR! (#984)
	  try {
	    Html5.TEST_VID.volume = 0.5;
	  } catch (e) {
	    return false;
	  }

	  return !!(Html5.TEST_VID && Html5.TEST_VID.canPlayType);
	};

	/**
	 * Check if the tech can support the given type
	 *
	 * @param {string} type
	 *        The mimetype to check
	 * @return {string} 'probably', 'maybe', or '' (empty string)
	 */
	Html5.canPlayType = function (type) {
	  return Html5.TEST_VID.canPlayType(type);
	};

	/**
	 * Check if the tech can support the given source
	 * @param {Object} srcObj
	 *        The source object
	 * @param {Object} options
	 *        The options passed to the tech
	 * @return {string} 'probably', 'maybe', or '' (empty string)
	 */
	Html5.canPlaySource = function (srcObj, options) {
	  return Html5.canPlayType(srcObj.type);
	};

	/**
	 * Check if the volume can be changed in this browser/device.
	 * Volume cannot be changed in a lot of mobile devices.
	 * Specifically, it can't be changed from 1 on iOS.
	 *
	 * @return {boolean}
	 *         - True if volume can be controlled
	 *         - False otherwise
	 */
	Html5.canControlVolume = function () {
	  // IE will error if Windows Media Player not installed #3315
	  try {
	    var volume = Html5.TEST_VID.volume;

	    Html5.TEST_VID.volume = volume / 2 + 0.1;
	    return volume !== Html5.TEST_VID.volume;
	  } catch (e) {
	    return false;
	  }
	};

	/**
	 * Check if the volume can be muted in this browser/device.
	 * Some devices, e.g. iOS, don't allow changing volume
	 * but permits muting/unmuting.
	 *
	 * @return {bolean}
	 *      - True if volume can be muted
	 *      - False otherwise
	 */
	Html5.canMuteVolume = function () {
	  try {
	    var muted = Html5.TEST_VID.muted;

	    // in some versions of iOS muted property doesn't always
	    // work, so we want to set both property and attribute
	    Html5.TEST_VID.muted = !muted;
	    if (Html5.TEST_VID.muted) {
	      setAttribute(Html5.TEST_VID, 'muted', 'muted');
	    } else {
	      removeAttribute(Html5.TEST_VID, 'muted', 'muted');
	    }
	    return muted !== Html5.TEST_VID.muted;
	  } catch (e) {
	    return false;
	  }
	};

	/**
	 * Check if the playback rate can be changed in this browser/device.
	 *
	 * @return {boolean}
	 *         - True if playback rate can be controlled
	 *         - False otherwise
	 */
	Html5.canControlPlaybackRate = function () {
	  // Playback rate API is implemented in Android Chrome, but doesn't do anything
	  // https://github.com/videojs/video.js/issues/3180
	  if (IS_ANDROID && IS_CHROME && CHROME_VERSION < 58) {
	    return false;
	  }
	  // IE will error if Windows Media Player not installed #3315
	  try {
	    var playbackRate = Html5.TEST_VID.playbackRate;

	    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;
	    return playbackRate !== Html5.TEST_VID.playbackRate;
	  } catch (e) {
	    return false;
	  }
	};

	/**
	 * Check if we can override a video/audio elements attributes, with
	 * Object.defineProperty.
	 *
	 * @return {boolean}
	 *         - True if builtin attributes can be overriden
	 *         - False otherwise
	 */
	Html5.canOverrideAttributes = function () {
	  if (IS_IE8) {
	    return false;
	  }
	  // if we cannot overwrite the src/innerHTML property, there is no support
	  // iOS 7 safari for instance cannot do this.
	  try {
	    var noop = function noop() {};

	    Object.defineProperty(document.createElement('video'), 'src', { get: noop, set: noop });
	    Object.defineProperty(document.createElement('audio'), 'src', { get: noop, set: noop });
	    Object.defineProperty(document.createElement('video'), 'innerHTML', { get: noop, set: noop });
	    Object.defineProperty(document.createElement('audio'), 'innerHTML', { get: noop, set: noop });
	  } catch (e) {
	    return false;
	  }

	  return true;
	};

	/**
	 * Check to see if native `TextTrack`s are supported by this browser/device.
	 *
	 * @return {boolean}
	 *         - True if native `TextTrack`s are supported.
	 *         - False otherwise
	 */
	Html5.supportsNativeTextTracks = function () {
	  return IS_ANY_SAFARI || IS_IOS && IS_CHROME;
	};

	/**
	 * Check to see if native `VideoTrack`s are supported by this browser/device
	 *
	 * @return {boolean}
	 *        - True if native `VideoTrack`s are supported.
	 *        - False otherwise
	 */
	Html5.supportsNativeVideoTracks = function () {
	  return !!(Html5.TEST_VID && Html5.TEST_VID.videoTracks);
	};

	/**
	 * Check to see if native `AudioTrack`s are supported by this browser/device
	 *
	 * @return {boolean}
	 *        - True if native `AudioTrack`s are supported.
	 *        - False otherwise
	 */
	Html5.supportsNativeAudioTracks = function () {
	  return !!(Html5.TEST_VID && Html5.TEST_VID.audioTracks);
	};

	/**
	 * An array of events available on the Html5 tech.
	 *
	 * @private
	 * @type {Array}
	 */
	Html5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'resize', 'volumechange'];

	/**
	 * Boolean indicating whether the `Tech` supports volume control.
	 *
	 * @type {boolean}
	 * @default {@link Html5.canControlVolume}
	 */
	Html5.prototype.featuresVolumeControl = Html5.canControlVolume();

	/**
	 * Boolean indicating whether the `Tech` supports muting volume.
	 *
	 * @type {bolean}
	 * @default {@link Html5.canMuteVolume}
	 */
	Html5.prototype.featuresMuteControl = Html5.canMuteVolume();

	/**
	 * Boolean indicating whether the `Tech` supports changing the speed at which the media
	 * plays. Examples:
	 *   - Set player to play 2x (twice) as fast
	 *   - Set player to play 0.5x (half) as fast
	 *
	 * @type {boolean}
	 * @default {@link Html5.canControlPlaybackRate}
	 */
	Html5.prototype.featuresPlaybackRate = Html5.canControlPlaybackRate();

	/**
	 * Boolean indicating wether the `Tech` supports the `sourceset` event.
	 *
	 * @type {boolean}
	 * @default
	 */
	Html5.prototype.featuresSourceset = Html5.canOverrideAttributes();

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports the media element
	 * moving in the DOM. iOS breaks if you move the media element, so this is set this to
	 * false there. Everywhere else this should be true.
	 *
	 * @type {boolean}
	 * @default
	 */
	Html5.prototype.movingMediaElementInDOM = !IS_IOS;

	// TODO: Previous comment: No longer appears to be used. Can probably be removed.
	//       Is this true?
	/**
	 * Boolean indicating whether the `HTML5` tech currently supports automatic media resize
	 * when going into fullscreen.
	 *
	 * @type {boolean}
	 * @default
	 */
	Html5.prototype.featuresFullscreenResize = true;

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports the progress event.
	 * If this is false, manual `progress` events will be triggred instead.
	 *
	 * @type {boolean}
	 * @default
	 */
	Html5.prototype.featuresProgressEvents = true;

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports the timeupdate event.
	 * If this is false, manual `timeupdate` events will be triggred instead.
	 *
	 * @default
	 */
	Html5.prototype.featuresTimeupdateEvents = true;

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports native `TextTrack`s.
	 *
	 * @type {boolean}
	 * @default {@link Html5.supportsNativeTextTracks}
	 */
	Html5.prototype.featuresNativeTextTracks = Html5.supportsNativeTextTracks();

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports native `VideoTrack`s.
	 *
	 * @type {boolean}
	 * @default {@link Html5.supportsNativeVideoTracks}
	 */
	Html5.prototype.featuresNativeVideoTracks = Html5.supportsNativeVideoTracks();

	/**
	 * Boolean indicating whether the `HTML5` tech currently supports native `AudioTrack`s.
	 *
	 * @type {boolean}
	 * @default {@link Html5.supportsNativeAudioTracks}
	 */
	Html5.prototype.featuresNativeAudioTracks = Html5.supportsNativeAudioTracks();

	// HTML5 Feature detection and Device Fixes --------------------------------- //
	var canPlayType = Html5.TEST_VID && Html5.TEST_VID.constructor.prototype.canPlayType;
	var mpegurlRE = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
	var mp4RE = /^video\/mp4/i;

	Html5.patchCanPlayType = function () {

	  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so
	  // Firefox and Chrome report correctly
	  if (ANDROID_VERSION >= 4.0 && !IS_FIREFOX && !IS_CHROME) {
	    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
	      if (type && mpegurlRE.test(type)) {
	        return 'maybe';
	      }
	      return canPlayType.call(this, type);
	    };

	    // Override Android 2.2 and less canPlayType method which is broken
	  } else if (IS_OLD_ANDROID) {
	    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
	      if (type && mp4RE.test(type)) {
	        return 'maybe';
	      }
	      return canPlayType.call(this, type);
	    };
	  }
	};

	Html5.unpatchCanPlayType = function () {
	  var r = Html5.TEST_VID.constructor.prototype.canPlayType;

	  Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;
	  return r;
	};

	// by default, patch the media element
	Html5.patchCanPlayType();

	Html5.disposeMediaElement = function (el) {
	  if (!el) {
	    return;
	  }

	  if (el.parentNode) {
	    el.parentNode.removeChild(el);
	  }

	  // remove any child track or source nodes to prevent their loading
	  while (el.hasChildNodes()) {
	    el.removeChild(el.firstChild);
	  }

	  // remove any src reference. not setting `src=''` because that causes a warning
	  // in firefox
	  el.removeAttribute('src');

	  // force the media element to update its loading state by calling load()
	  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)
	  if (typeof el.load === 'function') {
	    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
	    (function () {
	      try {
	        el.load();
	      } catch (e) {
	        // not supported
	      }
	    })();
	  }
	};

	Html5.resetMediaElement = function (el) {
	  if (!el) {
	    return;
	  }

	  var sources = el.querySelectorAll('source');
	  var i = sources.length;

	  while (i--) {
	    el.removeChild(sources[i]);
	  }

	  // remove any src reference.
	  // not setting `src=''` because that throws an error
	  el.removeAttribute('src');

	  if (typeof el.load === 'function') {
	    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
	    (function () {
	      try {
	        el.load();
	      } catch (e) {
	        // satisfy linter
	      }
	    })();
	  }
	};

	/* Native HTML5 element property wrapping ----------------------------------- */
	// Wrap native boolean attributes with getters that check both property and attribute
	// The list is as followed:
	// muted, defaultMuted, autoplay, controls, loop, playsinline
	[
	/**
	 * Get the value of `muted` from the media element. `muted` indicates
	 * that the volume for the media should be set to silent. This does not actually change
	 * the `volume` attribute.
	 *
	 * @method Html5#muted
	 * @return {boolean}
	 *         - True if the value of `volume` should be ignored and the audio set to silent.
	 *         - False if the value of `volume` should be used.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
	 */
	'muted',

	/**
	 * Get the value of `defaultMuted` from the media element. `defaultMuted` indicates
	 * whether the media should start muted or not. Only changes the default state of the
	 * media. `muted` and `defaultMuted` can have different values. {@link Html5#muted} indicates the
	 * current state.
	 *
	 * @method Html5#defaultMuted
	 * @return {boolean}
	 *         - The value of `defaultMuted` from the media element.
	 *         - True indicates that the media should start muted.
	 *         - False indicates that the media should not start muted
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
	 */
	'defaultMuted',

	/**
	 * Get the value of `autoplay` from the media element. `autoplay` indicates
	 * that the media should start to play as soon as the page is ready.
	 *
	 * @method Html5#autoplay
	 * @return {boolean}
	 *         - The value of `autoplay` from the media element.
	 *         - True indicates that the media should start as soon as the page loads.
	 *         - False indicates that the media should not start as soon as the page loads.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
	 */
	'autoplay',

	/**
	 * Get the value of `controls` from the media element. `controls` indicates
	 * whether the native media controls should be shown or hidden.
	 *
	 * @method Html5#controls
	 * @return {boolean}
	 *         - The value of `controls` from the media element.
	 *         - True indicates that native controls should be showing.
	 *         - False indicates that native controls should be hidden.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-controls}
	 */
	'controls',

	/**
	 * Get the value of `loop` from the media element. `loop` indicates
	 * that the media should return to the start of the media and continue playing once
	 * it reaches the end.
	 *
	 * @method Html5#loop
	 * @return {boolean}
	 *         - The value of `loop` from the media element.
	 *         - True indicates that playback should seek back to start once
	 *           the end of a media is reached.
	 *         - False indicates that playback should not loop back to the start when the
	 *           end of the media is reached.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
	 */
	'loop',

	/**
	 * Get the value of `playsinline` from the media element. `playsinline` indicates
	 * to the browser that non-fullscreen playback is preferred when fullscreen
	 * playback is the native default, such as in iOS Safari.
	 *
	 * @method Html5#playsinline
	 * @return {boolean}
	 *         - The value of `playsinline` from the media element.
	 *         - True indicates that the media should play inline.
	 *         - False indicates that the media should not play inline.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
	 */
	'playsinline'].forEach(function (prop) {
	  Html5.prototype[prop] = function () {
	    return this.el_[prop] || this.el_.hasAttribute(prop);
	  };
	});

	// Wrap native boolean attributes with setters that set both property and attribute
	// The list is as followed:
	// setMuted, setDefaultMuted, setAutoplay, setLoop, setPlaysinline
	// setControls is special-cased above
	[
	/**
	 * Set the value of `muted` on the media element. `muted` indicates that the current
	 * audio level should be silent.
	 *
	 * @method Html5#setMuted
	 * @param {boolean} muted
	 *        - True if the audio should be set to silent
	 *        - False otherwise
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-muted}
	 */
	'muted',

	/**
	 * Set the value of `defaultMuted` on the media element. `defaultMuted` indicates that the current
	 * audio level should be silent, but will only effect the muted level on intial playback..
	 *
	 * @method Html5.prototype.setDefaultMuted
	 * @param {boolean} defaultMuted
	 *        - True if the audio should be set to silent
	 *        - False otherwise
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultmuted}
	 */
	'defaultMuted',

	/**
	 * Set the value of `autoplay` on the media element. `autoplay` indicates
	 * that the media should start to play as soon as the page is ready.
	 *
	 * @method Html5#setAutoplay
	 * @param {boolean} autoplay
	 *         - True indicates that the media should start as soon as the page loads.
	 *         - False indicates that the media should not start as soon as the page loads.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-autoplay}
	 */
	'autoplay',

	/**
	 * Set the value of `loop` on the media element. `loop` indicates
	 * that the media should return to the start of the media and continue playing once
	 * it reaches the end.
	 *
	 * @method Html5#setLoop
	 * @param {boolean} loop
	 *         - True indicates that playback should seek back to start once
	 *           the end of a media is reached.
	 *         - False indicates that playback should not loop back to the start when the
	 *           end of the media is reached.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-loop}
	 */
	'loop',

	/**
	 * Set the value of `playsinline` from the media element. `playsinline` indicates
	 * to the browser that non-fullscreen playback is preferred when fullscreen
	 * playback is the native default, such as in iOS Safari.
	 *
	 * @method Html5#setPlaysinline
	 * @param {boolean} playsinline
	 *         - True indicates that the media should play inline.
	 *         - False indicates that the media should not play inline.
	 *
	 * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
	 */
	'playsinline'].forEach(function (prop) {
	  Html5.prototype['set' + toTitleCase(prop)] = function (v) {
	    this.el_[prop] = v;

	    if (v) {
	      this.el_.setAttribute(prop, prop);
	    } else {
	      this.el_.removeAttribute(prop);
	    }
	  };
	});

	// Wrap native properties with a getter
	// The list is as followed
	// paused, currentTime, buffered, volume, poster, preload, error, seeking
	// seekable, ended, playbackRate, defaultPlaybackRate, played, networkState
	// readyState, videoWidth, videoHeight
	[
	/**
	 * Get the value of `paused` from the media element. `paused` indicates whether the media element
	 * is currently paused or not.
	 *
	 * @method Html5#paused
	 * @return {boolean}
	 *         The value of `paused` from the media element.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-paused}
	 */
	'paused',

	/**
	 * Get the value of `currentTime` from the media element. `currentTime` indicates
	 * the current second that the media is at in playback.
	 *
	 * @method Html5#currentTime
	 * @return {number}
	 *         The value of `currentTime` from the media element.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-currenttime}
	 */
	'currentTime',

	/**
	 * Get the value of `buffered` from the media element. `buffered` is a `TimeRange`
	 * object that represents the parts of the media that are already downloaded and
	 * available for playback.
	 *
	 * @method Html5#buffered
	 * @return {TimeRange}
	 *         The value of `buffered` from the media element.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-buffered}
	 */
	'buffered',

	/**
	 * Get the value of `volume` from the media element. `volume` indicates
	 * the current playback volume of audio for a media. `volume` will be a value from 0
	 * (silent) to 1 (loudest and default).
	 *
	 * @method Html5#volume
	 * @return {number}
	 *         The value of `volume` from the media element. Value will be between 0-1.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
	 */
	'volume',

	/**
	 * Get the value of `poster` from the media element. `poster` indicates
	 * that the url of an image file that can/will be shown when no media data is available.
	 *
	 * @method Html5#poster
	 * @return {string}
	 *         The value of `poster` from the media element. Value will be a url to an
	 *         image.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-video-poster}
	 */
	'poster',

	/**
	 * Get the value of `preload` from the media element. `preload` indicates
	 * what should download before the media is interacted with. It can have the following
	 * values:
	 * - none: nothing should be downloaded
	 * - metadata: poster and the first few frames of the media may be downloaded to get
	 *   media dimensions and other metadata
	 * - auto: allow the media and metadata for the media to be downloaded before
	 *    interaction
	 *
	 * @method Html5#preload
	 * @return {string}
	 *         The value of `preload` from the media element. Will be 'none', 'metadata',
	 *         or 'auto'.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
	 */
	'preload',

	/**
	 * Get the value of the `error` from the media element. `error` indicates any
	 * MediaError that may have occured during playback. If error returns null there is no
	 * current error.
	 *
	 * @method Html5#error
	 * @return {MediaError|null}
	 *         The value of `error` from the media element. Will be `MediaError` if there
	 *         is a current error and null otherwise.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-error}
	 */
	'error',

	/**
	 * Get the value of `seeking` from the media element. `seeking` indicates whether the
	 * media is currently seeking to a new position or not.
	 *
	 * @method Html5#seeking
	 * @return {boolean}
	 *         - The value of `seeking` from the media element.
	 *         - True indicates that the media is currently seeking to a new position.
	 *         - Flase indicates that the media is not seeking to a new position at this time.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seeking}
	 */
	'seeking',

	/**
	 * Get the value of `seekable` from the media element. `seekable` returns a
	 * `TimeRange` object indicating ranges of time that can currently be `seeked` to.
	 *
	 * @method Html5#seekable
	 * @return {TimeRange}
	 *         The value of `seekable` from the media element. A `TimeRange` object
	 *         indicating the current ranges of time that can be seeked to.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-seekable}
	 */
	'seekable',

	/**
	 * Get the value of `ended` from the media element. `ended` indicates whether
	 * the media has reached the end or not.
	 *
	 * @method Html5#ended
	 * @return {boolean}
	 *         - The value of `ended` from the media element.
	 *         - True indicates that the media has ended.
	 *         - False indicates that the media has not ended.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-ended}
	 */
	'ended',

	/**
	 * Get the value of `playbackRate` from the media element. `playbackRate` indicates
	 * the rate at which the media is currently playing back. Examples:
	 *   - if playbackRate is set to 2, media will play twice as fast.
	 *   - if playbackRate is set to 0.5, media will play half as fast.
	 *
	 * @method Html5#playbackRate
	 * @return {number}
	 *         The value of `playbackRate` from the media element. A number indicating
	 *         the current playback speed of the media, where 1 is normal speed.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
	 */
	'playbackRate',

	/**
	 * Get the value of `defaultPlaybackRate` from the media element. `defaultPlaybackRate` indicates
	 * the rate at which the media is currently playing back. This value will not indicate the current
	 * `playbackRate` after playback has started, use {@link Html5#playbackRate} for that.
	 *
	 * Examples:
	 *   - if defaultPlaybackRate is set to 2, media will play twice as fast.
	 *   - if defaultPlaybackRate is set to 0.5, media will play half as fast.
	 *
	 * @method Html5.prototype.defaultPlaybackRate
	 * @return {number}
	 *         The value of `defaultPlaybackRate` from the media element. A number indicating
	 *         the current playback speed of the media, where 1 is normal speed.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
	 */
	'defaultPlaybackRate',

	/**
	 * Get the value of `played` from the media element. `played` returns a `TimeRange`
	 * object representing points in the media timeline that have been played.
	 *
	 * @method Html5#played
	 * @return {TimeRange}
	 *         The value of `played` from the media element. A `TimeRange` object indicating
	 *         the ranges of time that have been played.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-played}
	 */
	'played',

	/**
	 * Get the value of `networkState` from the media element. `networkState` indicates
	 * the current network state. It returns an enumeration from the following list:
	 * - 0: NETWORK_EMPTY
	 * - 1: NEWORK_IDLE
	 * - 2: NETWORK_LOADING
	 * - 3: NETWORK_NO_SOURCE
	 *
	 * @method Html5#networkState
	 * @return {number}
	 *         The value of `networkState` from the media element. This will be a number
	 *         from the list in the description.
	 *
	 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-networkstate}
	 */
	'networkState',

	/**
	 * Get the value of `readyState` from the media element. `readyState` indicates
	 * the current state of the media element. It returns an enumeration from the
	 * following list:
	 * - 0: HAVE_NOTHING
	 * - 1: HAVE_METADATA
	 * - 2: HAVE_CURRENT_DATA
	 * - 3: HAVE_FUTURE_DATA
	 * - 4: HAVE_ENOUGH_DATA
	 *
	 * @method Html5#readyState
	 * @return {number}
	 *         The value of `readyState` from the media element. This will be a number
	 *         from the list in the description.
	 *
	 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#ready-states}
	 */
	'readyState',

	/**
	 * Get the value of `videoWidth` from the video element. `videoWidth` indicates
	 * the current width of the video in css pixels.
	 *
	 * @method Html5#videoWidth
	 * @return {number}
	 *         The value of `videoWidth` from the video element. This will be a number
	 *         in css pixels.
	 *
	 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
	 */
	'videoWidth',

	/**
	 * Get the value of `videoHeight` from the video element. `videoHeigth` indicates
	 * the current height of the video in css pixels.
	 *
	 * @method Html5#videoHeight
	 * @return {number}
	 *         The value of `videoHeight` from the video element. This will be a number
	 *         in css pixels.
	 *
	 * @see [Spec] {@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth}
	 */
	'videoHeight'].forEach(function (prop) {
	  Html5.prototype[prop] = function () {
	    return this.el_[prop];
	  };
	});

	// Wrap native properties with a setter in this format:
	// set + toTitleCase(name)
	// The list is as follows:
	// setVolume, setSrc, setPoster, setPreload, setPlaybackRate, setDefaultPlaybackRate
	[
	/**
	 * Set the value of `volume` on the media element. `volume` indicates the current
	 * audio level as a percentage in decimal form. This means that 1 is 100%, 0.5 is 50%, and
	 * so on.
	 *
	 * @method Html5#setVolume
	 * @param {number} percentAsDecimal
	 *        The volume percent as a decimal. Valid range is from 0-1.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-a-volume}
	 */
	'volume',

	/**
	 * Set the value of `src` on the media element. `src` indicates the current
	 * {@link Tech~SourceObject} for the media.
	 *
	 * @method Html5#setSrc
	 * @param {Tech~SourceObject} src
	 *        The source object to set as the current source.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-src}
	 */
	'src',

	/**
	 * Set the value of `poster` on the media element. `poster` is the url to
	 * an image file that can/will be shown when no media data is available.
	 *
	 * @method Html5#setPoster
	 * @param {string} poster
	 *        The url to an image that should be used as the `poster` for the media
	 *        element.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-poster}
	 */
	'poster',

	/**
	 * Set the value of `preload` on the media element. `preload` indicates
	 * what should download before the media is interacted with. It can have the following
	 * values:
	 * - none: nothing should be downloaded
	 * - metadata: poster and the first few frames of the media may be downloaded to get
	 *   media dimensions and other metadata
	 * - auto: allow the media and metadata for the media to be downloaded before
	 *    interaction
	 *
	 * @method Html5#setPreload
	 * @param {string} preload
	 *         The value of `preload` to set on the media element. Must be 'none', 'metadata',
	 *         or 'auto'.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#attr-media-preload}
	 */
	'preload',

	/**
	 * Set the value of `playbackRate` on the media element. `playbackRate` indicates
	 * the rate at which the media should play back. Examples:
	 *   - if playbackRate is set to 2, media will play twice as fast.
	 *   - if playbackRate is set to 0.5, media will play half as fast.
	 *
	 * @method Html5#setPlaybackRate
	 * @return {number}
	 *         The value of `playbackRate` from the media element. A number indicating
	 *         the current playback speed of the media, where 1 is normal speed.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-playbackrate}
	 */
	'playbackRate',

	/**
	 * Set the value of `defaultPlaybackRate` on the media element. `defaultPlaybackRate` indicates
	 * the rate at which the media should play back upon initial startup. Changing this value
	 * after a video has started will do nothing. Instead you should used {@link Html5#setPlaybackRate}.
	 *
	 * Example Values:
	 *   - if playbackRate is set to 2, media will play twice as fast.
	 *   - if playbackRate is set to 0.5, media will play half as fast.
	 *
	 * @method Html5.prototype.setDefaultPlaybackRate
	 * @return {number}
	 *         The value of `defaultPlaybackRate` from the media element. A number indicating
	 *         the current playback speed of the media, where 1 is normal speed.
	 *
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-defaultplaybackrate}
	 */
	'defaultPlaybackRate'].forEach(function (prop) {
	  Html5.prototype['set' + toTitleCase(prop)] = function (v) {
	    this.el_[prop] = v;
	  };
	});

	// wrap native functions with a function
	// The list is as follows:
	// pause, load play
	[
	/**
	 * A wrapper around the media elements `pause` function. This will call the `HTML5`
	 * media elements `pause` function.
	 *
	 * @method Html5#pause
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-pause}
	 */
	'pause',

	/**
	 * A wrapper around the media elements `load` function. This will call the `HTML5`s
	 * media element `load` function.
	 *
	 * @method Html5#load
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-load}
	 */
	'load',

	/**
	 * A wrapper around the media elements `play` function. This will call the `HTML5`s
	 * media element `play` function.
	 *
	 * @method Html5#play
	 * @see [Spec]{@link https://www.w3.org/TR/html5/embedded-content-0.html#dom-media-play}
	 */
	'play'].forEach(function (prop) {
	  Html5.prototype[prop] = function () {
	    return this.el_[prop]();
	  };
	});

	Tech.withSourceHandlers(Html5);

	/**
	 * Native source handler for Html5, simply passes the source to the media element.
	 *
	 * @proprety {Tech~SourceObject} source
	 *        The source object
	 *
	 * @proprety {Html5} tech
	 *        The instance of the HTML5 tech.
	 */
	Html5.nativeSourceHandler = {};

	/**
	 * Check if the media element can play the given mime type.
	 *
	 * @param {string} type
	 *        The mimetype to check
	 *
	 * @return {string}
	 *         'probably', 'maybe', or '' (empty string)
	 */
	Html5.nativeSourceHandler.canPlayType = function (type) {
	  // IE9 on Windows 7 without MediaPlayer throws an error here
	  // https://github.com/videojs/video.js/issues/519
	  try {
	    return Html5.TEST_VID.canPlayType(type);
	  } catch (e) {
	    return '';
	  }
	};

	/**
	 * Check if the media element can handle a source natively.
	 *
	 * @param {Tech~SourceObject} source
	 *         The source object
	 *
	 * @param {Object} [options]
	 *         Options to be passed to the tech.
	 *
	 * @return {string}
	 *         'probably', 'maybe', or '' (empty string).
	 */
	Html5.nativeSourceHandler.canHandleSource = function (source, options) {

	  // If a type was provided we should rely on that
	  if (source.type) {
	    return Html5.nativeSourceHandler.canPlayType(source.type);

	    // If no type, fall back to checking 'video/[EXTENSION]'
	  } else if (source.src) {
	    var ext = getFileExtension(source.src);

	    return Html5.nativeSourceHandler.canPlayType('video/' + ext);
	  }

	  return '';
	};

	/**
	 * Pass the source to the native media element.
	 *
	 * @param {Tech~SourceObject} source
	 *        The source object
	 *
	 * @param {Html5} tech
	 *        The instance of the Html5 tech
	 *
	 * @param {Object} [options]
	 *        The options to pass to the source
	 */
	Html5.nativeSourceHandler.handleSource = function (source, tech, options) {
	  tech.setSrc(source.src);
	};

	/**
	 * A noop for the native dispose function, as cleanup is not needed.
	 */
	Html5.nativeSourceHandler.dispose = function () {};

	// Register the native source handler
	Html5.registerSourceHandler(Html5.nativeSourceHandler);

	Tech.registerTech('Html5', Html5);

	var _templateObject$1 = taggedTemplateLiteralLoose(['\n        Using the tech directly can be dangerous. I hope you know what you\'re doing.\n        See https://github.com/videojs/video.js/issues/2617 for more info.\n      '], ['\n        Using the tech directly can be dangerous. I hope you know what you\'re doing.\n        See https://github.com/videojs/video.js/issues/2617 for more info.\n      ']);

	/**
	 * @file player.js
	 */
	// Subclasses Component
	// The following imports are used only to ensure that the corresponding modules
	// are always included in the video.js package. Importing the modules will
	// execute them and they will register themselves with video.js.
	// Import Html5 tech, at least for disposing the original video tag.
	// The following tech events are simply re-triggered
	// on the player when they happen
	var TECH_EVENTS_RETRIGGER = [
	/**
	 * Fired while the user agent is downloading media data.
	 *
	 * @event Player#progress
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `progress` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechProgress_
	 * @fires Player#progress
	 * @listens Tech#progress
	 */
	'progress',

	/**
	 * Fires when the loading of an audio/video is aborted.
	 *
	 * @event Player#abort
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `abort` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechAbort_
	 * @fires Player#abort
	 * @listens Tech#abort
	 */
	'abort',

	/**
	 * Fires when the browser is intentionally not getting media data.
	 *
	 * @event Player#suspend
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `suspend` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechSuspend_
	 * @fires Player#suspend
	 * @listens Tech#suspend
	 */
	'suspend',

	/**
	 * Fires when the current playlist is empty.
	 *
	 * @event Player#emptied
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `emptied` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechEmptied_
	 * @fires Player#emptied
	 * @listens Tech#emptied
	 */
	'emptied',
	/**
	 * Fires when the browser is trying to get media data, but data is not available.
	 *
	 * @event Player#stalled
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `stalled` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechStalled_
	 * @fires Player#stalled
	 * @listens Tech#stalled
	 */
	'stalled',

	/**
	 * Fires when the browser has loaded meta data for the audio/video.
	 *
	 * @event Player#loadedmetadata
	 * @type {EventTarget~Event}
	 */
	/**
	 * Retrigger the `stalled` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechLoadedmetadata_
	 * @fires Player#loadedmetadata
	 * @listens Tech#loadedmetadata
	 */
	'loadedmetadata',

	/**
	 * Fires when the browser has loaded the current frame of the audio/video.
	 *
	 * @event Player#loadeddata
	 * @type {event}
	 */
	/**
	 * Retrigger the `loadeddata` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechLoaddeddata_
	 * @fires Player#loadeddata
	 * @listens Tech#loadeddata
	 */
	'loadeddata',

	/**
	 * Fires when the current playback position has changed.
	 *
	 * @event Player#timeupdate
	 * @type {event}
	 */
	/**
	 * Retrigger the `timeupdate` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechTimeUpdate_
	 * @fires Player#timeupdate
	 * @listens Tech#timeupdate
	 */
	'timeupdate',

	/**
	 * Fires when the video's intrinsic dimensions change
	 *
	 * @event Player#resize
	 * @type {event}
	 */
	/**
	 * Retrigger the `resize` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechResize_
	 * @fires Player#resize
	 * @listens Tech#resize
	 */
	'resize',

	/**
	 * Fires when the volume has been changed
	 *
	 * @event Player#volumechange
	 * @type {event}
	 */
	/**
	 * Retrigger the `volumechange` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechVolumechange_
	 * @fires Player#volumechange
	 * @listens Tech#volumechange
	 */
	'volumechange',

	/**
	 * Fires when the text track has been changed
	 *
	 * @event Player#texttrackchange
	 * @type {event}
	 */
	/**
	 * Retrigger the `texttrackchange` event that was triggered by the {@link Tech}.
	 *
	 * @private
	 * @method Player#handleTechTexttrackchange_
	 * @fires Player#texttrackchange
	 * @listens Tech#texttrackchange
	 */
	'texttrackchange'];

	// events to queue when playback rate is zero
	// this is a hash for the sole purpose of mapping non-camel-cased event names
	// to camel-cased function names
	var TECH_EVENTS_QUEUE = {
	  canplay: 'CanPlay',
	  canplaythrough: 'CanPlayThrough',
	  playing: 'Playing',
	  seeked: 'Seeked'
	};

	var BREAKPOINT_ORDER = ['tiny', 'xsmall', 'small', 'medium', 'large', 'xlarge', 'huge'];

	var BREAKPOINT_CLASSES = {};

	// grep: vjs-layout-tiny
	// grep: vjs-layout-x-small
	// grep: vjs-layout-small
	// grep: vjs-layout-medium
	// grep: vjs-layout-large
	// grep: vjs-layout-x-large
	// grep: vjs-layout-huge
	BREAKPOINT_ORDER.forEach(function (k) {
	  var v = k.charAt(0) === 'x' ? 'x-' + k.substring(1) : k;

	  BREAKPOINT_CLASSES[k] = 'vjs-layout-' + v;
	});

	var DEFAULT_BREAKPOINTS = {
	  tiny: 210,
	  xsmall: 320,
	  small: 425,
	  medium: 768,
	  large: 1440,
	  xlarge: 2560,
	  huge: Infinity
	};

	/**
	 * An instance of the `Player` class is created when any of the Video.js setup methods
	 * are used to initialize a video.
	 *
	 * After an instance has been created it can be accessed globally in two ways:
	 * 1. By calling `videojs('example_video_1');`
	 * 2. By using it directly via  `videojs.players.example_video_1;`
	 *
	 * @extends Component
	 */

	var Player = function (_Component) {
	  inherits(Player, _Component);

	  /**
	   * Create an instance of this class.
	   *
	   * @param {Element} tag
	   *        The original video DOM element used for configuring options.
	   *
	   * @param {Object} [options]
	   *        Object of option names and values.
	   *
	   * @param {Component~ReadyCallback} [ready]
	   *        Ready callback function.
	   */
	  function Player(tag, options, ready) {
	    classCallCheck(this, Player);

	    // Make sure tag ID exists
	    tag.id = tag.id || options.id || 'vjs_video_' + newGUID();

	    // Set Options
	    // The options argument overrides options set in the video tag
	    // which overrides globally set options.
	    // This latter part coincides with the load order
	    // (tag must exist before Player)
	    options = assign(Player.getTagSettings(tag), options);

	    // Delay the initialization of children because we need to set up
	    // player properties first, and can't use `this` before `super()`
	    options.initChildren = false;

	    // Same with creating the element
	    options.createEl = false;

	    // don't auto mixin the evented mixin
	    options.evented = false;

	    // we don't want the player to report touch activity on itself
	    // see enableTouchActivity in Component
	    options.reportTouchActivity = false;

	    // If language is not set, get the closest lang attribute
	    if (!options.language) {
	      if (typeof tag.closest === 'function') {
	        var closest = tag.closest('[lang]');

	        if (closest && closest.getAttribute) {
	          options.language = closest.getAttribute('lang');
	        }
	      } else {
	        var element = tag;

	        while (element && element.nodeType === 1) {
	          if (getAttributes(element).hasOwnProperty('lang')) {
	            options.language = element.getAttribute('lang');
	            break;
	          }
	          element = element.parentNode;
	        }
	      }
	    }

	    // Run base component initializing with new options

	    // create logger
	    var _this = possibleConstructorReturn(this, _Component.call(this, null, options, ready));

	    _this.log = createLogger(_this.id_);

	    // Tracks when a tech changes the poster
	    _this.isPosterFromTech_ = false;

	    // Holds callback info that gets queued when playback rate is zero
	    // and a seek is happening
	    _this.queuedCallbacks_ = [];

	    // Turn off API access because we're loading a new tech that might load asynchronously
	    _this.isReady_ = false;

	    // Init state hasStarted_
	    _this.hasStarted_ = false;

	    // Init state userActive_
	    _this.userActive_ = false;

	    // if the global option object was accidentally blown away by
	    // someone, bail early with an informative error
	    if (!_this.options_ || !_this.options_.techOrder || !_this.options_.techOrder.length) {
	      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');
	    }

	    // Store the original tag used to set options
	    _this.tag = tag;

	    // Store the tag attributes used to restore html5 element
	    _this.tagAttributes = tag && getAttributes(tag);

	    // Update current language
	    _this.language(_this.options_.language);

	    // Update Supported Languages
	    if (options.languages) {
	      // Normalise player option languages to lowercase
	      var languagesToLower = {};

	      Object.getOwnPropertyNames(options.languages).forEach(function (name$$1) {
	        languagesToLower[name$$1.toLowerCase()] = options.languages[name$$1];
	      });
	      _this.languages_ = languagesToLower;
	    } else {
	      _this.languages_ = Player.prototype.options_.languages;
	    }

	    // Cache for video property values.
	    _this.cache_ = {};

	    // Set poster
	    _this.poster_ = options.poster || '';

	    // Set controls
	    _this.controls_ = !!options.controls;

	    // Set default values for lastVolume
	    _this.cache_.lastVolume = 1;

	    // Original tag settings stored in options
	    // now remove immediately so native controls don't flash.
	    // May be turned back on by HTML5 tech if nativeControlsForTouch is true
	    tag.controls = false;
	    tag.removeAttribute('controls');

	    // the attribute overrides the option
	    if (tag.hasAttribute('autoplay')) {
	      _this.options_.autoplay = true;
	    } else {
	      // otherwise use the setter to validate and
	      // set the correct value.
	      _this.autoplay(_this.options_.autoplay);
	    }

	    /*
	     * Store the internal state of scrubbing
	     *
	     * @private
	     * @return {Boolean} True if the user is scrubbing
	     */
	    _this.scrubbing_ = false;

	    _this.el_ = _this.createEl();

	    // Set default value for lastPlaybackRate
	    _this.cache_.lastPlaybackRate = _this.defaultPlaybackRate();

	    // Make this an evented object and use `el_` as its event bus.
	    evented(_this, { eventBusKey: 'el_' });

	    // We also want to pass the original player options to each component and plugin
	    // as well so they don't need to reach back into the player for options later.
	    // We also need to do another copy of this.options_ so we don't end up with
	    // an infinite loop.
	    var playerOptionsCopy = mergeOptions(_this.options_);

	    // Load plugins
	    if (options.plugins) {
	      var plugins = options.plugins;

	      Object.keys(plugins).forEach(function (name$$1) {
	        if (typeof this[name$$1] === 'function') {
	          this[name$$1](plugins[name$$1]);
	        } else {
	          throw new Error('plugin "' + name$$1 + '" does not exist');
	        }
	      }, _this);
	    }

	    _this.options_.playerOptions = playerOptionsCopy;

	    _this.middleware_ = [];

	    _this.initChildren();

	    // Set isAudio based on whether or not an audio tag was used
	    _this.isAudio(tag.nodeName.toLowerCase() === 'audio');

	    // Update controls className. Can't do this when the controls are initially
	    // set because the element doesn't exist yet.
	    if (_this.controls()) {
	      _this.addClass('vjs-controls-enabled');
	    } else {
	      _this.addClass('vjs-controls-disabled');
	    }

	    // Set ARIA label and region role depending on player type
	    _this.el_.setAttribute('role', 'region');
	    if (_this.isAudio()) {
	      _this.el_.setAttribute('aria-label', _this.localize('Audio Player'));
	    } else {
	      _this.el_.setAttribute('aria-label', _this.localize('Video Player'));
	    }

	    if (_this.isAudio()) {
	      _this.addClass('vjs-audio');
	    }

	    if (_this.flexNotSupported_()) {
	      _this.addClass('vjs-no-flex');
	    }

	    // TODO: Make this smarter. Toggle user state between touching/mousing
	    // using events, since devices can have both touch and mouse events.
	    // if (browser.TOUCH_ENABLED) {
	    //   this.addClass('vjs-touch-enabled');
	    // }

	    // iOS Safari has broken hover handling
	    if (!IS_IOS) {
	      _this.addClass('vjs-workinghover');
	    }

	    // Make player easily findable by ID
	    Player.players[_this.id_] = _this;

	    // Add a major version class to aid css in plugins
	    var majorVersion = version.split('.')[0];

	    _this.addClass('vjs-v' + majorVersion);

	    // When the player is first initialized, trigger activity so components
	    // like the control bar show themselves if needed
	    _this.userActive(true);
	    _this.reportUserActivity();

	    _this.one('play', _this.listenForUserActivity_);
	    _this.on('fullscreenchange', _this.handleFullscreenChange_);
	    _this.on('stageclick', _this.handleStageClick_);

	    _this.breakpoints(_this.options_.breakpoints);
	    _this.responsive(_this.options_.responsive);

	    _this.changingSrc_ = false;
	    _this.playWaitingForReady_ = false;
	    _this.playOnLoadstart_ = null;
	    return _this;
	  }

	  /**
	   * Destroys the video player and does any necessary cleanup.
	   *
	   * This is especially helpful if you are dynamically adding and removing videos
	   * to/from the DOM.
	   *
	   * @fires Player#dispose
	   */


	  Player.prototype.dispose = function dispose() {
	    /**
	     * Called when the player is being disposed of.
	     *
	     * @event Player#dispose
	     * @type {EventTarget~Event}
	     */
	    this.trigger('dispose');
	    // prevent dispose from being called twice
	    this.off('dispose');

	    if (this.styleEl_ && this.styleEl_.parentNode) {
	      this.styleEl_.parentNode.removeChild(this.styleEl_);
	      this.styleEl_ = null;
	    }

	    // Kill reference to this player
	    Player.players[this.id_] = null;

	    if (this.tag && this.tag.player) {
	      this.tag.player = null;
	    }

	    if (this.el_ && this.el_.player) {
	      this.el_.player = null;
	    }

	    if (this.tech_) {
	      this.tech_.dispose();
	      this.isPosterFromTech_ = false;
	      this.poster_ = '';
	    }

	    if (this.playerElIngest_) {
	      this.playerElIngest_ = null;
	    }

	    if (this.tag) {
	      this.tag = null;
	    }

	    clearCacheForPlayer(this);

	    // the actual .el_ is removed here
	    _Component.prototype.dispose.call(this);
	  };

	  /**
	   * Create the `Player`'s DOM element.
	   *
	   * @return {Element}
	   *         The DOM element that gets created.
	   */


	  Player.prototype.createEl = function createEl$$1() {
	    var tag = this.tag;
	    var el = void 0;
	    var playerElIngest = this.playerElIngest_ = tag.parentNode && tag.parentNode.hasAttribute && tag.parentNode.hasAttribute('data-vjs-player');
	    var divEmbed = this.tag.tagName.toLowerCase() === 'video-js';

	    if (playerElIngest) {
	      el = this.el_ = tag.parentNode;
	    } else if (!divEmbed) {
	      el = this.el_ = _Component.prototype.createEl.call(this, 'div');
	    }

	    // Copy over all the attributes from the tag, including ID and class
	    // ID will now reference player box, not the video tag
	    var attrs = getAttributes(tag);

	    if (divEmbed) {
	      el = this.el_ = tag;
	      tag = this.tag = document.createElement('video');
	      while (el.children.length) {
	        tag.appendChild(el.firstChild);
	      }

	      if (!hasClass(el, 'video-js')) {
	        addClass(el, 'video-js');
	      }

	      el.appendChild(tag);

	      playerElIngest = this.playerElIngest_ = el;

	      // copy over properties from the video-js element
	      // ie8 doesn't support Object.keys nor hasOwnProperty
	      // on dom elements so we have to specify properties individually
	      ['autoplay', 'controls', 'crossOrigin', 'defaultMuted', 'defaultPlaybackRate', 'loop', 'muted', 'playbackRate', 'src', 'volume'].forEach(function (prop) {
	        if (typeof el[prop] !== 'undefined') {
	          tag[prop] = el[prop];
	        }
	      });
	    }

	    // set tabindex to -1 to remove the video element from the focus order
	    tag.setAttribute('tabindex', '-1');
	    attrs.tabindex = '-1';

	    // Workaround for #4583 (JAWS+IE doesn't announce BPB or play button)
	    // See https://github.com/FreedomScientific/VFO-standards-support/issues/78
	    // Note that we can't detect if JAWS is being used, but this ARIA attribute
	    //  doesn't change behavior of IE11 if JAWS is not being used
	    if (IE_VERSION) {
	      tag.setAttribute('role', 'application');
	      attrs.role = 'application';
	    }

	    // Remove width/height attrs from tag so CSS can make it 100% width/height
	    tag.removeAttribute('width');
	    tag.removeAttribute('height');

	    if ('width' in attrs) {
	      delete attrs.width;
	    }
	    if ('height' in attrs) {
	      delete attrs.height;
	    }

	    Object.getOwnPropertyNames(attrs).forEach(function (attr) {
	      // workaround so we don't totally break IE7
	      // http://stackoverflow.com/questions/3653444/css-styles-not-applied-on-dynamic-elements-in-internet-explorer-7
	      if (attr === 'class') {
	        el.className += ' ' + attrs[attr];

	        if (divEmbed) {
	          tag.className += ' ' + attrs[attr];
	        }
	      } else {
	        el.setAttribute(attr, attrs[attr]);

	        if (divEmbed) {
	          tag.setAttribute(attr, attrs[attr]);
	        }
	      }
	    });

	    // Update tag id/class for use as HTML5 playback tech
	    // Might think we should do this after embedding in container so .vjs-tech class
	    // doesn't flash 100% width/height, but class only applies with .video-js parent
	    tag.playerId = tag.id;
	    tag.id += '_html5_api';
	    tag.className = 'vjs-tech';

	    // Make player findable on elements
	    tag.player = el.player = this;
	    // Default state of video is paused
	    this.addClass('vjs-paused');

	    // Add a style element in the player that we'll use to set the width/height
	    // of the player in a way that's still overrideable by CSS, just like the
	    // video element
	    if (window.VIDEOJS_NO_DYNAMIC_STYLE !== true) {
	      this.styleEl_ = createStyleElement('vjs-styles-dimensions');
	      var defaultsStyleEl = $('.vjs-styles-defaults');
	      var head = $('head');

	      head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);
	    }

	    this.fill_ = false;
	    this.fluid_ = false;

	    // Pass in the width/height/aspectRatio options which will update the style el
	    this.width(this.options_.width);
	    this.height(this.options_.height);
	    this.fill(this.options_.fill);
	    this.fluid(this.options_.fluid);
	    this.aspectRatio(this.options_.aspectRatio);

	    // Hide any links within the video/audio tag, because IE doesn't hide them completely.
	    var links = tag.getElementsByTagName('a');

	    for (var i = 0; i < links.length; i++) {
	      var linkEl = links.item(i);

	      addClass(linkEl, 'vjs-hidden');
	      linkEl.setAttribute('hidden', 'hidden');
	    }

	    // insertElFirst seems to cause the networkState to flicker from 3 to 2, so
	    // keep track of the original for later so we can know if the source originally failed
	    tag.initNetworkState_ = tag.networkState;

	    // Wrap video tag in div (el/box) container
	    if (tag.parentNode && !playerElIngest) {
	      tag.parentNode.insertBefore(el, tag);
	    }

	    // insert the tag as the first child of the player element
	    // then manually add it to the children array so that this.addChild
	    // will work properly for other components
	    //
	    // Breaks iPhone, fixed in HTML5 setup.
	    prependTo(tag, el);
	    this.children_.unshift(tag);

	    // Set lang attr on player to ensure CSS :lang() in consistent with player
	    // if it's been set to something different to the doc
	    this.el_.setAttribute('lang', this.language_);

	    this.el_ = el;

	    return el;
	  };

	  /**
	   * A getter/setter for the `Player`'s width. Returns the player's configured value.
	   * To get the current width use `currentWidth()`.
	   *
	   * @param {number} [value]
	   *        The value to set the `Player`'s width to.
	   *
	   * @return {number}
	   *         The current width of the `Player` when getting.
	   */


	  Player.prototype.width = function width(value) {
	    return this.dimension('width', value);
	  };

	  /**
	   * A getter/setter for the `Player`'s height. Returns the player's configured value.
	   * To get the current height use `currentheight()`.
	   *
	   * @param {number} [value]
	   *        The value to set the `Player`'s heigth to.
	   *
	   * @return {number}
	   *         The current height of the `Player` when getting.
	   */


	  Player.prototype.height = function height(value) {
	    return this.dimension('height', value);
	  };

	  /**
	   * A getter/setter for the `Player`'s width & height.
	   *
	   * @param {string} dimension
	   *        This string can be:
	   *        - 'width'
	   *        - 'height'
	   *
	   * @param {number} [value]
	   *        Value for dimension specified in the first argument.
	   *
	   * @return {number}
	   *         The dimension arguments value when getting (width/height).
	   */


	  Player.prototype.dimension = function dimension(_dimension, value) {
	    var privDimension = _dimension + '_';

	    if (value === undefined) {
	      return this[privDimension] || 0;
	    }

	    if (value === '') {
	      // If an empty string is given, reset the dimension to be automatic
	      this[privDimension] = undefined;
	      this.updateStyleEl_();
	      return;
	    }

	    var parsedVal = parseFloat(value);

	    if (isNaN(parsedVal)) {
	      log.error('Improper value "' + value + '" supplied for for ' + _dimension);
	      return;
	    }

	    this[privDimension] = parsedVal;
	    this.updateStyleEl_();
	  };

	  /**
	   * A getter/setter/toggler for the vjs-fluid `className` on the `Player`.
	   *
	   * Turning this on will turn off fill mode.
	   *
	   * @param {boolean} [bool]
	   *        - A value of true adds the class.
	   *        - A value of false removes the class.
	   *        - No value will be a getter.
	   *
	   * @return {boolean|undefined}
	   *         - The value of fluid when getting.
	   *         - `undefined` when setting.
	   */


	  Player.prototype.fluid = function fluid(bool) {
	    if (bool === undefined) {
	      return !!this.fluid_;
	    }

	    this.fluid_ = !!bool;

	    if (bool) {
	      this.addClass('vjs-fluid');
	      this.fill(false);
	    } else {
	      this.removeClass('vjs-fluid');
	    }

	    this.updateStyleEl_();
	  };

	  /**
	   * A getter/setter/toggler for the vjs-fill `className` on the `Player`.
	   *
	   * Turning this on will turn off fluid mode.
	   *
	   * @param {boolean} [bool]
	   *        - A value of true adds the class.
	   *        - A value of false removes the class.
	   *        - No value will be a getter.
	   *
	   * @return {boolean|undefined}
	   *         - The value of fluid when getting.
	   *         - `undefined` when setting.
	   */


	  Player.prototype.fill = function fill(bool) {
	    if (bool === undefined) {
	      return !!this.fill_;
	    }

	    this.fill_ = !!bool;

	    if (bool) {
	      this.addClass('vjs-fill');
	      this.fluid(false);
	    } else {
	      this.removeClass('vjs-fill');
	    }
	  };

	  /**
	   * Get/Set the aspect ratio
	   *
	   * @param {string} [ratio]
	   *        Aspect ratio for player
	   *
	   * @return {string|undefined}
	   *         returns the current aspect ratio when getting
	   */

	  /**
	   * A getter/setter for the `Player`'s aspect ratio.
	   *
	   * @param {string} [ratio]
	   *        The value to set the `Player's aspect ratio to.
	   *
	   * @return {string|undefined}
	   *         - The current aspect ratio of the `Player` when getting.
	   *         - undefined when setting
	   */


	  Player.prototype.aspectRatio = function aspectRatio(ratio) {
	    if (ratio === undefined) {
	      return this.aspectRatio_;
	    }

	    // Check for width:height format
	    if (!/^\d+\:\d+$/.test(ratio)) {
	      throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');
	    }
	    this.aspectRatio_ = ratio;

	    // We're assuming if you set an aspect ratio you want fluid mode,
	    // because in fixed mode you could calculate width and height yourself.
	    this.fluid(true);

	    this.updateStyleEl_();
	  };

	  /**
	   * Update styles of the `Player` element (height, width and aspect ratio).
	   *
	   * @private
	   * @listens Tech#loadedmetadata
	   */


	  Player.prototype.updateStyleEl_ = function updateStyleEl_() {
	    if (window.VIDEOJS_NO_DYNAMIC_STYLE === true) {
	      var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;
	      var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;
	      var techEl = this.tech_ && this.tech_.el();

	      if (techEl) {
	        if (_width >= 0) {
	          techEl.width = _width;
	        }
	        if (_height >= 0) {
	          techEl.height = _height;
	        }
	      }

	      return;
	    }

	    var width = void 0;
	    var height = void 0;
	    var aspectRatio = void 0;
	    var idClass = void 0;

	    // The aspect ratio is either used directly or to calculate width and height.
	    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {
	      // Use any aspectRatio that's been specifically set
	      aspectRatio = this.aspectRatio_;
	    } else if (this.videoWidth() > 0) {
	      // Otherwise try to get the aspect ratio from the video metadata
	      aspectRatio = this.videoWidth() + ':' + this.videoHeight();
	    } else {
	      // Or use a default. The video element's is 2:1, but 16:9 is more common.
	      aspectRatio = '16:9';
	    }

	    // Get the ratio as a decimal we can use to calculate dimensions
	    var ratioParts = aspectRatio.split(':');
	    var ratioMultiplier = ratioParts[1] / ratioParts[0];

	    if (this.width_ !== undefined) {
	      // Use any width that's been specifically set
	      width = this.width_;
	    } else if (this.height_ !== undefined) {
	      // Or calulate the width from the aspect ratio if a height has been set
	      width = this.height_ / ratioMultiplier;
	    } else {
	      // Or use the video's metadata, or use the video el's default of 300
	      width = this.videoWidth() || 300;
	    }

	    if (this.height_ !== undefined) {
	      // Use any height that's been specifically set
	      height = this.height_;
	    } else {
	      // Otherwise calculate the height from the ratio and the width
	      height = width * ratioMultiplier;
	    }

	    // Ensure the CSS class is valid by starting with an alpha character
	    if (/^[^a-zA-Z]/.test(this.id())) {
	      idClass = 'dimensions-' + this.id();
	    } else {
	      idClass = this.id() + '-dimensions';
	    }

	    // Ensure the right class is still on the player for the style element
	    this.addClass(idClass);

	    setTextContent(this.styleEl_, '\n      .' + idClass + ' {\n        width: ' + width + 'px;\n        height: ' + height + 'px;\n      }\n\n      .' + idClass + '.vjs-fluid {\n        padding-top: ' + ratioMultiplier * 100 + '%;\n      }\n    ');
	  };

	  /**
	   * Load/Create an instance of playback {@link Tech} including element
	   * and API methods. Then append the `Tech` element in `Player` as a child.
	   *
	   * @param {string} techName
	   *        name of the playback technology
	   *
	   * @param {string} source
	   *        video source
	   *
	   * @private
	   */


	  Player.prototype.loadTech_ = function loadTech_(techName, source) {
	    var _this2 = this;

	    // Pause and remove current playback technology
	    if (this.tech_) {
	      this.unloadTech_();
	    }

	    var titleTechName = toTitleCase(techName);
	    var camelTechName = techName.charAt(0).toLowerCase() + techName.slice(1);

	    // get rid of the HTML5 video tag as soon as we are using another tech
	    if (titleTechName !== 'Html5' && this.tag) {
	      Tech.getTech('Html5').disposeMediaElement(this.tag);
	      this.tag.player = null;
	      this.tag = null;
	    }

	    this.techName_ = titleTechName;

	    // Turn off API access because we're loading a new tech that might load asynchronously
	    this.isReady_ = false;

	    // if autoplay is a string we pass false to the tech
	    // because the player is going to handle autoplay on `loadstart`
	    var autoplay = typeof this.autoplay() === 'string' ? false : this.autoplay();

	    // Grab tech-specific options from player options and add source and parent element to use.
	    var techOptions = {
	      source: source,
	      autoplay: autoplay,
	      'nativeControlsForTouch': this.options_.nativeControlsForTouch,
	      'playerId': this.id(),
	      'techId': this.id() + '_' + camelTechName + '_api',
	      'playsinline': this.options_.playsinline,
	      'preload': this.options_.preload,
	      'loop': this.options_.loop,
	      'muted': this.options_.muted,
	      'poster': this.poster(),
	      'language': this.language(),
	      'playerElIngest': this.playerElIngest_ || false,
	      'vtt.js': this.options_['vtt.js'],
	      'canOverridePoster': !!this.options_.techCanOverridePoster,
	      'enableSourceset': this.options_.enableSourceset
	    };

	    ALL.names.forEach(function (name$$1) {
	      var props = ALL[name$$1];

	      techOptions[props.getterName] = _this2[props.privateName];
	    });

	    assign(techOptions, this.options_[titleTechName]);
	    assign(techOptions, this.options_[camelTechName]);
	    assign(techOptions, this.options_[techName.toLowerCase()]);

	    if (this.tag) {
	      techOptions.tag = this.tag;
	    }

	    if (source && source.src === this.cache_.src && this.cache_.currentTime > 0) {
	      techOptions.startTime = this.cache_.currentTime;
	    }

	    // Initialize tech instance
	    var TechClass = Tech.getTech(techName);

	    if (!TechClass) {
	      throw new Error('No Tech named \'' + titleTechName + '\' exists! \'' + titleTechName + '\' should be registered using videojs.registerTech()\'');
	    }

	    this.tech_ = new TechClass(techOptions);

	    // player.triggerReady is always async, so don't need this to be async
	    this.tech_.ready(bind(this, this.handleTechReady_), true);

	    textTrackConverter.jsonToTextTracks(this.textTracksJson_ || [], this.tech_);

	    // Listen to all HTML5-defined events and trigger them on the player
	    TECH_EVENTS_RETRIGGER.forEach(function (event) {
	      _this2.on(_this2.tech_, event, _this2['handleTech' + toTitleCase(event) + '_']);
	    });

	    Object.keys(TECH_EVENTS_QUEUE).forEach(function (event) {
	      _this2.on(_this2.tech_, event, function (eventObj) {
	        if (_this2.tech_.playbackRate() === 0 && _this2.tech_.seeking()) {
	          _this2.queuedCallbacks_.push({
	            callback: _this2['handleTech' + TECH_EVENTS_QUEUE[event] + '_'].bind(_this2),
	            event: eventObj
	          });
	          return;
	        }
	        _this2['handleTech' + TECH_EVENTS_QUEUE[event] + '_'](eventObj);
	      });
	    });

	    this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);
	    this.on(this.tech_, 'sourceset', this.handleTechSourceset_);
	    this.on(this.tech_, 'waiting', this.handleTechWaiting_);
	    this.on(this.tech_, 'ended', this.handleTechEnded_);
	    this.on(this.tech_, 'seeking', this.handleTechSeeking_);
	    this.on(this.tech_, 'play', this.handleTechPlay_);
	    this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);
	    this.on(this.tech_, 'pause', this.handleTechPause_);
	    this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);
	    this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);
	    this.on(this.tech_, 'error', this.handleTechError_);
	    this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);
	    this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);
	    this.on(this.tech_, 'textdata', this.handleTechTextData_);
	    this.on(this.tech_, 'ratechange', this.handleTechRateChange_);

	    this.usingNativeControls(this.techGet_('controls'));

	    if (this.controls() && !this.usingNativeControls()) {
	      this.addTechControlsListeners_();
	    }

	    // Add the tech element in the DOM if it was not already there
	    // Make sure to not insert the original video element if using Html5
	    if (this.tech_.el().parentNode !== this.el() && (titleTechName !== 'Html5' || !this.tag)) {
	      prependTo(this.tech_.el(), this.el());
	    }

	    // Get rid of the original video tag reference after the first tech is loaded
	    if (this.tag) {
	      this.tag.player = null;
	      this.tag = null;
	    }
	  };

	  /**
	   * Unload and dispose of the current playback {@link Tech}.
	   *
	   * @private
	   */


	  Player.prototype.unloadTech_ = function unloadTech_() {
	    var _this3 = this;

	    // Save the current text tracks so that we can reuse the same text tracks with the next tech
	    ALL.names.forEach(function (name$$1) {
	      var props = ALL[name$$1];

	      _this3[props.privateName] = _this3[props.getterName]();
	    });
	    this.textTracksJson_ = textTrackConverter.textTracksToJson(this.tech_);

	    this.isReady_ = false;

	    this.tech_.dispose();

	    this.tech_ = false;

	    if (this.isPosterFromTech_) {
	      this.poster_ = '';
	      this.trigger('posterchange');
	    }

	    this.isPosterFromTech_ = false;
	  };

	  /**
	   * Return a reference to the current {@link Tech}.
	   * It will print a warning by default about the danger of using the tech directly
	   * but any argument that is passed in will silence the warning.
	   *
	   * @param {*} [safety]
	   *        Anything passed in to silence the warning
	   *
	   * @return {Tech}
	   *         The Tech
	   */


	  Player.prototype.tech = function tech(safety) {
	    if (safety === undefined) {
	      log.warn(tsml(_templateObject$1));
	    }

	    return this.tech_;
	  };

	  /**
	   * Set up click and touch listeners for the playback element
	   *
	   * - On desktops: a click on the video itself will toggle playback
	   * - On mobile devices: a click on the video toggles controls
	   *   which is done by toggling the user state between active and
	   *   inactive
	   * - A tap can signal that a user has become active or has become inactive
	   *   e.g. a quick tap on an iPhone movie should reveal the controls. Another
	   *   quick tap should hide them again (signaling the user is in an inactive
	   *   viewing state)
	   * - In addition to this, we still want the user to be considered inactive after
	   *   a few seconds of inactivity.
	   *
	   * > Note: the only part of iOS interaction we can't mimic with this setup
	   * is a touch and hold on the video element counting as activity in order to
	   * keep the controls showing, but that shouldn't be an issue. A touch and hold
	   * on any controls will still keep the user active
	   *
	   * @private
	   */


	  Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {
	    // Make sure to remove all the previous listeners in case we are called multiple times.
	    this.removeTechControlsListeners_();

	    // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do
	    // trigger mousedown/up.
	    // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object
	    // Any touch events are set to block the mousedown event from happening
	    this.on(this.tech_, 'mousedown', this.handleTechClick_);

	    // If the controls were hidden we don't want that to change without a tap event
	    // so we'll check if the controls were already showing before reporting user
	    // activity
	    this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);
	    this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);
	    this.on(this.tech_, 'touchend', this.handleTechTouchEnd_);

	    // The tap listener needs to come after the touchend listener because the tap
	    // listener cancels out any reportedUserActivity when setting userActive(false)
	    this.on(this.tech_, 'tap', this.handleTechTap_);
	  };

	  /**
	   * Remove the listeners used for click and tap controls. This is needed for
	   * toggling to controls disabled, where a tap/touch should do nothing.
	   *
	   * @private
	   */


	  Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {
	    // We don't want to just use `this.off()` because there might be other needed
	    // listeners added by techs that extend this.
	    this.off(this.tech_, 'tap', this.handleTechTap_);
	    this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);
	    this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);
	    this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);
	    this.off(this.tech_, 'mousedown', this.handleTechClick_);
	  };

	  /**
	   * Player waits for the tech to be ready
	   *
	   * @private
	   */


	  Player.prototype.handleTechReady_ = function handleTechReady_() {
	    this.triggerReady();

	    // Keep the same volume as before
	    if (this.cache_.volume) {
	      this.techCall_('setVolume', this.cache_.volume);
	    }

	    // Look if the tech found a higher resolution poster while loading
	    this.handleTechPosterChange_();

	    // Update the duration if available
	    this.handleTechDurationChange_();

	    // Chrome and Safari both have issues with autoplay.
	    // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.
	    // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)
	    // This fixes both issues. Need to wait for API, so it updates displays correctly
	    if ((this.src() || this.currentSrc()) && this.tag && this.options_.autoplay && this.paused()) {
	      try {
	        // Chrome Fix. Fixed in Chrome v16.
	        delete this.tag.poster;
	      } catch (e) {
	        log('deleting tag.poster throws in some browsers', e);
	      }
	    }
	  };

	  /**
	   * Retrigger the `loadstart` event that was triggered by the {@link Tech}. This
	   * function will also trigger {@link Player#firstplay} if it is the first loadstart
	   * for a video.
	   *
	   * @fires Player#loadstart
	   * @fires Player#firstplay
	   * @listens Tech#loadstart
	   * @private
	   */


	  Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {
	    // TODO: Update to use `emptied` event instead. See #1277.

	    this.removeClass('vjs-ended');
	    this.removeClass('vjs-seeking');

	    // reset the error state
	    this.error(null);

	    // If it's already playing we want to trigger a firstplay event now.
	    // The firstplay event relies on both the play and loadstart events
	    // which can happen in any order for a new source
	    if (!this.paused()) {
	      /**
	       * Fired when the user agent begins looking for media data
	       *
	       * @event Player#loadstart
	       * @type {EventTarget~Event}
	       */
	      this.trigger('loadstart');
	      this.trigger('firstplay');
	    } else {
	      // reset the hasStarted state
	      this.hasStarted(false);
	      this.trigger('loadstart');
	    }

	    // autoplay happens after loadstart for the browser,
	    // so we mimic that behavior
	    this.manualAutoplay_(this.autoplay());
	  };

	  /**
	   * Handle autoplay string values, rather than the typical boolean
	   * values that should be handled by the tech. Note that this is not
	   * part of any specification. Valid values and what they do can be
	   * found on the autoplay getter at Player#autoplay()
	   */


	  Player.prototype.manualAutoplay_ = function manualAutoplay_(type) {
	    var _this4 = this;

	    if (!this.tech_ || typeof type !== 'string') {
	      return;
	    }

	    var muted = function muted() {
	      var previouslyMuted = _this4.muted();

	      _this4.muted(true);

	      var playPromise = _this4.play();

	      if (!playPromise || !playPromise.then || !playPromise['catch']) {
	        return;
	      }

	      return playPromise['catch'](function (e) {
	        // restore old value of muted on failure
	        _this4.muted(previouslyMuted);
	      });
	    };

	    var promise = void 0;

	    if (type === 'any') {
	      promise = this.play();

	      if (promise && promise.then && promise['catch']) {
	        promise['catch'](function () {
	          return muted();
	        });
	      }
	    } else if (type === 'muted') {
	      promise = muted();
	    } else {
	      promise = this.play();
	    }

	    if (!promise || !promise.then || !promise['catch']) {
	      return;
	    }

	    return promise.then(function () {
	      _this4.trigger({ type: 'autoplay-success', autoplay: type });
	    })['catch'](function (e) {
	      _this4.trigger({ type: 'autoplay-failure', autoplay: type });
	    });
	  };

	  /**
	   * Update the internal source caches so that we return the correct source from
	   * `src()`, `currentSource()`, and `currentSources()`.
	   *
	   * > Note: `currentSources` will not be updated if the source that is passed in exists
	   *         in the current `currentSources` cache.
	   *
	   *
	   * @param {Tech~SourceObject} srcObj
	   *        A string or object source to update our caches to.
	   */


	  Player.prototype.updateSourceCaches_ = function updateSourceCaches_() {
	    var srcObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';


	    var src = srcObj;
	    var type = '';

	    if (typeof src !== 'string') {
	      src = srcObj.src;
	      type = srcObj.type;
	    }

	    // make sure all the caches are set to default values
	    // to prevent null checking
	    this.cache_.source = this.cache_.source || {};
	    this.cache_.sources = this.cache_.sources || [];

	    // try to get the type of the src that was passed in
	    if (src && !type) {
	      type = findMimetype(this, src);
	    }

	    // update `currentSource` cache always
	    this.cache_.source = mergeOptions({}, srcObj, { src: src, type: type });

	    var matchingSources = this.cache_.sources.filter(function (s) {
	      return s.src && s.src === src;
	    });
	    var sourceElSources = [];
	    var sourceEls = this.$$('source');
	    var matchingSourceEls = [];

	    for (var i = 0; i < sourceEls.length; i++) {
	      var sourceObj = getAttributes(sourceEls[i]);

	      sourceElSources.push(sourceObj);

	      if (sourceObj.src && sourceObj.src === src) {
	        matchingSourceEls.push(sourceObj.src);
	      }
	    }

	    // if we have matching source els but not matching sources
	    // the current source cache is not up to date
	    if (matchingSourceEls.length && !matchingSources.length) {
	      this.cache_.sources = sourceElSources;
	      // if we don't have matching source or source els set the
	      // sources cache to the `currentSource` cache
	    } else if (!matchingSources.length) {
	      this.cache_.sources = [this.cache_.source];
	    }

	    // update the tech `src` cache
	    this.cache_.src = src;
	  };

	  /**
	   * *EXPERIMENTAL* Fired when the source is set or changed on the {@link Tech}
	   * causing the media element to reload.
	   *
	   * It will fire for the initial source and each subsequent source.
	   * This event is a custom event from Video.js and is triggered by the {@link Tech}.
	   *
	   * The event object for this event contains a `src` property that will contain the source
	   * that was available when the event was triggered. This is generally only necessary if Video.js
	   * is switching techs while the source was being changed.
	   *
	   * It is also fired when `load` is called on the player (or media element)
	   * because the {@link https://html.spec.whatwg.org/multipage/media.html#dom-media-load|specification for `load`}
	   * says that the resource selection algorithm needs to be aborted and restarted.
	   * In this case, it is very likely that the `src` property will be set to the
	   * empty string `""` to indicate we do not know what the source will be but
	   * that it is changing.
	   *
	   * *This event is currently still experimental and may change in minor releases.*
	   * __To use this, pass `enableSourceset` option to the player.__
	   *
	   * @event Player#sourceset
	   * @type {EventTarget~Event}
	   * @prop {string} src
	   *                The source url available when the `sourceset` was triggered.
	   *                It will be an empty string if we cannot know what the source is
	   *                but know that the source will change.
	   */
	  /**
	   * Retrigger the `sourceset` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#sourceset
	   * @listens Tech#sourceset
	   * @private
	   */


	  Player.prototype.handleTechSourceset_ = function handleTechSourceset_(event) {
	    var _this5 = this;

	    // only update the source cache when the source
	    // was not updated using the player api
	    if (!this.changingSrc_) {
	      var updateSourceCaches = function updateSourceCaches(src) {
	        return _this5.updateSourceCaches_(src);
	      };
	      var playerSrc = this.currentSource().src;
	      var eventSrc = event.src;

	      // if we have a playerSrc that is not a blob, and a tech src that is a blob
	      if (playerSrc && !/^blob:/.test(playerSrc) && /^blob:/.test(eventSrc)) {

	        // if both the tech source and the player source were updated we assume
	        // something like @videojs/http-streaming did the sourceset and skip updating the source cache.
	        if (!this.lastSource_ || this.lastSource_.tech !== eventSrc && this.lastSource_.player !== playerSrc) {
	          updateSourceCaches = function updateSourceCaches() {};
	        }
	      }

	      // update the source to the intial source right away
	      // in some cases this will be empty string
	      updateSourceCaches(eventSrc);

	      // if the `sourceset` `src` was an empty string
	      // wait for a `loadstart` to update the cache to `currentSrc`.
	      // If a sourceset happens before a `loadstart`, we reset the state
	      // as this function will be called again.
	      if (!event.src) {
	        var updateCache = function updateCache(e) {
	          if (e.type !== 'sourceset') {
	            var techSrc = _this5.techGet('currentSrc');

	            _this5.lastSource_.tech = techSrc;
	            _this5.updateSourceCaches_(techSrc);
	          }

	          _this5.tech_.off(['sourceset', 'loadstart'], updateCache);
	        };

	        this.tech_.one(['sourceset', 'loadstart'], updateCache);
	      }
	    }
	    this.lastSource_ = { player: this.currentSource().src, tech: event.src };

	    this.trigger({
	      src: event.src,
	      type: 'sourceset'
	    });
	  };

	  /**
	   * Add/remove the vjs-has-started class
	   *
	   * @fires Player#firstplay
	   *
	   * @param {boolean} request
	   *        - true: adds the class
	   *        - false: remove the class
	   *
	   * @return {boolean}
	   *         the boolean value of hasStarted_
	   */


	  Player.prototype.hasStarted = function hasStarted(request) {
	    if (request === undefined) {
	      // act as getter, if we have no request to change
	      return this.hasStarted_;
	    }

	    if (request === this.hasStarted_) {
	      return;
	    }

	    this.hasStarted_ = request;

	    if (this.hasStarted_) {
	      this.addClass('vjs-has-started');
	      this.trigger('firstplay');
	    } else {
	      this.removeClass('vjs-has-started');
	    }
	  };

	  /**
	   * Fired whenever the media begins or resumes playback
	   *
	   * @see [Spec]{@link https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play}
	   * @fires Player#play
	   * @listens Tech#play
	   * @private
	   */


	  Player.prototype.handleTechPlay_ = function handleTechPlay_() {
	    this.removeClass('vjs-ended');
	    this.removeClass('vjs-paused');
	    this.addClass('vjs-playing');

	    // hide the poster when the user hits play
	    this.hasStarted(true);
	    /**
	     * Triggered whenever an {@link Tech#play} event happens. Indicates that
	     * playback has started or resumed.
	     *
	     * @event Player#play
	     * @type {EventTarget~Event}
	     */
	    this.trigger('play');
	  };

	  /**
	   * Retrigger the `ratechange` event that was triggered by the {@link Tech}.
	   *
	   * If there were any events queued while the playback rate was zero, fire
	   * those events now.
	   *
	   * @private
	   * @method Player#handleTechRateChange_
	   * @fires Player#ratechange
	   * @listens Tech#ratechange
	   */


	  Player.prototype.handleTechRateChange_ = function handleTechRateChange_() {
	    if (this.tech_.playbackRate() > 0 && this.cache_.lastPlaybackRate === 0) {
	      this.queuedCallbacks_.forEach(function (queued) {
	        return queued.callback(queued.event);
	      });
	      this.queuedCallbacks_ = [];
	    }
	    this.cache_.lastPlaybackRate = this.tech_.playbackRate();
	    /**
	     * Fires when the playing speed of the audio/video is changed
	     *
	     * @event Player#ratechange
	     * @type {event}
	     */
	    this.trigger('ratechange');
	  };

	  /**
	   * Retrigger the `waiting` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#waiting
	   * @listens Tech#waiting
	   * @private
	   */


	  Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {
	    var _this6 = this;

	    this.addClass('vjs-waiting');
	    /**
	     * A readyState change on the DOM element has caused playback to stop.
	     *
	     * @event Player#waiting
	     * @type {EventTarget~Event}
	     */
	    this.trigger('waiting');
	    this.one('timeupdate', function () {
	      return _this6.removeClass('vjs-waiting');
	    });
	  };

	  /**
	   * Retrigger the `canplay` event that was triggered by the {@link Tech}.
	   * > Note: This is not consistent between browsers. See #1351
	   *
	   * @fires Player#canplay
	   * @listens Tech#canplay
	   * @private
	   */


	  Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {
	    this.removeClass('vjs-waiting');
	    /**
	     * The media has a readyState of HAVE_FUTURE_DATA or greater.
	     *
	     * @event Player#canplay
	     * @type {EventTarget~Event}
	     */
	    this.trigger('canplay');
	  };

	  /**
	   * Retrigger the `canplaythrough` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#canplaythrough
	   * @listens Tech#canplaythrough
	   * @private
	   */


	  Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {
	    this.removeClass('vjs-waiting');
	    /**
	     * The media has a readyState of HAVE_ENOUGH_DATA or greater. This means that the
	     * entire media file can be played without buffering.
	     *
	     * @event Player#canplaythrough
	     * @type {EventTarget~Event}
	     */
	    this.trigger('canplaythrough');
	  };

	  /**
	   * Retrigger the `playing` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#playing
	   * @listens Tech#playing
	   * @private
	   */


	  Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {
	    this.removeClass('vjs-waiting');
	    /**
	     * The media is no longer blocked from playback, and has started playing.
	     *
	     * @event Player#playing
	     * @type {EventTarget~Event}
	     */
	    this.trigger('playing');
	  };

	  /**
	   * Retrigger the `seeking` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#seeking
	   * @listens Tech#seeking
	   * @private
	   */


	  Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {
	    this.addClass('vjs-seeking');
	    /**
	     * Fired whenever the player is jumping to a new time
	     *
	     * @event Player#seeking
	     * @type {EventTarget~Event}
	     */
	    this.trigger('seeking');
	  };

	  /**
	   * Retrigger the `seeked` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#seeked
	   * @listens Tech#seeked
	   * @private
	   */


	  Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {
	    this.removeClass('vjs-seeking');
	    /**
	     * Fired when the player has finished jumping to a new time
	     *
	     * @event Player#seeked
	     * @type {EventTarget~Event}
	     */
	    this.trigger('seeked');
	  };

	  /**
	   * Retrigger the `firstplay` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#firstplay
	   * @listens Tech#firstplay
	   * @deprecated As of 6.0 firstplay event is deprecated.
	   *             As of 6.0 passing the `starttime` option to the player and the firstplay event are deprecated.
	   * @private
	   */


	  Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {
	    // If the first starttime attribute is specified
	    // then we will start at the given offset in seconds
	    if (this.options_.starttime) {
	      log.warn('Passing the `starttime` option to the player will be deprecated in 6.0');
	      this.currentTime(this.options_.starttime);
	    }

	    this.addClass('vjs-has-started');
	    /**
	     * Fired the first time a video is played. Not part of the HLS spec, and this is
	     * probably not the best implementation yet, so use sparingly. If you don't have a
	     * reason to prevent playback, use `myPlayer.one('play');` instead.
	     *
	     * @event Player#firstplay
	     * @deprecated As of 6.0 firstplay event is deprecated.
	     * @type {EventTarget~Event}
	     */
	    this.trigger('firstplay');
	  };

	  /**
	   * Retrigger the `pause` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#pause
	   * @listens Tech#pause
	   * @private
	   */


	  Player.prototype.handleTechPause_ = function handleTechPause_() {
	    this.removeClass('vjs-playing');
	    this.addClass('vjs-paused');
	    /**
	     * Fired whenever the media has been paused
	     *
	     * @event Player#pause
	     * @type {EventTarget~Event}
	     */
	    this.trigger('pause');
	  };

	  /**
	   * Retrigger the `ended` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#ended
	   * @listens Tech#ended
	   * @private
	   */


	  Player.prototype.handleTechEnded_ = function handleTechEnded_() {
	    this.addClass('vjs-ended');
	    if (this.options_.loop) {
	      this.currentTime(0);
	      this.play();
	    } else if (!this.paused()) {
	      this.pause();
	    }

	    /**
	     * Fired when the end of the media resource is reached (currentTime == duration)
	     *
	     * @event Player#ended
	     * @type {EventTarget~Event}
	     */
	    this.trigger('ended');
	  };

	  /**
	   * Fired when the duration of the media resource is first known or changed
	   *
	   * @listens Tech#durationchange
	   * @private
	   */


	  Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {
	    this.duration(this.techGet_('duration'));
	  };

	  /**
	   * Handle a click on the media element to play/pause
	   *
	   * @param {EventTarget~Event} event
	   *        the event that caused this function to trigger
	   *
	   * @listens Tech#mousedown
	   * @private
	   */


	  Player.prototype.handleTechClick_ = function handleTechClick_(event) {
	    if (!isSingleLeftClick(event)) {
	      return;
	    }

	    // When controls are disabled a click should not toggle playback because
	    // the click is considered a control
	    if (!this.controls_) {
	      return;
	    }

	    if (this.paused()) {
	      silencePromise(this.play());
	    } else {
	      this.pause();
	    }
	  };

	  /**
	   * Handle a tap on the media element. It will toggle the user
	   * activity state, which hides and shows the controls.
	   *
	   * @listens Tech#tap
	   * @private
	   */


	  Player.prototype.handleTechTap_ = function handleTechTap_() {
	    this.userActive(!this.userActive());
	  };

	  /**
	   * Handle touch to start
	   *
	   * @listens Tech#touchstart
	   * @private
	   */


	  Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {
	    this.userWasActive = this.userActive();
	  };

	  /**
	   * Handle touch to move
	   *
	   * @listens Tech#touchmove
	   * @private
	   */


	  Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {
	    if (this.userWasActive) {
	      this.reportUserActivity();
	    }
	  };

	  /**
	   * Handle touch to end
	   *
	   * @param {EventTarget~Event} event
	   *        the touchend event that triggered
	   *        this function
	   *
	   * @listens Tech#touchend
	   * @private
	   */


	  Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {
	    // Stop the mouse events from also happening
	    event.preventDefault();
	  };

	  /**
	   * Fired when the player switches in or out of fullscreen mode
	   *
	   * @private
	   * @listens Player#fullscreenchange
	   */


	  Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {
	    if (this.isFullscreen()) {
	      this.addClass('vjs-fullscreen');
	    } else {
	      this.removeClass('vjs-fullscreen');
	    }
	  };

	  /**
	   * native click events on the SWF aren't triggered on IE11, Win8.1RT
	   * use stageclick events triggered from inside the SWF instead
	   *
	   * @private
	   * @listens stageclick
	   */


	  Player.prototype.handleStageClick_ = function handleStageClick_() {
	    this.reportUserActivity();
	  };

	  /**
	   * Handle Tech Fullscreen Change
	   *
	   * @param {EventTarget~Event} event
	   *        the fullscreenchange event that triggered this function
	   *
	   * @param {Object} data
	   *        the data that was sent with the event
	   *
	   * @private
	   * @listens Tech#fullscreenchange
	   * @fires Player#fullscreenchange
	   */


	  Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {
	    if (data) {
	      this.isFullscreen(data.isFullscreen);
	    }
	    /**
	     * Fired when going in and out of fullscreen.
	     *
	     * @event Player#fullscreenchange
	     * @type {EventTarget~Event}
	     */
	    this.trigger('fullscreenchange');
	  };

	  /**
	   * Fires when an error occurred during the loading of an audio/video.
	   *
	   * @private
	   * @listens Tech#error
	   */


	  Player.prototype.handleTechError_ = function handleTechError_() {
	    var error = this.tech_.error();

	    this.error(error);
	  };

	  /**
	   * Retrigger the `textdata` event that was triggered by the {@link Tech}.
	   *
	   * @fires Player#textdata
	   * @listens Tech#textdata
	   * @private
	   */


	  Player.prototype.handleTechTextData_ = function handleTechTextData_() {
	    var data = null;

	    if (arguments.length > 1) {
	      data = arguments[1];
	    }

	    /**
	     * Fires when we get a textdata event from tech
	     *
	     * @event Player#textdata
	     * @type {EventTarget~Event}
	     */
	    this.trigger('textdata', data);
	  };

	  /**
	   * Get object for cached values.
	   *
	   * @return {Object}
	   *         get the current object cache
	   */


	  Player.prototype.getCache = function getCache() {
	    return this.cache_;
	  };

	  /**
	   * Pass values to the playback tech
	   *
	   * @param {string} [method]
	   *        the method to call
	   *
	   * @param {Object} arg
	   *        the argument to pass
	   *
	   * @private
	   */


	  Player.prototype.techCall_ = function techCall_(method, arg) {
	    // If it's not ready yet, call method when it is

	    this.ready(function () {
	      if (method in allowedSetters) {
	        return set$1(this.middleware_, this.tech_, method, arg);
	      } else if (method in allowedMediators) {
	        return mediate(this.middleware_, this.tech_, method, arg);
	      }

	      try {
	        if (this.tech_) {
	          this.tech_[method](arg);
	        }
	      } catch (e) {
	        log(e);
	        throw e;
	      }
	    }, true);
	  };

	  /**
	   * Get calls can't wait for the tech, and sometimes don't need to.
	   *
	   * @param {string} method
	   *        Tech method
	   *
	   * @return {Function|undefined}
	   *         the method or undefined
	   *
	   * @private
	   */


	  Player.prototype.techGet_ = function techGet_(method) {
	    if (!this.tech_ || !this.tech_.isReady_) {
	      return;
	    }

	    if (method in allowedGetters) {
	      return get$1(this.middleware_, this.tech_, method);
	    } else if (method in allowedMediators) {
	      return mediate(this.middleware_, this.tech_, method);
	    }

	    // Flash likes to die and reload when you hide or reposition it.
	    // In these cases the object methods go away and we get errors.
	    // When that happens we'll catch the errors and inform tech that it's not ready any more.
	    try {
	      return this.tech_[method]();
	    } catch (e) {

	      // When building additional tech libs, an expected method may not be defined yet
	      if (this.tech_[method] === undefined) {
	        log('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e);
	        throw e;
	      }

	      // When a method isn't available on the object it throws a TypeError
	      if (e.name === 'TypeError') {
	        log('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);
	        this.tech_.isReady_ = false;
	        throw e;
	      }

	      // If error unknown, just log and throw
	      log(e);
	      throw e;
	    }
	  };

	  /**
	   * Attempt to begin playback at the first opportunity.
	   *
	   * @return {Promise|undefined}
	   *         Returns a promise if the browser supports Promises (or one
	   *         was passed in as an option). This promise will be resolved on
	   *         the return value of play. If this is undefined it will fulfill the
	   *         promise chain otherwise the promise chain will be fulfilled when
	   *         the promise from play is fulfilled.
	   */


	  Player.prototype.play = function play() {
	    var _this7 = this;

	    var PromiseClass = this.options_.Promise || window.Promise;

	    if (PromiseClass) {
	      return new PromiseClass(function (resolve) {
	        _this7.play_(resolve);
	      });
	    }

	    return this.play_();
	  };

	  /**
	   * The actual logic for play, takes a callback that will be resolved on the
	   * return value of play. This allows us to resolve to the play promise if there
	   * is one on modern browsers.
	   *
	   * @private
	   * @param {Function} [callback]
	   *        The callback that should be called when the techs play is actually called
	   */


	  Player.prototype.play_ = function play_() {
	    var _this8 = this;

	    var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : silencePromise;

	    // If this is called while we have a play queued up on a loadstart, remove
	    // that listener to avoid getting in a potentially bad state.
	    if (this.playOnLoadstart_) {
	      this.off('loadstart', this.playOnLoadstart_);
	    }

	    // If the player/tech is not ready, queue up another call to `play()` for
	    // when it is. This will loop back into this method for another attempt at
	    // playback when the tech is ready.
	    if (!this.isReady_) {

	      // Bail out if we're already waiting for `ready`!
	      if (this.playWaitingForReady_) {
	        return;
	      }

	      this.playWaitingForReady_ = true;
	      this.ready(function () {
	        _this8.playWaitingForReady_ = false;
	        callback(_this8.play());
	      });

	      // If the player/tech is ready and we have a source, we can attempt playback.
	    } else if (!this.changingSrc_ && (this.src() || this.currentSrc())) {
	      callback(this.techGet_('play'));
	      return;

	      // If the tech is ready, but we do not have a source, we'll need to wait
	      // for both the `ready` and a `loadstart` when the source is finally
	      // resolved by middleware and set on the player.
	      //
	      // This can happen if `play()` is called while changing sources or before
	      // one has been set on the player.
	    } else {

	      this.playOnLoadstart_ = function () {
	        _this8.playOnLoadstart_ = null;
	        callback(_this8.play());
	      };

	      this.one('loadstart', this.playOnLoadstart_);
	    }
	  };

	  /**
	   * Pause the video playback
	   *
	   * @return {Player}
	   *         A reference to the player object this function was called on
	   */


	  Player.prototype.pause = function pause() {
	    this.techCall_('pause');
	  };

	  /**
	   * Check if the player is paused or has yet to play
	   *
	   * @return {boolean}
	   *         - false: if the media is currently playing
	   *         - true: if media is not currently playing
	   */


	  Player.prototype.paused = function paused() {
	    // The initial state of paused should be true (in Safari it's actually false)
	    return this.techGet_('paused') === false ? false : true;
	  };

	  /**
	   * Get a TimeRange object representing the current ranges of time that the user
	   * has played.
	   *
	   * @return {TimeRange}
	   *         A time range object that represents all the increments of time that have
	   *         been played.
	   */


	  Player.prototype.played = function played() {
	    return this.techGet_('played') || createTimeRanges(0, 0);
	  };

	  /**
	   * Returns whether or not the user is "scrubbing". Scrubbing is
	   * when the user has clicked the progress bar handle and is
	   * dragging it along the progress bar.
	   *
	   * @param {boolean} [isScrubbing]
	   *        wether the user is or is not scrubbing
	   *
	   * @return {boolean}
	   *         The value of scrubbing when getting
	   */


	  Player.prototype.scrubbing = function scrubbing(isScrubbing) {
	    if (typeof isScrubbing === 'undefined') {
	      return this.scrubbing_;
	    }
	    this.scrubbing_ = !!isScrubbing;

	    if (isScrubbing) {
	      this.addClass('vjs-scrubbing');
	    } else {
	      this.removeClass('vjs-scrubbing');
	    }
	  };

	  /**
	   * Get or set the current time (in seconds)
	   *
	   * @param {number|string} [seconds]
	   *        The time to seek to in seconds
	   *
	   * @return {number}
	   *         - the current time in seconds when getting
	   */


	  Player.prototype.currentTime = function currentTime(seconds) {
	    if (typeof seconds !== 'undefined') {
	      if (seconds < 0) {
	        seconds = 0;
	      }
	      this.techCall_('setCurrentTime', seconds);
	      return;
	    }

	    // cache last currentTime and return. default to 0 seconds
	    //
	    // Caching the currentTime is meant to prevent a massive amount of reads on the tech's
	    // currentTime when scrubbing, but may not provide much performance benefit afterall.
	    // Should be tested. Also something has to read the actual current time or the cache will
	    // never get updated.
	    this.cache_.currentTime = this.techGet_('currentTime') || 0;
	    return this.cache_.currentTime;
	  };

	  /**
	   * Normally gets the length in time of the video in seconds;
	   * in all but the rarest use cases an argument will NOT be passed to the method
	   *
	   * > **NOTE**: The video must have started loading before the duration can be
	   * known, and in the case of Flash, may not be known until the video starts
	   * playing.
	   *
	   * @fires Player#durationchange
	   *
	   * @param {number} [seconds]
	   *        The duration of the video to set in seconds
	   *
	   * @return {number}
	   *         - The duration of the video in seconds when getting
	   */


	  Player.prototype.duration = function duration(seconds) {
	    if (seconds === undefined) {
	      // return NaN if the duration is not known
	      return this.cache_.duration !== undefined ? this.cache_.duration : NaN;
	    }

	    seconds = parseFloat(seconds);

	    // Standardize on Inifity for signaling video is live
	    if (seconds < 0) {
	      seconds = Infinity;
	    }

	    if (seconds !== this.cache_.duration) {
	      // Cache the last set value for optimized scrubbing (esp. Flash)
	      this.cache_.duration = seconds;

	      if (seconds === Infinity) {
	        this.addClass('vjs-live');
	      } else {
	        this.removeClass('vjs-live');
	      }
	      /**
	       * @event Player#durationchange
	       * @type {EventTarget~Event}
	       */
	      this.trigger('durationchange');
	    }
	  };

	  /**
	   * Calculates how much time is left in the video. Not part
	   * of the native video API.
	   *
	   * @return {number}
	   *         The time remaining in seconds
	   */


	  Player.prototype.remainingTime = function remainingTime() {
	    return this.duration() - this.currentTime();
	  };

	  /**
	   * A remaining time function that is intented to be used when
	   * the time is to be displayed directly to the user.
	   *
	   * @return {number}
	   *         The rounded time remaining in seconds
	   */


	  Player.prototype.remainingTimeDisplay = function remainingTimeDisplay() {
	    return Math.floor(this.duration()) - Math.floor(this.currentTime());
	  };

	  //
	  // Kind of like an array of portions of the video that have been downloaded.

	  /**
	   * Get a TimeRange object with an array of the times of the video
	   * that have been downloaded. If you just want the percent of the
	   * video that's been downloaded, use bufferedPercent.
	   *
	   * @see [Buffered Spec]{@link http://dev.w3.org/html5/spec/video.html#dom-media-buffered}
	   *
	   * @return {TimeRange}
	   *         A mock TimeRange object (following HTML spec)
	   */


	  Player.prototype.buffered = function buffered() {
	    var buffered = this.techGet_('buffered');

	    if (!buffered || !buffered.length) {
	      buffered = createTimeRanges(0, 0);
	    }

	    return buffered;
	  };

	  /**
	   * Get the percent (as a decimal) of the video that's been downloaded.
	   * This method is not a part of the native HTML video API.
	   *
	   * @return {number}
	   *         A decimal between 0 and 1 representing the percent
	   *         that is bufferred 0 being 0% and 1 being 100%
	   */


	  Player.prototype.bufferedPercent = function bufferedPercent$$1() {
	    return bufferedPercent(this.buffered(), this.duration());
	  };

	  /**
	   * Get the ending time of the last buffered time range
	   * This is used in the progress bar to encapsulate all time ranges.
	   *
	   * @return {number}
	   *         The end of the last buffered time range
	   */


	  Player.prototype.bufferedEnd = function bufferedEnd() {
	    var buffered = this.buffered();
	    var duration = this.duration();
	    var end = buffered.end(buffered.length - 1);

	    if (end > duration) {
	      end = duration;
	    }

	    return end;
	  };

	  /**
	   * Get or set the current volume of the media
	   *
	   * @param  {number} [percentAsDecimal]
	   *         The new volume as a decimal percent:
	   *         - 0 is muted/0%/off
	   *         - 1.0 is 100%/full
	   *         - 0.5 is half volume or 50%
	   *
	   * @return {number}
	   *         The current volume as a percent when getting
	   */


	  Player.prototype.volume = function volume(percentAsDecimal) {
	    var vol = void 0;

	    if (percentAsDecimal !== undefined) {
	      // Force value to between 0 and 1
	      vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal)));
	      this.cache_.volume = vol;
	      this.techCall_('setVolume', vol);

	      if (vol > 0) {
	        this.lastVolume_(vol);
	      }

	      return;
	    }

	    // Default to 1 when returning current volume.
	    vol = parseFloat(this.techGet_('volume'));
	    return isNaN(vol) ? 1 : vol;
	  };

	  /**
	   * Get the current muted state, or turn mute on or off
	   *
	   * @param {boolean} [muted]
	   *        - true to mute
	   *        - false to unmute
	   *
	   * @return {boolean}
	   *         - true if mute is on and getting
	   *         - false if mute is off and getting
	   */


	  Player.prototype.muted = function muted(_muted) {
	    if (_muted !== undefined) {
	      this.techCall_('setMuted', _muted);
	      return;
	    }
	    return this.techGet_('muted') || false;
	  };

	  /**
	   * Get the current defaultMuted state, or turn defaultMuted on or off. defaultMuted
	   * indicates the state of muted on intial playback.
	   *
	   * ```js
	   *   var myPlayer = videojs('some-player-id');
	   *
	   *   myPlayer.src("http://www.example.com/path/to/video.mp4");
	   *
	   *   // get, should be false
	   *   console.log(myPlayer.defaultMuted());
	   *   // set to true
	   *   myPlayer.defaultMuted(true);
	   *   // get should be true
	   *   console.log(myPlayer.defaultMuted());
	   * ```
	   *
	   * @param {boolean} [defaultMuted]
	   *        - true to mute
	   *        - false to unmute
	   *
	   * @return {boolean|Player}
	   *         - true if defaultMuted is on and getting
	   *         - false if defaultMuted is off and getting
	   *         - A reference to the current player when setting
	   */


	  Player.prototype.defaultMuted = function defaultMuted(_defaultMuted) {
	    if (_defaultMuted !== undefined) {
	      return this.techCall_('setDefaultMuted', _defaultMuted);
	    }
	    return this.techGet_('defaultMuted') || false;
	  };

	  /**
	   * Get the last volume, or set it
	   *
	   * @param  {number} [percentAsDecimal]
	   *         The new last volume as a decimal percent:
	   *         - 0 is muted/0%/off
	   *         - 1.0 is 100%/full
	   *         - 0.5 is half volume or 50%
	   *
	   * @return {number}
	   *         the current value of lastVolume as a percent when getting
	   *
	   * @private
	   */


	  Player.prototype.lastVolume_ = function lastVolume_(percentAsDecimal) {
	    if (percentAsDecimal !== undefined && percentAsDecimal !== 0) {
	      this.cache_.lastVolume = percentAsDecimal;
	      return;
	    }
	    return this.cache_.lastVolume;
	  };

	  /**
	   * Check if current tech can support native fullscreen
	   * (e.g. with built in controls like iOS, so not our flash swf)
	   *
	   * @return {boolean}
	   *         if native fullscreen is supported
	   */


	  Player.prototype.supportsFullScreen = function supportsFullScreen() {
	    return this.techGet_('supportsFullScreen') || false;
	  };

	  /**
	   * Check if the player is in fullscreen mode or tell the player that it
	   * is or is not in fullscreen mode.
	   *
	   * > NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
	   * property and instead document.fullscreenElement is used. But isFullscreen is
	   * still a valuable property for internal player workings.
	   *
	   * @param  {boolean} [isFS]
	   *         Set the players current fullscreen state
	   *
	   * @return {boolean}
	   *         - true if fullscreen is on and getting
	   *         - false if fullscreen is off and getting
	   */


	  Player.prototype.isFullscreen = function isFullscreen(isFS) {
	    if (isFS !== undefined) {
	      this.isFullscreen_ = !!isFS;
	      return;
	    }
	    return !!this.isFullscreen_;
	  };

	  /**
	   * Increase the size of the video to full screen
	   * In some browsers, full screen is not supported natively, so it enters
	   * "full window mode", where the video fills the browser window.
	   * In browsers and devices that support native full screen, sometimes the
	   * browser's default controls will be shown, and not the Video.js custom skin.
	   * This includes most mobile devices (iOS, Android) and older versions of
	   * Safari.
	   *
	   * @fires Player#fullscreenchange
	   */


	  Player.prototype.requestFullscreen = function requestFullscreen() {
	    var fsApi = FullscreenApi;

	    this.isFullscreen(true);

	    if (fsApi.requestFullscreen) {
	      // the browser supports going fullscreen at the element level so we can
	      // take the controls fullscreen as well as the video

	      // Trigger fullscreenchange event after change
	      // We have to specifically add this each time, and remove
	      // when canceling fullscreen. Otherwise if there's multiple
	      // players on a page, they would all be reacting to the same fullscreen
	      // events
	      on(document, fsApi.fullscreenchange, bind(this, function documentFullscreenChange(e) {
	        this.isFullscreen(document[fsApi.fullscreenElement]);

	        // If cancelling fullscreen, remove event listener.
	        if (this.isFullscreen() === false) {
	          off(document, fsApi.fullscreenchange, documentFullscreenChange);
	        }
	        /**
	         * @event Player#fullscreenchange
	         * @type {EventTarget~Event}
	         */
	        this.trigger('fullscreenchange');
	      }));

	      this.el_[fsApi.requestFullscreen]();
	    } else if (this.tech_.supportsFullScreen()) {
	      // we can't take the video.js controls fullscreen but we can go fullscreen
	      // with native controls
	      this.techCall_('enterFullScreen');
	    } else {
	      // fullscreen isn't supported so we'll just stretch the video element to
	      // fill the viewport
	      this.enterFullWindow();
	      /**
	       * @event Player#fullscreenchange
	       * @type {EventTarget~Event}
	       */
	      this.trigger('fullscreenchange');
	    }
	  };

	  /**
	   * Return the video to its normal size after having been in full screen mode
	   *
	   * @fires Player#fullscreenchange
	   */


	  Player.prototype.exitFullscreen = function exitFullscreen() {
	    var fsApi = FullscreenApi;

	    this.isFullscreen(false);

	    // Check for browser element fullscreen support
	    if (fsApi.requestFullscreen) {
	      document[fsApi.exitFullscreen]();
	    } else if (this.tech_.supportsFullScreen()) {
	      this.techCall_('exitFullScreen');
	    } else {
	      this.exitFullWindow();
	      /**
	       * @event Player#fullscreenchange
	       * @type {EventTarget~Event}
	       */
	      this.trigger('fullscreenchange');
	    }
	  };

	  /**
	   * When fullscreen isn't supported we can stretch the
	   * video container to as wide as the browser will let us.
	   *
	   * @fires Player#enterFullWindow
	   */


	  Player.prototype.enterFullWindow = function enterFullWindow() {
	    this.isFullWindow = true;

	    // Storing original doc overflow value to return to when fullscreen is off
	    this.docOrigOverflow = document.documentElement.style.overflow;

	    // Add listener for esc key to exit fullscreen
	    on(document, 'keydown', bind(this, this.fullWindowOnEscKey));

	    // Hide any scroll bars
	    document.documentElement.style.overflow = 'hidden';

	    // Apply fullscreen styles
	    addClass(document.body, 'vjs-full-window');

	    /**
	     * @event Player#enterFullWindow
	     * @type {EventTarget~Event}
	     */
	    this.trigger('enterFullWindow');
	  };

	  /**
	   * Check for call to either exit full window or
	   * full screen on ESC key
	   *
	   * @param {string} event
	   *        Event to check for key press
	   */


	  Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {
	    if (event.keyCode === 27) {
	      if (this.isFullscreen() === true) {
	        this.exitFullscreen();
	      } else {
	        this.exitFullWindow();
	      }
	    }
	  };

	  /**
	   * Exit full window
	   *
	   * @fires Player#exitFullWindow
	   */


	  Player.prototype.exitFullWindow = function exitFullWindow() {
	    this.isFullWindow = false;
	    off(document, 'keydown', this.fullWindowOnEscKey);

	    // Unhide scroll bars.
	    document.documentElement.style.overflow = this.docOrigOverflow;

	    // Remove fullscreen styles
	    removeClass(document.body, 'vjs-full-window');

	    // Resize the box, controller, and poster to original sizes
	    // this.positionAll();
	    /**
	     * @event Player#exitFullWindow
	     * @type {EventTarget~Event}
	     */
	    this.trigger('exitFullWindow');
	  };

	  /**
	   * Check whether the player can play a given mimetype
	   *
	   * @see https://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype
	   *
	   * @param {string} type
	   *        The mimetype to check
	   *
	   * @return {string}
	   *         'probably', 'maybe', or '' (empty string)
	   */


	  Player.prototype.canPlayType = function canPlayType(type) {
	    var can = void 0;

	    // Loop through each playback technology in the options order
	    for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {
	      var techName = j[i];
	      var tech = Tech.getTech(techName);

	      // Support old behavior of techs being registered as components.
	      // Remove once that deprecated behavior is removed.
	      if (!tech) {
	        tech = Component.getComponent(techName);
	      }

	      // Check if the current tech is defined before continuing
	      if (!tech) {
	        log.error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
	        continue;
	      }

	      // Check if the browser supports this technology
	      if (tech.isSupported()) {
	        can = tech.canPlayType(type);

	        if (can) {
	          return can;
	        }
	      }
	    }

	    return '';
	  };

	  /**
	   * Select source based on tech-order or source-order
	   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,
	   * defaults to tech-order selection
	   *
	   * @param {Array} sources
	   *        The sources for a media asset
	   *
	   * @return {Object|boolean}
	   *         Object of source and tech order or false
	   */


	  Player.prototype.selectSource = function selectSource(sources) {
	    var _this9 = this;

	    // Get only the techs specified in `techOrder` that exist and are supported by the
	    // current platform
	    var techs = this.options_.techOrder.map(function (techName) {
	      return [techName, Tech.getTech(techName)];
	    }).filter(function (_ref) {
	      var techName = _ref[0],
	          tech = _ref[1];

	      // Check if the current tech is defined before continuing
	      if (tech) {
	        // Check if the browser supports this technology
	        return tech.isSupported();
	      }

	      log.error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
	      return false;
	    });

	    // Iterate over each `innerArray` element once per `outerArray` element and execute
	    // `tester` with both. If `tester` returns a non-falsy value, exit early and return
	    // that value.
	    var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {
	      var found = void 0;

	      outerArray.some(function (outerChoice) {
	        return innerArray.some(function (innerChoice) {
	          found = tester(outerChoice, innerChoice);

	          if (found) {
	            return true;
	          }
	        });
	      });

	      return found;
	    };

	    var foundSourceAndTech = void 0;
	    var flip = function flip(fn) {
	      return function (a, b) {
	        return fn(b, a);
	      };
	    };
	    var finder = function finder(_ref2, source) {
	      var techName = _ref2[0],
	          tech = _ref2[1];

	      if (tech.canPlaySource(source, _this9.options_[techName.toLowerCase()])) {
	        return { source: source, tech: techName };
	      }
	    };

	    // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources
	    // to select from them based on their priority.
	    if (this.options_.sourceOrder) {
	      // Source-first ordering
	      foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));
	    } else {
	      // Tech-first ordering
	      foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);
	    }

	    return foundSourceAndTech || false;
	  };

	  /**
	   * Get or set the video source.
	   *
	   * @param {Tech~SourceObject|Tech~SourceObject[]|string} [source]
	   *        A SourceObject, an array of SourceObjects, or a string referencing
	   *        a URL to a media source. It is _highly recommended_ that an object
	   *        or array of objects is used here, so that source selection
	   *        algorithms can take the `type` into account.
	   *
	   *        If not provided, this method acts as a getter.
	   *
	   * @return {string|undefined}
	   *         If the `source` argument is missing, returns the current source
	   *         URL. Otherwise, returns nothing/undefined.
	   */


	  Player.prototype.src = function src(source) {
	    var _this10 = this;

	    // getter usage
	    if (typeof source === 'undefined') {
	      return this.cache_.src || '';
	    }
	    // filter out invalid sources and turn our source into
	    // an array of source objects
	    var sources = filterSource(source);

	    // if a source was passed in then it is invalid because
	    // it was filtered to a zero length Array. So we have to
	    // show an error
	    if (!sources.length) {
	      this.setTimeout(function () {
	        this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
	      }, 0);
	      return;
	    }

	    // intial sources
	    this.changingSrc_ = true;

	    this.cache_.sources = sources;
	    this.updateSourceCaches_(sources[0]);

	    // middlewareSource is the source after it has been changed by middleware
	    setSource(this, sources[0], function (middlewareSource, mws) {
	      _this10.middleware_ = mws;

	      // since sourceSet is async we have to update the cache again after we select a source since
	      // the source that is selected could be out of order from the cache update above this callback.
	      _this10.cache_.sources = sources;
	      _this10.updateSourceCaches_(middlewareSource);

	      var err = _this10.src_(middlewareSource);

	      if (err) {
	        if (sources.length > 1) {
	          return _this10.src(sources.slice(1));
	        }

	        _this10.changingSrc_ = false;

	        // We need to wrap this in a timeout to give folks a chance to add error event handlers
	        _this10.setTimeout(function () {
	          this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
	        }, 0);

	        // we could not find an appropriate tech, but let's still notify the delegate that this is it
	        // this needs a better comment about why this is needed
	        _this10.triggerReady();

	        return;
	      }

	      setTech(mws, _this10.tech_);
	    });
	  };

	  /**
	   * Set the source object on the tech, returns a boolean that indicates wether
	   * there is a tech that can play the source or not
	   *
	   * @param {Tech~SourceObject} source
	   *        The source object to set on the Tech
	   *
	   * @return {Boolean}
	   *         - True if there is no Tech to playback this source
	   *         - False otherwise
	   *
	   * @private
	   */


	  Player.prototype.src_ = function src_(source) {
	    var _this11 = this;

	    var sourceTech = this.selectSource([source]);

	    if (!sourceTech) {
	      return true;
	    }

	    if (!titleCaseEquals(sourceTech.tech, this.techName_)) {
	      this.changingSrc_ = true;
	      // load this technology with the chosen source
	      this.loadTech_(sourceTech.tech, sourceTech.source);
	      this.tech_.ready(function () {
	        _this11.changingSrc_ = false;
	      });
	      return false;
	    }

	    // wait until the tech is ready to set the source
	    // and set it synchronously if possible (#2326)
	    this.ready(function () {

	      // The setSource tech method was added with source handlers
	      // so older techs won't support it
	      // We need to check the direct prototype for the case where subclasses
	      // of the tech do not support source handlers
	      if (this.tech_.constructor.prototype.hasOwnProperty('setSource')) {
	        this.techCall_('setSource', source);
	      } else {
	        this.techCall_('src', source.src);
	      }

	      this.changingSrc_ = false;
	    }, true);

	    return false;
	  };

	  /**
	   * Begin loading the src data.
	   */


	  Player.prototype.load = function load() {
	    this.techCall_('load');
	  };

	  /**
	   * Reset the player. Loads the first tech in the techOrder,
	   * removes all the text tracks in the existing `tech`,
	   * and calls `reset` on the `tech`.
	   */


	  Player.prototype.reset = function reset() {
	    if (this.tech_) {
	      this.tech_.clearTracks('text');
	    }
	    this.loadTech_(this.options_.techOrder[0], null);
	    this.techCall_('reset');
	  };

	  /**
	   * Returns all of the current source objects.
	   *
	   * @return {Tech~SourceObject[]}
	   *         The current source objects
	   */


	  Player.prototype.currentSources = function currentSources() {
	    var source = this.currentSource();
	    var sources = [];

	    // assume `{}` or `{ src }`
	    if (Object.keys(source).length !== 0) {
	      sources.push(source);
	    }

	    return this.cache_.sources || sources;
	  };

	  /**
	   * Returns the current source object.
	   *
	   * @return {Tech~SourceObject}
	   *         The current source object
	   */


	  Player.prototype.currentSource = function currentSource() {
	    return this.cache_.source || {};
	  };

	  /**
	   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
	   * Can be used in conjuction with `currentType` to assist in rebuilding the current source object.
	   *
	   * @return {string}
	   *         The current source
	   */


	  Player.prototype.currentSrc = function currentSrc() {
	    return this.currentSource() && this.currentSource().src || '';
	  };

	  /**
	   * Get the current source type e.g. video/mp4
	   * This can allow you rebuild the current source object so that you could load the same
	   * source and tech later
	   *
	   * @return {string}
	   *         The source MIME type
	   */


	  Player.prototype.currentType = function currentType() {
	    return this.currentSource() && this.currentSource().type || '';
	  };

	  /**
	   * Get or set the preload attribute
	   *
	   * @param {boolean} [value]
	   *        - true means that we should preload
	   *        - false maens that we should not preload
	   *
	   * @return {string}
	   *         The preload attribute value when getting
	   */


	  Player.prototype.preload = function preload(value) {
	    if (value !== undefined) {
	      this.techCall_('setPreload', value);
	      this.options_.preload = value;
	      return;
	    }
	    return this.techGet_('preload');
	  };

	  /**
	   * Get or set the autoplay option. When this is a boolean it will
	   * modify the attribute on the tech. When this is a string the attribute on
	   * the tech will be removed and `Player` will handle autoplay on loadstarts.
	   *
	   * @param {boolean|string} [value]
	   *        - true: autoplay using the browser behavior
	   *        - false: do not autoplay
	   *        - 'play': call play() on every loadstart
	   *        - 'muted': call muted() then play() on every loadstart
	   *        - 'any': call play() on every loadstart. if that fails call muted() then play().
	   *        - *: values other than those listed here will be set `autoplay` to true
	   *
	   * @return {boolean|string}
	   *         The current value of autoplay when getting
	   */


	  Player.prototype.autoplay = function autoplay(value) {
	    // getter usage
	    if (value === undefined) {
	      return this.options_.autoplay || false;
	    }

	    var techAutoplay = void 0;

	    // if the value is a valid string set it to that
	    if (typeof value === 'string' && /(any|play|muted)/.test(value)) {
	      this.options_.autoplay = value;
	      this.manualAutoplay_(value);
	      techAutoplay = false;

	      // any falsy value sets autoplay to false in the browser,
	      // lets do the same
	    } else if (!value) {
	      this.options_.autoplay = false;

	      // any other value (ie truthy) sets autoplay to true
	    } else {
	      this.options_.autoplay = true;
	    }

	    techAutoplay = techAutoplay || this.options_.autoplay;

	    // if we don't have a tech then we do not queue up
	    // a setAutoplay call on tech ready. We do this because the
	    // autoplay option will be passed in the constructor and we
	    // do not need to set it twice
	    if (this.tech_) {
	      this.techCall_('setAutoplay', techAutoplay);
	    }
	  };

	  /**
	   * Set or unset the playsinline attribute.
	   * Playsinline tells the browser that non-fullscreen playback is preferred.
	   *
	   * @param {boolean} [value]
	   *        - true means that we should try to play inline by default
	   *        - false means that we should use the browser's default playback mode,
	   *          which in most cases is inline. iOS Safari is a notable exception
	   *          and plays fullscreen by default.
	   *
	   * @return {string|Player}
	   *         - the current value of playsinline
	   *         - the player when setting
	   *
	   * @see [Spec]{@link https://html.spec.whatwg.org/#attr-video-playsinline}
	   */


	  Player.prototype.playsinline = function playsinline(value) {
	    if (value !== undefined) {
	      this.techCall_('setPlaysinline', value);
	      this.options_.playsinline = value;
	      return this;
	    }
	    return this.techGet_('playsinline');
	  };

	  /**
	   * Get or set the loop attribute on the video element.
	   *
	   * @param {boolean} [value]
	   *        - true means that we should loop the video
	   *        - false means that we should not loop the video
	   *
	   * @return {string}
	   *         The current value of loop when getting
	   */


	  Player.prototype.loop = function loop(value) {
	    if (value !== undefined) {
	      this.techCall_('setLoop', value);
	      this.options_.loop = value;
	      return;
	    }
	    return this.techGet_('loop');
	  };

	  /**
	   * Get or set the poster image source url
	   *
	   * @fires Player#posterchange
	   *
	   * @param {string} [src]
	   *        Poster image source URL
	   *
	   * @return {string}
	   *         The current value of poster when getting
	   */


	  Player.prototype.poster = function poster(src) {
	    if (src === undefined) {
	      return this.poster_;
	    }

	    // The correct way to remove a poster is to set as an empty string
	    // other falsey values will throw errors
	    if (!src) {
	      src = '';
	    }

	    if (src === this.poster_) {
	      return;
	    }

	    // update the internal poster variable
	    this.poster_ = src;

	    // update the tech's poster
	    this.techCall_('setPoster', src);

	    this.isPosterFromTech_ = false;

	    // alert components that the poster has been set
	    /**
	     * This event fires when the poster image is changed on the player.
	     *
	     * @event Player#posterchange
	     * @type {EventTarget~Event}
	     */
	    this.trigger('posterchange');
	  };

	  /**
	   * Some techs (e.g. YouTube) can provide a poster source in an
	   * asynchronous way. We want the poster component to use this
	   * poster source so that it covers up the tech's controls.
	   * (YouTube's play button). However we only want to use this
	   * source if the player user hasn't set a poster through
	   * the normal APIs.
	   *
	   * @fires Player#posterchange
	   * @listens Tech#posterchange
	   * @private
	   */


	  Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {
	    if ((!this.poster_ || this.options_.techCanOverridePoster) && this.tech_ && this.tech_.poster) {
	      var newPoster = this.tech_.poster() || '';

	      if (newPoster !== this.poster_) {
	        this.poster_ = newPoster;
	        this.isPosterFromTech_ = true;

	        // Let components know the poster has changed
	        this.trigger('posterchange');
	      }
	    }
	  };

	  /**
	   * Get or set whether or not the controls are showing.
	   *
	   * @fires Player#controlsenabled
	   *
	   * @param {boolean} [bool]
	   *        - true to turn controls on
	   *        - false to turn controls off
	   *
	   * @return {boolean}
	   *         The current value of controls when getting
	   */


	  Player.prototype.controls = function controls(bool) {
	    if (bool === undefined) {
	      return !!this.controls_;
	    }

	    bool = !!bool;

	    // Don't trigger a change event unless it actually changed
	    if (this.controls_ === bool) {
	      return;
	    }

	    this.controls_ = bool;

	    if (this.usingNativeControls()) {
	      this.techCall_('setControls', bool);
	    }

	    if (this.controls_) {
	      this.removeClass('vjs-controls-disabled');
	      this.addClass('vjs-controls-enabled');
	      /**
	       * @event Player#controlsenabled
	       * @type {EventTarget~Event}
	       */
	      this.trigger('controlsenabled');
	      if (!this.usingNativeControls()) {
	        this.addTechControlsListeners_();
	      }
	    } else {
	      this.removeClass('vjs-controls-enabled');
	      this.addClass('vjs-controls-disabled');
	      /**
	       * @event Player#controlsdisabled
	       * @type {EventTarget~Event}
	       */
	      this.trigger('controlsdisabled');
	      if (!this.usingNativeControls()) {
	        this.removeTechControlsListeners_();
	      }
	    }
	  };

	  /**
	   * Toggle native controls on/off. Native controls are the controls built into
	   * devices (e.g. default iPhone controls), Flash, or other techs
	   * (e.g. Vimeo Controls)
	   * **This should only be set by the current tech, because only the tech knows
	   * if it can support native controls**
	   *
	   * @fires Player#usingnativecontrols
	   * @fires Player#usingcustomcontrols
	   *
	   * @param {boolean} [bool]
	   *        - true to turn native controls on
	   *        - false to turn native controls off
	   *
	   * @return {boolean}
	   *         The current value of native controls when getting
	   */


	  Player.prototype.usingNativeControls = function usingNativeControls(bool) {
	    if (bool === undefined) {
	      return !!this.usingNativeControls_;
	    }

	    bool = !!bool;

	    // Don't trigger a change event unless it actually changed
	    if (this.usingNativeControls_ === bool) {
	      return;
	    }

	    this.usingNativeControls_ = bool;

	    if (this.usingNativeControls_) {
	      this.addClass('vjs-using-native-controls');

	      /**
	       * player is using the native device controls
	       *
	       * @event Player#usingnativecontrols
	       * @type {EventTarget~Event}
	       */
	      this.trigger('usingnativecontrols');
	    } else {
	      this.removeClass('vjs-using-native-controls');

	      /**
	       * player is using the custom HTML controls
	       *
	       * @event Player#usingcustomcontrols
	       * @type {EventTarget~Event}
	       */
	      this.trigger('usingcustomcontrols');
	    }
	  };

	  /**
	   * Set or get the current MediaError
	   *
	   * @fires Player#error
	   *
	   * @param  {MediaError|string|number} [err]
	   *         A MediaError or a string/number to be turned
	   *         into a MediaError
	   *
	   * @return {MediaError|null}
	   *         The current MediaError when getting (or null)
	   */


	  Player.prototype.error = function error(err) {
	    if (err === undefined) {
	      return this.error_ || null;
	    }

	    // restoring to default
	    if (err === null) {
	      this.error_ = err;
	      this.removeClass('vjs-error');
	      if (this.errorDisplay) {
	        this.errorDisplay.close();
	      }
	      return;
	    }

	    this.error_ = new MediaError(err);

	    // add the vjs-error classname to the player
	    this.addClass('vjs-error');

	    // log the name of the error type and any message
	    // ie8 just logs "[object object]" if you just log the error object
	    log.error('(CODE:' + this.error_.code + ' ' + MediaError.errorTypes[this.error_.code] + ')', this.error_.message, this.error_);

	    /**
	     * @event Player#error
	     * @type {EventTarget~Event}
	     */
	    this.trigger('error');

	    return;
	  };

	  /**
	   * Report user activity
	   *
	   * @param {Object} event
	   *        Event object
	   */


	  Player.prototype.reportUserActivity = function reportUserActivity(event) {
	    this.userActivity_ = true;
	  };

	  /**
	   * Get/set if user is active
	   *
	   * @fires Player#useractive
	   * @fires Player#userinactive
	   *
	   * @param {boolean} [bool]
	   *        - true if the user is active
	   *        - false if the user is inactive
	   *
	   * @return {boolean}
	   *         The current value of userActive when getting
	   */


	  Player.prototype.userActive = function userActive(bool) {
	    if (bool === undefined) {
	      return this.userActive_;
	    }

	    bool = !!bool;

	    if (bool === this.userActive_) {
	      return;
	    }

	    this.userActive_ = bool;

	    if (this.userActive_) {
	      this.userActivity_ = true;
	      this.removeClass('vjs-user-inactive');
	      this.addClass('vjs-user-active');
	      /**
	       * @event Player#useractive
	       * @type {EventTarget~Event}
	       */
	      this.trigger('useractive');
	      return;
	    }

	    // Chrome/Safari/IE have bugs where when you change the cursor it can
	    // trigger a mousemove event. This causes an issue when you're hiding
	    // the cursor when the user is inactive, and a mousemove signals user
	    // activity. Making it impossible to go into inactive mode. Specifically
	    // this happens in fullscreen when we really need to hide the cursor.
	    //
	    // When this gets resolved in ALL browsers it can be removed
	    // https://code.google.com/p/chromium/issues/detail?id=103041
	    if (this.tech_) {
	      this.tech_.one('mousemove', function (e) {
	        e.stopPropagation();
	        e.preventDefault();
	      });
	    }

	    this.userActivity_ = false;
	    this.removeClass('vjs-user-active');
	    this.addClass('vjs-user-inactive');
	    /**
	     * @event Player#userinactive
	     * @type {EventTarget~Event}
	     */
	    this.trigger('userinactive');
	  };

	  /**
	   * Listen for user activity based on timeout value
	   *
	   * @private
	   */


	  Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {
	    var mouseInProgress = void 0;
	    var lastMoveX = void 0;
	    var lastMoveY = void 0;
	    var handleActivity = bind(this, this.reportUserActivity);

	    var handleMouseMove = function handleMouseMove(e) {
	      // #1068 - Prevent mousemove spamming
	      // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970
	      if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {
	        lastMoveX = e.screenX;
	        lastMoveY = e.screenY;
	        handleActivity();
	      }
	    };

	    var handleMouseDown = function handleMouseDown() {
	      handleActivity();
	      // For as long as the they are touching the device or have their mouse down,
	      // we consider them active even if they're not moving their finger or mouse.
	      // So we want to continue to update that they are active
	      this.clearInterval(mouseInProgress);
	      // Setting userActivity=true now and setting the interval to the same time
	      // as the activityCheck interval (250) should ensure we never miss the
	      // next activityCheck
	      mouseInProgress = this.setInterval(handleActivity, 250);
	    };

	    var handleMouseUp = function handleMouseUp(event) {
	      handleActivity();
	      // Stop the interval that maintains activity if the mouse/touch is down
	      this.clearInterval(mouseInProgress);
	    };

	    // Any mouse movement will be considered user activity
	    this.on('mousedown', handleMouseDown);
	    this.on('mousemove', handleMouseMove);
	    this.on('mouseup', handleMouseUp);

	    // Listen for keyboard navigation
	    // Shouldn't need to use inProgress interval because of key repeat
	    this.on('keydown', handleActivity);
	    this.on('keyup', handleActivity);

	    // Run an interval every 250 milliseconds instead of stuffing everything into
	    // the mousemove/touchmove function itself, to prevent performance degradation.
	    // `this.reportUserActivity` simply sets this.userActivity_ to true, which
	    // then gets picked up by this loop
	    // http://ejohn.org/blog/learning-from-twitter/
	    var inactivityTimeout = void 0;

	    this.setInterval(function () {
	      // Check to see if mouse/touch activity has happened
	      if (!this.userActivity_) {
	        return;
	      }

	      // Reset the activity tracker
	      this.userActivity_ = false;

	      // If the user state was inactive, set the state to active
	      this.userActive(true);

	      // Clear any existing inactivity timeout to start the timer over
	      this.clearTimeout(inactivityTimeout);

	      var timeout = this.options_.inactivityTimeout;

	      if (timeout <= 0) {
	        return;
	      }

	      // In <timeout> milliseconds, if no more activity has occurred the
	      // user will be considered inactive
	      inactivityTimeout = this.setTimeout(function () {
	        // Protect against the case where the inactivityTimeout can trigger just
	        // before the next user activity is picked up by the activity check loop
	        // causing a flicker
	        if (!this.userActivity_) {
	          this.userActive(false);
	        }
	      }, timeout);
	    }, 250);
	  };

	  /**
	   * Gets or sets the current playback rate. A playback rate of
	   * 1.0 represents normal speed and 0.5 would indicate half-speed
	   * playback, for instance.
	   *
	   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
	   *
	   * @param {number} [rate]
	   *       New playback rate to set.
	   *
	   * @return {number}
	   *         The current playback rate when getting or 1.0
	   */


	  Player.prototype.playbackRate = function playbackRate(rate) {
	    if (rate !== undefined) {
	      // NOTE: this.cache_.lastPlaybackRate is set from the tech handler
	      // that is registered above
	      this.techCall_('setPlaybackRate', rate);
	      return;
	    }

	    if (this.tech_ && this.tech_.featuresPlaybackRate) {
	      return this.cache_.lastPlaybackRate || this.techGet_('playbackRate');
	    }
	    return 1.0;
	  };

	  /**
	   * Gets or sets the current default playback rate. A default playback rate of
	   * 1.0 represents normal speed and 0.5 would indicate half-speed playback, for instance.
	   * defaultPlaybackRate will only represent what the intial playbackRate of a video was, not
	   * not the current playbackRate.
	   *
	   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-defaultplaybackrate
	   *
	   * @param {number} [rate]
	   *       New default playback rate to set.
	   *
	   * @return {number|Player}
	   *         - The default playback rate when getting or 1.0
	   *         - the player when setting
	   */


	  Player.prototype.defaultPlaybackRate = function defaultPlaybackRate(rate) {
	    if (rate !== undefined) {
	      return this.techCall_('setDefaultPlaybackRate', rate);
	    }

	    if (this.tech_ && this.tech_.featuresPlaybackRate) {
	      return this.techGet_('defaultPlaybackRate');
	    }
	    return 1.0;
	  };

	  /**
	   * Gets or sets the audio flag
	   *
	   * @param {boolean} bool
	   *        - true signals that this is an audio player
	   *        - false signals that this is not an audio player
	   *
	   * @return {boolean}
	   *         The current value of isAudio when getting
	   */


	  Player.prototype.isAudio = function isAudio(bool) {
	    if (bool !== undefined) {
	      this.isAudio_ = !!bool;
	      return;
	    }

	    return !!this.isAudio_;
	  };

	  /**
	   * A helper method for adding a {@link TextTrack} to our
	   * {@link TextTrackList}.
	   *
	   * In addition to the W3C settings we allow adding additional info through options.
	   *
	   * @see http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
	   *
	   * @param {string} [kind]
	   *        the kind of TextTrack you are adding
	   *
	   * @param {string} [label]
	   *        the label to give the TextTrack label
	   *
	   * @param {string} [language]
	   *        the language to set on the TextTrack
	   *
	   * @return {TextTrack|undefined}
	   *         the TextTrack that was added or undefined
	   *         if there is no tech
	   */


	  Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {
	    if (this.tech_) {
	      return this.tech_.addTextTrack(kind, label, language);
	    }
	  };

	  /**
	   * Create a remote {@link TextTrack} and an {@link HTMLTrackElement}. It will
	   * automatically removed from the video element whenever the source changes, unless
	   * manualCleanup is set to false.
	   *
	   * @param {Object} options
	   *        Options to pass to {@link HTMLTrackElement} during creation. See
	   *        {@link HTMLTrackElement} for object properties that you should use.
	   *
	   * @param {boolean} [manualCleanup=true] if set to false, the TextTrack will be
	   *
	   * @return {HtmlTrackElement}
	   *         the HTMLTrackElement that was created and added
	   *         to the HtmlTrackElementList and the remote
	   *         TextTrackList
	   *
	   * @deprecated The default value of the "manualCleanup" parameter will default
	   *             to "false" in upcoming versions of Video.js
	   */


	  Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options, manualCleanup) {
	    if (this.tech_) {
	      return this.tech_.addRemoteTextTrack(options, manualCleanup);
	    }
	  };

	  /**
	   * Remove a remote {@link TextTrack} from the respective
	   * {@link TextTrackList} and {@link HtmlTrackElementList}.
	   *
	   * @param {Object} track
	   *        Remote {@link TextTrack} to remove
	   *
	   * @return {undefined}
	   *         does not return anything
	   */


	  Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {
	    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	        _ref3$track = _ref3.track,
	        track = _ref3$track === undefined ? arguments[0] : _ref3$track;

	    // destructure the input into an object with a track argument, defaulting to arguments[0]
	    // default the whole argument to an empty object if nothing was passed in

	    if (this.tech_) {
	      return this.tech_.removeRemoteTextTrack(track);
	    }
	  };

	  /**
	   * Gets available media playback quality metrics as specified by the W3C's Media
	   * Playback Quality API.
	   *
	   * @see [Spec]{@link https://wicg.github.io/media-playback-quality}
	   *
	   * @return {Object|undefined}
	   *         An object with supported media playback quality metrics or undefined if there
	   *         is no tech or the tech does not support it.
	   */


	  Player.prototype.getVideoPlaybackQuality = function getVideoPlaybackQuality() {
	    return this.techGet_('getVideoPlaybackQuality');
	  };

	  /**
	   * Get video width
	   *
	   * @return {number}
	   *         current video width
	   */


	  Player.prototype.videoWidth = function videoWidth() {
	    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
	  };

	  /**
	   * Get video height
	   *
	   * @return {number}
	   *         current video height
	   */


	  Player.prototype.videoHeight = function videoHeight() {
	    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
	  };

	  /**
	   * The player's language code
	   * NOTE: The language should be set in the player options if you want the
	   * the controls to be built with a specific language. Changing the lanugage
	   * later will not update controls text.
	   *
	   * @param {string} [code]
	   *        the language code to set the player to
	   *
	   * @return {string}
	   *         The current language code when getting
	   */


	  Player.prototype.language = function language(code) {
	    if (code === undefined) {
	      return this.language_;
	    }

	    this.language_ = String(code).toLowerCase();
	  };

	  /**
	   * Get the player's language dictionary
	   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time
	   * Languages specified directly in the player options have precedence
	   *
	   * @return {Array}
	   *         An array of of supported languages
	   */


	  Player.prototype.languages = function languages() {
	    return mergeOptions(Player.prototype.options_.languages, this.languages_);
	  };

	  /**
	   * returns a JavaScript object reperesenting the current track
	   * information. **DOES not return it as JSON**
	   *
	   * @return {Object}
	   *         Object representing the current of track info
	   */


	  Player.prototype.toJSON = function toJSON() {
	    var options = mergeOptions(this.options_);
	    var tracks = options.tracks;

	    options.tracks = [];

	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];

	      // deep merge tracks and null out player so no circular references
	      track = mergeOptions(track);
	      track.player = undefined;
	      options.tracks[i] = track;
	    }

	    return options;
	  };

	  /**
	   * Creates a simple modal dialog (an instance of the {@link ModalDialog}
	   * component) that immediately overlays the player with arbitrary
	   * content and removes itself when closed.
	   *
	   * @param {string|Function|Element|Array|null} content
	   *        Same as {@link ModalDialog#content}'s param of the same name.
	   *        The most straight-forward usage is to provide a string or DOM
	   *        element.
	   *
	   * @param {Object} [options]
	   *        Extra options which will be passed on to the {@link ModalDialog}.
	   *
	   * @return {ModalDialog}
	   *         the {@link ModalDialog} that was created
	   */


	  Player.prototype.createModal = function createModal(content, options) {
	    var _this12 = this;

	    options = options || {};
	    options.content = content || '';

	    var modal = new ModalDialog(this, options);

	    this.addChild(modal);
	    modal.on('dispose', function () {
	      _this12.removeChild(modal);
	    });

	    modal.open();
	    return modal;
	  };

	  /**
	   * Change breakpoint classes when the player resizes.
	   *
	   * @private
	   */


	  Player.prototype.updateCurrentBreakpoint_ = function updateCurrentBreakpoint_() {
	    if (!this.responsive()) {
	      return;
	    }

	    var currentBreakpoint = this.currentBreakpoint();
	    var currentWidth = this.currentWidth();

	    for (var i = 0; i < BREAKPOINT_ORDER.length; i++) {
	      var candidateBreakpoint = BREAKPOINT_ORDER[i];
	      var maxWidth = this.breakpoints_[candidateBreakpoint];

	      if (currentWidth <= maxWidth) {

	        // The current breakpoint did not change, nothing to do.
	        if (currentBreakpoint === candidateBreakpoint) {
	          return;
	        }

	        // Only remove a class if there is a current breakpoint.
	        if (currentBreakpoint) {
	          this.removeClass(BREAKPOINT_CLASSES[currentBreakpoint]);
	        }

	        this.addClass(BREAKPOINT_CLASSES[candidateBreakpoint]);
	        this.breakpoint_ = candidateBreakpoint;
	        break;
	      }
	    }
	  };

	  /**
	   * Removes the current breakpoint.
	   *
	   * @private
	   */


	  Player.prototype.removeCurrentBreakpoint_ = function removeCurrentBreakpoint_() {
	    var className = this.currentBreakpointClass();

	    this.breakpoint_ = '';

	    if (className) {
	      this.removeClass(className);
	    }
	  };

	  /**
	   * Get or set breakpoints on the player.
	   *
	   * Calling this method with an object or `true` will remove any previous
	   * custom breakpoints and start from the defaults again.
	   *
	   * @param  {Object|boolean} [breakpoints]
	   *         If an object is given, it can be used to provide custom
	   *         breakpoints. If `true` is given, will set default breakpoints.
	   *         If this argument is not given, will simply return the current
	   *         breakpoints.
	   *
	   * @param  {number} [breakpoints.tiny]
	   *         The maximum width for the "vjs-layout-tiny" class.
	   *
	   * @param  {number} [breakpoints.xsmall]
	   *         The maximum width for the "vjs-layout-x-small" class.
	   *
	   * @param  {number} [breakpoints.small]
	   *         The maximum width for the "vjs-layout-small" class.
	   *
	   * @param  {number} [breakpoints.medium]
	   *         The maximum width for the "vjs-layout-medium" class.
	   *
	   * @param  {number} [breakpoints.large]
	   *         The maximum width for the "vjs-layout-large" class.
	   *
	   * @param  {number} [breakpoints.xlarge]
	   *         The maximum width for the "vjs-layout-x-large" class.
	   *
	   * @param  {number} [breakpoints.huge]
	   *         The maximum width for the "vjs-layout-huge" class.
	   *
	   * @return {Object}
	   *         An object mapping breakpoint names to maximum width values.
	   */


	  Player.prototype.breakpoints = function breakpoints(_breakpoints) {

	    // Used as a getter.
	    if (_breakpoints === undefined) {
	      return assign(this.breakpoints_);
	    }

	    this.breakpoint_ = '';
	    this.breakpoints_ = assign({}, DEFAULT_BREAKPOINTS, _breakpoints);

	    // When breakpoint definitions change, we need to update the currently
	    // selected breakpoint.
	    this.updateCurrentBreakpoint_();

	    // Clone the breakpoints before returning.
	    return assign(this.breakpoints_);
	  };

	  /**
	   * Get or set a flag indicating whether or not this player should adjust
	   * its UI based on its dimensions.
	   *
	   * @param  {boolean} value
	   *         Should be `true` if the player should adjust its UI based on its
	   *         dimensions; otherwise, should be `false`.
	   *
	   * @return {boolean}
	   *         Will be `true` if this player should adjust its UI based on its
	   *         dimensions; otherwise, will be `false`.
	   */


	  Player.prototype.responsive = function responsive(value) {

	    // Used as a getter.
	    if (value === undefined) {
	      return this.responsive_;
	    }

	    value = Boolean(value);
	    var current = this.responsive_;

	    // Nothing changed.
	    if (value === current) {
	      return;
	    }

	    // The value actually changed, set it.
	    this.responsive_ = value;

	    // Start listening for breakpoints and set the initial breakpoint if the
	    // player is now responsive.
	    if (value) {
	      this.on('playerresize', this.updateCurrentBreakpoint_);
	      this.updateCurrentBreakpoint_();

	      // Stop listening for breakpoints if the player is no longer responsive.
	    } else {
	      this.off('playerresize', this.updateCurrentBreakpoint_);
	      this.removeCurrentBreakpoint_();
	    }

	    return value;
	  };

	  /**
	   * Get current breakpoint name, if any.
	   *
	   * @return {string}
	   *         If there is currently a breakpoint set, returns a the key from the
	   *         breakpoints object matching it. Otherwise, returns an empty string.
	   */


	  Player.prototype.currentBreakpoint = function currentBreakpoint() {
	    return this.breakpoint_;
	  };

	  /**
	   * Get the current breakpoint class name.
	   *
	   * @return {string}
	   *         The matching class name (e.g. `"vjs-layout-tiny"` or
	   *         `"vjs-layout-large"`) for the current breakpoint. Empty string if
	   *         there is no current breakpoint.
	   */


	  Player.prototype.currentBreakpointClass = function currentBreakpointClass() {
	    return BREAKPOINT_CLASSES[this.breakpoint_] || '';
	  };

	  /**
	   * Gets tag settings
	   *
	   * @param {Element} tag
	   *        The player tag
	   *
	   * @return {Object}
	   *         An object containing all of the settings
	   *         for a player tag
	   */


	  Player.getTagSettings = function getTagSettings(tag) {
	    var baseOptions = {
	      sources: [],
	      tracks: []
	    };

	    var tagOptions = getAttributes(tag);
	    var dataSetup = tagOptions['data-setup'];

	    if (hasClass(tag, 'vjs-fill')) {
	      tagOptions.fill = true;
	    }
	    if (hasClass(tag, 'vjs-fluid')) {
	      tagOptions.fluid = true;
	    }

	    // Check if data-setup attr exists.
	    if (dataSetup !== null) {
	      // Parse options JSON
	      // If empty string, make it a parsable json object.
	      var _safeParseTuple = safeParseTuple(dataSetup || '{}'),
	          err = _safeParseTuple[0],
	          data = _safeParseTuple[1];

	      if (err) {
	        log.error(err);
	      }
	      assign(tagOptions, data);
	    }

	    assign(baseOptions, tagOptions);

	    // Get tag children settings
	    if (tag.hasChildNodes()) {
	      var children = tag.childNodes;

	      for (var i = 0, j = children.length; i < j; i++) {
	        var child = children[i];
	        // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/
	        var childName = child.nodeName.toLowerCase();

	        if (childName === 'source') {
	          baseOptions.sources.push(getAttributes(child));
	        } else if (childName === 'track') {
	          baseOptions.tracks.push(getAttributes(child));
	        }
	      }
	    }

	    return baseOptions;
	  };

	  /**
	   * Determine wether or not flexbox is supported
	   *
	   * @return {boolean}
	   *         - true if flexbox is supported
	   *         - false if flexbox is not supported
	   */


	  Player.prototype.flexNotSupported_ = function flexNotSupported_() {
	    var elem = document.createElement('i');

	    // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more
	    // common flex features that we can rely on when checking for flex support.
	    return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style ||
	    // IE10-specific (2012 flex spec)
	    'msFlexOrder' in elem.style);
	  };

	  return Player;
	}(Component);

	/**
	 * Get the {@link VideoTrackList}
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
	 *
	 * @return {VideoTrackList}
	 *         the current video track list
	 *
	 * @method Player.prototype.videoTracks
	 */

	/**
	 * Get the {@link AudioTrackList}
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
	 *
	 * @return {AudioTrackList}
	 *         the current audio track list
	 *
	 * @method Player.prototype.audioTracks
	 */

	/**
	 * Get the {@link TextTrackList}
	 *
	 * @link http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
	 *
	 * @return {TextTrackList}
	 *         the current text track list
	 *
	 * @method Player.prototype.textTracks
	 */

	/**
	 * Get the remote {@link TextTrackList}
	 *
	 * @return {TextTrackList}
	 *         The current remote text track list
	 *
	 * @method Player.prototype.remoteTextTracks
	 */

	/**
	 * Get the remote {@link HtmlTrackElementList} tracks.
	 *
	 * @return {HtmlTrackElementList}
	 *         The current remote text track element list
	 *
	 * @method Player.prototype.remoteTextTrackEls
	 */

	ALL.names.forEach(function (name$$1) {
	  var props = ALL[name$$1];

	  Player.prototype[props.getterName] = function () {
	    if (this.tech_) {
	      return this.tech_[props.getterName]();
	    }

	    // if we have not yet loadTech_, we create {video,audio,text}Tracks_
	    // these will be passed to the tech during loading
	    this[props.privateName] = this[props.privateName] || new props.ListClass();
	    return this[props.privateName];
	  };
	});

	/**
	 * Global player list
	 *
	 * @type {Object}
	 */
	Player.players = {};

	var navigator = window.navigator;

	/*
	 * Player instance options, surfaced using options
	 * options = Player.prototype.options_
	 * Make changes in options, not here.
	 *
	 * @type {Object}
	 * @private
	 */
	Player.prototype.options_ = {
	  // Default order of fallback technology
	  techOrder: Tech.defaultTechOrder_,

	  html5: {},
	  flash: {},

	  // default inactivity timeout
	  inactivityTimeout: 2000,

	  // default playback rates
	  playbackRates: [],
	  // Add playback rate selection by adding rates
	  // 'playbackRates': [0.5, 1, 1.5, 2],

	  // Included control sets
	  children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings'],

	  language: navigator && (navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language) || 'en',

	  // locales and their language translations
	  languages: {},

	  // Default message to show when a video cannot be played.
	  notSupportedMessage: 'No compatible source was found for this media.',

	  breakpoints: {},
	  responsive: false
	};

	if (!IS_IE8) {
	  Player.prototype.options_.children.push('resizeManager');
	}

	[
	/**
	 * Returns whether or not the player is in the "ended" state.
	 *
	 * @return {Boolean} True if the player is in the ended state, false if not.
	 * @method Player#ended
	 */
	'ended',
	/**
	 * Returns whether or not the player is in the "seeking" state.
	 *
	 * @return {Boolean} True if the player is in the seeking state, false if not.
	 * @method Player#seeking
	 */
	'seeking',
	/**
	 * Returns the TimeRanges of the media that are currently available
	 * for seeking to.
	 *
	 * @return {TimeRanges} the seekable intervals of the media timeline
	 * @method Player#seekable
	 */
	'seekable',
	/**
	 * Returns the current state of network activity for the element, from
	 * the codes in the list below.
	 * - NETWORK_EMPTY (numeric value 0)
	 *   The element has not yet been initialised. All attributes are in
	 *   their initial states.
	 * - NETWORK_IDLE (numeric value 1)
	 *   The element's resource selection algorithm is active and has
	 *   selected a resource, but it is not actually using the network at
	 *   this time.
	 * - NETWORK_LOADING (numeric value 2)
	 *   The user agent is actively trying to download data.
	 * - NETWORK_NO_SOURCE (numeric value 3)
	 *   The element's resource selection algorithm is active, but it has
	 *   not yet found a resource to use.
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
	 * @return {number} the current network activity state
	 * @method Player#networkState
	 */
	'networkState',
	/**
	 * Returns a value that expresses the current state of the element
	 * with respect to rendering the current playback position, from the
	 * codes in the list below.
	 * - HAVE_NOTHING (numeric value 0)
	 *   No information regarding the media resource is available.
	 * - HAVE_METADATA (numeric value 1)
	 *   Enough of the resource has been obtained that the duration of the
	 *   resource is available.
	 * - HAVE_CURRENT_DATA (numeric value 2)
	 *   Data for the immediate current playback position is available.
	 * - HAVE_FUTURE_DATA (numeric value 3)
	 *   Data for the immediate current playback position is available, as
	 *   well as enough data for the user agent to advance the current
	 *   playback position in the direction of playback.
	 * - HAVE_ENOUGH_DATA (numeric value 4)
	 *   The user agent estimates that enough data is available for
	 *   playback to proceed uninterrupted.
	 *
	 * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
	 * @return {number} the current playback rendering state
	 * @method Player#readyState
	 */
	'readyState'].forEach(function (fn) {
	  Player.prototype[fn] = function () {
	    return this.techGet_(fn);
	  };
	});

	TECH_EVENTS_RETRIGGER.forEach(function (event) {
	  Player.prototype['handleTech' + toTitleCase(event) + '_'] = function () {
	    return this.trigger(event);
	  };
	});

	/**
	 * Fired when the player has initial duration and dimension information
	 *
	 * @event Player#loadedmetadata
	 * @type {EventTarget~Event}
	 */

	/**
	 * Fired when the player has downloaded data at the current playback position
	 *
	 * @event Player#loadeddata
	 * @type {EventTarget~Event}
	 */

	/**
	 * Fired when the current playback position has changed *
	 * During playback this is fired every 15-250 milliseconds, depending on the
	 * playback technology in use.
	 *
	 * @event Player#timeupdate
	 * @type {EventTarget~Event}
	 */

	/**
	 * Fired when the volume changes
	 *
	 * @event Player#volumechange
	 * @type {EventTarget~Event}
	 */

	/**
	 * Reports whether or not a player has a plugin available.
	 *
	 * This does not report whether or not the plugin has ever been initialized
	 * on this player. For that, [usingPlugin]{@link Player#usingPlugin}.
	 *
	 * @method Player#hasPlugin
	 * @param  {string}  name
	 *         The name of a plugin.
	 *
	 * @return {boolean}
	 *         Whether or not this player has the requested plugin available.
	 */

	/**
	 * Reports whether or not a player is using a plugin by name.
	 *
	 * For basic plugins, this only reports whether the plugin has _ever_ been
	 * initialized on this player.
	 *
	 * @method Player#usingPlugin
	 * @param  {string} name
	 *         The name of a plugin.
	 *
	 * @return {boolean}
	 *         Whether or not this player is using the requested plugin.
	 */

	Component.registerComponent('Player', Player);

	/**
	 * @file plugin.js
	 */
	/**
	 * The base plugin name.
	 *
	 * @private
	 * @constant
	 * @type {string}
	 */
	var BASE_PLUGIN_NAME = 'plugin';

	/**
	 * The key on which a player's active plugins cache is stored.
	 *
	 * @private
	 * @constant
	 * @type     {string}
	 */
	var PLUGIN_CACHE_KEY = 'activePlugins_';

	/**
	 * Stores registered plugins in a private space.
	 *
	 * @private
	 * @type    {Object}
	 */
	var pluginStorage = {};

	/**
	 * Reports whether or not a plugin has been registered.
	 *
	 * @private
	 * @param   {string} name
	 *          The name of a plugin.
	 *
	 * @returns {boolean}
	 *          Whether or not the plugin has been registered.
	 */
	var pluginExists = function pluginExists(name) {
	  return pluginStorage.hasOwnProperty(name);
	};

	/**
	 * Get a single registered plugin by name.
	 *
	 * @private
	 * @param   {string} name
	 *          The name of a plugin.
	 *
	 * @returns {Function|undefined}
	 *          The plugin (or undefined).
	 */
	var getPlugin = function getPlugin(name) {
	  return pluginExists(name) ? pluginStorage[name] : undefined;
	};

	/**
	 * Marks a plugin as "active" on a player.
	 *
	 * Also, ensures that the player has an object for tracking active plugins.
	 *
	 * @private
	 * @param   {Player} player
	 *          A Video.js player instance.
	 *
	 * @param   {string} name
	 *          The name of a plugin.
	 */
	var markPluginAsActive = function markPluginAsActive(player, name) {
	  player[PLUGIN_CACHE_KEY] = player[PLUGIN_CACHE_KEY] || {};
	  player[PLUGIN_CACHE_KEY][name] = true;
	};

	/**
	 * Triggers a pair of plugin setup events.
	 *
	 * @private
	 * @param  {Player} player
	 *         A Video.js player instance.
	 *
	 * @param  {Plugin~PluginEventHash} hash
	 *         A plugin event hash.
	 *
	 * @param  {Boolean} [before]
	 *         If true, prefixes the event name with "before". In other words,
	 *         use this to trigger "beforepluginsetup" instead of "pluginsetup".
	 */
	var triggerSetupEvent = function triggerSetupEvent(player, hash, before) {
	  var eventName = (before ? 'before' : '') + 'pluginsetup';

	  player.trigger(eventName, hash);
	  player.trigger(eventName + ':' + hash.name, hash);
	};

	/**
	 * Takes a basic plugin function and returns a wrapper function which marks
	 * on the player that the plugin has been activated.
	 *
	 * @private
	 * @param   {string} name
	 *          The name of the plugin.
	 *
	 * @param   {Function} plugin
	 *          The basic plugin.
	 *
	 * @returns {Function}
	 *          A wrapper function for the given plugin.
	 */
	var createBasicPlugin = function createBasicPlugin(name, plugin) {
	  var basicPluginWrapper = function basicPluginWrapper() {

	    // We trigger the "beforepluginsetup" and "pluginsetup" events on the player
	    // regardless, but we want the hash to be consistent with the hash provided
	    // for advanced plugins.
	    //
	    // The only potentially counter-intuitive thing here is the `instance` in
	    // the "pluginsetup" event is the value returned by the `plugin` function.
	    triggerSetupEvent(this, { name: name, plugin: plugin, instance: null }, true);

	    var instance = plugin.apply(this, arguments);

	    markPluginAsActive(this, name);
	    triggerSetupEvent(this, { name: name, plugin: plugin, instance: instance });

	    return instance;
	  };

	  Object.keys(plugin).forEach(function (prop) {
	    basicPluginWrapper[prop] = plugin[prop];
	  });

	  return basicPluginWrapper;
	};

	/**
	 * Takes a plugin sub-class and returns a factory function for generating
	 * instances of it.
	 *
	 * This factory function will replace itself with an instance of the requested
	 * sub-class of Plugin.
	 *
	 * @private
	 * @param   {string} name
	 *          The name of the plugin.
	 *
	 * @param   {Plugin} PluginSubClass
	 *          The advanced plugin.
	 *
	 * @returns {Function}
	 */
	var createPluginFactory = function createPluginFactory(name, PluginSubClass) {

	  // Add a `name` property to the plugin prototype so that each plugin can
	  // refer to itself by name.
	  PluginSubClass.prototype.name = name;

	  return function () {
	    triggerSetupEvent(this, { name: name, plugin: PluginSubClass, instance: null }, true);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var instance = new (Function.prototype.bind.apply(PluginSubClass, [null].concat([this].concat(args))))();

	    // The plugin is replaced by a function that returns the current instance.
	    this[name] = function () {
	      return instance;
	    };

	    triggerSetupEvent(this, instance.getEventHash());

	    return instance;
	  };
	};

	/**
	 * Parent class for all advanced plugins.
	 *
	 * @mixes   module:evented~EventedMixin
	 * @mixes   module:stateful~StatefulMixin
	 * @fires   Player#beforepluginsetup
	 * @fires   Player#beforepluginsetup:$name
	 * @fires   Player#pluginsetup
	 * @fires   Player#pluginsetup:$name
	 * @listens Player#dispose
	 * @throws  {Error}
	 *          If attempting to instantiate the base {@link Plugin} class
	 *          directly instead of via a sub-class.
	 */

	var Plugin = function () {

	  /**
	   * Creates an instance of this class.
	   *
	   * Sub-classes should call `super` to ensure plugins are properly initialized.
	   *
	   * @param {Player} player
	   *        A Video.js player instance.
	   */
	  function Plugin(player) {
	    classCallCheck(this, Plugin);

	    if (this.constructor === Plugin) {
	      throw new Error('Plugin must be sub-classed; not directly instantiated.');
	    }

	    this.player = player;

	    // Make this object evented, but remove the added `trigger` method so we
	    // use the prototype version instead.
	    evented(this);
	    delete this.trigger;

	    stateful(this, this.constructor.defaultState);
	    markPluginAsActive(player, this.name);

	    // Auto-bind the dispose method so we can use it as a listener and unbind
	    // it later easily.
	    this.dispose = bind(this, this.dispose);

	    // If the player is disposed, dispose the plugin.
	    player.on('dispose', this.dispose);
	  }

	  /**
	   * Get the version of the plugin that was set on <pluginName>.VERSION
	   */


	  Plugin.prototype.version = function version() {
	    return this.constructor.VERSION;
	  };

	  /**
	   * Each event triggered by plugins includes a hash of additional data with
	   * conventional properties.
	   *
	   * This returns that object or mutates an existing hash.
	   *
	   * @param   {Object} [hash={}]
	   *          An object to be used as event an event hash.
	   *
	   * @returns {Plugin~PluginEventHash}
	   *          An event hash object with provided properties mixed-in.
	   */


	  Plugin.prototype.getEventHash = function getEventHash() {
	    var hash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    hash.name = this.name;
	    hash.plugin = this.constructor;
	    hash.instance = this;
	    return hash;
	  };

	  /**
	   * Triggers an event on the plugin object and overrides
	   * {@link module:evented~EventedMixin.trigger|EventedMixin.trigger}.
	   *
	   * @param   {string|Object} event
	   *          An event type or an object with a type property.
	   *
	   * @param   {Object} [hash={}]
	   *          Additional data hash to merge with a
	   *          {@link Plugin~PluginEventHash|PluginEventHash}.
	   *
	   * @returns {boolean}
	   *          Whether or not default was prevented.
	   */


	  Plugin.prototype.trigger = function trigger$$1(event) {
	    var hash = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    return trigger(this.eventBusEl_, event, this.getEventHash(hash));
	  };

	  /**
	   * Handles "statechanged" events on the plugin. No-op by default, override by
	   * subclassing.
	   *
	   * @abstract
	   * @param    {Event} e
	   *           An event object provided by a "statechanged" event.
	   *
	   * @param    {Object} e.changes
	   *           An object describing changes that occurred with the "statechanged"
	   *           event.
	   */


	  Plugin.prototype.handleStateChanged = function handleStateChanged(e) {};

	  /**
	   * Disposes a plugin.
	   *
	   * Subclasses can override this if they want, but for the sake of safety,
	   * it's probably best to subscribe the "dispose" event.
	   *
	   * @fires Plugin#dispose
	   */


	  Plugin.prototype.dispose = function dispose() {
	    var name = this.name,
	        player = this.player;

	    /**
	     * Signals that a advanced plugin is about to be disposed.
	     *
	     * @event Plugin#dispose
	     * @type  {EventTarget~Event}
	     */

	    this.trigger('dispose');
	    this.off();
	    player.off('dispose', this.dispose);

	    // Eliminate any possible sources of leaking memory by clearing up
	    // references between the player and the plugin instance and nulling out
	    // the plugin's state and replacing methods with a function that throws.
	    player[PLUGIN_CACHE_KEY][name] = false;
	    this.player = this.state = null;

	    // Finally, replace the plugin name on the player with a new factory
	    // function, so that the plugin is ready to be set up again.
	    player[name] = createPluginFactory(name, pluginStorage[name]);
	  };

	  /**
	   * Determines if a plugin is a basic plugin (i.e. not a sub-class of `Plugin`).
	   *
	   * @param   {string|Function} plugin
	   *          If a string, matches the name of a plugin. If a function, will be
	   *          tested directly.
	   *
	   * @returns {boolean}
	   *          Whether or not a plugin is a basic plugin.
	   */


	  Plugin.isBasic = function isBasic(plugin) {
	    var p = typeof plugin === 'string' ? getPlugin(plugin) : plugin;

	    return typeof p === 'function' && !Plugin.prototype.isPrototypeOf(p.prototype);
	  };

	  /**
	   * Register a Video.js plugin.
	   *
	   * @param   {string} name
	   *          The name of the plugin to be registered. Must be a string and
	   *          must not match an existing plugin or a method on the `Player`
	   *          prototype.
	   *
	   * @param   {Function} plugin
	   *          A sub-class of `Plugin` or a function for basic plugins.
	   *
	   * @returns {Function}
	   *          For advanced plugins, a factory function for that plugin. For
	   *          basic plugins, a wrapper function that initializes the plugin.
	   */


	  Plugin.registerPlugin = function registerPlugin(name, plugin) {
	    if (typeof name !== 'string') {
	      throw new Error('Illegal plugin name, "' + name + '", must be a string, was ' + (typeof name === 'undefined' ? 'undefined' : _typeof(name)) + '.');
	    }

	    if (pluginExists(name)) {
	      log.warn('A plugin named "' + name + '" already exists. You may want to avoid re-registering plugins!');
	    } else if (Player.prototype.hasOwnProperty(name)) {
	      throw new Error('Illegal plugin name, "' + name + '", cannot share a name with an existing player method!');
	    }

	    if (typeof plugin !== 'function') {
	      throw new Error('Illegal plugin for "' + name + '", must be a function, was ' + (typeof plugin === 'undefined' ? 'undefined' : _typeof(plugin)) + '.');
	    }

	    pluginStorage[name] = plugin;

	    // Add a player prototype method for all sub-classed plugins (but not for
	    // the base Plugin class).
	    if (name !== BASE_PLUGIN_NAME) {
	      if (Plugin.isBasic(plugin)) {
	        Player.prototype[name] = createBasicPlugin(name, plugin);
	      } else {
	        Player.prototype[name] = createPluginFactory(name, plugin);
	      }
	    }

	    return plugin;
	  };

	  /**
	   * De-register a Video.js plugin.
	   *
	   * @param {string} name
	   *        The name of the plugin to be deregistered.
	   */


	  Plugin.deregisterPlugin = function deregisterPlugin(name) {
	    if (name === BASE_PLUGIN_NAME) {
	      throw new Error('Cannot de-register base plugin.');
	    }
	    if (pluginExists(name)) {
	      delete pluginStorage[name];
	      delete Player.prototype[name];
	    }
	  };

	  /**
	   * Gets an object containing multiple Video.js plugins.
	   *
	   * @param   {Array} [names]
	   *          If provided, should be an array of plugin names. Defaults to _all_
	   *          plugin names.
	   *
	   * @returns {Object|undefined}
	   *          An object containing plugin(s) associated with their name(s) or
	   *          `undefined` if no matching plugins exist).
	   */


	  Plugin.getPlugins = function getPlugins() {
	    var names = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Object.keys(pluginStorage);

	    var result = void 0;

	    names.forEach(function (name) {
	      var plugin = getPlugin(name);

	      if (plugin) {
	        result = result || {};
	        result[name] = plugin;
	      }
	    });

	    return result;
	  };

	  /**
	   * Gets a plugin's version, if available
	   *
	   * @param   {string} name
	   *          The name of a plugin.
	   *
	   * @returns {string}
	   *          The plugin's version or an empty string.
	   */


	  Plugin.getPluginVersion = function getPluginVersion(name) {
	    var plugin = getPlugin(name);

	    return plugin && plugin.VERSION || '';
	  };

	  return Plugin;
	}();

	/**
	 * Gets a plugin by name if it exists.
	 *
	 * @static
	 * @method   getPlugin
	 * @memberOf Plugin
	 * @param    {string} name
	 *           The name of a plugin.
	 *
	 * @returns  {Function|undefined}
	 *           The plugin (or `undefined`).
	 */


	Plugin.getPlugin = getPlugin;

	/**
	 * The name of the base plugin class as it is registered.
	 *
	 * @type {string}
	 */
	Plugin.BASE_PLUGIN_NAME = BASE_PLUGIN_NAME;

	Plugin.registerPlugin(BASE_PLUGIN_NAME, Plugin);

	/**
	 * Documented in player.js
	 *
	 * @ignore
	 */
	Player.prototype.usingPlugin = function (name) {
	  return !!this[PLUGIN_CACHE_KEY] && this[PLUGIN_CACHE_KEY][name] === true;
	};

	/**
	 * Documented in player.js
	 *
	 * @ignore
	 */
	Player.prototype.hasPlugin = function (name) {
	  return !!pluginExists(name);
	};

	/**
	 * Signals that a plugin is about to be set up on a player.
	 *
	 * @event    Player#beforepluginsetup
	 * @type     {Plugin~PluginEventHash}
	 */

	/**
	 * Signals that a plugin is about to be set up on a player - by name. The name
	 * is the name of the plugin.
	 *
	 * @event    Player#beforepluginsetup:$name
	 * @type     {Plugin~PluginEventHash}
	 */

	/**
	 * Signals that a plugin has just been set up on a player.
	 *
	 * @event    Player#pluginsetup
	 * @type     {Plugin~PluginEventHash}
	 */

	/**
	 * Signals that a plugin has just been set up on a player - by name. The name
	 * is the name of the plugin.
	 *
	 * @event    Player#pluginsetup:$name
	 * @type     {Plugin~PluginEventHash}
	 */

	/**
	 * @typedef  {Object} Plugin~PluginEventHash
	 *
	 * @property {string} instance
	 *           For basic plugins, the return value of the plugin function. For
	 *           advanced plugins, the plugin instance on which the event is fired.
	 *
	 * @property {string} name
	 *           The name of the plugin.
	 *
	 * @property {string} plugin
	 *           For basic plugins, the plugin function. For advanced plugins, the
	 *           plugin class/constructor.
	 */

	/**
	 * @file extend.js
	 * @module extend
	 */

	/**
	 * A combination of node inherits and babel's inherits (after transpile).
	 * Both work the same but node adds `super_` to the subClass
	 * and Bable adds the superClass as __proto__. Both seem useful.
	 *
	 * @param {Object} subClass
	 *        The class to inherit to
	 *
	 * @param {Object} superClass
	 *        The class to inherit from
	 *
	 * @private
	 */
	var _inherits = function _inherits(subClass, superClass) {
	  if (typeof superClass !== 'function' && superClass !== null) {
	    throw new TypeError('Super expression must either be null or a function, not ' + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });

	  if (superClass) {
	    // node
	    subClass.super_ = superClass;
	  }
	};

	/**
	 * Function for subclassing using the same inheritance that
	 * videojs uses internally
	 *
	 * @static
	 * @const
	 *
	 * @param {Object} superClass
	 *        The class to inherit from
	 *
	 * @param {Object} [subClassMethods={}]
	 *        The class to inherit to
	 *
	 * @return {Object}
	 *         The new object with subClassMethods that inherited superClass.
	 */
	var extendFn = function extendFn(superClass) {
	  var subClassMethods = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  var subClass = function subClass() {
	    superClass.apply(this, arguments);
	  };

	  var methods = {};

	  if ((typeof subClassMethods === 'undefined' ? 'undefined' : _typeof(subClassMethods)) === 'object') {
	    if (subClassMethods.constructor !== Object.prototype.constructor) {
	      subClass = subClassMethods.constructor;
	    }
	    methods = subClassMethods;
	  } else if (typeof subClassMethods === 'function') {
	    subClass = subClassMethods;
	  }

	  _inherits(subClass, superClass);

	  // Extend subObj's prototype with functions and other properties from props
	  for (var name in methods) {
	    if (methods.hasOwnProperty(name)) {
	      subClass.prototype[name] = methods[name];
	    }
	  }

	  return subClass;
	};

	/**
	 * @file video.js
	 * @module videojs
	 */
	// Include the built-in techs
	// HTML5 Element Shim for IE8
	if (typeof HTMLVideoElement === 'undefined' && isReal()) {
	  document.createElement('video');
	  document.createElement('audio');
	  document.createElement('track');
	  document.createElement('video-js');
	}

	/**
	 * Normalize an `id` value by trimming off a leading `#`
	 *
	 * @param   {string} id
	 *          A string, maybe with a leading `#`.
	 *
	 * @returns {string}
	 *          The string, without any leading `#`.
	 */
	var normalizeId = function normalizeId(id) {
	  return id.indexOf('#') === 0 ? id.slice(1) : id;
	};

	/**
	 * Doubles as the main function for users to create a player instance and also
	 * the main library object.
	 * The `videojs` function can be used to initialize or retrieve a player.
	  *
	 * @param {string|Element} id
	 *        Video element or video element ID
	 *
	 * @param {Object} [options]
	 *        Optional options object for config/settings
	 *
	 * @param {Component~ReadyCallback} [ready]
	 *        Optional ready callback
	 *
	 * @return {Player}
	 *         A player instance
	 */
	function videojs(id, options, ready) {
	  var player = videojs.getPlayer(id);

	  if (player) {
	    if (options) {
	      log.warn('Player "' + id + '" is already initialised. Options will not be applied.');
	    }
	    if (ready) {
	      player.ready(ready);
	    }
	    return player;
	  }

	  var el = typeof id === 'string' ? $('#' + normalizeId(id)) : id;

	  if (!isEl(el)) {
	    throw new TypeError('The element or ID supplied is not valid. (videojs)');
	  }

	  if (!document.body.contains(el)) {
	    log.warn('The element supplied is not included in the DOM');
	  }

	  options = options || {};

	  videojs.hooks('beforesetup').forEach(function (hookFunction) {
	    var opts = hookFunction(el, mergeOptions(options));

	    if (!isObject(opts) || Array.isArray(opts)) {
	      log.error('please return an object in beforesetup hooks');
	      return;
	    }

	    options = mergeOptions(options, opts);
	  });

	  // We get the current "Player" component here in case an integration has
	  // replaced it with a custom player.
	  var PlayerComponent = Component.getComponent('Player');

	  player = new PlayerComponent(el, options, ready);

	  videojs.hooks('setup').forEach(function (hookFunction) {
	    return hookFunction(player);
	  });

	  return player;
	}

	/**
	 * An Object that contains lifecycle hooks as keys which point to an array
	 * of functions that are run when a lifecycle is triggered
	 */
	videojs.hooks_ = {};

	/**
	 * Get a list of hooks for a specific lifecycle
	 * @function videojs.hooks
	 *
	 * @param {string} type
	 *        the lifecyle to get hooks from
	 *
	 * @param {Function|Function[]} [fn]
	 *        Optionally add a hook (or hooks) to the lifecycle that your are getting.
	 *
	 * @return {Array}
	 *         an array of hooks, or an empty array if there are none.
	 */
	videojs.hooks = function (type, fn) {
	  videojs.hooks_[type] = videojs.hooks_[type] || [];
	  if (fn) {
	    videojs.hooks_[type] = videojs.hooks_[type].concat(fn);
	  }
	  return videojs.hooks_[type];
	};

	/**
	 * Add a function hook to a specific videojs lifecycle.
	 *
	 * @param {string} type
	 *        the lifecycle to hook the function to.
	 *
	 * @param {Function|Function[]}
	 *        The function or array of functions to attach.
	 */
	videojs.hook = function (type, fn) {
	  videojs.hooks(type, fn);
	};

	/**
	 * Add a function hook that will only run once to a specific videojs lifecycle.
	 *
	 * @param {string} type
	 *        the lifecycle to hook the function to.
	 *
	 * @param {Function|Function[]}
	 *        The function or array of functions to attach.
	 */
	videojs.hookOnce = function (type, fn) {
	  videojs.hooks(type, [].concat(fn).map(function (original) {
	    var wrapper = function wrapper() {
	      videojs.removeHook(type, wrapper);
	      return original.apply(undefined, arguments);
	    };

	    return wrapper;
	  }));
	};

	/**
	 * Remove a hook from a specific videojs lifecycle.
	 *
	 * @param {string} type
	 *        the lifecycle that the function hooked to
	 *
	 * @param {Function} fn
	 *        The hooked function to remove
	 *
	 * @return {boolean}
	 *         The function that was removed or undef
	 */
	videojs.removeHook = function (type, fn) {
	  var index = videojs.hooks(type).indexOf(fn);

	  if (index <= -1) {
	    return false;
	  }

	  videojs.hooks_[type] = videojs.hooks_[type].slice();
	  videojs.hooks_[type].splice(index, 1);

	  return true;
	};

	// Add default styles
	if (window.VIDEOJS_NO_DYNAMIC_STYLE !== true && isReal()) {
	  var style = $('.vjs-styles-defaults');

	  if (!style) {
	    style = createStyleElement('vjs-styles-defaults');
	    var head = $('head');

	    if (head) {
	      head.insertBefore(style, head.firstChild);
	    }
	    setTextContent(style, '\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ');
	  }
	}

	// Run Auto-load players
	// You have to wait at least once in case this script is loaded after your
	// video in the DOM (weird behavior only with minified version)
	autoSetupTimeout(1, videojs);

	/**
	 * Current software version. Follows semver.
	 *
	 * @type {string}
	 */
	videojs.VERSION = version;

	/**
	 * The global options object. These are the settings that take effect
	 * if no overrides are specified when the player is created.
	 *
	 * @type {Object}
	 */
	videojs.options = Player.prototype.options_;

	/**
	 * Get an object with the currently created players, keyed by player ID
	 *
	 * @return {Object}
	 *         The created players
	 */
	videojs.getPlayers = function () {
	  return Player.players;
	};

	/**
	 * Get a single player based on an ID or DOM element.
	 *
	 * This is useful if you want to check if an element or ID has an associated
	 * Video.js player, but not create one if it doesn't.
	 *
	 * @param   {string|Element} id
	 *          An HTML element - `<video>`, `<audio>`, or `<video-js>` -
	 *          or a string matching the `id` of such an element.
	 *
	 * @returns {Player|undefined}
	 *          A player instance or `undefined` if there is no player instance
	 *          matching the argument.
	 */
	videojs.getPlayer = function (id) {
	  var players = Player.players;
	  var tag = void 0;

	  if (typeof id === 'string') {
	    var nId = normalizeId(id);
	    var player = players[nId];

	    if (player) {
	      return player;
	    }

	    tag = $('#' + nId);
	  } else {
	    tag = id;
	  }

	  if (isEl(tag)) {
	    var _tag = tag,
	        _player = _tag.player,
	        playerId = _tag.playerId;

	    // Element may have a `player` property referring to an already created
	    // player instance. If so, return that.

	    if (_player || players[playerId]) {
	      return _player || players[playerId];
	    }
	  }
	};

	/**
	 * Returns an array of all current players.
	 *
	 * @return {Array}
	 *         An array of all players. The array will be in the order that
	 *         `Object.keys` provides, which could potentially vary between
	 *         JavaScript engines.
	 *
	 */
	videojs.getAllPlayers = function () {
	  return (

	    // Disposed players leave a key with a `null` value, so we need to make sure
	    // we filter those out.
	    Object.keys(Player.players).map(function (k) {
	      return Player.players[k];
	    }).filter(Boolean)
	  );
	};

	/**
	 * Expose players object.
	 *
	 * @memberOf videojs
	 * @property {Object} players
	 */
	videojs.players = Player.players;

	/**
	 * Get a component class object by name
	 *
	 * @borrows Component.getComponent as videojs.getComponent
	 */
	videojs.getComponent = Component.getComponent;

	/**
	 * Register a component so it can referred to by name. Used when adding to other
	 * components, either through addChild `component.addChild('myComponent')` or through
	 * default children options  `{ children: ['myComponent'] }`.
	 *
	 * > NOTE: You could also just initialize the component before adding.
	 * `component.addChild(new MyComponent());`
	 *
	 * @param {string} name
	 *        The class name of the component
	 *
	 * @param {Component} comp
	 *        The component class
	 *
	 * @return {Component}
	 *         The newly registered component
	 */
	videojs.registerComponent = function (name$$1, comp) {
	  if (Tech.isTech(comp)) {
	    log.warn('The ' + name$$1 + ' tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)');
	  }

	  Component.registerComponent.call(Component, name$$1, comp);
	};

	/**
	 * Get a Tech class object by name
	 *
	 * @borrows Tech.getTech as videojs.getTech
	 */
	videojs.getTech = Tech.getTech;

	/**
	 * Register a Tech so it can referred to by name.
	 * This is used in the tech order for the player.
	 *
	 * @borrows Tech.registerTech as videojs.registerTech
	 */
	videojs.registerTech = Tech.registerTech;

	/**
	 * Register a middleware to a source type.
	 *
	 * @param {String} type A string representing a MIME type.
	 * @param {function(player):object} middleware A middleware factory that takes a player.
	 */
	videojs.use = use;

	/**
	 * An object that can be returned by a middleware to signify
	 * that the middleware is being terminated.
	 *
	 * @type {object}
	 * @memberOf {videojs}
	 * @property {object} middleware.TERMINATOR
	 */
	// Object.defineProperty is not available in IE8
	if (!IS_IE8 && Object.defineProperty) {
	  Object.defineProperty(videojs, 'middleware', {
	    value: {},
	    writeable: false,
	    enumerable: true
	  });

	  Object.defineProperty(videojs.middleware, 'TERMINATOR', {
	    value: TERMINATOR,
	    writeable: false,
	    enumerable: true
	  });
	} else {
	  videojs.middleware = { TERMINATOR: TERMINATOR };
	}

	/**
	 * A suite of browser and device tests from {@link browser}.
	 *
	 * @type {Object}
	 * @private
	 */
	videojs.browser = browser;

	/**
	 * Whether or not the browser supports touch events. Included for backward
	 * compatibility with 4.x, but deprecated. Use `videojs.browser.TOUCH_ENABLED`
	 * instead going forward.
	 *
	 * @deprecated since version 5.0
	 * @type {boolean}
	 */
	videojs.TOUCH_ENABLED = TOUCH_ENABLED;

	/**
	 * Subclass an existing class
	 * Mimics ES6 subclassing with the `extend` keyword
	 *
	 * @borrows extend:extendFn as videojs.extend
	 */
	videojs.extend = extendFn;

	/**
	 * Merge two options objects recursively
	 * Performs a deep merge like lodash.merge but **only merges plain objects**
	 * (not arrays, elements, anything else)
	 * Other values will be copied directly from the second object.
	 *
	 * @borrows merge-options:mergeOptions as videojs.mergeOptions
	 */
	videojs.mergeOptions = mergeOptions;

	/**
	 * Change the context (this) of a function
	 *
	 * > NOTE: as of v5.0 we require an ES5 shim, so you should use the native
	 * `function() {}.bind(newContext);` instead of this.
	 *
	 * @borrows fn:bind as videojs.bind
	 */
	videojs.bind = bind;

	/**
	 * Register a Video.js plugin.
	 *
	 * @borrows plugin:registerPlugin as videojs.registerPlugin
	 * @method registerPlugin
	 *
	 * @param  {string} name
	 *         The name of the plugin to be registered. Must be a string and
	 *         must not match an existing plugin or a method on the `Player`
	 *         prototype.
	 *
	 * @param  {Function} plugin
	 *         A sub-class of `Plugin` or a function for basic plugins.
	 *
	 * @return {Function}
	 *         For advanced plugins, a factory function for that plugin. For
	 *         basic plugins, a wrapper function that initializes the plugin.
	 */
	videojs.registerPlugin = Plugin.registerPlugin;

	/**
	 * Deregister a Video.js plugin.
	 *
	 * @borrows plugin:deregisterPlugin as videojs.deregisterPlugin
	 * @method deregisterPlugin
	 *
	 * @param  {string} name
	 *         The name of the plugin to be deregistered. Must be a string and
	 *         must match an existing plugin or a method on the `Player`
	 *         prototype.
	 *
	 */
	videojs.deregisterPlugin = Plugin.deregisterPlugin;

	/**
	 * Deprecated method to register a plugin with Video.js
	 *
	 * @deprecated
	 *        videojs.plugin() is deprecated; use videojs.registerPlugin() instead
	 *
	 * @param {string} name
	 *        The plugin name
	 *
	 * @param {Plugin|Function} plugin
	 *         The plugin sub-class or function
	 */
	videojs.plugin = function (name$$1, plugin) {
	  log.warn('videojs.plugin() is deprecated; use videojs.registerPlugin() instead');
	  return Plugin.registerPlugin(name$$1, plugin);
	};

	/**
	 * Gets an object containing multiple Video.js plugins.
	 *
	 * @param  {Array} [names]
	 *         If provided, should be an array of plugin names. Defaults to _all_
	 *         plugin names.
	 *
	 * @return {Object|undefined}
	 *         An object containing plugin(s) associated with their name(s) or
	 *         `undefined` if no matching plugins exist).
	 */
	videojs.getPlugins = Plugin.getPlugins;

	/**
	 * Gets a plugin by name if it exists.
	 *
	 * @param  {string} name
	 *         The name of a plugin.
	 *
	 * @return {Function|undefined}
	 *         The plugin (or `undefined`).
	 */
	videojs.getPlugin = Plugin.getPlugin;

	/**
	 * Gets a plugin's version, if available
	 *
	 * @param  {string} name
	 *         The name of a plugin.
	 *
	 * @return {string}
	 *         The plugin's version or an empty string.
	 */
	videojs.getPluginVersion = Plugin.getPluginVersion;

	/**
	 * Adding languages so that they're available to all players.
	 * Example: `videojs.addLanguage('es', { 'Hello': 'Hola' });`
	 *
	 * @param {string} code
	 *        The language code or dictionary property
	 *
	 * @param {Object} data
	 *        The data values to be translated
	 *
	 * @return {Object}
	 *         The resulting language dictionary object
	 */
	videojs.addLanguage = function (code, data) {
	  var _mergeOptions;

	  code = ('' + code).toLowerCase();

	  videojs.options.languages = mergeOptions(videojs.options.languages, (_mergeOptions = {}, _mergeOptions[code] = data, _mergeOptions));

	  return videojs.options.languages[code];
	};

	/**
	 * Log messages
	 *
	 * @borrows log:log as videojs.log
	 */
	videojs.log = log;
	videojs.createLogger = createLogger;

	/**
	 * Creates an emulated TimeRange object.
	 *
	 * @borrows time-ranges:createTimeRanges as videojs.createTimeRange
	 */
	/**
	 * @borrows time-ranges:createTimeRanges as videojs.createTimeRanges
	 */
	videojs.createTimeRange = videojs.createTimeRanges = createTimeRanges;

	/**
	 * Format seconds as a time string, H:MM:SS or M:SS
	 * Supplying a guide (in seconds) will force a number of leading zeros
	 * to cover the length of the guide
	 *
	 * @borrows format-time:formatTime as videojs.formatTime
	 */
	videojs.formatTime = formatTime;

	/**
	 * Replaces format-time with a custom implementation, to be used in place of the default.
	 *
	 * @borrows format-time:setFormatTime as videojs.setFormatTime
	 *
	 * @method setFormatTime
	 *
	 * @param {Function} customFn
	 *        A custom format-time function which will be called with the current time and guide (in seconds) as arguments.
	 *        Passed fn should return a string.
	 */
	videojs.setFormatTime = setFormatTime;

	/**
	 * Resets format-time to the default implementation.
	 *
	 * @borrows format-time:resetFormatTime as videojs.resetFormatTime
	 *
	 * @method resetFormatTime
	 */
	videojs.resetFormatTime = resetFormatTime;

	/**
	 * Resolve and parse the elements of a URL
	 *
	 * @borrows url:parseUrl as videojs.parseUrl
	 *
	 */
	videojs.parseUrl = parseUrl;

	/**
	 * Returns whether the url passed is a cross domain request or not.
	 *
	 * @borrows url:isCrossOrigin as videojs.isCrossOrigin
	 */
	videojs.isCrossOrigin = isCrossOrigin;

	/**
	 * Event target class.
	 *
	 * @borrows EventTarget as videojs.EventTarget
	 */
	videojs.EventTarget = EventTarget;

	/**
	 * Add an event listener to element
	 * It stores the handler function in a separate cache object
	 * and adds a generic handler to the element's event,
	 * along with a unique id (guid) to the element.
	 *
	 * @borrows events:on as videojs.on
	 */
	videojs.on = on;

	/**
	 * Trigger a listener only once for an event
	 *
	 * @borrows events:one as videojs.one
	 */
	videojs.one = one;

	/**
	 * Removes event listeners from an element
	 *
	 * @borrows events:off as videojs.off
	 */
	videojs.off = off;

	/**
	 * Trigger an event for an element
	 *
	 * @borrows events:trigger as videojs.trigger
	 */
	videojs.trigger = trigger;

	/**
	 * A cross-browser XMLHttpRequest wrapper. Here's a simple example:
	 *
	 * @param {Object} options
	 *        settings for the request.
	 *
	 * @return {XMLHttpRequest|XDomainRequest}
	 *         The request object.
	 *
	 * @see https://github.com/Raynos/xhr
	 */
	videojs.xhr = xhr;

	/**
	 * TextTrack class
	 *
	 * @borrows TextTrack as videojs.TextTrack
	 */
	videojs.TextTrack = TextTrack;

	/**
	 * export the AudioTrack class so that source handlers can create
	 * AudioTracks and then add them to the players AudioTrackList
	 *
	 * @borrows AudioTrack as videojs.AudioTrack
	 */
	videojs.AudioTrack = AudioTrack;

	/**
	 * export the VideoTrack class so that source handlers can create
	 * VideoTracks and then add them to the players VideoTrackList
	 *
	 * @borrows VideoTrack as videojs.VideoTrack
	 */
	videojs.VideoTrack = VideoTrack;

	/**
	 * Determines, via duck typing, whether or not a value is a DOM element.
	 *
	 * @borrows dom:isEl as videojs.isEl
	 * @deprecated Use videojs.dom.isEl() instead
	 */

	/**
	 * Determines, via duck typing, whether or not a value is a text node.
	 *
	 * @borrows dom:isTextNode as videojs.isTextNode
	 * @deprecated Use videojs.dom.isTextNode() instead
	 */

	/**
	 * Creates an element and applies properties.
	 *
	 * @borrows dom:createEl as videojs.createEl
	 * @deprecated Use videojs.dom.createEl() instead
	 */

	/**
	 * Check if an element has a CSS class
	 *
	 * @borrows dom:hasElClass as videojs.hasClass
	 * @deprecated Use videojs.dom.hasClass() instead
	 */

	/**
	 * Add a CSS class name to an element
	 *
	 * @borrows dom:addElClass as videojs.addClass
	 * @deprecated Use videojs.dom.addClass() instead
	 */

	/**
	 * Remove a CSS class name from an element
	 *
	 * @borrows dom:removeElClass as videojs.removeClass
	 * @deprecated Use videojs.dom.removeClass() instead
	 */

	/**
	 * Adds or removes a CSS class name on an element depending on an optional
	 * condition or the presence/absence of the class name.
	 *
	 * @borrows dom:toggleElClass as videojs.toggleClass
	 * @deprecated Use videojs.dom.toggleClass() instead
	 */

	/**
	 * Apply attributes to an HTML element.
	 *
	 * @borrows dom:setElAttributes as videojs.setAttribute
	 * @deprecated Use videojs.dom.setAttributes() instead
	 */

	/**
	 * Get an element's attribute values, as defined on the HTML tag
	 * Attributes are not the same as properties. They're defined on the tag
	 * or with setAttribute (which shouldn't be used with HTML)
	 * This will return true or false for boolean attributes.
	 *
	 * @borrows dom:getElAttributes as videojs.getAttributes
	 * @deprecated Use videojs.dom.getAttributes() instead
	 */

	/**
	 * Empties the contents of an element.
	 *
	 * @borrows dom:emptyEl as videojs.emptyEl
	 * @deprecated Use videojs.dom.emptyEl() instead
	 */

	/**
	 * Normalizes and appends content to an element.
	 *
	 * The content for an element can be passed in multiple types and
	 * combinations, whose behavior is as follows:
	 *
	 * - String
	 *   Normalized into a text node.
	 *
	 * - Element, TextNode
	 *   Passed through.
	 *
	 * - Array
	 *   A one-dimensional array of strings, elements, nodes, or functions (which
	 *   return single strings, elements, or nodes).
	 *
	 * - Function
	 *   If the sole argument, is expected to produce a string, element,
	 *   node, or array.
	 *
	 * @borrows dom:appendContents as videojs.appendContet
	 * @deprecated Use videojs.dom.appendContent() instead
	 */

	/**
	 * Normalizes and inserts content into an element; this is identical to
	 * `appendContent()`, except it empties the element first.
	 *
	 * The content for an element can be passed in multiple types and
	 * combinations, whose behavior is as follows:
	 *
	 * - String
	 *   Normalized into a text node.
	 *
	 * - Element, TextNode
	 *   Passed through.
	 *
	 * - Array
	 *   A one-dimensional array of strings, elements, nodes, or functions (which
	 *   return single strings, elements, or nodes).
	 *
	 * - Function
	 *   If the sole argument, is expected to produce a string, element,
	 *   node, or array.
	 *
	 * @borrows dom:insertContent as videojs.insertContent
	 * @deprecated Use videojs.dom.insertContent() instead
	 */
	['isEl', 'isTextNode', 'createEl', 'hasClass', 'addClass', 'removeClass', 'toggleClass', 'setAttributes', 'getAttributes', 'emptyEl', 'appendContent', 'insertContent'].forEach(function (k) {
	  videojs[k] = function () {
	    log.warn('videojs.' + k + '() is deprecated; use videojs.dom.' + k + '() instead');
	    return Dom[k].apply(null, arguments);
	  };
	});

	/**
	 * A safe getComputedStyle with an IE8 fallback.
	 *
	 * This is because in Firefox, if the player is loaded in an iframe with `display:none`,
	 * then `getComputedStyle` returns `null`, so, we do a null-check to make sure
	 * that the player doesn't break in these cases.
	 * See https://bugzilla.mozilla.org/show_bug.cgi?id=548397 for more details.
	 *
	 * @borrows computed-style:computedStyle as videojs.computedStyle
	 */
	videojs.computedStyle = computedStyle;

	/**
	 * Export the Dom utilities for use in external plugins
	 * and Tech's
	 */
	videojs.dom = Dom;

	/**
	 * Export the Url utilities for use in external plugins
	 * and Tech's
	 */
	videojs.url = Url;

	module.exports = videojs;


/***/ }),
/* 2 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {var win;

	if (typeof window !== "undefined") {
	    win = window;
	} else if (typeof global !== "undefined") {
	    win = global;
	} else if (typeof self !== "undefined"){
	    win = self;
	} else {
	    win = {};
	}

	module.exports = win;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var topLevel = typeof global !== 'undefined' ? global :
	    typeof window !== 'undefined' ? window : {}
	var minDoc = __webpack_require__(4);

	var doccy;

	if (typeof document !== 'undefined') {
	    doccy = document;
	} else {
	    doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

	    if (!doccy) {
	        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
	    }
	}

	module.exports = doccy;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	function clean (s) {
	  return s.replace(/\n\r?\s*/g, '')
	}


	module.exports = function tsml (sa) {
	  var s = ''
	    , i = 0

	  for (; i < arguments.length; i++)
	    s += clean(sa[i]) + (arguments[i + 1] || '')

	  return s
	}

/***/ }),
/* 6 */
/***/ (function(module, exports) {

	module.exports = SafeParseTuple

	function SafeParseTuple(obj, reviver) {
	    var json
	    var error = null

	    try {
	        json = JSON.parse(obj, reviver)
	    } catch (err) {
	        error = err
	    }

	    return [error, json]
	}


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";
	var window = __webpack_require__(8)
	var isFunction = __webpack_require__(9)
	var parseHeaders = __webpack_require__(10)
	var xtend = __webpack_require__(39)

	module.exports = createXHR
	createXHR.XMLHttpRequest = window.XMLHttpRequest || noop
	createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest

	forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
	    createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
	        options = initParams(uri, options, callback)
	        options.method = method.toUpperCase()
	        return _createXHR(options)
	    }
	})

	function forEachArray(array, iterator) {
	    for (var i = 0; i < array.length; i++) {
	        iterator(array[i])
	    }
	}

	function isEmpty(obj){
	    for(var i in obj){
	        if(obj.hasOwnProperty(i)) return false
	    }
	    return true
	}

	function initParams(uri, options, callback) {
	    var params = uri

	    if (isFunction(options)) {
	        callback = options
	        if (typeof uri === "string") {
	            params = {uri:uri}
	        }
	    } else {
	        params = xtend(options, {uri: uri})
	    }

	    params.callback = callback
	    return params
	}

	function createXHR(uri, options, callback) {
	    options = initParams(uri, options, callback)
	    return _createXHR(options)
	}

	function _createXHR(options) {
	    if(typeof options.callback === "undefined"){
	        throw new Error("callback argument missing")
	    }

	    var called = false
	    var callback = function cbOnce(err, response, body){
	        if(!called){
	            called = true
	            options.callback(err, response, body)
	        }
	    }

	    function readystatechange() {
	        if (xhr.readyState === 4) {
	            setTimeout(loadFunc, 0)
	        }
	    }

	    function getBody() {
	        // Chrome with requestType=blob throws errors arround when even testing access to responseText
	        var body = undefined

	        if (xhr.response) {
	            body = xhr.response
	        } else {
	            body = xhr.responseText || getXml(xhr)
	        }

	        if (isJson) {
	            try {
	                body = JSON.parse(body)
	            } catch (e) {}
	        }

	        return body
	    }

	    function errorFunc(evt) {
	        clearTimeout(timeoutTimer)
	        if(!(evt instanceof Error)){
	            evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") )
	        }
	        evt.statusCode = 0
	        return callback(evt, failureResponse)
	    }

	    // will load the data & process the response in a special response object
	    function loadFunc() {
	        if (aborted) return
	        var status
	        clearTimeout(timeoutTimer)
	        if(options.useXDR && xhr.status===undefined) {
	            //IE8 CORS GET successful response doesn't have a status field, but body is fine
	            status = 200
	        } else {
	            status = (xhr.status === 1223 ? 204 : xhr.status)
	        }
	        var response = failureResponse
	        var err = null

	        if (status !== 0){
	            response = {
	                body: getBody(),
	                statusCode: status,
	                method: method,
	                headers: {},
	                url: uri,
	                rawRequest: xhr
	            }
	            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
	                response.headers = parseHeaders(xhr.getAllResponseHeaders())
	            }
	        } else {
	            err = new Error("Internal XMLHttpRequest Error")
	        }
	        return callback(err, response, response.body)
	    }

	    var xhr = options.xhr || null

	    if (!xhr) {
	        if (options.cors || options.useXDR) {
	            xhr = new createXHR.XDomainRequest()
	        }else{
	            xhr = new createXHR.XMLHttpRequest()
	        }
	    }

	    var key
	    var aborted
	    var uri = xhr.url = options.uri || options.url
	    var method = xhr.method = options.method || "GET"
	    var body = options.body || options.data
	    var headers = xhr.headers = options.headers || {}
	    var sync = !!options.sync
	    var isJson = false
	    var timeoutTimer
	    var failureResponse = {
	        body: undefined,
	        headers: {},
	        statusCode: 0,
	        method: method,
	        url: uri,
	        rawRequest: xhr
	    }

	    if ("json" in options && options.json !== false) {
	        isJson = true
	        headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json") //Don't override existing accept header declared by user
	        if (method !== "GET" && method !== "HEAD") {
	            headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json") //Don't override existing accept header declared by user
	            body = JSON.stringify(options.json === true ? body : options.json)
	        }
	    }

	    xhr.onreadystatechange = readystatechange
	    xhr.onload = loadFunc
	    xhr.onerror = errorFunc
	    // IE9 must have onprogress be set to a unique function.
	    xhr.onprogress = function () {
	        // IE must die
	    }
	    xhr.onabort = function(){
	        aborted = true;
	    }
	    xhr.ontimeout = errorFunc
	    xhr.open(method, uri, !sync, options.username, options.password)
	    //has to be after open
	    if(!sync) {
	        xhr.withCredentials = !!options.withCredentials
	    }
	    // Cannot set timeout with sync request
	    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
	    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
	    if (!sync && options.timeout > 0 ) {
	        timeoutTimer = setTimeout(function(){
	            if (aborted) return
	            aborted = true//IE9 may still call readystatechange
	            xhr.abort("timeout")
	            var e = new Error("XMLHttpRequest timeout")
	            e.code = "ETIMEDOUT"
	            errorFunc(e)
	        }, options.timeout )
	    }

	    if (xhr.setRequestHeader) {
	        for(key in headers){
	            if(headers.hasOwnProperty(key)){
	                xhr.setRequestHeader(key, headers[key])
	            }
	        }
	    } else if (options.headers && !isEmpty(options.headers)) {
	        throw new Error("Headers cannot be set on an XDomainRequest object")
	    }

	    if ("responseType" in options) {
	        xhr.responseType = options.responseType
	    }

	    if ("beforeSend" in options &&
	        typeof options.beforeSend === "function"
	    ) {
	        options.beforeSend(xhr)
	    }

	    // Microsoft Edge browser sends "undefined" when send is called with undefined value.
	    // XMLHttpRequest spec says to pass null as body to indicate no body
	    // See https://github.com/naugtur/xhr/issues/100.
	    xhr.send(body || null)

	    return xhr


	}

	function getXml(xhr) {
	    if (xhr.responseType === "document") {
	        return xhr.responseXML
	    }
	    var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === "parsererror"
	    if (xhr.responseType === "" && !firefoxBugTakenEffect) {
	        return xhr.responseXML
	    }

	    return null
	}

	function noop() {}


/***/ }),
/* 8 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {var win;

	if (typeof window !== "undefined") {
	    win = window;
	} else if (typeof global !== "undefined") {
	    win = global;
	} else if (typeof self !== "undefined"){
	    win = self;
	} else {
	    win = {};
	}

	module.exports = win;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 9 */
/***/ (function(module, exports) {

	module.exports = isFunction

	var toString = Object.prototype.toString

	function isFunction (fn) {
	  var string = toString.call(fn)
	  return string === '[object Function]' ||
	    (typeof fn === 'function' && string !== '[object RegExp]') ||
	    (typeof window !== 'undefined' &&
	     // IE8 and below
	     (fn === window.setTimeout ||
	      fn === window.alert ||
	      fn === window.confirm ||
	      fn === window.prompt))
	};


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	var trim = __webpack_require__(11)
	  , forEach = __webpack_require__(38)
	  , isArray = function(arg) {
	      return Object.prototype.toString.call(arg) === '[object Array]';
	    }

	module.exports = function (headers) {
	  if (!headers)
	    return {}

	  var result = {}

	  forEach(
	      trim(headers).split('\n')
	    , function (row) {
	        var index = row.indexOf(':')
	          , key = trim(row.slice(0, index)).toLowerCase()
	          , value = trim(row.slice(index + 1))

	        if (typeof(result[key]) === 'undefined') {
	          result[key] = value
	        } else if (isArray(result[key])) {
	          result[key].push(value)
	        } else {
	          result[key] = [ result[key], value ]
	        }
	      }
	  )

	  return result
	}


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var bind = __webpack_require__(12);
	var define = __webpack_require__(14);

	var implementation = __webpack_require__(18);
	var getPolyfill = __webpack_require__(36);
	var shim = __webpack_require__(37);

	var boundTrim = bind.call(Function.call, getPolyfill());

	define(boundTrim, {
		getPolyfill: getPolyfill,
		implementation: implementation,
		shim: shim
	});

	module.exports = boundTrim;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var implementation = __webpack_require__(13);

	module.exports = Function.prototype.bind || implementation;


/***/ }),
/* 13 */
/***/ (function(module, exports) {

	'use strict';

	/* eslint no-invalid-this: 1 */

	var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
	var slice = Array.prototype.slice;
	var toStr = Object.prototype.toString;
	var funcType = '[object Function]';

	module.exports = function bind(that) {
	    var target = this;
	    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
	        throw new TypeError(ERROR_MESSAGE + target);
	    }
	    var args = slice.call(arguments, 1);

	    var bound;
	    var binder = function () {
	        if (this instanceof bound) {
	            var result = target.apply(
	                this,
	                args.concat(slice.call(arguments))
	            );
	            if (Object(result) === result) {
	                return result;
	            }
	            return this;
	        } else {
	            return target.apply(
	                that,
	                args.concat(slice.call(arguments))
	            );
	        }
	    };

	    var boundLength = Math.max(0, target.length - args.length);
	    var boundArgs = [];
	    for (var i = 0; i < boundLength; i++) {
	        boundArgs.push('$' + i);
	    }

	    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

	    if (target.prototype) {
	        var Empty = function Empty() {};
	        Empty.prototype = target.prototype;
	        bound.prototype = new Empty();
	        Empty.prototype = null;
	    }

	    return bound;
	};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var keys = __webpack_require__(15);
	var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

	var toStr = Object.prototype.toString;
	var concat = Array.prototype.concat;
	var origDefineProperty = Object.defineProperty;

	var isFunction = function (fn) {
		return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
	};

	var arePropertyDescriptorsSupported = function () {
		var obj = {};
		try {
			origDefineProperty(obj, 'x', { enumerable: false, value: obj });
			// eslint-disable-next-line no-unused-vars, no-restricted-syntax
			for (var _ in obj) { // jscs:ignore disallowUnusedVariables
				return false;
			}
			return obj.x === obj;
		} catch (e) { /* this is IE 8. */
			return false;
		}
	};
	var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

	var defineProperty = function (object, name, value, predicate) {
		if (name in object && (!isFunction(predicate) || !predicate())) {
			return;
		}
		if (supportsDescriptors) {
			origDefineProperty(object, name, {
				configurable: true,
				enumerable: false,
				value: value,
				writable: true
			});
		} else {
			object[name] = value;
		}
	};

	var defineProperties = function (object, map) {
		var predicates = arguments.length > 2 ? arguments[2] : {};
		var props = keys(map);
		if (hasSymbols) {
			props = concat.call(props, Object.getOwnPropertySymbols(map));
		}
		for (var i = 0; i < props.length; i += 1) {
			defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
		}
	};

	defineProperties.supportsDescriptors = !!supportsDescriptors;

	module.exports = defineProperties;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var slice = Array.prototype.slice;
	var isArgs = __webpack_require__(16);

	var origKeys = Object.keys;
	var keysShim = origKeys ? function keys(o) { return origKeys(o); } : __webpack_require__(17);

	var originalKeys = Object.keys;

	keysShim.shim = function shimObjectKeys() {
		if (Object.keys) {
			var keysWorksWithArguments = (function () {
				// Safari 5.0 bug
				var args = Object.keys(arguments);
				return args && args.length === arguments.length;
			}(1, 2));
			if (!keysWorksWithArguments) {
				Object.keys = function keys(object) { // eslint-disable-line func-name-matching
					if (isArgs(object)) {
						return originalKeys(slice.call(object));
					}
					return originalKeys(object);
				};
			}
		} else {
			Object.keys = keysShim;
		}
		return Object.keys || keysShim;
	};

	module.exports = keysShim;


/***/ }),
/* 16 */
/***/ (function(module, exports) {

	'use strict';

	var toStr = Object.prototype.toString;

	module.exports = function isArguments(value) {
		var str = toStr.call(value);
		var isArgs = str === '[object Arguments]';
		if (!isArgs) {
			isArgs = str !== '[object Array]' &&
				value !== null &&
				typeof value === 'object' &&
				typeof value.length === 'number' &&
				value.length >= 0 &&
				toStr.call(value.callee) === '[object Function]';
		}
		return isArgs;
	};


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var keysShim;
	if (!Object.keys) {
		// modified from https://github.com/es-shims/es5-shim
		var has = Object.prototype.hasOwnProperty;
		var toStr = Object.prototype.toString;
		var isArgs = __webpack_require__(16); // eslint-disable-line global-require
		var isEnumerable = Object.prototype.propertyIsEnumerable;
		var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
		var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
		var dontEnums = [
			'toString',
			'toLocaleString',
			'valueOf',
			'hasOwnProperty',
			'isPrototypeOf',
			'propertyIsEnumerable',
			'constructor'
		];
		var equalsConstructorPrototype = function (o) {
			var ctor = o.constructor;
			return ctor && ctor.prototype === o;
		};
		var excludedKeys = {
			$applicationCache: true,
			$console: true,
			$external: true,
			$frame: true,
			$frameElement: true,
			$frames: true,
			$innerHeight: true,
			$innerWidth: true,
			$onmozfullscreenchange: true,
			$onmozfullscreenerror: true,
			$outerHeight: true,
			$outerWidth: true,
			$pageXOffset: true,
			$pageYOffset: true,
			$parent: true,
			$scrollLeft: true,
			$scrollTop: true,
			$scrollX: true,
			$scrollY: true,
			$self: true,
			$webkitIndexedDB: true,
			$webkitStorageInfo: true,
			$window: true
		};
		var hasAutomationEqualityBug = (function () {
			/* global window */
			if (typeof window === 'undefined') { return false; }
			for (var k in window) {
				try {
					if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
						try {
							equalsConstructorPrototype(window[k]);
						} catch (e) {
							return true;
						}
					}
				} catch (e) {
					return true;
				}
			}
			return false;
		}());
		var equalsConstructorPrototypeIfNotBuggy = function (o) {
			/* global window */
			if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
				return equalsConstructorPrototype(o);
			}
			try {
				return equalsConstructorPrototype(o);
			} catch (e) {
				return false;
			}
		};

		keysShim = function keys(object) {
			var isObject = object !== null && typeof object === 'object';
			var isFunction = toStr.call(object) === '[object Function]';
			var isArguments = isArgs(object);
			var isString = isObject && toStr.call(object) === '[object String]';
			var theKeys = [];

			if (!isObject && !isFunction && !isArguments) {
				throw new TypeError('Object.keys called on a non-object');
			}

			var skipProto = hasProtoEnumBug && isFunction;
			if (isString && object.length > 0 && !has.call(object, 0)) {
				for (var i = 0; i < object.length; ++i) {
					theKeys.push(String(i));
				}
			}

			if (isArguments && object.length > 0) {
				for (var j = 0; j < object.length; ++j) {
					theKeys.push(String(j));
				}
			} else {
				for (var name in object) {
					if (!(skipProto && name === 'prototype') && has.call(object, name)) {
						theKeys.push(String(name));
					}
				}
			}

			if (hasDontEnumBug) {
				var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

				for (var k = 0; k < dontEnums.length; ++k) {
					if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
						theKeys.push(dontEnums[k]);
					}
				}
			}
			return theKeys;
		};
	}
	module.exports = keysShim;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var bind = __webpack_require__(12);
	var ES = __webpack_require__(19);
	var replace = bind.call(Function.call, String.prototype.replace);

	/* eslint-disable no-control-regex */
	var leftWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+/;
	var rightWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]+$/;
	/* eslint-enable no-control-regex */

	module.exports = function trim() {
		var S = ES.ToString(ES.CheckObjectCoercible(this));
		return replace(replace(S, leftWhitespace, ''), rightWhitespace, '');
	};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var GetIntrinsic = __webpack_require__(20);

	var $Object = GetIntrinsic('%Object%');
	var $EvalError = GetIntrinsic('%EvalError%');
	var $TypeError = GetIntrinsic('%TypeError%');
	var $String = GetIntrinsic('%String%');
	var $Date = GetIntrinsic('%Date%');
	var $Number = GetIntrinsic('%Number%');
	var $floor = GetIntrinsic('%Math.floor%');
	var $DateUTC = GetIntrinsic('%Date.UTC%');
	var $abs = GetIntrinsic('%Math.abs%');

	var assertRecord = __webpack_require__(23);
	var isPropertyDescriptor = __webpack_require__(25);
	var $isNaN = __webpack_require__(26);
	var $isFinite = __webpack_require__(27);
	var sign = __webpack_require__(28);
	var mod = __webpack_require__(29);
	var isPrefixOf = __webpack_require__(30);
	var callBound = __webpack_require__(31);

	var IsCallable = __webpack_require__(33);
	var toPrimitive = __webpack_require__(34);

	var has = __webpack_require__(24);

	var $getUTCFullYear = callBound('Date.prototype.getUTCFullYear');

	var HoursPerDay = 24;
	var MinutesPerHour = 60;
	var SecondsPerMinute = 60;
	var msPerSecond = 1e3;
	var msPerMinute = msPerSecond * SecondsPerMinute;
	var msPerHour = msPerMinute * MinutesPerHour;
	var msPerDay = 86400000;

	// https://es5.github.io/#x9
	var ES5 = {
		ToPrimitive: toPrimitive,

		ToBoolean: function ToBoolean(value) {
			return !!value;
		},
		ToNumber: function ToNumber(value) {
			return +value; // eslint-disable-line no-implicit-coercion
		},
		ToInteger: function ToInteger(value) {
			var number = this.ToNumber(value);
			if ($isNaN(number)) { return 0; }
			if (number === 0 || !$isFinite(number)) { return number; }
			return sign(number) * Math.floor(Math.abs(number));
		},
		ToInt32: function ToInt32(x) {
			return this.ToNumber(x) >> 0;
		},
		ToUint32: function ToUint32(x) {
			return this.ToNumber(x) >>> 0;
		},
		ToUint16: function ToUint16(value) {
			var number = this.ToNumber(value);
			if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
			var posInt = sign(number) * Math.floor(Math.abs(number));
			return mod(posInt, 0x10000);
		},
		ToString: function ToString(value) {
			return $String(value);
		},
		ToObject: function ToObject(value) {
			this.CheckObjectCoercible(value);
			return $Object(value);
		},
		CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
			/* jshint eqnull:true */
			if (value == null) {
				throw new $TypeError(optMessage || 'Cannot call method on ' + value);
			}
			return value;
		},
		IsCallable: IsCallable,
		SameValue: function SameValue(x, y) {
			if (x === y) { // 0 === -0, but they are not identical.
				if (x === 0) { return 1 / x === 1 / y; }
				return true;
			}
			return $isNaN(x) && $isNaN(y);
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-8
		Type: function Type(x) {
			if (x === null) {
				return 'Null';
			}
			if (typeof x === 'undefined') {
				return 'Undefined';
			}
			if (typeof x === 'function' || typeof x === 'object') {
				return 'Object';
			}
			if (typeof x === 'number') {
				return 'Number';
			}
			if (typeof x === 'boolean') {
				return 'Boolean';
			}
			if (typeof x === 'string') {
				return 'String';
			}
		},

		// https://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
		IsPropertyDescriptor: function IsPropertyDescriptor(Desc) {
			return isPropertyDescriptor(this, Desc);
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-8.10.1
		IsAccessorDescriptor: function IsAccessorDescriptor(Desc) {
			if (typeof Desc === 'undefined') {
				return false;
			}

			assertRecord(this, 'Property Descriptor', 'Desc', Desc);

			if (!has(Desc, '[[Get]]') && !has(Desc, '[[Set]]')) {
				return false;
			}

			return true;
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-8.10.2
		IsDataDescriptor: function IsDataDescriptor(Desc) {
			if (typeof Desc === 'undefined') {
				return false;
			}

			assertRecord(this, 'Property Descriptor', 'Desc', Desc);

			if (!has(Desc, '[[Value]]') && !has(Desc, '[[Writable]]')) {
				return false;
			}

			return true;
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-8.10.3
		IsGenericDescriptor: function IsGenericDescriptor(Desc) {
			if (typeof Desc === 'undefined') {
				return false;
			}

			assertRecord(this, 'Property Descriptor', 'Desc', Desc);

			if (!this.IsAccessorDescriptor(Desc) && !this.IsDataDescriptor(Desc)) {
				return true;
			}

			return false;
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-8.10.4
		FromPropertyDescriptor: function FromPropertyDescriptor(Desc) {
			if (typeof Desc === 'undefined') {
				return Desc;
			}

			assertRecord(this, 'Property Descriptor', 'Desc', Desc);

			if (this.IsDataDescriptor(Desc)) {
				return {
					value: Desc['[[Value]]'],
					writable: !!Desc['[[Writable]]'],
					enumerable: !!Desc['[[Enumerable]]'],
					configurable: !!Desc['[[Configurable]]']
				};
			} else if (this.IsAccessorDescriptor(Desc)) {
				return {
					get: Desc['[[Get]]'],
					set: Desc['[[Set]]'],
					enumerable: !!Desc['[[Enumerable]]'],
					configurable: !!Desc['[[Configurable]]']
				};
			} else {
				throw new $TypeError('FromPropertyDescriptor must be called with a fully populated Property Descriptor');
			}
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-8.10.5
		ToPropertyDescriptor: function ToPropertyDescriptor(Obj) {
			if (this.Type(Obj) !== 'Object') {
				throw new $TypeError('ToPropertyDescriptor requires an object');
			}

			var desc = {};
			if (has(Obj, 'enumerable')) {
				desc['[[Enumerable]]'] = this.ToBoolean(Obj.enumerable);
			}
			if (has(Obj, 'configurable')) {
				desc['[[Configurable]]'] = this.ToBoolean(Obj.configurable);
			}
			if (has(Obj, 'value')) {
				desc['[[Value]]'] = Obj.value;
			}
			if (has(Obj, 'writable')) {
				desc['[[Writable]]'] = this.ToBoolean(Obj.writable);
			}
			if (has(Obj, 'get')) {
				var getter = Obj.get;
				if (typeof getter !== 'undefined' && !this.IsCallable(getter)) {
					throw new TypeError('getter must be a function');
				}
				desc['[[Get]]'] = getter;
			}
			if (has(Obj, 'set')) {
				var setter = Obj.set;
				if (typeof setter !== 'undefined' && !this.IsCallable(setter)) {
					throw new $TypeError('setter must be a function');
				}
				desc['[[Set]]'] = setter;
			}

			if ((has(desc, '[[Get]]') || has(desc, '[[Set]]')) && (has(desc, '[[Value]]') || has(desc, '[[Writable]]'))) {
				throw new $TypeError('Invalid property descriptor. Cannot both specify accessors and a value or writable attribute');
			}
			return desc;
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-11.9.3
		'Abstract Equality Comparison': function AbstractEqualityComparison(x, y) {
			var xType = this.Type(x);
			var yType = this.Type(y);
			if (xType === yType) {
				return x === y; // ES6+ specified this shortcut anyways.
			}
			if (x == null && y == null) {
				return true;
			}
			if (xType === 'Number' && yType === 'String') {
				return this['Abstract Equality Comparison'](x, this.ToNumber(y));
			}
			if (xType === 'String' && yType === 'Number') {
				return this['Abstract Equality Comparison'](this.ToNumber(x), y);
			}
			if (xType === 'Boolean') {
				return this['Abstract Equality Comparison'](this.ToNumber(x), y);
			}
			if (yType === 'Boolean') {
				return this['Abstract Equality Comparison'](x, this.ToNumber(y));
			}
			if ((xType === 'String' || xType === 'Number') && yType === 'Object') {
				return this['Abstract Equality Comparison'](x, this.ToPrimitive(y));
			}
			if (xType === 'Object' && (yType === 'String' || yType === 'Number')) {
				return this['Abstract Equality Comparison'](this.ToPrimitive(x), y);
			}
			return false;
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-11.9.6
		'Strict Equality Comparison': function StrictEqualityComparison(x, y) {
			var xType = this.Type(x);
			var yType = this.Type(y);
			if (xType !== yType) {
				return false;
			}
			if (xType === 'Undefined' || xType === 'Null') {
				return true;
			}
			return x === y; // shortcut for steps 4-7
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-11.8.5
		// eslint-disable-next-line max-statements
		'Abstract Relational Comparison': function AbstractRelationalComparison(x, y, LeftFirst) {
			if (this.Type(LeftFirst) !== 'Boolean') {
				throw new $TypeError('Assertion failed: LeftFirst argument must be a Boolean');
			}
			var px;
			var py;
			if (LeftFirst) {
				px = this.ToPrimitive(x, $Number);
				py = this.ToPrimitive(y, $Number);
			} else {
				py = this.ToPrimitive(y, $Number);
				px = this.ToPrimitive(x, $Number);
			}
			var bothStrings = this.Type(px) === 'String' && this.Type(py) === 'String';
			if (!bothStrings) {
				var nx = this.ToNumber(px);
				var ny = this.ToNumber(py);
				if ($isNaN(nx) || $isNaN(ny)) {
					return undefined;
				}
				if ($isFinite(nx) && $isFinite(ny) && nx === ny) {
					return false;
				}
				if (nx === 0 && ny === 0) {
					return false;
				}
				if (nx === Infinity) {
					return false;
				}
				if (ny === Infinity) {
					return true;
				}
				if (ny === -Infinity) {
					return false;
				}
				if (nx === -Infinity) {
					return true;
				}
				return nx < ny; // by now, these are both nonzero, finite, and not equal
			}
			if (isPrefixOf(py, px)) {
				return false;
			}
			if (isPrefixOf(px, py)) {
				return true;
			}
			return px < py; // both strings, neither a prefix of the other. shortcut for steps c-f
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.10
		msFromTime: function msFromTime(t) {
			return mod(t, msPerSecond);
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.10
		SecFromTime: function SecFromTime(t) {
			return mod($floor(t / msPerSecond), SecondsPerMinute);
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.10
		MinFromTime: function MinFromTime(t) {
			return mod($floor(t / msPerMinute), MinutesPerHour);
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.10
		HourFromTime: function HourFromTime(t) {
			return mod($floor(t / msPerHour), HoursPerDay);
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.2
		Day: function Day(t) {
			return $floor(t / msPerDay);
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.2
		TimeWithinDay: function TimeWithinDay(t) {
			return mod(t, msPerDay);
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.3
		DayFromYear: function DayFromYear(y) {
			return (365 * (y - 1970)) + $floor((y - 1969) / 4) - $floor((y - 1901) / 100) + $floor((y - 1601) / 400);
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.3
		TimeFromYear: function TimeFromYear(y) {
			return msPerDay * this.DayFromYear(y);
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.3
		YearFromTime: function YearFromTime(t) {
			// largest y such that this.TimeFromYear(y) <= t
			return $getUTCFullYear(new $Date(t));
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.6
		WeekDay: function WeekDay(t) {
			return mod(this.Day(t) + 4, 7);
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.3
		DaysInYear: function DaysInYear(y) {
			if (mod(y, 4) !== 0) {
				return 365;
			}
			if (mod(y, 100) !== 0) {
				return 366;
			}
			if (mod(y, 400) !== 0) {
				return 365;
			}
			return 366;
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.3
		InLeapYear: function InLeapYear(t) {
			var days = this.DaysInYear(this.YearFromTime(t));
			if (days === 365) {
				return 0;
			}
			if (days === 366) {
				return 1;
			}
			throw new $EvalError('Assertion failed: there are not 365 or 366 days in a year, got: ' + days);
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.4
		DayWithinYear: function DayWithinYear(t) {
			return this.Day(t) - this.DayFromYear(this.YearFromTime(t));
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.4
		MonthFromTime: function MonthFromTime(t) {
			var day = this.DayWithinYear(t);
			if (0 <= day && day < 31) {
				return 0;
			}
			var leap = this.InLeapYear(t);
			if (31 <= day && day < (59 + leap)) {
				return 1;
			}
			if ((59 + leap) <= day && day < (90 + leap)) {
				return 2;
			}
			if ((90 + leap) <= day && day < (120 + leap)) {
				return 3;
			}
			if ((120 + leap) <= day && day < (151 + leap)) {
				return 4;
			}
			if ((151 + leap) <= day && day < (181 + leap)) {
				return 5;
			}
			if ((181 + leap) <= day && day < (212 + leap)) {
				return 6;
			}
			if ((212 + leap) <= day && day < (243 + leap)) {
				return 7;
			}
			if ((243 + leap) <= day && day < (273 + leap)) {
				return 8;
			}
			if ((273 + leap) <= day && day < (304 + leap)) {
				return 9;
			}
			if ((304 + leap) <= day && day < (334 + leap)) {
				return 10;
			}
			if ((334 + leap) <= day && day < (365 + leap)) {
				return 11;
			}
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.5
		DateFromTime: function DateFromTime(t) {
			var m = this.MonthFromTime(t);
			var d = this.DayWithinYear(t);
			if (m === 0) {
				return d + 1;
			}
			if (m === 1) {
				return d - 30;
			}
			var leap = this.InLeapYear(t);
			if (m === 2) {
				return d - 58 - leap;
			}
			if (m === 3) {
				return d - 89 - leap;
			}
			if (m === 4) {
				return d - 119 - leap;
			}
			if (m === 5) {
				return d - 150 - leap;
			}
			if (m === 6) {
				return d - 180 - leap;
			}
			if (m === 7) {
				return d - 211 - leap;
			}
			if (m === 8) {
				return d - 242 - leap;
			}
			if (m === 9) {
				return d - 272 - leap;
			}
			if (m === 10) {
				return d - 303 - leap;
			}
			if (m === 11) {
				return d - 333 - leap;
			}
			throw new $EvalError('Assertion failed: MonthFromTime returned an impossible value: ' + m);
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.12
		MakeDay: function MakeDay(year, month, date) {
			if (!$isFinite(year) || !$isFinite(month) || !$isFinite(date)) {
				return NaN;
			}
			var y = this.ToInteger(year);
			var m = this.ToInteger(month);
			var dt = this.ToInteger(date);
			var ym = y + $floor(m / 12);
			var mn = mod(m, 12);
			var t = $DateUTC(ym, mn, 1);
			if (this.YearFromTime(t) !== ym || this.MonthFromTime(t) !== mn || this.DateFromTime(t) !== 1) {
				return NaN;
			}
			return this.Day(t) + dt - 1;
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.13
		MakeDate: function MakeDate(day, time) {
			if (!$isFinite(day) || !$isFinite(time)) {
				return NaN;
			}
			return (day * msPerDay) + time;
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.11
		MakeTime: function MakeTime(hour, min, sec, ms) {
			if (!$isFinite(hour) || !$isFinite(min) || !$isFinite(sec) || !$isFinite(ms)) {
				return NaN;
			}
			var h = this.ToInteger(hour);
			var m = this.ToInteger(min);
			var s = this.ToInteger(sec);
			var milli = this.ToInteger(ms);
			var t = (h * msPerHour) + (m * msPerMinute) + (s * msPerSecond) + milli;
			return t;
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-15.9.1.14
		TimeClip: function TimeClip(time) {
			if (!$isFinite(time) || $abs(time) > 8.64e15) {
				return NaN;
			}
			return $Number(new $Date(this.ToNumber(time)));
		},

		// https://ecma-international.org/ecma-262/5.1/#sec-5.2
		modulo: function modulo(x, y) {
			return mod(x, y);
		}
	};

	module.exports = ES5;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/* globals
		Atomics,
		SharedArrayBuffer,
	*/

	var undefined; // eslint-disable-line no-shadow-restricted-names

	var $TypeError = TypeError;

	var ThrowTypeError = Object.getOwnPropertyDescriptor
		? (function () { return Object.getOwnPropertyDescriptor(arguments, 'callee').get; }())
		: function () { throw new $TypeError(); };

	var hasSymbols = __webpack_require__(21)();

	var getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto

	var generator; // = function * () {};
	var generatorFunction = generator ? getProto(generator) : undefined;
	var asyncFn; // async function() {};
	var asyncFunction = asyncFn ? asyncFn.constructor : undefined;
	var asyncGen; // async function * () {};
	var asyncGenFunction = asyncGen ? getProto(asyncGen) : undefined;
	var asyncGenIterator = asyncGen ? asyncGen() : undefined;

	var TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);

	var INTRINSICS = {
		'$ %Array%': Array,
		'$ %ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
		'$ %ArrayBufferPrototype%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer.prototype,
		'$ %ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,
		'$ %ArrayPrototype%': Array.prototype,
		'$ %ArrayProto_entries%': Array.prototype.entries,
		'$ %ArrayProto_forEach%': Array.prototype.forEach,
		'$ %ArrayProto_keys%': Array.prototype.keys,
		'$ %ArrayProto_values%': Array.prototype.values,
		'$ %AsyncFromSyncIteratorPrototype%': undefined,
		'$ %AsyncFunction%': asyncFunction,
		'$ %AsyncFunctionPrototype%': asyncFunction ? asyncFunction.prototype : undefined,
		'$ %AsyncGenerator%': asyncGen ? getProto(asyncGenIterator) : undefined,
		'$ %AsyncGeneratorFunction%': asyncGenFunction,
		'$ %AsyncGeneratorPrototype%': asyncGenFunction ? asyncGenFunction.prototype : undefined,
		'$ %AsyncIteratorPrototype%': asyncGenIterator && hasSymbols && Symbol.asyncIterator ? asyncGenIterator[Symbol.asyncIterator]() : undefined,
		'$ %Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
		'$ %Boolean%': Boolean,
		'$ %BooleanPrototype%': Boolean.prototype,
		'$ %DataView%': typeof DataView === 'undefined' ? undefined : DataView,
		'$ %DataViewPrototype%': typeof DataView === 'undefined' ? undefined : DataView.prototype,
		'$ %Date%': Date,
		'$ %DatePrototype%': Date.prototype,
		'$ %decodeURI%': decodeURI,
		'$ %decodeURIComponent%': decodeURIComponent,
		'$ %encodeURI%': encodeURI,
		'$ %encodeURIComponent%': encodeURIComponent,
		'$ %Error%': Error,
		'$ %ErrorPrototype%': Error.prototype,
		'$ %eval%': eval, // eslint-disable-line no-eval
		'$ %EvalError%': EvalError,
		'$ %EvalErrorPrototype%': EvalError.prototype,
		'$ %Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
		'$ %Float32ArrayPrototype%': typeof Float32Array === 'undefined' ? undefined : Float32Array.prototype,
		'$ %Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
		'$ %Float64ArrayPrototype%': typeof Float64Array === 'undefined' ? undefined : Float64Array.prototype,
		'$ %Function%': Function,
		'$ %FunctionPrototype%': Function.prototype,
		'$ %Generator%': generator ? getProto(generator()) : undefined,
		'$ %GeneratorFunction%': generatorFunction,
		'$ %GeneratorPrototype%': generatorFunction ? generatorFunction.prototype : undefined,
		'$ %Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
		'$ %Int8ArrayPrototype%': typeof Int8Array === 'undefined' ? undefined : Int8Array.prototype,
		'$ %Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
		'$ %Int16ArrayPrototype%': typeof Int16Array === 'undefined' ? undefined : Int8Array.prototype,
		'$ %Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
		'$ %Int32ArrayPrototype%': typeof Int32Array === 'undefined' ? undefined : Int32Array.prototype,
		'$ %isFinite%': isFinite,
		'$ %isNaN%': isNaN,
		'$ %IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,
		'$ %JSON%': JSON,
		'$ %JSONParse%': JSON.parse,
		'$ %Map%': typeof Map === 'undefined' ? undefined : Map,
		'$ %MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),
		'$ %MapPrototype%': typeof Map === 'undefined' ? undefined : Map.prototype,
		'$ %Math%': Math,
		'$ %Number%': Number,
		'$ %NumberPrototype%': Number.prototype,
		'$ %Object%': Object,
		'$ %ObjectPrototype%': Object.prototype,
		'$ %ObjProto_toString%': Object.prototype.toString,
		'$ %ObjProto_valueOf%': Object.prototype.valueOf,
		'$ %parseFloat%': parseFloat,
		'$ %parseInt%': parseInt,
		'$ %Promise%': typeof Promise === 'undefined' ? undefined : Promise,
		'$ %PromisePrototype%': typeof Promise === 'undefined' ? undefined : Promise.prototype,
		'$ %PromiseProto_then%': typeof Promise === 'undefined' ? undefined : Promise.prototype.then,
		'$ %Promise_all%': typeof Promise === 'undefined' ? undefined : Promise.all,
		'$ %Promise_reject%': typeof Promise === 'undefined' ? undefined : Promise.reject,
		'$ %Promise_resolve%': typeof Promise === 'undefined' ? undefined : Promise.resolve,
		'$ %Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
		'$ %RangeError%': RangeError,
		'$ %RangeErrorPrototype%': RangeError.prototype,
		'$ %ReferenceError%': ReferenceError,
		'$ %ReferenceErrorPrototype%': ReferenceError.prototype,
		'$ %Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
		'$ %RegExp%': RegExp,
		'$ %RegExpPrototype%': RegExp.prototype,
		'$ %Set%': typeof Set === 'undefined' ? undefined : Set,
		'$ %SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),
		'$ %SetPrototype%': typeof Set === 'undefined' ? undefined : Set.prototype,
		'$ %SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
		'$ %SharedArrayBufferPrototype%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer.prototype,
		'$ %String%': String,
		'$ %StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,
		'$ %StringPrototype%': String.prototype,
		'$ %Symbol%': hasSymbols ? Symbol : undefined,
		'$ %SymbolPrototype%': hasSymbols ? Symbol.prototype : undefined,
		'$ %SyntaxError%': SyntaxError,
		'$ %SyntaxErrorPrototype%': SyntaxError.prototype,
		'$ %ThrowTypeError%': ThrowTypeError,
		'$ %TypedArray%': TypedArray,
		'$ %TypedArrayPrototype%': TypedArray ? TypedArray.prototype : undefined,
		'$ %TypeError%': $TypeError,
		'$ %TypeErrorPrototype%': $TypeError.prototype,
		'$ %Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
		'$ %Uint8ArrayPrototype%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array.prototype,
		'$ %Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
		'$ %Uint8ClampedArrayPrototype%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray.prototype,
		'$ %Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
		'$ %Uint16ArrayPrototype%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array.prototype,
		'$ %Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
		'$ %Uint32ArrayPrototype%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array.prototype,
		'$ %URIError%': URIError,
		'$ %URIErrorPrototype%': URIError.prototype,
		'$ %WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
		'$ %WeakMapPrototype%': typeof WeakMap === 'undefined' ? undefined : WeakMap.prototype,
		'$ %WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet,
		'$ %WeakSetPrototype%': typeof WeakSet === 'undefined' ? undefined : WeakSet.prototype
	};

	var bind = __webpack_require__(12);
	var $replace = bind.call(Function.call, String.prototype.replace);

	/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
	var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
	var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
	var stringToPath = function stringToPath(string) {
		var result = [];
		$replace(string, rePropName, function (match, number, quote, subString) {
			result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : (number || match);
		});
		return result;
	};
	/* end adaptation */

	var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
		var key = '$ ' + name;
		if (!(key in INTRINSICS)) {
			throw new SyntaxError('intrinsic ' + name + ' does not exist!');
		}

		// istanbul ignore if // hopefully this is impossible to test :-)
		if (typeof INTRINSICS[key] === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return INTRINSICS[key];
	};

	module.exports = function GetIntrinsic(name, allowMissing) {
		if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
			throw new TypeError('"allowMissing" argument must be a boolean');
		}

		var parts = stringToPath(name);

		if (parts.length === 0) {
			return getBaseIntrinsic(name, allowMissing);
		}

		var value = getBaseIntrinsic('%' + parts[0] + '%', allowMissing);
		for (var i = 1; i < parts.length; i += 1) {
			if (value != null) {
				value = value[parts[i]];
			}
		}
		return value;
	};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var origSymbol = global.Symbol;
	var hasSymbolSham = __webpack_require__(22);

	module.exports = function hasNativeSymbols() {
		if (typeof origSymbol !== 'function') { return false; }
		if (typeof Symbol !== 'function') { return false; }
		if (typeof origSymbol('foo') !== 'symbol') { return false; }
		if (typeof Symbol('bar') !== 'symbol') { return false; }

		return hasSymbolSham();
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 22 */
/***/ (function(module, exports) {

	'use strict';

	/* eslint complexity: [2, 17], max-statements: [2, 33] */
	module.exports = function hasSymbols() {
		if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
		if (typeof Symbol.iterator === 'symbol') { return true; }

		var obj = {};
		var sym = Symbol('test');
		var symObj = Object(sym);
		if (typeof sym === 'string') { return false; }

		if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
		if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

		// temp disabled per https://github.com/ljharb/object.assign/issues/17
		// if (sym instanceof Symbol) { return false; }
		// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
		// if (!(symObj instanceof Symbol)) { return false; }

		// if (typeof Symbol.prototype.toString !== 'function') { return false; }
		// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

		var symVal = 42;
		obj[sym] = symVal;
		for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax
		if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

		if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

		var syms = Object.getOwnPropertySymbols(obj);
		if (syms.length !== 1 || syms[0] !== sym) { return false; }

		if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

		if (typeof Object.getOwnPropertyDescriptor === 'function') {
			var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
			if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
		}

		return true;
	};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var GetIntrinsic = __webpack_require__(20);

	var $TypeError = GetIntrinsic('%TypeError%');
	var $SyntaxError = GetIntrinsic('%SyntaxError%');

	var has = __webpack_require__(24);

	var predicates = {
		// https://ecma-international.org/ecma-262/6.0/#sec-property-descriptor-specification-type
		'Property Descriptor': function isPropertyDescriptor(ES, Desc) {
			if (ES.Type(Desc) !== 'Object') {
				return false;
			}
			var allowed = {
				'[[Configurable]]': true,
				'[[Enumerable]]': true,
				'[[Get]]': true,
				'[[Set]]': true,
				'[[Value]]': true,
				'[[Writable]]': true
			};

			for (var key in Desc) { // eslint-disable-line
				if (has(Desc, key) && !allowed[key]) {
					return false;
				}
			}

			var isData = has(Desc, '[[Value]]');
			var IsAccessor = has(Desc, '[[Get]]') || has(Desc, '[[Set]]');
			if (isData && IsAccessor) {
				throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
			}
			return true;
		}
	};

	module.exports = function assertRecord(ES, recordType, argumentName, value) {
		var predicate = predicates[recordType];
		if (typeof predicate !== 'function') {
			throw new $SyntaxError('unknown record type: ' + recordType);
		}
		if (!predicate(ES, value)) {
			throw new $TypeError(argumentName + ' must be a ' + recordType);
		}
	};


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var bind = __webpack_require__(12);

	module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var GetIntrinsic = __webpack_require__(20);

	var has = __webpack_require__(24);
	var $TypeError = GetIntrinsic('%TypeError%');

	module.exports = function IsPropertyDescriptor(ES, Desc) {
		if (ES.Type(Desc) !== 'Object') {
			return false;
		}
		var allowed = {
			'[[Configurable]]': true,
			'[[Enumerable]]': true,
			'[[Get]]': true,
			'[[Set]]': true,
			'[[Value]]': true,
			'[[Writable]]': true
		};

	    for (var key in Desc) { // eslint-disable-line
			if (has(Desc, key) && !allowed[key]) {
				return false;
			}
		}

		if (ES.IsDataDescriptor(Desc) && ES.IsAccessorDescriptor(Desc)) {
			throw new $TypeError('Property Descriptors may not be both accessor and data descriptors');
		}
		return true;
	};


/***/ }),
/* 26 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = Number.isNaN || function isNaN(a) {
		return a !== a;
	};


/***/ }),
/* 27 */
/***/ (function(module, exports) {

	'use strict';

	var $isNaN = Number.isNaN || function (a) { return a !== a; };

	module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };


/***/ }),
/* 28 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function sign(number) {
		return number >= 0 ? 1 : -1;
	};


/***/ }),
/* 29 */
/***/ (function(module, exports) {

	'use strict';

	module.exports = function mod(number, modulo) {
		var remain = number % modulo;
		return Math.floor(remain >= 0 ? remain : remain + modulo);
	};


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var $strSlice = __webpack_require__(31)('String.prototype.slice');

	module.exports = function isPrefixOf(prefix, string) {
		if (prefix === string) {
			return true;
		}
		if (prefix.length > string.length) {
			return false;
		}
		return $strSlice(string, 0, prefix.length) === prefix;
	};


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var GetIntrinsic = __webpack_require__(20);

	var callBind = __webpack_require__(32);

	var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

	module.exports = function callBoundIntrinsic(name, allowMissing) {
		var intrinsic = GetIntrinsic(name, !!allowMissing);
		if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.')) {
			return callBind(intrinsic);
		}
		return intrinsic;
	};


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var bind = __webpack_require__(12);

	var GetIntrinsic = __webpack_require__(20);

	var $Function = GetIntrinsic('%Function%');
	var $apply = $Function.apply;
	var $call = $Function.call;

	module.exports = function callBind() {
		return bind.apply($call, arguments);
	};

	module.exports.apply = function applyBind() {
		return bind.apply($apply, arguments);
	};


/***/ }),
/* 33 */
/***/ (function(module, exports) {

	'use strict';

	var fnToStr = Function.prototype.toString;

	var constructorRegex = /^\s*class\b/;
	var isES6ClassFn = function isES6ClassFunction(value) {
		try {
			var fnStr = fnToStr.call(value);
			return constructorRegex.test(fnStr);
		} catch (e) {
			return false; // not a function
		}
	};

	var tryFunctionObject = function tryFunctionToStr(value) {
		try {
			if (isES6ClassFn(value)) { return false; }
			fnToStr.call(value);
			return true;
		} catch (e) {
			return false;
		}
	};
	var toStr = Object.prototype.toString;
	var fnClass = '[object Function]';
	var genClass = '[object GeneratorFunction]';
	var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

	module.exports = function isCallable(value) {
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (typeof value === 'function' && !value.prototype) { return true; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		return strClass === fnClass || strClass === genClass;
	};


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var toStr = Object.prototype.toString;

	var isPrimitive = __webpack_require__(35);

	var isCallable = __webpack_require__(33);

	// http://ecma-international.org/ecma-262/5.1/#sec-8.12.8
	var ES5internalSlots = {
		'[[DefaultValue]]': function (O) {
			var actualHint;
			if (arguments.length > 1) {
				actualHint = arguments[1];
			} else {
				actualHint = toStr.call(O) === '[object Date]' ? String : Number;
			}

			if (actualHint === String || actualHint === Number) {
				var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
				var value, i;
				for (i = 0; i < methods.length; ++i) {
					if (isCallable(O[methods[i]])) {
						value = O[methods[i]]();
						if (isPrimitive(value)) {
							return value;
						}
					}
				}
				throw new TypeError('No default value');
			}
			throw new TypeError('invalid [[DefaultValue]] hint supplied');
		}
	};

	// http://ecma-international.org/ecma-262/5.1/#sec-9.1
	module.exports = function ToPrimitive(input) {
		if (isPrimitive(input)) {
			return input;
		}
		if (arguments.length > 1) {
			return ES5internalSlots['[[DefaultValue]]'](input, arguments[1]);
		}
		return ES5internalSlots['[[DefaultValue]]'](input);
	};


/***/ }),
/* 35 */
/***/ (function(module, exports) {

	module.exports = function isPrimitive(value) {
		return value === null || (typeof value !== 'function' && typeof value !== 'object');
	};


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var implementation = __webpack_require__(18);

	var zeroWidthSpace = '\u200b';

	module.exports = function getPolyfill() {
		if (String.prototype.trim && zeroWidthSpace.trim() === zeroWidthSpace) {
			return String.prototype.trim;
		}
		return implementation;
	};


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var define = __webpack_require__(14);
	var getPolyfill = __webpack_require__(36);

	module.exports = function shimStringTrim() {
		var polyfill = getPolyfill();
		define(String.prototype, { trim: polyfill }, {
			trim: function testTrim() {
				return String.prototype.trim !== polyfill;
			}
		});
		return polyfill;
	};


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var isCallable = __webpack_require__(33);

	var toStr = Object.prototype.toString;
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var forEachArray = function forEachArray(array, iterator, receiver) {
	    for (var i = 0, len = array.length; i < len; i++) {
	        if (hasOwnProperty.call(array, i)) {
	            if (receiver == null) {
	                iterator(array[i], i, array);
	            } else {
	                iterator.call(receiver, array[i], i, array);
	            }
	        }
	    }
	};

	var forEachString = function forEachString(string, iterator, receiver) {
	    for (var i = 0, len = string.length; i < len; i++) {
	        // no such thing as a sparse string.
	        if (receiver == null) {
	            iterator(string.charAt(i), i, string);
	        } else {
	            iterator.call(receiver, string.charAt(i), i, string);
	        }
	    }
	};

	var forEachObject = function forEachObject(object, iterator, receiver) {
	    for (var k in object) {
	        if (hasOwnProperty.call(object, k)) {
	            if (receiver == null) {
	                iterator(object[k], k, object);
	            } else {
	                iterator.call(receiver, object[k], k, object);
	            }
	        }
	    }
	};

	var forEach = function forEach(list, iterator, thisArg) {
	    if (!isCallable(iterator)) {
	        throw new TypeError('iterator must be a function');
	    }

	    var receiver;
	    if (arguments.length >= 3) {
	        receiver = thisArg;
	    }

	    if (toStr.call(list) === '[object Array]') {
	        forEachArray(list, iterator, receiver);
	    } else if (typeof list === 'string') {
	        forEachString(list, iterator, receiver);
	    } else {
	        forEachObject(list, iterator, receiver);
	    }
	};

	module.exports = forEach;


/***/ }),
/* 39 */
/***/ (function(module, exports) {

	module.exports = extend

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	function extend() {
	    var target = {}

	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]

	        for (var key in source) {
	            if (hasOwnProperty.call(source, key)) {
	                target[key] = source[key]
	            }
	        }
	    }

	    return target
	}


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013 vtt.js Contributors
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	// Default exports for Node. Export the extended versions of VTTCue and
	// VTTRegion in Node since we likely want the capability to convert back and
	// forth between JSON. If we don't then it's not that big of a deal since we're
	// off browser.

	var window = __webpack_require__(41);

	var vttjs = module.exports = {
	  WebVTT: __webpack_require__(42),
	  VTTCue: __webpack_require__(43),
	  VTTRegion: __webpack_require__(44)
	};

	window.vttjs = vttjs;
	window.WebVTT = vttjs.WebVTT;

	var cueShim = vttjs.VTTCue;
	var regionShim = vttjs.VTTRegion;
	var nativeVTTCue = window.VTTCue;
	var nativeVTTRegion = window.VTTRegion;

	vttjs.shim = function() {
	  window.VTTCue = cueShim;
	  window.VTTRegion = regionShim;
	};

	vttjs.restore = function() {
	  window.VTTCue = nativeVTTCue;
	  window.VTTRegion = nativeVTTRegion;
	};

	if (!window.VTTCue) {
	  vttjs.shim();
	}


/***/ }),
/* 41 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {var win;

	if (typeof window !== "undefined") {
	    win = window;
	} else if (typeof global !== "undefined") {
	    win = global;
	} else if (typeof self !== "undefined"){
	    win = self;
	} else {
	    win = {};
	}

	module.exports = win;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 42 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013 vtt.js Contributors
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
	/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */
	var _objCreate = Object.create || (function() {
	  function F() {}
	  return function(o) {
	    if (arguments.length !== 1) {
	      throw new Error('Object.create shim only accepts one parameter.');
	    }
	    F.prototype = o;
	    return new F();
	  };
	})();

	// Creates a new ParserError object from an errorData object. The errorData
	// object should have default code and message properties. The default message
	// property can be overriden by passing in a message parameter.
	// See ParsingError.Errors below for acceptable errors.
	function ParsingError(errorData, message) {
	  this.name = "ParsingError";
	  this.code = errorData.code;
	  this.message = message || errorData.message;
	}
	ParsingError.prototype = _objCreate(Error.prototype);
	ParsingError.prototype.constructor = ParsingError;

	// ParsingError metadata for acceptable ParsingErrors.
	ParsingError.Errors = {
	  BadSignature: {
	    code: 0,
	    message: "Malformed WebVTT signature."
	  },
	  BadTimeStamp: {
	    code: 1,
	    message: "Malformed time stamp."
	  }
	};

	// Try to parse input as a time stamp.
	function parseTimeStamp(input) {

	  function computeSeconds(h, m, s, f) {
	    return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;
	  }

	  var m = input.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);
	  if (!m) {
	    return null;
	  }

	  if (m[3]) {
	    // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]
	    return computeSeconds(m[1], m[2], m[3].replace(":", ""), m[4]);
	  } else if (m[1] > 59) {
	    // Timestamp takes the form of [hours]:[minutes].[milliseconds]
	    // First position is hours as it's over 59.
	    return computeSeconds(m[1], m[2], 0,  m[4]);
	  } else {
	    // Timestamp takes the form of [minutes]:[seconds].[milliseconds]
	    return computeSeconds(0, m[1], m[2], m[4]);
	  }
	}

	// A settings object holds key/value pairs and will ignore anything but the first
	// assignment to a specific key.
	function Settings() {
	  this.values = _objCreate(null);
	}

	Settings.prototype = {
	  // Only accept the first assignment to any key.
	  set: function(k, v) {
	    if (!this.get(k) && v !== "") {
	      this.values[k] = v;
	    }
	  },
	  // Return the value for a key, or a default value.
	  // If 'defaultKey' is passed then 'dflt' is assumed to be an object with
	  // a number of possible default values as properties where 'defaultKey' is
	  // the key of the property that will be chosen; otherwise it's assumed to be
	  // a single value.
	  get: function(k, dflt, defaultKey) {
	    if (defaultKey) {
	      return this.has(k) ? this.values[k] : dflt[defaultKey];
	    }
	    return this.has(k) ? this.values[k] : dflt;
	  },
	  // Check whether we have a value for a key.
	  has: function(k) {
	    return k in this.values;
	  },
	  // Accept a setting if its one of the given alternatives.
	  alt: function(k, v, a) {
	    for (var n = 0; n < a.length; ++n) {
	      if (v === a[n]) {
	        this.set(k, v);
	        break;
	      }
	    }
	  },
	  // Accept a setting if its a valid (signed) integer.
	  integer: function(k, v) {
	    if (/^-?\d+$/.test(v)) { // integer
	      this.set(k, parseInt(v, 10));
	    }
	  },
	  // Accept a setting if its a valid percentage.
	  percent: function(k, v) {
	    var m;
	    if ((m = v.match(/^([\d]{1,3})(\.[\d]*)?%$/))) {
	      v = parseFloat(v);
	      if (v >= 0 && v <= 100) {
	        this.set(k, v);
	        return true;
	      }
	    }
	    return false;
	  }
	};

	// Helper function to parse input into groups separated by 'groupDelim', and
	// interprete each group as a key/value pair separated by 'keyValueDelim'.
	function parseOptions(input, callback, keyValueDelim, groupDelim) {
	  var groups = groupDelim ? input.split(groupDelim) : [input];
	  for (var i in groups) {
	    if (typeof groups[i] !== "string") {
	      continue;
	    }
	    var kv = groups[i].split(keyValueDelim);
	    if (kv.length !== 2) {
	      continue;
	    }
	    var k = kv[0];
	    var v = kv[1];
	    callback(k, v);
	  }
	}

	function parseCue(input, cue, regionList) {
	  // Remember the original input if we need to throw an error.
	  var oInput = input;
	  // 4.1 WebVTT timestamp
	  function consumeTimeStamp() {
	    var ts = parseTimeStamp(input);
	    if (ts === null) {
	      throw new ParsingError(ParsingError.Errors.BadTimeStamp,
	                            "Malformed timestamp: " + oInput);
	    }
	    // Remove time stamp from input.
	    input = input.replace(/^[^\sa-zA-Z-]+/, "");
	    return ts;
	  }

	  // 4.4.2 WebVTT cue settings
	  function consumeCueSettings(input, cue) {
	    var settings = new Settings();

	    parseOptions(input, function (k, v) {
	      switch (k) {
	      case "region":
	        // Find the last region we parsed with the same region id.
	        for (var i = regionList.length - 1; i >= 0; i--) {
	          if (regionList[i].id === v) {
	            settings.set(k, regionList[i].region);
	            break;
	          }
	        }
	        break;
	      case "vertical":
	        settings.alt(k, v, ["rl", "lr"]);
	        break;
	      case "line":
	        var vals = v.split(","),
	            vals0 = vals[0];
	        settings.integer(k, vals0);
	        settings.percent(k, vals0) ? settings.set("snapToLines", false) : null;
	        settings.alt(k, vals0, ["auto"]);
	        if (vals.length === 2) {
	          settings.alt("lineAlign", vals[1], ["start", "middle", "end"]);
	        }
	        break;
	      case "position":
	        vals = v.split(",");
	        settings.percent(k, vals[0]);
	        if (vals.length === 2) {
	          settings.alt("positionAlign", vals[1], ["start", "middle", "end"]);
	        }
	        break;
	      case "size":
	        settings.percent(k, v);
	        break;
	      case "align":
	        settings.alt(k, v, ["start", "middle", "end", "left", "right"]);
	        break;
	      }
	    }, /:/, /\s/);

	    // Apply default values for any missing fields.
	    cue.region = settings.get("region", null);
	    cue.vertical = settings.get("vertical", "");
	    cue.line = settings.get("line", "auto");
	    cue.lineAlign = settings.get("lineAlign", "start");
	    cue.snapToLines = settings.get("snapToLines", true);
	    cue.size = settings.get("size", 100);
	    cue.align = settings.get("align", "middle");
	    cue.position = settings.get("position", {
	      start: 0,
	      left: 0,
	      middle: 50,
	      end: 100,
	      right: 100
	    }, cue.align);
	    cue.positionAlign = settings.get("positionAlign", {
	      start: "start",
	      left: "start",
	      middle: "middle",
	      end: "end",
	      right: "end"
	    }, cue.align);
	  }

	  function skipWhitespace() {
	    input = input.replace(/^\s+/, "");
	  }

	  // 4.1 WebVTT cue timings.
	  skipWhitespace();
	  cue.startTime = consumeTimeStamp();   // (1) collect cue start time
	  skipWhitespace();
	  if (input.substr(0, 3) !== "-->") {     // (3) next characters must match "-->"
	    throw new ParsingError(ParsingError.Errors.BadTimeStamp,
	                           "Malformed time stamp (time stamps must be separated by '-->'): " +
	                           oInput);
	  }
	  input = input.substr(3);
	  skipWhitespace();
	  cue.endTime = consumeTimeStamp();     // (5) collect cue end time

	  // 4.1 WebVTT cue settings list.
	  skipWhitespace();
	  consumeCueSettings(input, cue);
	}

	var ESCAPE = {
	  "&amp;": "&",
	  "&lt;": "<",
	  "&gt;": ">",
	  "&lrm;": "\u200e",
	  "&rlm;": "\u200f",
	  "&nbsp;": "\u00a0"
	};

	var TAG_NAME = {
	  c: "span",
	  i: "i",
	  b: "b",
	  u: "u",
	  ruby: "ruby",
	  rt: "rt",
	  v: "span",
	  lang: "span"
	};

	var TAG_ANNOTATION = {
	  v: "title",
	  lang: "lang"
	};

	var NEEDS_PARENT = {
	  rt: "ruby"
	};

	// Parse content into a document fragment.
	function parseContent(window, input) {
	  function nextToken() {
	    // Check for end-of-string.
	    if (!input) {
	      return null;
	    }

	    // Consume 'n' characters from the input.
	    function consume(result) {
	      input = input.substr(result.length);
	      return result;
	    }

	    var m = input.match(/^([^<]*)(<[^>]*>?)?/);
	    // If there is some text before the next tag, return it, otherwise return
	    // the tag.
	    return consume(m[1] ? m[1] : m[2]);
	  }

	  // Unescape a string 's'.
	  function unescape1(e) {
	    return ESCAPE[e];
	  }
	  function unescape(s) {
	    while ((m = s.match(/&(amp|lt|gt|lrm|rlm|nbsp);/))) {
	      s = s.replace(m[0], unescape1);
	    }
	    return s;
	  }

	  function shouldAdd(current, element) {
	    return !NEEDS_PARENT[element.localName] ||
	           NEEDS_PARENT[element.localName] === current.localName;
	  }

	  // Create an element for this tag.
	  function createElement(type, annotation) {
	    var tagName = TAG_NAME[type];
	    if (!tagName) {
	      return null;
	    }
	    var element = window.document.createElement(tagName);
	    element.localName = tagName;
	    var name = TAG_ANNOTATION[type];
	    if (name && annotation) {
	      element[name] = annotation.trim();
	    }
	    return element;
	  }

	  var rootDiv = window.document.createElement("div"),
	      current = rootDiv,
	      t,
	      tagStack = [];

	  while ((t = nextToken()) !== null) {
	    if (t[0] === '<') {
	      if (t[1] === "/") {
	        // If the closing tag matches, move back up to the parent node.
	        if (tagStack.length &&
	            tagStack[tagStack.length - 1] === t.substr(2).replace(">", "")) {
	          tagStack.pop();
	          current = current.parentNode;
	        }
	        // Otherwise just ignore the end tag.
	        continue;
	      }
	      var ts = parseTimeStamp(t.substr(1, t.length - 2));
	      var node;
	      if (ts) {
	        // Timestamps are lead nodes as well.
	        node = window.document.createProcessingInstruction("timestamp", ts);
	        current.appendChild(node);
	        continue;
	      }
	      var m = t.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
	      // If we can't parse the tag, skip to the next tag.
	      if (!m) {
	        continue;
	      }
	      // Try to construct an element, and ignore the tag if we couldn't.
	      node = createElement(m[1], m[3]);
	      if (!node) {
	        continue;
	      }
	      // Determine if the tag should be added based on the context of where it
	      // is placed in the cuetext.
	      if (!shouldAdd(current, node)) {
	        continue;
	      }
	      // Set the class list (as a list of classes, separated by space).
	      if (m[2]) {
	        node.className = m[2].substr(1).replace('.', ' ');
	      }
	      // Append the node to the current node, and enter the scope of the new
	      // node.
	      tagStack.push(m[1]);
	      current.appendChild(node);
	      current = node;
	      continue;
	    }

	    // Text nodes are leaf nodes.
	    current.appendChild(window.document.createTextNode(unescape(t)));
	  }

	  return rootDiv;
	}

	// This is a list of all the Unicode characters that have a strong
	// right-to-left category. What this means is that these characters are
	// written right-to-left for sure. It was generated by pulling all the strong
	// right-to-left characters out of the Unicode data table. That table can
	// found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt
	var strongRTLRanges = [[0x5be, 0x5be], [0x5c0, 0x5c0], [0x5c3, 0x5c3], [0x5c6, 0x5c6],
	 [0x5d0, 0x5ea], [0x5f0, 0x5f4], [0x608, 0x608], [0x60b, 0x60b], [0x60d, 0x60d],
	 [0x61b, 0x61b], [0x61e, 0x64a], [0x66d, 0x66f], [0x671, 0x6d5], [0x6e5, 0x6e6],
	 [0x6ee, 0x6ef], [0x6fa, 0x70d], [0x70f, 0x710], [0x712, 0x72f], [0x74d, 0x7a5],
	 [0x7b1, 0x7b1], [0x7c0, 0x7ea], [0x7f4, 0x7f5], [0x7fa, 0x7fa], [0x800, 0x815],
	 [0x81a, 0x81a], [0x824, 0x824], [0x828, 0x828], [0x830, 0x83e], [0x840, 0x858],
	 [0x85e, 0x85e], [0x8a0, 0x8a0], [0x8a2, 0x8ac], [0x200f, 0x200f],
	 [0xfb1d, 0xfb1d], [0xfb1f, 0xfb28], [0xfb2a, 0xfb36], [0xfb38, 0xfb3c],
	 [0xfb3e, 0xfb3e], [0xfb40, 0xfb41], [0xfb43, 0xfb44], [0xfb46, 0xfbc1],
	 [0xfbd3, 0xfd3d], [0xfd50, 0xfd8f], [0xfd92, 0xfdc7], [0xfdf0, 0xfdfc],
	 [0xfe70, 0xfe74], [0xfe76, 0xfefc], [0x10800, 0x10805], [0x10808, 0x10808],
	 [0x1080a, 0x10835], [0x10837, 0x10838], [0x1083c, 0x1083c], [0x1083f, 0x10855],
	 [0x10857, 0x1085f], [0x10900, 0x1091b], [0x10920, 0x10939], [0x1093f, 0x1093f],
	 [0x10980, 0x109b7], [0x109be, 0x109bf], [0x10a00, 0x10a00], [0x10a10, 0x10a13],
	 [0x10a15, 0x10a17], [0x10a19, 0x10a33], [0x10a40, 0x10a47], [0x10a50, 0x10a58],
	 [0x10a60, 0x10a7f], [0x10b00, 0x10b35], [0x10b40, 0x10b55], [0x10b58, 0x10b72],
	 [0x10b78, 0x10b7f], [0x10c00, 0x10c48], [0x1ee00, 0x1ee03], [0x1ee05, 0x1ee1f],
	 [0x1ee21, 0x1ee22], [0x1ee24, 0x1ee24], [0x1ee27, 0x1ee27], [0x1ee29, 0x1ee32],
	 [0x1ee34, 0x1ee37], [0x1ee39, 0x1ee39], [0x1ee3b, 0x1ee3b], [0x1ee42, 0x1ee42],
	 [0x1ee47, 0x1ee47], [0x1ee49, 0x1ee49], [0x1ee4b, 0x1ee4b], [0x1ee4d, 0x1ee4f],
	 [0x1ee51, 0x1ee52], [0x1ee54, 0x1ee54], [0x1ee57, 0x1ee57], [0x1ee59, 0x1ee59],
	 [0x1ee5b, 0x1ee5b], [0x1ee5d, 0x1ee5d], [0x1ee5f, 0x1ee5f], [0x1ee61, 0x1ee62],
	 [0x1ee64, 0x1ee64], [0x1ee67, 0x1ee6a], [0x1ee6c, 0x1ee72], [0x1ee74, 0x1ee77],
	 [0x1ee79, 0x1ee7c], [0x1ee7e, 0x1ee7e], [0x1ee80, 0x1ee89], [0x1ee8b, 0x1ee9b],
	 [0x1eea1, 0x1eea3], [0x1eea5, 0x1eea9], [0x1eeab, 0x1eebb], [0x10fffd, 0x10fffd]];

	function isStrongRTLChar(charCode) {
	  for (var i = 0; i < strongRTLRanges.length; i++) {
	    var currentRange = strongRTLRanges[i];
	    if (charCode >= currentRange[0] && charCode <= currentRange[1]) {
	      return true;
	    }
	  }

	  return false;
	}

	function determineBidi(cueDiv) {
	  var nodeStack = [],
	      text = "",
	      charCode;

	  if (!cueDiv || !cueDiv.childNodes) {
	    return "ltr";
	  }

	  function pushNodes(nodeStack, node) {
	    for (var i = node.childNodes.length - 1; i >= 0; i--) {
	      nodeStack.push(node.childNodes[i]);
	    }
	  }

	  function nextTextNode(nodeStack) {
	    if (!nodeStack || !nodeStack.length) {
	      return null;
	    }

	    var node = nodeStack.pop(),
	        text = node.textContent || node.innerText;
	    if (text) {
	      // TODO: This should match all unicode type B characters (paragraph
	      // separator characters). See issue #115.
	      var m = text.match(/^.*(\n|\r)/);
	      if (m) {
	        nodeStack.length = 0;
	        return m[0];
	      }
	      return text;
	    }
	    if (node.tagName === "ruby") {
	      return nextTextNode(nodeStack);
	    }
	    if (node.childNodes) {
	      pushNodes(nodeStack, node);
	      return nextTextNode(nodeStack);
	    }
	  }

	  pushNodes(nodeStack, cueDiv);
	  while ((text = nextTextNode(nodeStack))) {
	    for (var i = 0; i < text.length; i++) {
	      charCode = text.charCodeAt(i);
	      if (isStrongRTLChar(charCode)) {
	        return "rtl";
	      }
	    }
	  }
	  return "ltr";
	}

	function computeLinePos(cue) {
	  if (typeof cue.line === "number" &&
	      (cue.snapToLines || (cue.line >= 0 && cue.line <= 100))) {
	    return cue.line;
	  }
	  if (!cue.track || !cue.track.textTrackList ||
	      !cue.track.textTrackList.mediaElement) {
	    return -1;
	  }
	  var track = cue.track,
	      trackList = track.textTrackList,
	      count = 0;
	  for (var i = 0; i < trackList.length && trackList[i] !== track; i++) {
	    if (trackList[i].mode === "showing") {
	      count++;
	    }
	  }
	  return ++count * -1;
	}

	function StyleBox() {
	}

	// Apply styles to a div. If there is no div passed then it defaults to the
	// div on 'this'.
	StyleBox.prototype.applyStyles = function(styles, div) {
	  div = div || this.div;
	  for (var prop in styles) {
	    if (styles.hasOwnProperty(prop)) {
	      div.style[prop] = styles[prop];
	    }
	  }
	};

	StyleBox.prototype.formatStyle = function(val, unit) {
	  return val === 0 ? 0 : val + unit;
	};

	// Constructs the computed display state of the cue (a div). Places the div
	// into the overlay which should be a block level element (usually a div).
	function CueStyleBox(window, cue, styleOptions) {
	  var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
	  var color = "rgba(255, 255, 255, 1)";
	  var backgroundColor = "rgba(0, 0, 0, 0.8)";

	  if (isIE8) {
	    color = "rgb(255, 255, 255)";
	    backgroundColor = "rgb(0, 0, 0)";
	  }

	  StyleBox.call(this);
	  this.cue = cue;

	  // Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will
	  // have inline positioning and will function as the cue background box.
	  this.cueDiv = parseContent(window, cue.text);
	  var styles = {
	    color: color,
	    backgroundColor: backgroundColor,
	    position: "relative",
	    left: 0,
	    right: 0,
	    top: 0,
	    bottom: 0,
	    display: "inline"
	  };

	  if (!isIE8) {
	    styles.writingMode = cue.vertical === "" ? "horizontal-tb"
	                                             : cue.vertical === "lr" ? "vertical-lr"
	                                                                     : "vertical-rl";
	    styles.unicodeBidi = "plaintext";
	  }
	  this.applyStyles(styles, this.cueDiv);

	  // Create an absolutely positioned div that will be used to position the cue
	  // div. Note, all WebVTT cue-setting alignments are equivalent to the CSS
	  // mirrors of them except "middle" which is "center" in CSS.
	  this.div = window.document.createElement("div");
	  styles = {
	    textAlign: cue.align === "middle" ? "center" : cue.align,
	    font: styleOptions.font,
	    whiteSpace: "pre-line",
	    position: "absolute"
	  };

	  if (!isIE8) {
	    styles.direction = determineBidi(this.cueDiv);
	    styles.writingMode = cue.vertical === "" ? "horizontal-tb"
	                                             : cue.vertical === "lr" ? "vertical-lr"
	                                                                     : "vertical-rl".
	    stylesunicodeBidi =  "plaintext";
	  }

	  this.applyStyles(styles);

	  this.div.appendChild(this.cueDiv);

	  // Calculate the distance from the reference edge of the viewport to the text
	  // position of the cue box. The reference edge will be resolved later when
	  // the box orientation styles are applied.
	  var textPos = 0;
	  switch (cue.positionAlign) {
	  case "start":
	    textPos = cue.position;
	    break;
	  case "middle":
	    textPos = cue.position - (cue.size / 2);
	    break;
	  case "end":
	    textPos = cue.position - cue.size;
	    break;
	  }

	  // Horizontal box orientation; textPos is the distance from the left edge of the
	  // area to the left edge of the box and cue.size is the distance extending to
	  // the right from there.
	  if (cue.vertical === "") {
	    this.applyStyles({
	      left:  this.formatStyle(textPos, "%"),
	      width: this.formatStyle(cue.size, "%")
	    });
	  // Vertical box orientation; textPos is the distance from the top edge of the
	  // area to the top edge of the box and cue.size is the height extending
	  // downwards from there.
	  } else {
	    this.applyStyles({
	      top: this.formatStyle(textPos, "%"),
	      height: this.formatStyle(cue.size, "%")
	    });
	  }

	  this.move = function(box) {
	    this.applyStyles({
	      top: this.formatStyle(box.top, "px"),
	      bottom: this.formatStyle(box.bottom, "px"),
	      left: this.formatStyle(box.left, "px"),
	      right: this.formatStyle(box.right, "px"),
	      height: this.formatStyle(box.height, "px"),
	      width: this.formatStyle(box.width, "px")
	    });
	  };
	}
	CueStyleBox.prototype = _objCreate(StyleBox.prototype);
	CueStyleBox.prototype.constructor = CueStyleBox;

	// Represents the co-ordinates of an Element in a way that we can easily
	// compute things with such as if it overlaps or intersects with another Element.
	// Can initialize it with either a StyleBox or another BoxPosition.
	function BoxPosition(obj) {
	  var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);

	  // Either a BoxPosition was passed in and we need to copy it, or a StyleBox
	  // was passed in and we need to copy the results of 'getBoundingClientRect'
	  // as the object returned is readonly. All co-ordinate values are in reference
	  // to the viewport origin (top left).
	  var lh, height, width, top;
	  if (obj.div) {
	    height = obj.div.offsetHeight;
	    width = obj.div.offsetWidth;
	    top = obj.div.offsetTop;

	    var rects = (rects = obj.div.childNodes) && (rects = rects[0]) &&
	                rects.getClientRects && rects.getClientRects();
	    obj = obj.div.getBoundingClientRect();
	    // In certain cases the outter div will be slightly larger then the sum of
	    // the inner div's lines. This could be due to bold text, etc, on some platforms.
	    // In this case we should get the average line height and use that. This will
	    // result in the desired behaviour.
	    lh = rects ? Math.max((rects[0] && rects[0].height) || 0, obj.height / rects.length)
	               : 0;

	  }
	  this.left = obj.left;
	  this.right = obj.right;
	  this.top = obj.top || top;
	  this.height = obj.height || height;
	  this.bottom = obj.bottom || (top + (obj.height || height));
	  this.width = obj.width || width;
	  this.lineHeight = lh !== undefined ? lh : obj.lineHeight;

	  if (isIE8 && !this.lineHeight) {
	    this.lineHeight = 13;
	  }
	}

	// Move the box along a particular axis. Optionally pass in an amount to move
	// the box. If no amount is passed then the default is the line height of the
	// box.
	BoxPosition.prototype.move = function(axis, toMove) {
	  toMove = toMove !== undefined ? toMove : this.lineHeight;
	  switch (axis) {
	  case "+x":
	    this.left += toMove;
	    this.right += toMove;
	    break;
	  case "-x":
	    this.left -= toMove;
	    this.right -= toMove;
	    break;
	  case "+y":
	    this.top += toMove;
	    this.bottom += toMove;
	    break;
	  case "-y":
	    this.top -= toMove;
	    this.bottom -= toMove;
	    break;
	  }
	};

	// Check if this box overlaps another box, b2.
	BoxPosition.prototype.overlaps = function(b2) {
	  return this.left < b2.right &&
	         this.right > b2.left &&
	         this.top < b2.bottom &&
	         this.bottom > b2.top;
	};

	// Check if this box overlaps any other boxes in boxes.
	BoxPosition.prototype.overlapsAny = function(boxes) {
	  for (var i = 0; i < boxes.length; i++) {
	    if (this.overlaps(boxes[i])) {
	      return true;
	    }
	  }
	  return false;
	};

	// Check if this box is within another box.
	BoxPosition.prototype.within = function(container) {
	  return this.top >= container.top &&
	         this.bottom <= container.bottom &&
	         this.left >= container.left &&
	         this.right <= container.right;
	};

	// Check if this box is entirely within the container or it is overlapping
	// on the edge opposite of the axis direction passed. For example, if "+x" is
	// passed and the box is overlapping on the left edge of the container, then
	// return true.
	BoxPosition.prototype.overlapsOppositeAxis = function(container, axis) {
	  switch (axis) {
	  case "+x":
	    return this.left < container.left;
	  case "-x":
	    return this.right > container.right;
	  case "+y":
	    return this.top < container.top;
	  case "-y":
	    return this.bottom > container.bottom;
	  }
	};

	// Find the percentage of the area that this box is overlapping with another
	// box.
	BoxPosition.prototype.intersectPercentage = function(b2) {
	  var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)),
	      y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)),
	      intersectArea = x * y;
	  return intersectArea / (this.height * this.width);
	};

	// Convert the positions from this box to CSS compatible positions using
	// the reference container's positions. This has to be done because this
	// box's positions are in reference to the viewport origin, whereas, CSS
	// values are in referecne to their respective edges.
	BoxPosition.prototype.toCSSCompatValues = function(reference) {
	  return {
	    top: this.top - reference.top,
	    bottom: reference.bottom - this.bottom,
	    left: this.left - reference.left,
	    right: reference.right - this.right,
	    height: this.height,
	    width: this.width
	  };
	};

	// Get an object that represents the box's position without anything extra.
	// Can pass a StyleBox, HTMLElement, or another BoxPositon.
	BoxPosition.getSimpleBoxPosition = function(obj) {
	  var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;
	  var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;
	  var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;

	  obj = obj.div ? obj.div.getBoundingClientRect() :
	                obj.tagName ? obj.getBoundingClientRect() : obj;
	  var ret = {
	    left: obj.left,
	    right: obj.right,
	    top: obj.top || top,
	    height: obj.height || height,
	    bottom: obj.bottom || (top + (obj.height || height)),
	    width: obj.width || width
	  };
	  return ret;
	};

	// Move a StyleBox to its specified, or next best, position. The containerBox
	// is the box that contains the StyleBox, such as a div. boxPositions are
	// a list of other boxes that the styleBox can't overlap with.
	function moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {

	  // Find the best position for a cue box, b, on the video. The axis parameter
	  // is a list of axis, the order of which, it will move the box along. For example:
	  // Passing ["+x", "-x"] will move the box first along the x axis in the positive
	  // direction. If it doesn't find a good position for it there it will then move
	  // it along the x axis in the negative direction.
	  function findBestPosition(b, axis) {
	    var bestPosition,
	        specifiedPosition = new BoxPosition(b),
	        percentage = 1; // Highest possible so the first thing we get is better.

	    for (var i = 0; i < axis.length; i++) {
	      while (b.overlapsOppositeAxis(containerBox, axis[i]) ||
	             (b.within(containerBox) && b.overlapsAny(boxPositions))) {
	        b.move(axis[i]);
	      }
	      // We found a spot where we aren't overlapping anything. This is our
	      // best position.
	      if (b.within(containerBox)) {
	        return b;
	      }
	      var p = b.intersectPercentage(containerBox);
	      // If we're outside the container box less then we were on our last try
	      // then remember this position as the best position.
	      if (percentage > p) {
	        bestPosition = new BoxPosition(b);
	        percentage = p;
	      }
	      // Reset the box position to the specified position.
	      b = new BoxPosition(specifiedPosition);
	    }
	    return bestPosition || specifiedPosition;
	  }

	  var boxPosition = new BoxPosition(styleBox),
	      cue = styleBox.cue,
	      linePos = computeLinePos(cue),
	      axis = [];

	  // If we have a line number to align the cue to.
	  if (cue.snapToLines) {
	    var size;
	    switch (cue.vertical) {
	    case "":
	      axis = [ "+y", "-y" ];
	      size = "height";
	      break;
	    case "rl":
	      axis = [ "+x", "-x" ];
	      size = "width";
	      break;
	    case "lr":
	      axis = [ "-x", "+x" ];
	      size = "width";
	      break;
	    }

	    var step = boxPosition.lineHeight,
	        position = step * Math.round(linePos),
	        maxPosition = containerBox[size] + step,
	        initialAxis = axis[0];

	    // If the specified intial position is greater then the max position then
	    // clamp the box to the amount of steps it would take for the box to
	    // reach the max position.
	    if (Math.abs(position) > maxPosition) {
	      position = position < 0 ? -1 : 1;
	      position *= Math.ceil(maxPosition / step) * step;
	    }

	    // If computed line position returns negative then line numbers are
	    // relative to the bottom of the video instead of the top. Therefore, we
	    // need to increase our initial position by the length or width of the
	    // video, depending on the writing direction, and reverse our axis directions.
	    if (linePos < 0) {
	      position += cue.vertical === "" ? containerBox.height : containerBox.width;
	      axis = axis.reverse();
	    }

	    // Move the box to the specified position. This may not be its best
	    // position.
	    boxPosition.move(initialAxis, position);

	  } else {
	    // If we have a percentage line value for the cue.
	    var calculatedPercentage = (boxPosition.lineHeight / containerBox.height) * 100;

	    switch (cue.lineAlign) {
	    case "middle":
	      linePos -= (calculatedPercentage / 2);
	      break;
	    case "end":
	      linePos -= calculatedPercentage;
	      break;
	    }

	    // Apply initial line position to the cue box.
	    switch (cue.vertical) {
	    case "":
	      styleBox.applyStyles({
	        top: styleBox.formatStyle(linePos, "%")
	      });
	      break;
	    case "rl":
	      styleBox.applyStyles({
	        left: styleBox.formatStyle(linePos, "%")
	      });
	      break;
	    case "lr":
	      styleBox.applyStyles({
	        right: styleBox.formatStyle(linePos, "%")
	      });
	      break;
	    }

	    axis = [ "+y", "-x", "+x", "-y" ];

	    // Get the box position again after we've applied the specified positioning
	    // to it.
	    boxPosition = new BoxPosition(styleBox);
	  }

	  var bestPosition = findBestPosition(boxPosition, axis);
	  styleBox.move(bestPosition.toCSSCompatValues(containerBox));
	}

	function WebVTT() {
	  // Nothing
	}

	// Helper to allow strings to be decoded instead of the default binary utf8 data.
	WebVTT.StringDecoder = function() {
	  return {
	    decode: function(data) {
	      if (!data) {
	        return "";
	      }
	      if (typeof data !== "string") {
	        throw new Error("Error - expected string data.");
	      }
	      return decodeURIComponent(encodeURIComponent(data));
	    }
	  };
	};

	WebVTT.convertCueToDOMTree = function(window, cuetext) {
	  if (!window || !cuetext) {
	    return null;
	  }
	  return parseContent(window, cuetext);
	};

	var FONT_SIZE_PERCENT = 0.05;
	var FONT_STYLE = "sans-serif";
	var CUE_BACKGROUND_PADDING = "1.5%";

	// Runs the processing model over the cues and regions passed to it.
	// @param overlay A block level element (usually a div) that the computed cues
	//                and regions will be placed into.
	WebVTT.processCues = function(window, cues, overlay) {
	  if (!window || !cues || !overlay) {
	    return null;
	  }

	  // Remove all previous children.
	  while (overlay.firstChild) {
	    overlay.removeChild(overlay.firstChild);
	  }

	  var paddedOverlay = window.document.createElement("div");
	  paddedOverlay.style.position = "absolute";
	  paddedOverlay.style.left = "0";
	  paddedOverlay.style.right = "0";
	  paddedOverlay.style.top = "0";
	  paddedOverlay.style.bottom = "0";
	  paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;
	  overlay.appendChild(paddedOverlay);

	  // Determine if we need to compute the display states of the cues. This could
	  // be the case if a cue's state has been changed since the last computation or
	  // if it has not been computed yet.
	  function shouldCompute(cues) {
	    for (var i = 0; i < cues.length; i++) {
	      if (cues[i].hasBeenReset || !cues[i].displayState) {
	        return true;
	      }
	    }
	    return false;
	  }

	  // We don't need to recompute the cues' display states. Just reuse them.
	  if (!shouldCompute(cues)) {
	    for (var i = 0; i < cues.length; i++) {
	      paddedOverlay.appendChild(cues[i].displayState);
	    }
	    return;
	  }

	  var boxPositions = [],
	      containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay),
	      fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;
	  var styleOptions = {
	    font: fontSize + "px " + FONT_STYLE
	  };

	  (function() {
	    var styleBox, cue;

	    for (var i = 0; i < cues.length; i++) {
	      cue = cues[i];

	      // Compute the intial position and styles of the cue div.
	      styleBox = new CueStyleBox(window, cue, styleOptions);
	      paddedOverlay.appendChild(styleBox.div);

	      // Move the cue div to it's correct line position.
	      moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);

	      // Remember the computed div so that we don't have to recompute it later
	      // if we don't have too.
	      cue.displayState = styleBox.div;

	      boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox));
	    }
	  })();
	};

	WebVTT.Parser = function(window, vttjs, decoder) {
	  if (!decoder) {
	    decoder = vttjs;
	    vttjs = {};
	  }
	  if (!vttjs) {
	    vttjs = {};
	  }

	  this.window = window;
	  this.vttjs = vttjs;
	  this.state = "INITIAL";
	  this.buffer = "";
	  this.decoder = decoder || new TextDecoder("utf8");
	  this.regionList = [];
	};

	WebVTT.Parser.prototype = {
	  // If the error is a ParsingError then report it to the consumer if
	  // possible. If it's not a ParsingError then throw it like normal.
	  reportOrThrowError: function(e) {
	    if (e instanceof ParsingError) {
	      this.onparsingerror && this.onparsingerror(e);
	    } else {
	      throw e;
	    }
	  },
	  parse: function (data) {
	    var self = this;

	    // If there is no data then we won't decode it, but will just try to parse
	    // whatever is in buffer already. This may occur in circumstances, for
	    // example when flush() is called.
	    if (data) {
	      // Try to decode the data that we received.
	      self.buffer += self.decoder.decode(data, {stream: true});
	    }

	    function collectNextLine() {
	      var buffer = self.buffer;
	      var pos = 0;
	      while (pos < buffer.length && buffer[pos] !== '\r' && buffer[pos] !== '\n') {
	        ++pos;
	      }
	      var line = buffer.substr(0, pos);
	      // Advance the buffer early in case we fail below.
	      if (buffer[pos] === '\r') {
	        ++pos;
	      }
	      if (buffer[pos] === '\n') {
	        ++pos;
	      }
	      self.buffer = buffer.substr(pos);
	      return line;
	    }

	    // 3.4 WebVTT region and WebVTT region settings syntax
	    function parseRegion(input) {
	      var settings = new Settings();

	      parseOptions(input, function (k, v) {
	        switch (k) {
	        case "id":
	          settings.set(k, v);
	          break;
	        case "width":
	          settings.percent(k, v);
	          break;
	        case "lines":
	          settings.integer(k, v);
	          break;
	        case "regionanchor":
	        case "viewportanchor":
	          var xy = v.split(',');
	          if (xy.length !== 2) {
	            break;
	          }
	          // We have to make sure both x and y parse, so use a temporary
	          // settings object here.
	          var anchor = new Settings();
	          anchor.percent("x", xy[0]);
	          anchor.percent("y", xy[1]);
	          if (!anchor.has("x") || !anchor.has("y")) {
	            break;
	          }
	          settings.set(k + "X", anchor.get("x"));
	          settings.set(k + "Y", anchor.get("y"));
	          break;
	        case "scroll":
	          settings.alt(k, v, ["up"]);
	          break;
	        }
	      }, /=/, /\s/);

	      // Create the region, using default values for any values that were not
	      // specified.
	      if (settings.has("id")) {
	        var region = new (self.vttjs.VTTRegion || self.window.VTTRegion)();
	        region.width = settings.get("width", 100);
	        region.lines = settings.get("lines", 3);
	        region.regionAnchorX = settings.get("regionanchorX", 0);
	        region.regionAnchorY = settings.get("regionanchorY", 100);
	        region.viewportAnchorX = settings.get("viewportanchorX", 0);
	        region.viewportAnchorY = settings.get("viewportanchorY", 100);
	        region.scroll = settings.get("scroll", "");
	        // Register the region.
	        self.onregion && self.onregion(region);
	        // Remember the VTTRegion for later in case we parse any VTTCues that
	        // reference it.
	        self.regionList.push({
	          id: settings.get("id"),
	          region: region
	        });
	      }
	    }

	    // draft-pantos-http-live-streaming-20
	    // https://tools.ietf.org/html/draft-pantos-http-live-streaming-20#section-3.5
	    // 3.5 WebVTT
	    function parseTimestampMap(input) {
	      var settings = new Settings();

	      parseOptions(input, function(k, v) {
	        switch(k) {
	        case "MPEGT":
	          settings.integer(k + 'S', v);
	          break;
	        case "LOCA":
	          settings.set(k + 'L', parseTimeStamp(v));
	          break;
	        }
	      }, /[^\d]:/, /,/);

	      self.ontimestampmap && self.ontimestampmap({
	        "MPEGTS": settings.get("MPEGTS"),
	        "LOCAL": settings.get("LOCAL")
	      });
	    }

	    // 3.2 WebVTT metadata header syntax
	    function parseHeader(input) {
	      if (input.match(/X-TIMESTAMP-MAP/)) {
	        // This line contains HLS X-TIMESTAMP-MAP metadata
	        parseOptions(input, function(k, v) {
	          switch(k) {
	          case "X-TIMESTAMP-MAP":
	            parseTimestampMap(v);
	            break;
	          }
	        }, /=/);
	      } else {
	        parseOptions(input, function (k, v) {
	          switch (k) {
	          case "Region":
	            // 3.3 WebVTT region metadata header syntax
	            parseRegion(v);
	            break;
	          }
	        }, /:/);
	      }

	    }

	    // 5.1 WebVTT file parsing.
	    try {
	      var line;
	      if (self.state === "INITIAL") {
	        // We can't start parsing until we have the first line.
	        if (!/\r\n|\n/.test(self.buffer)) {
	          return this;
	        }

	        line = collectNextLine();

	        var m = line.match(/^WEBVTT([ \t].*)?$/);
	        if (!m || !m[0]) {
	          throw new ParsingError(ParsingError.Errors.BadSignature);
	        }

	        self.state = "HEADER";
	      }

	      var alreadyCollectedLine = false;
	      while (self.buffer) {
	        // We can't parse a line until we have the full line.
	        if (!/\r\n|\n/.test(self.buffer)) {
	          return this;
	        }

	        if (!alreadyCollectedLine) {
	          line = collectNextLine();
	        } else {
	          alreadyCollectedLine = false;
	        }

	        switch (self.state) {
	        case "HEADER":
	          // 13-18 - Allow a header (metadata) under the WEBVTT line.
	          if (/:/.test(line)) {
	            parseHeader(line);
	          } else if (!line) {
	            // An empty line terminates the header and starts the body (cues).
	            self.state = "ID";
	          }
	          continue;
	        case "NOTE":
	          // Ignore NOTE blocks.
	          if (!line) {
	            self.state = "ID";
	          }
	          continue;
	        case "ID":
	          // Check for the start of NOTE blocks.
	          if (/^NOTE($|[ \t])/.test(line)) {
	            self.state = "NOTE";
	            break;
	          }
	          // 19-29 - Allow any number of line terminators, then initialize new cue values.
	          if (!line) {
	            continue;
	          }
	          self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0, 0, "");
	          self.state = "CUE";
	          // 30-39 - Check if self line contains an optional identifier or timing data.
	          if (line.indexOf("-->") === -1) {
	            self.cue.id = line;
	            continue;
	          }
	          // Process line as start of a cue.
	          /*falls through*/
	        case "CUE":
	          // 40 - Collect cue timings and settings.
	          try {
	            parseCue(line, self.cue, self.regionList);
	          } catch (e) {
	            self.reportOrThrowError(e);
	            // In case of an error ignore rest of the cue.
	            self.cue = null;
	            self.state = "BADCUE";
	            continue;
	          }
	          self.state = "CUETEXT";
	          continue;
	        case "CUETEXT":
	          var hasSubstring = line.indexOf("-->") !== -1;
	          // 34 - If we have an empty line then report the cue.
	          // 35 - If we have the special substring '-->' then report the cue,
	          // but do not collect the line as we need to process the current
	          // one as a new cue.
	          if (!line || hasSubstring && (alreadyCollectedLine = true)) {
	            // We are done parsing self cue.
	            self.oncue && self.oncue(self.cue);
	            self.cue = null;
	            self.state = "ID";
	            continue;
	          }
	          if (self.cue.text) {
	            self.cue.text += "\n";
	          }
	          self.cue.text += line;
	          continue;
	        case "BADCUE": // BADCUE
	          // 54-62 - Collect and discard the remaining cue.
	          if (!line) {
	            self.state = "ID";
	          }
	          continue;
	        }
	      }
	    } catch (e) {
	      self.reportOrThrowError(e);

	      // If we are currently parsing a cue, report what we have.
	      if (self.state === "CUETEXT" && self.cue && self.oncue) {
	        self.oncue(self.cue);
	      }
	      self.cue = null;
	      // Enter BADWEBVTT state if header was not parsed correctly otherwise
	      // another exception occurred so enter BADCUE state.
	      self.state = self.state === "INITIAL" ? "BADWEBVTT" : "BADCUE";
	    }
	    return this;
	  },
	  flush: function () {
	    var self = this;
	    try {
	      // Finish decoding the stream.
	      self.buffer += self.decoder.decode();
	      // Synthesize the end of the current cue or region.
	      if (self.cue || self.state === "HEADER") {
	        self.buffer += "\n\n";
	        self.parse();
	      }
	      // If we've flushed, parsed, and we're still on the INITIAL state then
	      // that means we don't have enough of the stream to parse the first
	      // line.
	      if (self.state === "INITIAL") {
	        throw new ParsingError(ParsingError.Errors.BadSignature);
	      }
	    } catch(e) {
	      self.reportOrThrowError(e);
	    }
	    self.onflush && self.onflush();
	    return this;
	  }
	};

	module.exports = WebVTT;


/***/ }),
/* 43 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013 vtt.js Contributors
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	var autoKeyword = "auto";
	var directionSetting = {
	  "": true,
	  "lr": true,
	  "rl": true
	};
	var alignSetting = {
	  "start": true,
	  "middle": true,
	  "end": true,
	  "left": true,
	  "right": true
	};

	function findDirectionSetting(value) {
	  if (typeof value !== "string") {
	    return false;
	  }
	  var dir = directionSetting[value.toLowerCase()];
	  return dir ? value.toLowerCase() : false;
	}

	function findAlignSetting(value) {
	  if (typeof value !== "string") {
	    return false;
	  }
	  var align = alignSetting[value.toLowerCase()];
	  return align ? value.toLowerCase() : false;
	}

	function extend(obj) {
	  var i = 1;
	  for (; i < arguments.length; i++) {
	    var cobj = arguments[i];
	    for (var p in cobj) {
	      obj[p] = cobj[p];
	    }
	  }

	  return obj;
	}

	function VTTCue(startTime, endTime, text) {
	  var cue = this;
	  var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
	  var baseObj = {};

	  if (isIE8) {
	    cue = document.createElement('custom');
	  } else {
	    baseObj.enumerable = true;
	  }

	  /**
	   * Shim implementation specific properties. These properties are not in
	   * the spec.
	   */

	  // Lets us know when the VTTCue's data has changed in such a way that we need
	  // to recompute its display state. This lets us compute its display state
	  // lazily.
	  cue.hasBeenReset = false;

	  /**
	   * VTTCue and TextTrackCue properties
	   * http://dev.w3.org/html5/webvtt/#vttcue-interface
	   */

	  var _id = "";
	  var _pauseOnExit = false;
	  var _startTime = startTime;
	  var _endTime = endTime;
	  var _text = text;
	  var _region = null;
	  var _vertical = "";
	  var _snapToLines = true;
	  var _line = "auto";
	  var _lineAlign = "start";
	  var _position = 50;
	  var _positionAlign = "middle";
	  var _size = 50;
	  var _align = "middle";

	  Object.defineProperty(cue,
	    "id", extend({}, baseObj, {
	      get: function() {
	        return _id;
	      },
	      set: function(value) {
	        _id = "" + value;
	      }
	    }));

	  Object.defineProperty(cue,
	    "pauseOnExit", extend({}, baseObj, {
	      get: function() {
	        return _pauseOnExit;
	      },
	      set: function(value) {
	        _pauseOnExit = !!value;
	      }
	    }));

	  Object.defineProperty(cue,
	    "startTime", extend({}, baseObj, {
	      get: function() {
	        return _startTime;
	      },
	      set: function(value) {
	        if (typeof value !== "number") {
	          throw new TypeError("Start time must be set to a number.");
	        }
	        _startTime = value;
	        this.hasBeenReset = true;
	      }
	    }));

	  Object.defineProperty(cue,
	    "endTime", extend({}, baseObj, {
	      get: function() {
	        return _endTime;
	      },
	      set: function(value) {
	        if (typeof value !== "number") {
	          throw new TypeError("End time must be set to a number.");
	        }
	        _endTime = value;
	        this.hasBeenReset = true;
	      }
	    }));

	  Object.defineProperty(cue,
	    "text", extend({}, baseObj, {
	      get: function() {
	        return _text;
	      },
	      set: function(value) {
	        _text = "" + value;
	        this.hasBeenReset = true;
	      }
	    }));

	  Object.defineProperty(cue,
	    "region", extend({}, baseObj, {
	      get: function() {
	        return _region;
	      },
	      set: function(value) {
	        _region = value;
	        this.hasBeenReset = true;
	      }
	    }));

	  Object.defineProperty(cue,
	    "vertical", extend({}, baseObj, {
	      get: function() {
	        return _vertical;
	      },
	      set: function(value) {
	        var setting = findDirectionSetting(value);
	        // Have to check for false because the setting an be an empty string.
	        if (setting === false) {
	          throw new SyntaxError("An invalid or illegal string was specified.");
	        }
	        _vertical = setting;
	        this.hasBeenReset = true;
	      }
	    }));

	  Object.defineProperty(cue,
	    "snapToLines", extend({}, baseObj, {
	      get: function() {
	        return _snapToLines;
	      },
	      set: function(value) {
	        _snapToLines = !!value;
	        this.hasBeenReset = true;
	      }
	    }));

	  Object.defineProperty(cue,
	    "line", extend({}, baseObj, {
	      get: function() {
	        return _line;
	      },
	      set: function(value) {
	        if (typeof value !== "number" && value !== autoKeyword) {
	          throw new SyntaxError("An invalid number or illegal string was specified.");
	        }
	        _line = value;
	        this.hasBeenReset = true;
	      }
	    }));

	  Object.defineProperty(cue,
	    "lineAlign", extend({}, baseObj, {
	      get: function() {
	        return _lineAlign;
	      },
	      set: function(value) {
	        var setting = findAlignSetting(value);
	        if (!setting) {
	          throw new SyntaxError("An invalid or illegal string was specified.");
	        }
	        _lineAlign = setting;
	        this.hasBeenReset = true;
	      }
	    }));

	  Object.defineProperty(cue,
	    "position", extend({}, baseObj, {
	      get: function() {
	        return _position;
	      },
	      set: function(value) {
	        if (value < 0 || value > 100) {
	          throw new Error("Position must be between 0 and 100.");
	        }
	        _position = value;
	        this.hasBeenReset = true;
	      }
	    }));

	  Object.defineProperty(cue,
	    "positionAlign", extend({}, baseObj, {
	      get: function() {
	        return _positionAlign;
	      },
	      set: function(value) {
	        var setting = findAlignSetting(value);
	        if (!setting) {
	          throw new SyntaxError("An invalid or illegal string was specified.");
	        }
	        _positionAlign = setting;
	        this.hasBeenReset = true;
	      }
	    }));

	  Object.defineProperty(cue,
	    "size", extend({}, baseObj, {
	      get: function() {
	        return _size;
	      },
	      set: function(value) {
	        if (value < 0 || value > 100) {
	          throw new Error("Size must be between 0 and 100.");
	        }
	        _size = value;
	        this.hasBeenReset = true;
	      }
	    }));

	  Object.defineProperty(cue,
	    "align", extend({}, baseObj, {
	      get: function() {
	        return _align;
	      },
	      set: function(value) {
	        var setting = findAlignSetting(value);
	        if (!setting) {
	          throw new SyntaxError("An invalid or illegal string was specified.");
	        }
	        _align = setting;
	        this.hasBeenReset = true;
	      }
	    }));

	  /**
	   * Other <track> spec defined properties
	   */

	  // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state
	  cue.displayState = undefined;

	  if (isIE8) {
	    return cue;
	  }
	}

	/**
	 * VTTCue methods
	 */

	VTTCue.prototype.getCueAsHTML = function() {
	  // Assume WebVTT.convertCueToDOMTree is on the global.
	  return WebVTT.convertCueToDOMTree(window, this.text);
	};

	module.exports = VTTCue;


/***/ }),
/* 44 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013 vtt.js Contributors
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */

	var scrollSetting = {
	  "": true,
	  "up": true
	};

	function findScrollSetting(value) {
	  if (typeof value !== "string") {
	    return false;
	  }
	  var scroll = scrollSetting[value.toLowerCase()];
	  return scroll ? value.toLowerCase() : false;
	}

	function isValidPercentValue(value) {
	  return typeof value === "number" && (value >= 0 && value <= 100);
	}

	// VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface
	function VTTRegion() {
	  var _width = 100;
	  var _lines = 3;
	  var _regionAnchorX = 0;
	  var _regionAnchorY = 100;
	  var _viewportAnchorX = 0;
	  var _viewportAnchorY = 100;
	  var _scroll = "";

	  Object.defineProperties(this, {
	    "width": {
	      enumerable: true,
	      get: function() {
	        return _width;
	      },
	      set: function(value) {
	        if (!isValidPercentValue(value)) {
	          throw new Error("Width must be between 0 and 100.");
	        }
	        _width = value;
	      }
	    },
	    "lines": {
	      enumerable: true,
	      get: function() {
	        return _lines;
	      },
	      set: function(value) {
	        if (typeof value !== "number") {
	          throw new TypeError("Lines must be set to a number.");
	        }
	        _lines = value;
	      }
	    },
	    "regionAnchorY": {
	      enumerable: true,
	      get: function() {
	        return _regionAnchorY;
	      },
	      set: function(value) {
	        if (!isValidPercentValue(value)) {
	          throw new Error("RegionAnchorX must be between 0 and 100.");
	        }
	        _regionAnchorY = value;
	      }
	    },
	    "regionAnchorX": {
	      enumerable: true,
	      get: function() {
	        return _regionAnchorX;
	      },
	      set: function(value) {
	        if(!isValidPercentValue(value)) {
	          throw new Error("RegionAnchorY must be between 0 and 100.");
	        }
	        _regionAnchorX = value;
	      }
	    },
	    "viewportAnchorY": {
	      enumerable: true,
	      get: function() {
	        return _viewportAnchorY;
	      },
	      set: function(value) {
	        if (!isValidPercentValue(value)) {
	          throw new Error("ViewportAnchorY must be between 0 and 100.");
	        }
	        _viewportAnchorY = value;
	      }
	    },
	    "viewportAnchorX": {
	      enumerable: true,
	      get: function() {
	        return _viewportAnchorX;
	      },
	      set: function(value) {
	        if (!isValidPercentValue(value)) {
	          throw new Error("ViewportAnchorX must be between 0 and 100.");
	        }
	        _viewportAnchorX = value;
	      }
	    },
	    "scroll": {
	      enumerable: true,
	      get: function() {
	        return _scroll;
	      },
	      set: function(value) {
	        var setting = findScrollSetting(value);
	        // Have to check for false as an empty string is a legal value.
	        if (setting === false) {
	          throw new SyntaxError("An invalid or illegal string was specified.");
	        }
	        _scroll = setting;
	      }
	    }
	  });
	}

	module.exports = VTTRegion;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;

	var _window = __webpack_require__(41);

	var _window2 = _interopRequireDefault(_window);

	var _video = __webpack_require__(1);

	var _video2 = _interopRequireDefault(_video);

	var _dashjs = __webpack_require__(46);

	var _dashjs2 = _interopRequireDefault(_dashjs);

	var _setupAudioTracks = __webpack_require__(289);

	var _setupAudioTracks2 = _interopRequireDefault(_setupAudioTracks);

	var _setupTextTracks = __webpack_require__(290);

	var _setupTextTracks2 = _interopRequireDefault(_setupTextTracks);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * videojs-contrib-dash
	 *
	 * Use Dash.js to playback DASH content inside of Video.js via a SourceHandler
	 */
	var Html5DashJS = function () {
	  function Html5DashJS(source, tech, options) {
	    var _this = this;

	    _classCallCheck(this, Html5DashJS);

	    // Get options from tech if not provided for backwards compatibility
	    options = options || tech.options_;

	    this.player = (0, _video2['default'])(options.playerId);
	    this.player.dash = this.player.dash || {};

	    this.tech_ = tech;
	    this.el_ = tech.el();
	    this.elParent_ = this.el_.parentNode;

	    // Do nothing if the src is falsey
	    if (!source.src) {
	      return;
	    }

	    // While the manifest is loading and Dash.js has not finished initializing
	    // we must defer events and functions calls with isReady_ and then `triggerReady`
	    // again later once everything is setup
	    tech.isReady_ = false;

	    if (Html5DashJS.updateSourceData) {
	      _video2['default'].log.warn('updateSourceData has been deprecated.' + ' Please switch to using hook("updatesource", callback).');
	      source = Html5DashJS.updateSourceData(source);
	    }

	    // call updatesource hooks
	    Html5DashJS.hooks('updatesource').forEach(function (hook) {
	      source = hook(source);
	    });

	    var manifestSource = source.src;
	    this.keySystemOptions_ = Html5DashJS.buildDashJSProtData(source.keySystemOptions);

	    this.player.dash.mediaPlayer = _dashjs2['default'].MediaPlayer().create();

	    this.mediaPlayer_ = this.player.dash.mediaPlayer;

	    // Log MedaPlayer messages through video.js
	    if (Html5DashJS.useVideoJSDebug) {
	      _video2['default'].log.warn('useVideoJSDebug has been deprecated.' + ' Please switch to using hook("beforeinitialize", callback).');
	      Html5DashJS.useVideoJSDebug(this.mediaPlayer_);
	    }

	    if (Html5DashJS.beforeInitialize) {
	      _video2['default'].log.warn('beforeInitialize has been deprecated.' + ' Please switch to using hook("beforeinitialize", callback).');
	      Html5DashJS.beforeInitialize(this.player, this.mediaPlayer_);
	    }

	    Html5DashJS.hooks('beforeinitialize').forEach(function (hook) {
	      hook(_this.player, _this.mediaPlayer_);
	    });

	    // Must run controller before these two lines or else there is no
	    // element to bind to.
	    this.mediaPlayer_.initialize();

	    this.timeUpdated = function (event) {
	      _this.player.duration(_this.duration());
	      _this.tech_.trigger({ type: 'timeupdate', target: _this.tech_, manuallyTriggered: true });
	    };
	    // Retrigger a dash.js-specific error event as a player error
	    // See src/streaming/utils/ErrorHandler.js in dash.js code
	    // Handled with error (playback is stopped):
	    // - capabilityError
	    // - downloadError
	    // - manifestError
	    // - mediaSourceError
	    // - mediaKeySessionError
	    // Not handled:
	    // - timedTextError (video can still play)
	    // - mediaKeyMessageError (only fires under 'might not work' circumstances)
	    this.retriggerError_ = function (event) {
	      if (event.error === 'capability' && event.event === 'mediasource') {
	        // No support for MSE
	        _this.player.error({
	          code: 4,
	          message: 'The media cannot be played because it requires a feature ' + 'that your browser does not support.'
	        });
	      } else if (event.error === 'manifestError' && (event.event.id === 'createParser' || // Manifest type not supported
	      event.event.id === 'codec' || // Codec(s) not supported
	      event.event.id === 'nostreams' || // No streams available to stream
	      event.event.id === 'nostreamscomposed' || // Error creating Stream object
	      event.event.id === 'parse' || // syntax error parsing the manifest
	      event.event.id === 'multiplexedrep' // a stream has multiplexed audio+video
	      )) {
	        // These errors have useful error messages, so we forward it on
	        _this.player.error({ code: 4, message: event.event.message });
	      } else if (event.error === 'mediasource') {
	        // This error happens when dash.js fails to allocate a SourceBuffer
	        // OR the underlying video element throws a `MediaError`.
	        // If it's a buffer allocation fail, the message states which buffer
	        // (audio/video/text) failed allocation.
	        // If it's a `MediaError`, dash.js inspects the error object for
	        // additional information to append to the error type.
	        if (event.event.match('MEDIA_ERR_ABORTED')) {
	          _this.player.error({ code: 1, message: event.event });
	        } else if (event.event.match('MEDIA_ERR_NETWORK')) {
	          _this.player.error({ code: 2, message: event.event });
	        } else if (event.event.match('MEDIA_ERR_DECODE')) {
	          _this.player.error({ code: 3, message: event.event });
	        } else if (event.event.match('MEDIA_ERR_SRC_NOT_SUPPORTED')) {
	          _this.player.error({ code: 4, message: event.event });
	        } else if (event.event.match('MEDIA_ERR_ENCRYPTED')) {
	          _this.player.error({ code: 5, message: event.event });
	        } else if (event.event.match('UNKNOWN')) {
	          // We shouldn't ever end up here, since this would mean a
	          // `MediaError` thrown by the video element that doesn't comply
	          // with the W3C spec. But, since we should handle the error,
	          // throwing a MEDIA_ERR_SRC_NOT_SUPPORTED is probably the
	          // most reasonable thing to do.
	          _this.player.error({ code: 4, message: event.event });
	        } else {
	          // Buffer allocation error
	          _this.player.error({ code: 4, message: event.event });
	        }
	      } else if (event.error === 'capability' && event.event === 'encryptedmedia') {
	        // Browser doesn't support EME
	        _this.player.error({
	          code: 5,
	          message: 'The media cannot be played because it requires encryption ' + 'features that your browser does not support.'
	        });
	      } else if (event.error === 'key_session') {
	        // This block handles pretty much all errors thrown by the
	        // encryption subsystem
	        _this.player.error({
	          code: 5,
	          message: event.event
	        });
	      } else if (event.error === 'download') {
	        _this.player.error({
	          code: 2,
	          message: 'The media playback was aborted because too many consecutive ' + 'download errors occurred.'
	        });
	      } else {
	        // ignore the error
	        return;
	      }

	      // only reset the dash player in 10ms async, so that the rest of the
	      // calling function finishes
	      setTimeout(function () {
	        _this.mediaPlayer_.reset();
	      }, 10);
	    };

	    this.mediaPlayer_.on(_dashjs2['default'].MediaPlayer.events.ERROR, this.retriggerError_);
	    this.mediaPlayer_.on(_dashjs2['default'].MediaPlayer.events.PLAYBACK_TIME_UPDATED, this.timeUpdated);
	    // Apply all dash options that are set
	    if (options.dash) {
	      Object.keys(options.dash).forEach(function (key) {
	        var _mediaPlayer_;

	        var dashOptionsKey = 'set' + key.charAt(0).toUpperCase() + key.slice(1);
	        var value = options.dash[key];

	        if (_this.mediaPlayer_.hasOwnProperty(dashOptionsKey)) {
	          // Providing a key without `set` prefix is now deprecated.
	          _video2['default'].log.warn('Using dash options in videojs-contrib-dash without the set prefix ' + ('has been deprecated. Change \'' + key + '\' to \'' + dashOptionsKey + '\''));

	          // Set key so it will still work
	          key = dashOptionsKey;
	        }

	        if (!_this.mediaPlayer_.hasOwnProperty(key)) {
	          _video2['default'].log.warn('Warning: dash configuration option unrecognized: ' + key);

	          return;
	        }

	        // Guarantee `value` is an array
	        if (!Array.isArray(value)) {
	          value = [value];
	        }

	        (_mediaPlayer_ = _this.mediaPlayer_)[key].apply(_mediaPlayer_, value);
	      });
	    }

	    this.mediaPlayer_.attachView(this.el_);

	    // Set autoplay to be the videojs autoplay setting, 
	    // making sure that any truthy values are considered true
	    this.mediaPlayer_.setAutoPlay(!!this.player.autoplay());

	    // Setup audio tracks
	    _setupAudioTracks2['default'].call(null, this.player, tech);

	    // Setup text tracks
	    _setupTextTracks2['default'].call(null, this.player, tech, options);

	    // Attach the source with any protection data
	    this.mediaPlayer_.setProtectionData(this.keySystemOptions_);
	    this.mediaPlayer_.attachSource(manifestSource);
	    this.mediaPlayer_.attachTTMLRenderingDiv(this.player.textTrackDisplay.el_);

	    this.timeOffset = 0.0;
	    this.pastSeekEnd = 0.0;
	    var that = this;
	    this.mediaPlayer_.on("manifestLoaded", function (e) {
	      // If we get a manifest update for each segment then we
	      // update timeOffset (seekable range) and reset pastSeekEnd
	      var tempPastSeekEnd = that.pastSeekEnd;
	      that.pastSeekEnd = 0.0;
	      if (e.data.type === "dynamic") {
	        // this.timeOffset += e.data.minBufferTime;
	        that.timeOffset += tempPastSeekEnd;
	        if (that.pastSeekEndInterval) {
	          clearInterval(that.pastSeekEndInterval);
	        }
	        that.pastSeekEndInterval = setInterval(function () {
	          that.pastSeekEnd += 0.03;

	          // For number based live manifests we might not get frequent manifest updates
	          // so simulate this whenever pastSeekEnd > minBufferTime
	          if (that.pastSeekEnd > e.data.minBufferTime) {
	            that.timeOffset += that.pastSeekEnd;
	            that.pastSeekEnd = 0.0;
	          }
	        }, 30);
	      }
	    });

	    this.tech_.triggerReady();
	  }

	  /*
	   * Iterate over the `keySystemOptions` array and convert each object into
	   * the type of object Dash.js expects in the `protData` argument.
	   *
	   * Also rename 'licenseUrl' property in the options to an 'serverURL' property
	   */


	  Html5DashJS.buildDashJSProtData = function buildDashJSProtData(keySystemOptions) {
	    var output = {};

	    if (!keySystemOptions || !Array.isArray(keySystemOptions)) {
	      return null;
	    }

	    for (var i = 0; i < keySystemOptions.length; i++) {
	      var keySystem = keySystemOptions[i];
	      var options = _video2['default'].mergeOptions({}, keySystem.options);

	      if (options.licenseUrl) {
	        options.serverURL = options.licenseUrl;
	        delete options.licenseUrl;
	      }

	      output[keySystem.name] = options;
	    }

	    return output;
	  };

	  Html5DashJS.prototype.dispose = function dispose() {
	    if (this.mediaPlayer_) {
	      this.mediaPlayer_.off(_dashjs2['default'].MediaPlayer.events.PLAYBACK_TIME_UPDATED, this.timeUpdated);
	      this.mediaPlayer_.off(_dashjs2['default'].MediaPlayer.events.ERROR, this.retriggerError_);
	      this.mediaPlayer_.reset();
	    }
	    if (this.pastSeekEndInterval) {
	      clearInterval(this.pastSeekEndInterval);
	    }

	    if (this.player.dash) {
	      delete this.player.dash;
	    }
	  };

	  Html5DashJS.prototype.duration = function duration() {
	    var duration = this.mediaPlayer_.duration();
	    if (this.mediaPlayer_.isDynamic()) {
	      return -duration;
	    }
	    return duration;
	  };

	  Html5DashJS.prototype.currentTime = function currentTime() {
	    var time = this.mediaPlayer_.time();
	    var result = time + this.timeOffset + this.pastSeekEnd;
	    return result;
	  };

	  Html5DashJS.prototype.setCurrentTime = function setCurrentTime(seekTime) {
	    var time = seekTime - this.timeOffset - this.pastSeekEnd;
	    this.mediaPlayer_.seek(time);
	  };

	  Html5DashJS.prototype.seekable = function seekable() {
	    var _this2 = this;

	    var duration = this.mediaPlayer_.duration();
	    return { length: 1, start: function start() {
	        return _this2.timeOffset;
	      }, end: function end() {
	        return _this2.timeOffset + duration;
	      } };
	  };

	  /**
	   * Get a list of hooks for a specific lifecycle
	   *
	   * @param {string} type the lifecycle to get hooks from
	   * @param {Function=|Function[]=} hook Optionally add a hook tothe lifecycle
	   * @return {Array} an array of hooks or epty if none
	   * @method hooks
	   */


	  Html5DashJS.hooks = function hooks(type, hook) {
	    Html5DashJS.hooks_[type] = Html5DashJS.hooks_[type] || [];

	    if (hook) {
	      Html5DashJS.hooks_[type] = Html5DashJS.hooks_[type].concat(hook);
	    }

	    return Html5DashJS.hooks_[type];
	  };

	  /**
	   * Add a function hook to a specific dash lifecycle
	   *
	   * @param {string} type the lifecycle to hook the function to
	   * @param {Function|Function[]} hook the function or array of functions to attach
	   * @method hook
	   */


	  Html5DashJS.hook = function hook(type, _hook) {
	    Html5DashJS.hooks(type, _hook);
	  };

	  /**
	   * Remove a hook from a specific dash lifecycle.
	   *
	   * @param {string} type the lifecycle that the function hooked to
	   * @param {Function} hook The hooked function to remove
	   * @return {boolean} True if the function was removed, false if not found
	   * @method removeHook
	   */


	  Html5DashJS.removeHook = function removeHook(type, hook) {
	    var index = Html5DashJS.hooks(type).indexOf(hook);

	    if (index === -1) {
	      return false;
	    }

	    Html5DashJS.hooks_[type] = Html5DashJS.hooks_[type].slice();
	    Html5DashJS.hooks_[type].splice(index, 1);

	    return true;
	  };

	  return Html5DashJS;
	}();

	Html5DashJS.hooks_ = {};

	var canHandleKeySystems = function canHandleKeySystems(source) {
	  // copy the source
	  source = JSON.parse(JSON.stringify(source));

	  if (Html5DashJS.updateSourceData) {
	    _video2['default'].log.warn('updateSourceData has been deprecated.' + ' Please switch to using hook("updatesource", callback).');
	    source = Html5DashJS.updateSourceData(source);
	  }

	  // call updatesource hooks
	  Html5DashJS.hooks('updatesource').forEach(function (hook) {
	    source = hook(source);
	  });

	  var videoEl = document.createElement('video');
	  if (source.keySystemOptions && !(navigator.requestMediaKeySystemAccess ||
	  // IE11 Win 8.1
	  videoEl.msSetMediaKeys)) {
	    return false;
	  }

	  return true;
	};

	_video2['default'].DashSourceHandler = function () {
	  return {
	    canHandleSource: function canHandleSource(source) {
	      var dashExtRE = /\.mpd/i;

	      if (!canHandleKeySystems(source)) {
	        return '';
	      }

	      if (_video2['default'].DashSourceHandler.canPlayType(source.type)) {
	        return 'probably';
	      } else if (dashExtRE.test(source.src)) {
	        return 'maybe';
	      } else {
	        return '';
	      }
	    },

	    handleSource: function handleSource(source, tech, options) {
	      return new Html5DashJS(source, tech, options);
	    },

	    canPlayType: function canPlayType(type) {
	      return _video2['default'].DashSourceHandler.canPlayType(type);
	    }
	  };
	};

	_video2['default'].DashSourceHandler.canPlayType = function (type) {
	  var dashTypeRE = /^application\/dash\+xml/i;
	  if (dashTypeRE.test(type)) {
	    return 'probably';
	  }

	  return '';
	};

	// Only add the SourceHandler if the browser supports MediaSourceExtensions
	if (!!_window2['default'].MediaSource) {
	  _video2['default'].getTech('Html5').registerSourceHandler(_video2['default'].DashSourceHandler(), 0);
	}

	_video2['default'].Html5DashJS = Html5DashJS;
	exports['default'] = Html5DashJS;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _index_mediaplayerOnly=__webpack_require__(47);var _srcStreamingMetricsMetricsReporting=__webpack_require__(240);var _srcStreamingMetricsMetricsReporting2=_interopRequireDefault(_srcStreamingMetricsMetricsReporting);var _srcStreamingProtectionProtection=__webpack_require__(263);var _srcStreamingProtectionProtection2=_interopRequireDefault(_srcStreamingProtectionProtection);var _srcStreamingMediaPlayerFactory=__webpack_require__(288);var _srcStreamingMediaPlayerFactory2=_interopRequireDefault(_srcStreamingMediaPlayerFactory);var _srcCoreDebug=__webpack_require__(60);var _srcCoreDebug2=_interopRequireDefault(_srcCoreDebug);dashjs.Protection = _srcStreamingProtectionProtection2['default'];dashjs.MetricsReporting = _srcStreamingMetricsMetricsReporting2['default'];dashjs.MediaPlayerFactory = _srcStreamingMediaPlayerFactory2['default'];dashjs.Debug = _srcCoreDebug2['default'];exports['default'] = dashjs;exports.MediaPlayer = _index_mediaplayerOnly.MediaPlayer;exports.Protection = _srcStreamingProtectionProtection2['default'];exports.MetricsReporting = _srcStreamingMetricsMetricsReporting2['default'];exports.MediaPlayerFactory = _srcStreamingMediaPlayerFactory2['default'];exports.Debug = _srcCoreDebug2['default'];
	//# sourceMappingURL=index.js.map


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _srcStreamingMediaPlayer=__webpack_require__(48);var _srcStreamingMediaPlayer2=_interopRequireDefault(_srcStreamingMediaPlayer);var _srcCoreFactoryMaker=__webpack_require__(55);var _srcCoreFactoryMaker2=_interopRequireDefault(_srcCoreFactoryMaker);var _srcCoreDebug=__webpack_require__(60);var _srcCoreDebug2=_interopRequireDefault(_srcCoreDebug);var _srcCoreVersion=__webpack_require__(224); // Shove both of these into the global scope
	var context=typeof window !== 'undefined' && window || global;var dashjs=context.dashjs;if(!dashjs){dashjs = context.dashjs = {};}dashjs.MediaPlayer = _srcStreamingMediaPlayer2['default'];dashjs.FactoryMaker = _srcCoreFactoryMaker2['default'];dashjs.Debug = _srcCoreDebug2['default'];dashjs.Version = (0,_srcCoreVersion.getVersionString)();exports['default'] = dashjs;exports.MediaPlayer = _srcStreamingMediaPlayer2['default'];exports.FactoryMaker = _srcCoreFactoryMaker2['default'];exports.Debug = _srcCoreDebug2['default'];
	//# sourceMappingURL=index_mediaplayerOnly.js.map

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _constantsMetricsConstants=__webpack_require__(50);var _constantsMetricsConstants2=_interopRequireDefault(_constantsMetricsConstants);var _controllersPlaybackController=__webpack_require__(51);var _controllersPlaybackController2=_interopRequireDefault(_controllersPlaybackController);var _controllersStreamController=__webpack_require__(138);var _controllersStreamController2=_interopRequireDefault(_controllersStreamController);var _controllersMediaController=__webpack_require__(136);var _controllersMediaController2=_interopRequireDefault(_controllersMediaController);var _controllersBaseURLController=__webpack_require__(178);var _controllersBaseURLController2=_interopRequireDefault(_controllersBaseURLController);var _ManifestLoader=__webpack_require__(188);var _ManifestLoader2=_interopRequireDefault(_ManifestLoader);var _utilsErrorHandler=__webpack_require__(204);var _utilsErrorHandler2=_interopRequireDefault(_utilsErrorHandler);var _utilsCapabilities=__webpack_require__(205);var _utilsCapabilities2=_interopRequireDefault(_utilsCapabilities);var _textTextTracks=__webpack_require__(74);var _textTextTracks2=_interopRequireDefault(_textTextTracks);var _utilsRequestModifier=__webpack_require__(160);var _utilsRequestModifier2=_interopRequireDefault(_utilsRequestModifier);var _textTextController=__webpack_require__(63);var _textTextController2=_interopRequireDefault(_textTextController);var _modelsURIFragmentModel=__webpack_require__(206);var _modelsURIFragmentModel2=_interopRequireDefault(_modelsURIFragmentModel);var _modelsManifestModel=__webpack_require__(208);var _modelsManifestModel2=_interopRequireDefault(_modelsManifestModel);var _modelsMediaPlayerModel=__webpack_require__(209);var _modelsMediaPlayerModel2=_interopRequireDefault(_modelsMediaPlayerModel);var _modelsMetricsModel=__webpack_require__(211);var _modelsMetricsModel2=_interopRequireDefault(_modelsMetricsModel);var _controllersAbrController=__webpack_require__(122);var _controllersAbrController2=_interopRequireDefault(_controllersAbrController);var _modelsVideoModel=__webpack_require__(222);var _modelsVideoModel2=_interopRequireDefault(_modelsVideoModel);var _utilsDOMStorage=__webpack_require__(223);var _utilsDOMStorage2=_interopRequireDefault(_utilsDOMStorage);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _MediaPlayerEvents=__webpack_require__(176);var _MediaPlayerEvents2=_interopRequireDefault(_MediaPlayerEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreVersion=__webpack_require__(224); //Dash
	var _dashDashAdapter=__webpack_require__(225);var _dashDashAdapter2=_interopRequireDefault(_dashDashAdapter);var _dashModelsDashManifestModel=__webpack_require__(231);var _dashModelsDashManifestModel2=_interopRequireDefault(_dashModelsDashManifestModel);var _dashDashMetrics=__webpack_require__(236);var _dashDashMetrics2=_interopRequireDefault(_dashDashMetrics);var _dashUtilsTimelineConverter=__webpack_require__(238);var _dashUtilsTimelineConverter2=_interopRequireDefault(_dashUtilsTimelineConverter);var _voMetricsHTTPRequest=__webpack_require__(65);var _externalsBase64=__webpack_require__(239);var _externalsBase642=_interopRequireDefault(_externalsBase64);var _codemIsoboxer=__webpack_require__(70);var _codemIsoboxer2=_interopRequireDefault(_codemIsoboxer);var _voDashJSError=__webpack_require__(62);var _voDashJSError2=_interopRequireDefault(_voDashJSError);var _utilsSupervisorTools=__webpack_require__(73); /**
	 * @module MediaPlayer
	 * @description The MediaPlayer is the primary dash.js Module and a Facade to build your player around.
	 * It will allow you access to all the important dash.js properties/methods via the public API and all the
	 * events to build a robust DASH media player.
	 */function MediaPlayer(){var STREAMING_NOT_INITIALIZED_ERROR='You must first call initialize() and set a source before calling this method';var PLAYBACK_NOT_INITIALIZED_ERROR='You must first call initialize() and set a valid source and view before calling this method';var ELEMENT_NOT_ATTACHED_ERROR='You must first call attachView() to set the video element before calling this method';var SOURCE_NOT_ATTACHED_ERROR='You must first call attachSource() with a valid source before calling this method';var MEDIA_PLAYER_NOT_INITIALIZED_ERROR='MediaPlayer not initialized!';var PLAYBACK_LOW_LATENCY_MIN_DRIFT_BAD_ARGUMENT_ERROR='Playback minimum drift has an invalid value! Use a number from 0 to 0.5';var PLAYBACK_LOW_LATENCY_MAX_DRIFT_BAD_ARGUMENT_ERROR='Playback maximum drift has an invalid value! Use a number greater or equal to 0';var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var debug=(0,_coreDebug2['default'])(context).getInstance();var instance=undefined,logger=undefined,source=undefined,protectionData=undefined,mediaPlayerInitialized=undefined,streamingInitialized=undefined,playbackInitialized=undefined,autoPlay=undefined,abrController=undefined,timelineConverter=undefined,mediaController=undefined,protectionController=undefined,metricsReportingController=undefined,mssHandler=undefined,adapter=undefined,metricsModel=undefined,mediaPlayerModel=undefined,errHandler=undefined,capabilities=undefined,streamController=undefined,playbackController=undefined,dashMetrics=undefined,dashManifestModel=undefined,manifestModel=undefined,videoModel=undefined,textController=undefined,uriFragmentModel=undefined,domStorage=undefined; /*
	    ---------------------------------------------------------------------------

	        INIT FUNCTIONS

	    ---------------------------------------------------------------------------
	    */function setup(){logger = debug.getLogger(instance);mediaPlayerInitialized = false;playbackInitialized = false;streamingInitialized = false;autoPlay = true;protectionController = null;protectionData = null;adapter = null;_coreEventsEvents2['default'].extend(_MediaPlayerEvents2['default']);mediaPlayerModel = (0,_modelsMediaPlayerModel2['default'])(context).getInstance();videoModel = (0,_modelsVideoModel2['default'])(context).getInstance();uriFragmentModel = (0,_modelsURIFragmentModel2['default'])(context).getInstance();} /**
	     * Configure media player with customs controllers. Helpful for tests
	     *
	     * @param {object=} config controllers configuration
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setConfig(config){if(!config){return;}if(config.capabilities){capabilities = config.capabilities;}if(config.streamController){streamController = config.streamController;}if(config.playbackController){playbackController = config.playbackController;}if(config.mediaPlayerModel){mediaPlayerModel = config.mediaPlayerModel;}if(config.abrController){abrController = config.abrController;}if(config.mediaController){mediaController = config.mediaController;}} /**
	     * Upon creating the MediaPlayer you must call initialize before you call anything else.
	     * There is one exception to this rule. It is crucial to call {@link module:MediaPlayer#extend extend()}
	     * with all your extensions prior to calling initialize.
	     *
	     * ALL arguments are optional and there are individual methods to set each argument later on.
	     * The args in this method are just for convenience and should only be used for a simple player setup.
	     *
	     * @param {HTML5MediaElement=} view - Optional arg to set the video element. {@link module:MediaPlayer#attachView attachView()}
	     * @param {string=} source - Optional arg to set the media source. {@link module:MediaPlayer#attachSource attachSource()}
	     * @param {boolean=} AutoPlay - Optional arg to set auto play. {@link module:MediaPlayer#setAutoPlay setAutoPlay()}
	     * @see {@link module:MediaPlayer#attachView attachView()}
	     * @see {@link module:MediaPlayer#attachSource attachSource()}
	     * @see {@link module:MediaPlayer#setAutoPlay setAutoPlay()}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function initialize(view,source,AutoPlay){if(!capabilities){capabilities = (0,_utilsCapabilities2['default'])(context).getInstance();}errHandler = (0,_utilsErrorHandler2['default'])(context).getInstance();if(!capabilities.supportsMediaSource()){errHandler.capabilityError('mediasource');errHandler.error(new _voDashJSError2['default'](_coreErrorsErrors2['default'].CAPABILITY_MEDIASOURCE_ERROR_CODE,_coreErrorsErrors2['default'].CAPABILITY_MEDIASOURCE_ERROR_MESSAGE));return;}if(mediaPlayerInitialized)return;mediaPlayerInitialized = true; // init some controllers and models
	timelineConverter = (0,_dashUtilsTimelineConverter2['default'])(context).getInstance();if(!abrController){abrController = (0,_controllersAbrController2['default'])(context).getInstance();}if(!playbackController){playbackController = (0,_controllersPlaybackController2['default'])(context).getInstance();}if(!mediaController){mediaController = (0,_controllersMediaController2['default'])(context).getInstance();}adapter = (0,_dashDashAdapter2['default'])(context).getInstance();dashManifestModel = (0,_dashModelsDashManifestModel2['default'])(context).getInstance({mediaController:mediaController,timelineConverter:timelineConverter,adapter:adapter,errHandler:errHandler});manifestModel = (0,_modelsManifestModel2['default'])(context).getInstance();dashMetrics = (0,_dashDashMetrics2['default'])(context).getInstance({manifestModel:manifestModel,dashManifestModel:dashManifestModel});metricsModel = (0,_modelsMetricsModel2['default'])(context).getInstance();textController = (0,_textTextController2['default'])(context).getInstance();domStorage = (0,_utilsDOMStorage2['default'])(context).getInstance({mediaPlayerModel:mediaPlayerModel});adapter.setConfig({dashManifestModel:dashManifestModel});metricsModel.setConfig({adapter:adapter});restoreDefaultUTCTimingSources();setAutoPlay(AutoPlay !== undefined?AutoPlay:true);if(view){attachView(view);}if(source){attachSource(source);}logger.info('[dash.js ' + getVersion() + '] ' + 'MediaPlayer has been initialized');} /**
	     * Sets the MPD source and the video element to null. You can also reset the MediaPlayer by
	     * calling attachSource with a new source file.
	     *
	     * Calling this method is all that is necessary to destroy a MediaPlayer instance.
	     *
	     * @memberof module:MediaPlayer
	     * @instance
	     */function reset(){attachSource(null);attachView(null);protectionData = null;if(protectionController){protectionController.reset();protectionController = null;}if(metricsReportingController){metricsReportingController.reset();metricsReportingController = null;}} /**
	     * The ready state of the MediaPlayer based on both the video element and MPD source being defined.
	     *
	     * @returns {boolean} The current ready state of the MediaPlayer
	     * @see {@link module:MediaPlayer#attachView attachView()}
	     * @see {@link module:MediaPlayer#attachSource attachSource()}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function isReady(){return !!source && !!videoModel.getElement();} /**
	     * Use the on method to listen for public events found in MediaPlayer.events. {@link MediaPlayerEvents}
	     *
	     * @param {string} type - {@link MediaPlayerEvents}
	     * @param {Function} listener - callback method when the event fires.
	     * @param {Object} scope - context of the listener so it can be removed properly.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function on(type,listener,scope){eventBus.on(type,listener,scope);} /**
	     * Use the off method to remove listeners for public events found in MediaPlayer.events. {@link MediaPlayerEvents}
	     *
	     * @param {string} type - {@link MediaPlayerEvents}
	     * @param {Function} listener - callback method when the event fires.
	     * @param {Object} scope - context of the listener so it can be removed properly.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function off(type,listener,scope){eventBus.off(type,listener,scope);} /**
	     * Current version of Dash.js
	     * @returns {string} the current dash.js version string.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getVersion(){return (0,_coreVersion.getVersionString)();} /**
	     * Use this method to access the dash.js logging class.
	     *
	     * @returns {Debug}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getDebug(){return debug;} /*
	    ---------------------------------------------------------------------------

	        PLAYBACK FUNCTIONS

	    ---------------------------------------------------------------------------
	    */ /**
	     * Causes the player to begin streaming the media as set by the {@link module:MediaPlayer#attachSource attachSource()}
	     * method in preparation for playing. It specifically does not require a view to be attached with {@link module:MediaPlayer#attachSource attachView()} to begin preloading.
	     * When a view is attached after preloading, the buffered data is transferred to the attached mediaSource buffers.
	     *
	     * @see {@link module:MediaPlayer#attachSource attachSource()}
	     * @see {@link module:MediaPlayer#attachView attachView()}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function preload(){if(videoModel.getElement() || streamingInitialized){return false;}if(source){initializePlayback();}else {throw SOURCE_NOT_ATTACHED_ERROR;}} /**
	     * The play method initiates playback of the media defined by the {@link module:MediaPlayer#attachSource attachSource()} method.
	     * This method will call play on the native Video Element.
	     *
	     * @see {@link module:MediaPlayer#attachSource attachSource()}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function play(){if(!playbackInitialized){throw PLAYBACK_NOT_INITIALIZED_ERROR;}if(!autoPlay || isPaused() && playbackInitialized){playbackController.play();}} /**
	     * This method will call pause on the native Video Element.
	     *
	     * @memberof module:MediaPlayer
	     * @instance
	     */function pause(){if(!playbackInitialized){throw PLAYBACK_NOT_INITIALIZED_ERROR;}playbackController.pause();} /**
	     * Returns a Boolean that indicates whether the Video Element is paused.
	     * @return {boolean}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function isPaused(){if(!playbackInitialized){throw PLAYBACK_NOT_INITIALIZED_ERROR;}return playbackController.isPaused();} /**
	     * Sets the currentTime property of the attached video element.  If it is a live stream with a
	     * timeShiftBufferLength, then the DVR window offset will be automatically calculated.
	     *
	     * @param {number} value - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected
	     * @see {@link module:MediaPlayer#getDVRSeekOffset getDVRSeekOffset()}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function seek(value){if(!playbackInitialized){throw PLAYBACK_NOT_INITIALIZED_ERROR;}(0,_utilsSupervisorTools.checkParameterType)(value,'number');if(isNaN(value)){throw _constantsConstants2['default'].BAD_ARGUMENT_ERROR;}var s=playbackController.getIsDynamic()?getDVRSeekOffset(value):value;playbackController.seek(s);} /**
	     * Returns a Boolean that indicates whether the media is in the process of seeking to a new position.
	     * @return {boolean}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function isSeeking(){if(!playbackInitialized){throw PLAYBACK_NOT_INITIALIZED_ERROR;}return playbackController.isSeeking();} /**
	     * Returns a Boolean that indicates whether the media is in the process of dynamic.
	     * @return {boolean}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function isDynamic(){if(!playbackInitialized){throw PLAYBACK_NOT_INITIALIZED_ERROR;}return playbackController.getIsDynamic();} /**
	     * Use this method to set the native Video Element's playback rate.
	     * @param {number} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setPlaybackRate(value){getVideoElement().playbackRate = value;} /**
	     * Returns the current playback rate.
	     * @returns {number}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getPlaybackRate(){return getVideoElement().playbackRate;} /**
	     * Use this method to set the maximum catch up rate, as a percentage, for low latency live streams. In low latency mode,
	     * when measured latency is higher/lower than the target one ({@link module:MediaPlayer#setLiveDelay setLiveDelay()}),
	     * dash.js increases/decreases playback rate respectively up to (+/-) the percentage defined with this method until target is reached.
	     *
	     * Valid values for catch up rate are in range 0-0.5 (0-50%). Set it to 0 to turn off live catch up feature.
	     *
	     * Note: Catch-up mechanism is only applied when playing low latency live streams.
	     *
	     * @param {number} value Percentage in which playback rate is increased/decreased when live catch up mechanism is activated.
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#setLiveDelay setLiveDelay()}
	     * @default {number} 0.5
	     * @instance
	     */function setCatchUpPlaybackRate(value){mediaPlayerModel.setCatchUpPlaybackRate(value);} /**
	     * Returns the current catchup playback rate.
	     * @returns {number}
	     * @see {@link module:MediaPlayer#setCatchUpPlaybackRate setCatchUpPlaybackRate()}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getCatchUpPlaybackRate(){return mediaPlayerModel.getCatchUpPlaybackRate();} /**
	     * Use this method to set the minimum latency deviation allowed before activating catch-up mechanism. In low latency mode,
	     * when the difference between the measured latency and the target one ({@link module:MediaPlayer#setLiveDelay setLiveDelay()}),
	     * as an absolute number, is higher than the one sets with this method, then dash.js increases/decreases
	     * playback rate until target latency is reached.
	     *
	     * LowLatencyMinDrift should be provided in seconds, and it uses values between 0.0 and 0.5.
	     *
	     * Note: Catch-up mechanism is only applied when playing low latency live streams.
	     *
	     * @param {number} value Maximum difference between measured latency and the target one before applying playback rate modifications.
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#setLiveDelay setLiveDelay()}
	     * @default {number} 0.05
	     * @instance
	     */function setLowLatencyMinDrift(value){if(typeof value !== 'number' || isNaN(value) || value < 0.0 || value > 0.50){throw PLAYBACK_LOW_LATENCY_MIN_DRIFT_BAD_ARGUMENT_ERROR;}mediaPlayerModel.setLowLatencyMinDrift(value);} /**
	     * Returns the current latency minimum allowed drift.
	     * @returns {number}
	     * @see {@link module:MediaPlayer#setLowLatencyMinDrift setLowLatencyMinDrift()}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getLowLatencyMinDrift(){return mediaPlayerModel.getLowLatencyMinDrift();} /**
	     * Use this method to set the maximum latency deviation allowed before dash.js to do a seeking to live position. In low latency mode,
	     * when the difference between the measured latency and the target one ({@link module:MediaPlayer#setLiveDelay setLiveDelay()}),
	     * as an absolute number, is higher than the one sets with this method, then dash.js does a seek to live edge position minus
	     * the target live delay.
	     *
	     * LowLatencyMaxDriftBeforeSeeking should be provided in seconds. If 0, then seeking operations won't be used for
	     * fixing latency deviations.
	     *
	     * Note: Catch-up mechanism is only applied when playing low latency live streams.
	     *
	     * @param {number} value Maximum difference between measured latency and the target one before using seek to
	     * fix drastically live latency deviations.
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#setLiveDelay setLiveDelay()}
	     * @default {number} 0
	     * @instance
	     */function setLowLatencyMaxDriftBeforeSeeking(value){if(typeof value !== 'number' || isNaN(value) || value < 0){throw PLAYBACK_LOW_LATENCY_MAX_DRIFT_BAD_ARGUMENT_ERROR;}mediaPlayerModel.setLowLatencyMaxDriftBeforeSeeking(value);} /**
	     * Returns the maximum latency drift before applying a seek operation to reduce the latency.
	     * @returns {number}
	     * @see {@link module:MediaPlayer#setLowLatencyMaxDriftBeforeSeeking setLowLatencyMaxDriftBeforeSeeking()}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getLowLatencyMaxDriftBeforeSeeking(){return mediaPlayerModel.getLowLatencyMaxDriftBeforeSeeking();} /**
	     * Use this method to set the native Video Element's muted state. Takes a Boolean that determines whether audio is muted. true if the audio is muted and false otherwise.
	     * @param {boolean} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setMute(value){(0,_utilsSupervisorTools.checkParameterType)(value,'boolean');getVideoElement().muted = value;} /**
	     * A Boolean that determines whether audio is muted.
	     * @returns {boolean}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function isMuted(){return getVideoElement().muted;} /**
	     * A double indicating the audio volume, from 0.0 (silent) to 1.0 (loudest).
	     * @param {number} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setVolume(value){if(typeof value !== 'number' || isNaN(value) || value < 0.0 || value > 1.0){throw _constantsConstants2['default'].BAD_ARGUMENT_ERROR;}getVideoElement().volume = value;} /**
	     * Returns the current audio volume, from 0.0 (silent) to 1.0 (loudest).
	     * @returns {number}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getVolume(){return getVideoElement().volume;} /**
	     * The length of the buffer for a given media type, in seconds. Valid media
	     * types are "video", "audio" and "fragmentedText". If no type is passed
	     * in, then the minimum of video, audio and fragmentedText buffer length is
	     * returned. NaN is returned if an invalid type is requested, the
	     * presentation does not contain that type, or if no arguments are passed
	     * and the presentation does not include any adaption sets of valid media
	     * type.
	     *
	     * @param {string} type - the media type of the buffer
	     * @returns {number} The length of the buffer for the given media type, in
	     *  seconds, or NaN
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getBufferLength(type){var types=[_constantsConstants2['default'].VIDEO,_constantsConstants2['default'].AUDIO,_constantsConstants2['default'].FRAGMENTED_TEXT];if(!type){var buffer=types.map(function(t){return getTracksFor(t).length > 0?getDashMetrics().getCurrentBufferLevel(getMetricsFor(t)):Number.MAX_VALUE;}).reduce(function(p,c){return Math.min(p,c);});return buffer === Number.MAX_VALUE?NaN:buffer;}else {if(types.indexOf(type) !== -1){var buffer=getDashMetrics().getCurrentBufferLevel(getMetricsFor(type));return buffer?buffer:NaN;}else {logger.warn('getBufferLength requested for invalid type');return NaN;}}} /**
	     * The timeShiftBufferLength (DVR Window), in seconds.
	     *
	     * @returns {number} The window of allowable play time behind the live point of a live stream.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getDVRWindowSize(){var metric=getDVRInfoMetric();if(!metric){return 0;}return metric.manifestInfo.DVRWindowSize;} /**
	     * This method should only be used with a live stream that has a valid timeShiftBufferLength (DVR Window).
	     * NOTE - If you do not need the raw offset value (i.e. media analytics, tracking, etc) consider using the {@link module:MediaPlayer#seek seek()} method
	     * which will calculate this value for you and set the video element's currentTime property all in one simple call.
	     *
	     * @param {number} value - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected.
	     * @returns {number} A value that is relative the available range within the timeShiftBufferLength (DVR Window).
	     * @see {@link module:MediaPlayer#seek seek()}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getDVRSeekOffset(value){var metric=getDVRInfoMetric();if(!metric){return 0;}var liveDelay=playbackController.getLiveDelay();var val=metric.range.start + value;if(val > metric.range.end - liveDelay){val = metric.range.end - liveDelay;}return val;} /**
	     * Current time of the playhead, in seconds.
	     *
	     * If called with no arguments then the returned time value is time elapsed since the start point of the first stream, or if it is a live stream, then the time will be based on the return value of the {@link module:MediaPlayer#duration duration()} method.
	     * However if a stream ID is supplied then time is relative to the start of that stream, or is null if there is no such stream id in the manifest.
	     *
	     * @param {string} streamId - The ID of a stream that the returned playhead time must be relative to the start of. If undefined, then playhead time is relative to the first stream.
	     * @returns {number} The current playhead time of the media, or null.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function time(streamId){if(!playbackInitialized){throw PLAYBACK_NOT_INITIALIZED_ERROR;}var t=getVideoElement().currentTime;if(streamId !== undefined){t = streamController.getTimeRelativeToStreamId(t,streamId);}else if(playbackController.getIsDynamic()){var metric=getDVRInfoMetric();t = metric === null?0:duration() - (metric.range.end - metric.time);}return t;} /**
	     * Duration of the media's playback, in seconds.
	     *
	     * @returns {number} The current duration of the media.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function duration(){if(!playbackInitialized){throw PLAYBACK_NOT_INITIALIZED_ERROR;}var d=getVideoElement().duration;if(playbackController.getIsDynamic()){var metric=getDVRInfoMetric();var range=undefined;if(!metric){return 0;}range = metric.range.end - metric.range.start;d = range < metric.manifestInfo.DVRWindowSize?range:metric.manifestInfo.DVRWindowSize;}return d;} /**
	     * Use this method to get the current playhead time as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.
	     * Note - this property only has meaning for live streams. If called before play() has begun, it will return a value of NaN.
	     *
	     * @returns {number} The current playhead time as UTC timestamp.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function timeAsUTC(){if(!playbackInitialized){throw PLAYBACK_NOT_INITIALIZED_ERROR;}if(time() < 0){return NaN;}return getAsUTC(time());} /**
	     * Use this method to get the current duration as an absolute value, the time in seconds since midnight UTC, Jan 1 1970.
	     * Note - this property only has meaning for live streams.
	     *
	     * @returns {number} The current duration as UTC timestamp.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function durationAsUTC(){if(!playbackInitialized){throw PLAYBACK_NOT_INITIALIZED_ERROR;}return getAsUTC(duration());} /*
	    ---------------------------------------------------------------------------

	        AUTO BITRATE

	    ---------------------------------------------------------------------------
	    */ /**
	     * When switching multi-bitrate content (auto or manual mode) this property specifies the maximum bitrate allowed.
	     * If you set this property to a value lower than that currently playing, the switching engine will switch down to
	     * satisfy this requirement. If you set it to a value that is lower than the lowest bitrate, it will still play
	     * that lowest bitrate.
	     *
	     * You can set or remove this bitrate cap at anytime before or during playback.  To clear this setting you must use the API
	     * and set the value param to NaN.
	     *
	     * This feature is typically used to reserve higher bitrates for playback only when the player is in large or full-screen format.
	     *
	     * @param {string} type - 'video' or 'audio' are the type options.
	     * @param {number} value - Value in kbps representing the maximum bitrate allowed.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setMaxAllowedBitrateFor(type,value){abrController.setMaxAllowedBitrateFor(type,value);} /**
	     * When switching multi-bitrate content (auto or manual mode) this property specifies the minimum bitrate allowed.
	     * If you set this property to a value higher than that currently playing, the switching engine will switch up to
	     * satisfy this requirement. If you set it to a value that is lower than the lowest bitrate, it will still play
	     * that lowest bitrate.
	     *
	     * You can set or remove this bitrate limit at anytime before or during playback. To clear this setting you must use the API
	     * and set the value param to NaN.
	     *
	     * This feature is used to force higher quality playback.
	     *
	     * @param {string} type - 'video' or 'audio' are the type options.
	     * @param {number} value - Value in kbps representing the minimum bitrate allowed.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setMinAllowedBitrateFor(type,value){abrController.setMinAllowedBitrateFor(type,value);} /**
	     * @param {string} type - 'video' or 'audio' are the type options.
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#setMaxAllowedBitrateFor setMaxAllowedBitrateFor()}
	     * @instance
	     */function getMaxAllowedBitrateFor(type){return abrController.getMaxAllowedBitrateFor(type);} /**
	     * Gets the top quality BitrateInfo checking portal limit and max allowed.
	     *
	     * It calls getTopQualityIndexFor internally
	     *
	     * @param {string} type - 'video' or 'audio' are the type options.
	     * @memberof module:MediaPlayer
	     * @returns {BitrateInfo | null}
	     * @instance
	     */function getTopBitrateInfoFor(type){if(!streamingInitialized){throw STREAMING_NOT_INITIALIZED_ERROR;}return abrController.getTopBitrateInfoFor(type);} /**
	     * @param {string} type - 'video' or 'audio' are the type options.
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#setMinAllowedBitrateFor setMinAllowedBitrateFor()}
	     * @instance
	     */function getMinAllowedBitrateFor(type){return abrController.getMinAllowedBitrateFor(type);} /**
	     * When switching multi-bitrate content (auto or manual mode) this property specifies the maximum representation allowed,
	     * as a proportion of the size of the representation set.
	     *
	     * You can set or remove this cap at anytime before or during playback. To clear this setting you must use the API
	     * and set the value param to NaN.
	     *
	     * If both this and maxAllowedBitrate are defined, maxAllowedBitrate is evaluated first, then maxAllowedRepresentation,
	     * i.e. the lowest value from executing these rules is used.
	     *
	     * This feature is typically used to reserve higher representations for playback only when connected over a fast connection.
	     *
	     * @param {string} type - 'video' or 'audio' are the type options.
	     * @param {number} value - number between 0 and 1, where 1 is allow all representations, and 0 is allow only the lowest.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setMaxAllowedRepresentationRatioFor(type,value){abrController.setMaxAllowedRepresentationRatioFor(type,value);} /**
	     * @param {string} type - 'video' or 'audio' are the type options.
	     * @returns {number} The current representation ratio cap.
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#setMaxAllowedRepresentationRatioFor setMaxAllowedRepresentationRatioFor()}
	     * @instance
	     */function getMaxAllowedRepresentationRatioFor(type){return abrController.getMaxAllowedRepresentationRatioFor(type);} /**
	     * Gets the current download quality for media type video, audio or images. For video and audio types the ABR
	     * rules update this value before every new download unless setAutoSwitchQualityFor(type, false) is called. For 'image'
	     * type, thumbnails, there is no ABR algorithm and quality is set manually.
	     *
	     * @param {string} type - 'video', 'audio' or 'image' (thumbnails)
	     * @returns {number} the quality index, 0 corresponding to the lowest bitrate
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}
	     * @see {@link module:MediaPlayer#setQualityFor setQualityFor()}
	     * @instance
	     */function getQualityFor(type){if(!streamingInitialized){throw STREAMING_NOT_INITIALIZED_ERROR;}if(type === _constantsConstants2['default'].IMAGE){var activeStream=getActiveStream();if(!activeStream){return -1;}var thumbnailController=activeStream.getThumbnailController();if(!thumbnailController){return -1;}return thumbnailController.getCurrentTrackIndex();}return abrController.getQualityFor(type,streamController.getActiveStreamInfo());} /**
	     * Sets the current quality for media type instead of letting the ABR Heuristics automatically selecting it.
	     * This value will be overwritten by the ABR rules unless setAutoSwitchQualityFor(type, false) is called.
	     *
	     * @param {string} type - 'video', 'audio' or 'image'
	     * @param {number} value - the quality index, 0 corresponding to the lowest bitrate
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#setAutoSwitchQualityFor setAutoSwitchQualityFor()}
	     * @see {@link module:MediaPlayer#getQualityFor getQualityFor()}
	     * @instance
	     */function setQualityFor(type,value){if(!streamingInitialized){throw STREAMING_NOT_INITIALIZED_ERROR;}if(type === _constantsConstants2['default'].IMAGE){var activeStream=getActiveStream();if(!activeStream){return;}var thumbnailController=activeStream.getThumbnailController();if(thumbnailController){thumbnailController.setTrackByIndex(value);}}abrController.setPlaybackQuality(type,streamController.getActiveStreamInfo(),value);} /**
	     * Update the video element size variables
	     * Should be called on window resize (or any other time player is resized). Fullscreen does trigger a window resize event.
	     *
	     * Once windowResizeEventCalled = true, abrController.checkPortalSize() will use element size variables rather than querying clientWidth every time.
	     *
	     * @memberof module:MediaPlayer
	     * @instance
	     */function updatePortalSize(){abrController.setElementSize();abrController.setWindowResizeEventCalled(true);} /**
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getLimitBitrateByPortal(){return abrController.getLimitBitrateByPortal();} /**
	     * Sets whether to limit the representation used based on the size of the playback area
	     *
	     * @param {boolean} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setLimitBitrateByPortal(value){abrController.setLimitBitrateByPortal(value);} /**
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getUsePixelRatioInLimitBitrateByPortal(){return abrController.getUsePixelRatioInLimitBitrateByPortal();} /**
	     * Sets whether to take into account the device's pixel ratio when defining the portal dimensions.
	     * Useful on, for example, retina displays.
	     *
	     * @param {boolean} value
	     * @memberof module:MediaPlayer
	     * @instance
	     * @default {boolean} false
	     */function setUsePixelRatioInLimitBitrateByPortal(value){abrController.setUsePixelRatioInLimitBitrateByPortal(value);} /**
	     * Use this method to explicitly set the starting bitrate for audio | video
	     *
	     * @param {string} type
	     * @param {number} value - A value of the initial bitrate, kbps
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setInitialBitrateFor(type,value){abrController.setInitialBitrateFor(type,value);} /**
	     * @param {string} type
	     * @returns {number} A value of the initial bitrate, kbps
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getInitialBitrateFor(type){if(!streamingInitialized){throw STREAMING_NOT_INITIALIZED_ERROR; //abrController.getInitialBitrateFor is overloaded with ratioDict logic that needs manifest force it to not be callable pre play.
	}return abrController.getInitialBitrateFor(type);} /**
	     * @param {string} type
	     * @param {number} value - A value of the initial Representation Ratio
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setInitialRepresentationRatioFor(type,value){abrController.setInitialRepresentationRatioFor(type,value);} /**
	     * @param {string} type
	     * @returns {number} A value of the initial Representation Ratio
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getInitialRepresentationRatioFor(type){return abrController.getInitialRepresentationRatioFor(type);} /**
	     * @param {string} type - 'audio' | 'video'
	     * @returns {boolean} Current state of adaptive bitrate switching
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getAutoSwitchQualityFor(type){return abrController.getAutoSwitchBitrateFor(type);} /**
	     * Set to false to switch off adaptive bitrate switching.
	     *
	     * @param {string} type - 'audio' | 'video'
	     * @param {boolean} value
	     * @default true
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setAutoSwitchQualityFor(type,value){abrController.setAutoSwitchBitrateFor(type,value);} /**
	     * Get the value of useDeadTimeLatency in AbrController. @see setUseDeadTimeLatencyForAbr
	     *
	     * @returns {boolean}
	     *
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getUseDeadTimeLatencyForAbr(){return abrController.getUseDeadTimeLatency();} /**
	     * Set the value of useDeadTimeLatency in AbrController. If true, only the download
	     * portion will be considered part of the download bitrate and latency will be
	     * regarded as static. If false, the reciprocal of the whole transfer time will be used.
	     * Defaults to true.
	     *
	     * @param {boolean=} useDeadTimeLatency - True or false flag.
	     *
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setUseDeadTimeLatencyForAbr(useDeadTimeLatency){abrController.setUseDeadTimeLatency(useDeadTimeLatency);} /*
	    ---------------------------------------------------------------------------

	        MEDIA PLAYER CONFIGURATION

	    ---------------------------------------------------------------------------
	    */ /**
	     * <p>Set to false to prevent stream from auto-playing when the view is attached.</p>
	     *
	     * @param {boolean} value
	     * @default true
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#attachView attachView()}
	     * @instance
	     *
	     */function setAutoPlay(value){(0,_utilsSupervisorTools.checkParameterType)(value,'boolean');autoPlay = value;} /**
	     * @returns {boolean} The current autoPlay state.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getAutoPlay(){return autoPlay;} /**
	     * <p>Changing this value will lower or increase live stream latency.  The detected segment duration will be multiplied by this value
	     * to define a time in seconds to delay a live stream from the live edge.</p>
	     * <p>Lowering this value will lower latency but may decrease the player's ability to build a stable buffer.</p>
	     *
	     * @param {number} value - Represents how many segment durations to delay the live stream.
	     * @default 4
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#useSuggestedPresentationDelay useSuggestedPresentationDelay()}
	     * @instance
	     */function setLiveDelayFragmentCount(value){mediaPlayerModel.setLiveDelayFragmentCount(value);} /**
	     * <p>Equivalent in seconds of setLiveDelayFragmentCount</p>
	     * <p>Lowering this value will lower latency but may decrease the player's ability to build a stable buffer.</p>
	     * <p>This value should be less than the manifest duration by a couple of segment durations to avoid playback issues</p>
	     * <p>If set, this parameter will take precedence over setLiveDelayFragmentCount and manifest info</p>
	     *
	     * @param {number} value - Represents how many seconds to delay the live stream.
	     * @default undefined
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#useSuggestedPresentationDelay useSuggestedPresentationDelay()}
	     * @instance
	     */function setLiveDelay(value){mediaPlayerModel.setLiveDelay(value);} /**
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#setLiveDelay setLiveDelay()}
	     * @instance
	     * @returns {number|undefined} Current live stream delay in seconds when previously set, or `undefined`
	     */function getLiveDelay(){return mediaPlayerModel.getLiveDelay();} /**
	     * @memberof module:MediaPlayer
	     * @instance
	     * @returns {number|NaN} Current live stream latency in seconds. It is the difference between current time and time position at the playback head.
	     */function getCurrentLiveLatency(){if(!mediaPlayerInitialized){throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;}if(!playbackInitialized){return NaN;}return playbackController.getCurrentLiveLatency();} /**
	     * <p>Set to true if you would like to override the default live delay and honor the SuggestedPresentationDelay attribute in by the manifest.</p>
	     * @param {boolean} value
	     * @default false
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#setLiveDelayFragmentCount setLiveDelayFragmentCount()}
	     * @instance
	     */function useSuggestedPresentationDelay(value){mediaPlayerModel.setUseSuggestedPresentationDelay(value);} /**
	     * Set to false if you would like to disable the last known bit rate from being stored during playback and used
	     * to set the initial bit rate for subsequent playback within the expiration window.
	     *
	     * The default expiration is one hour, defined in milliseconds. If expired, the default initial bit rate (closest to 1000 kbps) will be used
	     * for that session and a new bit rate will be stored during that session.
	     *
	     * @param {boolean} enable - Will toggle if feature is enabled. True to enable, False to disable.
	     * @param {number=} ttl - (Optional) A value defined in milliseconds representing how long to cache the bit rate for. Time to live.
	     * @default enable = True, ttl = 360000 (1 hour)
	     * @memberof module:MediaPlayer
	     * @instance
	     *
	     */function enableLastBitrateCaching(enable,ttl){mediaPlayerModel.setLastBitrateCachingInfo(enable,ttl);} /**
	     * Set to false if you would like to disable the last known lang for audio (or camera angle for video) from being stored during playback and used
	     * to set the initial settings for subsequent playback within the expiration window.
	     *
	     * The default expiration is one hour, defined in milliseconds. If expired, the default settings will be used
	     * for that session and a new settings will be stored during that session.
	     *
	     * @param {boolean} enable - Will toggle if feature is enabled. True to enable, False to disable.
	     * @param {number=} [ttl] - (Optional) A value defined in milliseconds representing how long to cache the settings for. Time to live.
	     * @default enable = True, ttl = 360000 (1 hour)
	     * @memberof module:MediaPlayer
	     * @instance
	     *
	     */function enableLastMediaSettingsCaching(enable,ttl){mediaPlayerModel.setLastMediaSettingsCachingInfo(enable,ttl);} /**
	     * Set to true if you would like dash.js to keep downloading fragments in the background
	     * when the video element is paused.
	     *
	     * @default true
	     * @param {boolean} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setScheduleWhilePaused(value){mediaPlayerModel.setScheduleWhilePaused(value);} /**
	     * Returns a boolean of the current state of ScheduleWhilePaused.
	     * @returns {boolean}
	     * @see {@link module:MediaPlayer#setScheduleWhilePaused setScheduleWhilePaused()}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getScheduleWhilePaused(){return mediaPlayerModel.getScheduleWhilePaused();} /**
	     * When enabled, after an ABR up-switch in quality, instead of requesting and appending the next fragment
	     * at the end of the current buffer range it is requested and appended closer to the current time
	     * When enabled, The maximum time to render a higher quality is current time + (1.5 * fragment duration).
	     *
	     * Note, When ABR down-switch is detected, we appended the lower quality at the end of the buffer range to preserve the
	     * higher quality media for as long as possible.
	     *
	     * If enabled, it should be noted there are a few cases when the client will not replace inside buffer range but rather
	     * just append at the end.  1. When the buffer level is less than one fragment duration 2.  The client
	     * is in an Abandonment State due to recent fragment abandonment event.
	     *
	     * Known issues:
	     * 1. In IE11 with auto switching off, if a user switches to a quality they can not download in time the
	     * fragment may be appended in the same range as the playhead or even in the past, in IE11 it may cause a stutter
	     * or stall in playback.
	     *
	     *
	     * @param {boolean} value
	     * @default {boolean} false
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setFastSwitchEnabled(value){ //TODO we need to look at track switches for adaptation sets.  If always replace it works much like this but clears buffer. Maybe too many ways to do same thing.
	mediaPlayerModel.setFastSwitchEnabled(value);} /**
	     * Enabled by default. Will return the current state of Fast Switch.
	     * @return {boolean} Returns true if FastSwitch ABR is enabled.
	     * @see {@link module:MediaPlayer#setFastSwitchEnabled setFastSwitchEnabled()}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getFastSwitchEnabled(){return mediaPlayerModel.getFastSwitchEnabled();} /**
	     * Sets the ABR strategy. Valid strategies are "abrDynamic", "abrBola" and "abrThroughput".
	     * The ABR strategy can also be changed during a streaming session.
	     * The call has no effect if an invalid method is passed.
	     *
	     * The BOLA strategy chooses bitrate based on current buffer level, with higher bitrates for higher buffer levels.
	     * The Throughput strategy chooses bitrate based on the recent throughput history.
	     * The Dynamic strategy switches smoothly between BOLA and Throughput in real time, playing to the strengths of both.
	     *
	     * @param {string} value
	     * @default "abrDynamic"
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setABRStrategy(value){mediaPlayerModel.setABRStrategy(value);} /**
	     * Returns the current ABR strategy being used.
	     * @return {string} "abrDynamic", "abrBola" or "abrThroughput"
	     * @see {@link module:MediaPlayer#setABRStrategy setABRStrategy()}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getABRStrategy(){return mediaPlayerModel.getABRStrategy();} /**
	     * Enable/disable builtin dashjs ABR rules
	     * @param {boolean} value
	     * @default true
	     * @memberof module:MediaPlayer
	     * @instance
	     */function useDefaultABRRules(value){mediaPlayerModel.setUseDefaultABRRules(value);} /**
	     * Add a custom ABR Rule
	     * Rule will be apply on next stream if a stream is being played
	     *
	     * @param {string} type - rule type (one of ['qualitySwitchRules','abandonFragmentRules'])
	     * @param {string} rulename - name of rule (used to identify custom rule). If one rule of same name has been added, then existing rule will be updated
	     * @param {object} rule - the rule object instance
	     * @memberof module:MediaPlayer
	     * @instance
	     */function addABRCustomRule(type,rulename,rule){mediaPlayerModel.addABRCustomRule(type,rulename,rule);} /**
	     * Remove a custom ABR Rule
	     *
	     * @param {string} rulename - name of the rule to be removed
	     * @memberof module:MediaPlayer
	     * @instance
	     */function removeABRCustomRule(rulename){mediaPlayerModel.removeABRCustomRule(rulename);} /**
	     * Remove all custom rules
	     * @memberof module:MediaPlayer
	     * @instance
	     */function removeAllABRCustomRule(){mediaPlayerModel.removeABRCustomRule();} /**
	     * Sets the moving average method used for smoothing throughput estimates. Valid methods are
	     * "slidingWindow" and "ewma". The call has no effect if an invalid method is passed.
	     *
	     * The sliding window moving average method computes the average throughput using the last four segments downloaded.
	     * If the stream is live (as opposed to VOD), then only the last three segments are used.
	     * If wide variations in throughput are detected, the number of segments can be dynamically increased to avoid oscillations.
	     *
	     * The exponentially weighted moving average (EWMA) method computes the average using exponential smoothing.
	     * Two separate estimates are maintained, a fast one with a three-second half life and a slow one with an eight-second half life.
	     * The throughput estimate at any time is the minimum of the fast and slow estimates.
	     * This allows a fast reaction to a bandwidth drop and prevents oscillations on bandwidth spikes.
	     *
	     * @param {string} value
	     * @default {string} 'slidingWindow'
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setMovingAverageMethod(value){mediaPlayerModel.setMovingAverageMethod(value);} /**
	     * Return the current moving average method used for smoothing throughput estimates.
	     * @return {string} Returns "slidingWindow" or "ewma".
	     * @see {@link module:MediaPlayer#setMovingAverageMethod setMovingAverageMethod()}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getMovingAverageMethod(){return mediaPlayerModel.getMovingAverageMethod();} /**
	     * Returns if low latency mode is enabled. Disabled by default.
	     * @return {boolean} true - if enabled
	     * @see {@link module:MediaPlayer#setLowLatencyEnabled setLowLatencyEnabled()}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getLowLatencyEnabled(){return mediaPlayerModel.getLowLatencyEnabled();} /**
	     * Enables low latency mode for dynamic streams. If not specified, liveDelay is set to 3s of buffer.
	     * Browser compatibility (Check row 'ReadableStream response body'): https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
	     * @param {boolean} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setLowLatencyEnabled(value){mediaPlayerModel.setLowLatencyEnabled(value);} /**
	     * <p>Allows you to set a scheme and server source for UTC live edge detection for dynamic streams.
	     * If UTCTiming is defined in the manifest, it will take precedence over any time source manually added.</p>
	     * <p>If you have exposed the Date header, use the method {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}.
	     * This will allow the date header on the manifest to be used instead of a time server</p>
	     * @param {string} schemeIdUri - <ul>
	     * <li>urn:mpeg:dash:utc:http-head:2014</li>
	     * <li>urn:mpeg:dash:utc:http-xsdate:2014</li>
	     * <li>urn:mpeg:dash:utc:http-iso:2014</li>
	     * <li>urn:mpeg:dash:utc:direct:2014</li>
	     * </ul>
	     * <p>Some specs referencing early ISO23009-1 drafts incorrectly use
	     * 2012 in the URI, rather than 2014. support these for now.</p>
	     * <ul>
	     * <li>urn:mpeg:dash:utc:http-head:2012</li>
	     * <li>urn:mpeg:dash:utc:http-xsdate:2012</li>
	     * <li>urn:mpeg:dash:utc:http-iso:2012</li>
	     * <li>urn:mpeg:dash:utc:direct:2012</li>
	     * </ul>
	     * @param {string} value - Path to a time source.
	     * @default
	     * <ul>
	     *     <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>
	     *     <li>value:http://time.akamai.com/?iso&ms/li>
	     * </ul>
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#removeUTCTimingSource removeUTCTimingSource()}
	     * @instance
	     */function addUTCTimingSource(schemeIdUri,value){mediaPlayerModel.addUTCTimingSource(schemeIdUri,value);} /**
	     * <p>Allows you to remove a UTC time source. Both schemeIdUri and value need to match the Dash.vo.UTCTiming properties in order for the
	     * entry to be removed from the array</p>
	     * @param {string} schemeIdUri - see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}
	     * @param {string} value - see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}
	     * @instance
	     */function removeUTCTimingSource(schemeIdUri,value){mediaPlayerModel.removeUTCTimingSource(schemeIdUri,value);} /**
	     * <p>Allows you to clear the stored array of time sources.</p>
	     * <p>Example use: If you have exposed the Date header, calling this method
	     * will allow the date header on the manifest to be used instead of the time server.</p>
	     * <p>Example use: Calling this method, assuming there is not an exposed date header on the manifest,  will default back
	     * to using a binary search to discover the live edge</p>
	     *
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#restoreDefaultUTCTimingSources restoreDefaultUTCTimingSources()}
	     * @instance
	     */function clearDefaultUTCTimingSources(){mediaPlayerModel.clearDefaultUTCTimingSources();} /**
	     * <p>Allows you to restore the default time sources after calling {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()}</p>
	     *
	     * @default
	     * <ul>
	     *     <li>schemeIdUri:urn:mpeg:dash:utc:http-xsdate:2014</li>
	     *     <li>value:http://time.akamai.com/?iso&ms</li>
	     * </ul>
	     *
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}
	     * @instance
	     */function restoreDefaultUTCTimingSources(){mediaPlayerModel.restoreDefaultUTCTimingSources();} /**
	     * <p>Allows you to enable the use of the Date Header, if exposed with CORS, as a timing source for live edge detection. The
	     * use of the date header will happen only after the other timing source that take precedence fail or are omitted as described.
	     * {@link module:MediaPlayer#clearDefaultUTCTimingSources clearDefaultUTCTimingSources()} </p>
	     *
	     * @param {boolean} value - true to enable
	     * @default {boolean} True
	     * @memberof module:MediaPlayer
	     * @see {@link module:MediaPlayer#addUTCTimingSource addUTCTimingSource()}
	     * @instance
	     */function enableManifestDateHeaderTimeSource(value){mediaPlayerModel.setUseManifestDateHeaderTimeSource(value);} /**
	     * This value influences the buffer pruning logic.
	     * Allows you to modify the buffer that is kept in source buffer in seconds.
	     * <pre>0|-----------bufferToPrune-----------|-----bufferToKeep-----|currentTime|</pre>
	     *
	     * @default 20 seconds
	     * @param {int} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setBufferToKeep(value){mediaPlayerModel.setBufferToKeep(value);} /**
	     * This value influences the buffer pruning logic.
	     * Allows you to modify the buffer ahead of current time position that is kept in source buffer in seconds.
	     * <pre>0|--------|currentTime|-----bufferAheadToKeep----|----bufferToPrune-----------|end|</pre>
	     *
	     * @default 80 seconds
	     * @param {int} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setBufferAheadToKeep(value){mediaPlayerModel.setBufferAheadToKeep(value);} /**
	     * This value influences the buffer pruning logic.
	     * Allows you to modify the interval of pruning buffer in seconds.
	     *
	     * @default 10 seconds
	     * @param {int} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setBufferPruningInterval(value){mediaPlayerModel.setBufferPruningInterval(value);} /**
	     * The time that the internal buffer target will be set to post startup/seeks (NOT top quality).
	     *
	     * When the time is set higher than the default you will have to wait longer
	     * to see automatic bitrate switches but will have a larger buffer which
	     * will increase stability.
	     *
	     * Note: The value set for Stable Buffer Time is not considered when Low Latency Mode is enabled.
	     * When in Low Latency mode dash.js takes ownership of Stable Buffer Time value to minimize latency
	     * that comes from buffer filling process.
	     *
	     * @default 12 seconds.
	     * @param {int} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setStableBufferTime(value){mediaPlayerModel.setStableBufferTime(value);} /**
	     * The time that the internal buffer target will be set to post startup/seeks (NOT top quality).
	     *
	     * When the time is set higher than the default you will have to wait longer
	     * to see automatic bitrate switches but will have a larger buffer which
	     * will increase stability.
	     *
	     * @default 12 seconds.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getStableBufferTime(){return mediaPlayerModel.getStableBufferTime();} /**
	     * The time that the internal buffer target will be set to once playing the top quality.
	     * If there are multiple bitrates in your adaptation, and the media is playing at the highest
	     * bitrate, then we try to build a larger buffer at the top quality to increase stability
	     * and to maintain media quality.
	     *
	     * @default 30 seconds.
	     * @param {int} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setBufferTimeAtTopQuality(value){mediaPlayerModel.setBufferTimeAtTopQuality(value);} /**
	     * The time that the internal buffer target will be set to once playing the top quality.
	     * If there are multiple bitrates in your adaptation, and the media is playing at the highest
	     * bitrate, then we try to build a larger buffer at the top quality to increase stability
	     * and to maintain media quality.
	     *
	     * @default 30 seconds.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getBufferTimeAtTopQuality(){return mediaPlayerModel.getBufferTimeAtTopQuality();} /**
	     * The time that the internal buffer target will be set to once playing the top quality for long form content.
	     *
	     * @default 60 seconds.
	     * @see {@link module:MediaPlayer#setLongFormContentDurationThreshold setLongFormContentDurationThreshold()}
	     * @see {@link module:MediaPlayer#setBufferTimeAtTopQuality setBufferTimeAtTopQuality()}
	     * @param {int} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setBufferTimeAtTopQualityLongForm(value){mediaPlayerModel.setBufferTimeAtTopQualityLongForm(value);} /**
	     * The time that the internal buffer target will be set to once playing the top quality for long form content.
	     *
	     * @default 60 seconds.
	     * @see {@link module:MediaPlayer#setLongFormContentDurationThreshold setLongFormContentDurationThreshold()}
	     * @see {@link module:MediaPlayer#setBufferTimeAtTopQuality setBufferTimeAtTopQuality()}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getBufferTimeAtTopQualityLongForm(){return mediaPlayerModel.getBufferTimeAtTopQualityLongForm();} /**
	     * The threshold which defines if the media is considered long form content.
	     * This will directly affect the buffer targets when playing back at the top quality.
	     *
	     * @see {@link module:MediaPlayer#setBufferTimeAtTopQualityLongForm setBufferTimeAtTopQualityLongForm()}
	     * @default 600 seconds (10 minutes).
	     * @param {number} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setLongFormContentDurationThreshold(value){mediaPlayerModel.setLongFormContentDurationThreshold(value);} /**
	     * The overlap tolerance time, at both the head and the tail of segments, considered when doing time to segment conversions.
	     *
	     * This is used when calculating which of the loaded segments of a representation corresponds with a given time position.
	     * Its value is never used for calculating the segment index in seeking operations in which it assumes overlap time threshold is zero.
	     *
	     * <pre>
	     * |-o-|--- segment X ----|-o-|
	     *                        |-o-|---- segment X+1 -----|-o-|
	     *                                                   |-o-|---- segment X+2 -----|-o-|
	     * </pre>
	     * @default 0.05 seconds.
	     * @param {number} value
	     * @memberof module:MediaPlayer
	     * @instance
	    */function setSegmentOverlapToleranceTime(value){mediaPlayerModel.setSegmentOverlapToleranceTime(value);} /**
	     * For a given media type, the threshold which defines if the response to a fragment
	     * request is coming from browser cache or not.
	     * Valid media types are "video", "audio"
	     *
	     * @default 50 milliseconds for video fragment requests; 5 milliseconds for audio fragment requests.
	     * @param {string} type 'video' or 'audio' are the type options.
	     * @param {number} value Threshold value in milliseconds.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setCacheLoadThresholdForType(type,value){mediaPlayerModel.setCacheLoadThresholdForType(type,value);} /**
	     * A percentage between 0.0 and 1 to reduce the measured throughput calculations.
	     * The default is 0.9. The lower the value the more conservative and restricted the
	     * measured throughput calculations will be. please use carefully. This will directly
	     * affect the ABR logic in dash.js
	     *
	     * @param {number} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setBandwidthSafetyFactor(value){mediaPlayerModel.setBandwidthSafetyFactor(value);} /**
	     * Returns the number of the current BandwidthSafetyFactor
	     *
	     * @return {number} value
	     * @see {@link module:MediaPlayer#setBandwidthSafetyFactor setBandwidthSafetyFactor()}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getBandwidthSafetyFactor(){return mediaPlayerModel.getBandwidthSafetyFactor();} /**
	     * Returns the average throughput computed in the ABR logic
	     *
	     * @param {string} type
	     * @return {number} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getAverageThroughput(type){var throughputHistory=abrController.getThroughputHistory();return throughputHistory?throughputHistory.getAverageThroughput(type):0;} /**
	     * A timeout value in seconds, which during the ABRController will block switch-up events.
	     * This will only take effect after an abandoned fragment event occurs.
	     *
	     * @default 10 seconds
	     * @param {int} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setAbandonLoadTimeout(value){mediaPlayerModel.setAbandonLoadTimeout(value);} /**
	     * Total number of retry attempts that will occur on a fragment load before it fails.
	     * Increase this value to a maximum in order to achieve an automatic playback resume
	     * in case of completely lost internet connection.
	     *
	     * Note: This parameter is not taken into account when Low Latency Mode is enabled. For Low Latency
	     * Playback dash.js takes control and sets a number of retry attempts that ensures playback stability.
	     *
	     * @default 3
	     * @param {int} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setFragmentLoaderRetryAttempts(value){mediaPlayerModel.setRetryAttemptsForType(_voMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE,value);} /**
	     * Time in milliseconds of which to reload a failed fragment load attempt.
	     *
	     * @default 1000 milliseconds
	     * @param {int} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setFragmentLoaderRetryInterval(value){mediaPlayerModel.setRetryIntervalForType(_voMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE,value);} /**
	     * Total number of retry attempts that will occur on a manifest load before it fails.
	     *
	     * @default 4
	     * @param {int} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setManifestLoaderRetryAttempts(value){mediaPlayerModel.setRetryAttemptsForType(_voMetricsHTTPRequest.HTTPRequest.MPD_TYPE,value);} /**
	     * Time in milliseconds of which to reload a failed manifest load attempt.
	     *
	     * @default 1000 milliseconds
	     * @param {int} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setManifestLoaderRetryInterval(value){mediaPlayerModel.setRetryIntervalForType(_voMetricsHTTPRequest.HTTPRequest.MPD_TYPE,value);} /**
	     * Sets whether withCredentials on XHR requests for a particular request
	     * type is true or false
	     *
	     * @default false
	     * @param {string} type - one of HTTPRequest.*_TYPE
	     * @param {boolean} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setXHRWithCredentialsForType(type,value){mediaPlayerModel.setXHRWithCredentialsForType(type,value);} /**
	     * Gets whether withCredentials on XHR requests for a particular request
	     * type is true or false
	     *
	     * @param {string} type - one of HTTPRequest.*_TYPE
	     * @return {boolean}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getXHRWithCredentialsForType(type){return mediaPlayerModel.getXHRWithCredentialsForType(type);} /**
	     * Sets whether player should jump small gaps (discontinuities) in the buffer.
	     *
	     * @param {boolean} value
	     * @default false
	     * @memberof module:MediaPlayer
	     * @instance
	     *
	     */function setJumpGaps(value){mediaPlayerModel.setJumpGaps(value);} /**
	     * Gets current status of jump gaps feature.
	     * @returns {boolean} The current jump gaps state.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getJumpGaps(){return mediaPlayerModel.getJumpGaps();} /**
	     * Time in seconds for a gap to be considered small.
	     *
	     * @param {boolean} value
	     * @default 0.8
	     * @memberof module:MediaPlayer
	     * @instance
	     *
	     */function setSmallGapLimit(value){mediaPlayerModel.setSmallGapLimit(value);} /**
	     * Time in seconds for a gap to be considered small.
	     * @returns {boolean} Current small gap limit
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getSmallGapLimit(){return mediaPlayerModel.getSmallGapLimit();} /**
	     * For live streams, set the interval-frequency in milliseconds at which
	     * dash.js will check if the current manifest is still processed before
	     * downloading the next manifest once the minimumUpdatePeriod time has
	     * expired.
	     * @param {int} value
	     * @default 100
	     * @memberof module:MediaPlayer
	     * @instance
	     * @see {@link module:MediaPlayer#getManifestUpdateRetryInterval getManifestUpdateRetryInterval()}
	     *
	     */function setManifestUpdateRetryInterval(value){mediaPlayerModel.setManifestUpdateRetryInterval(value);} /**
	     * For live streams, get the interval-frequency in milliseconds at which
	     * dash.js will check if the current manifest is still processed before
	     * downloading the next manifest once the minimumUpdatePeriod time has
	     * expired.
	     * @returns {int} Current retry delay for manifest update
	     * @memberof module:MediaPlayer
	     * @instance
	     * @see {@link module:MediaPlayer#setManifestUpdateRetryInterval setManifestUpdateRetryInterval()}
	     */function getManifestUpdateRetryInterval(){return mediaPlayerModel.getManifestUpdateRetryInterval();} /*
	    ---------------------------------------------------------------------------

	        METRICS

	    ---------------------------------------------------------------------------
	    */ /**
	     * Returns the DashMetrics.js Module. You use this Module to get access to all the public metrics
	     * stored in dash.js
	     *
	     * @see {@link module:DashMetrics}
	     * @returns {Object}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getDashMetrics(){return dashMetrics;} /**
	     *
	     * @param {string} type
	     * @returns {Object}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getMetricsFor(type){return metricsModel.getReadOnlyMetricsFor(type);} /*
	    ---------------------------------------------------------------------------

	        TEXT MANAGEMENT

	    ---------------------------------------------------------------------------
	    */ /**
	     * Set default language for text. If default language is not one of text tracks, dash will choose the first one.
	     *
	     * @param {string} lang - default language
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setTextDefaultLanguage(lang){if(textController === undefined){textController = (0,_textTextController2['default'])(context).getInstance();}textController.setTextDefaultLanguage(lang);} /**
	     * Get default language for text.
	     *
	     * @return {string} the default language if it has been set using setTextDefaultLanguage
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getTextDefaultLanguage(){if(textController === undefined){textController = (0,_textTextController2['default'])(context).getInstance();}return textController.getTextDefaultLanguage();} /**
	     * Set enabled default state.
	     * This is used to enable/disable text when a file is loaded.
	     * During playback, use enableText to enable text for the file
	     *
	     * @param {boolean} enable - true to enable text, false otherwise
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setTextDefaultEnabled(enable){if(textController === undefined){textController = (0,_textTextController2['default'])(context).getInstance();}textController.setTextDefaultEnabled(enable);} /**
	     * Get enabled default state.
	     *
	     * @return {boolean}  default enable state
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getTextDefaultEnabled(){if(textController === undefined){textController = (0,_textTextController2['default'])(context).getInstance();}return textController.getTextDefaultEnabled();} /**
	     * Enable/disable text
	     * When enabling text, dash will choose the previous selected text track
	     *
	     * @param {boolean} enable - true to enable text, false otherwise (same as setTextTrack(-1))
	     * @memberof module:MediaPlayer
	     * @instance
	     */function enableText(enable){if(textController === undefined){textController = (0,_textTextController2['default'])(context).getInstance();}textController.enableText(enable);} /**
	     * Enable/disable text
	     * When enabling dash will keep downloading and process fragmented text tracks even if all tracks are in mode "hidden"
	     *
	     * @param {boolean} enable - true to enable text streaming even if all text tracks are hidden.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function enableForcedTextStreaming(enable){if(textController === undefined){textController = (0,_textTextController2['default'])(context).getInstance();}textController.enableForcedTextStreaming(enable);} /**
	     * Return if text is enabled
	     *
	     * @return {boolean} return true if text is enabled, false otherwise
	     * @memberof module:MediaPlayer
	     * @instance
	     */function isTextEnabled(){if(textController === undefined){textController = (0,_textTextController2['default'])(context).getInstance();}return textController.isTextEnabled();} /**
	     * Use this method to change the current text track for both external time text files and fragmented text tracks. There is no need to
	     * set the track mode on the video object to switch a track when using this method.
	     * @param {number} idx - Index of track based on the order of the order the tracks are added Use -1 to disable all tracks. (turn captions off).  Use module:MediaPlayer#dashjs.MediaPlayer.events.TEXT_TRACK_ADDED.
	     * @see {@link MediaPlayerEvents#event:TEXT_TRACK_ADDED dashjs.MediaPlayer.events.TEXT_TRACK_ADDED}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setTextTrack(idx){if(!playbackInitialized){throw PLAYBACK_NOT_INITIALIZED_ERROR;}if(textController === undefined){textController = (0,_textTextController2['default'])(context).getInstance();}textController.setTextTrack(idx);}function getCurrentTextTrackIndex(){var idx=NaN;if(textController){idx = textController.getCurrentTrackIdx();}return idx;} /**
	     * This method serves to control captions z-index value. If 'true' is passed, the captions will have the highest z-index and be
	     * displayed on top of other html elements. Default value is 'false' (z-index is not set).
	     * @param {boolean} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function displayCaptionsOnTop(value){var textTracks=(0,_textTextTracks2['default'])(context).getInstance();textTracks.setConfig({videoModel:videoModel});textTracks.initialize();textTracks.displayCConTop(value);} /*
	    ---------------------------------------------------------------------------

	        VIDEO ELEMENT MANAGEMENT

	    ---------------------------------------------------------------------------
	    */ /**
	     * Returns instance of Video Element that was attached by calling attachView()
	     * @returns {Object}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getVideoElement(){if(!videoModel.getElement()){throw ELEMENT_NOT_ATTACHED_ERROR;}return videoModel.getElement();} /**
	     * Returns instance of Video Container that was attached by calling attachVideoContainer()
	     * @returns {Object}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getVideoContainer(){return videoModel?videoModel.getVideoContainer():null;} /**
	     * Use this method to attach an HTML5 element that wraps the video element.
	     *
	     * @param {HTMLElement} container - The HTML5 element containing the video element.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function attachVideoContainer(container){if(!videoModel.getElement()){throw ELEMENT_NOT_ATTACHED_ERROR;}videoModel.setVideoContainer(container);} /**
	     * Use this method to attach an HTML5 VideoElement for dash.js to operate upon.
	     *
	     * @param {Object} element - An HTMLMediaElement that has already been defined in the DOM (or equivalent stub).
	     * @memberof module:MediaPlayer
	     * @instance
	     */function attachView(element){if(!mediaPlayerInitialized){throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;}videoModel.setElement(element);if(element){detectProtection();detectMetricsReporting();detectMss();if(streamController){streamController.switchToVideoElement();}}if(playbackInitialized){ //Reset if we have been playing before, so this is a new element.
	resetPlaybackControllers();}initializePlayback();} /**
	     * Returns instance of Div that was attached by calling attachTTMLRenderingDiv()
	     * @returns {Object}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getTTMLRenderingDiv(){return videoModel?videoModel.getTTMLRenderingDiv():null;} /**
	     * Use this method to attach an HTML5 div for dash.js to render rich TTML subtitles.
	     *
	     * @param {HTMLDivElement} div - An unstyled div placed after the video element. It will be styled to match the video size and overlay z-order.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function attachTTMLRenderingDiv(div){if(!videoModel.getElement()){throw ELEMENT_NOT_ATTACHED_ERROR;}videoModel.setTTMLRenderingDiv(div);} /*
	    ---------------------------------------------------------------------------

	        STREAM AND TRACK MANAGEMENT

	    ---------------------------------------------------------------------------
	    */ /**
	     * @param {string} type
	     * @returns {Array}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getBitrateInfoListFor(type){if(!streamingInitialized){throw STREAMING_NOT_INITIALIZED_ERROR;}var stream=getActiveStream();return stream?stream.getBitrateListFor(type):[];} /**
	     * This method returns the list of all available streams from a given manifest
	     * @param {Object} manifest
	     * @returns {Array} list of {@link StreamInfo}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getStreamsFromManifest(manifest){if(!streamingInitialized){throw STREAMING_NOT_INITIALIZED_ERROR;}return adapter.getStreamsInfo(manifest);} /**
	     * This method returns the list of all available tracks for a given media type
	     * @param {string} type
	     * @returns {Array} list of {@link MediaInfo}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getTracksFor(type){if(!streamingInitialized){throw STREAMING_NOT_INITIALIZED_ERROR;}var streamInfo=streamController.getActiveStreamInfo();return mediaController.getTracksFor(type,streamInfo);} /**
	     * This method returns the list of all available tracks for a given media type and streamInfo from a given manifest
	     * @param {string} type
	     * @param {Object} manifest
	     * @param {Object} streamInfo
	     * @returns {Array}  list of {@link MediaInfo}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getTracksForTypeFromManifest(type,manifest,streamInfo){if(!streamingInitialized){throw STREAMING_NOT_INITIALIZED_ERROR;}streamInfo = streamInfo || adapter.getStreamsInfo(manifest,1)[0];return streamInfo?adapter.getAllMediaInfoForType(streamInfo,type,manifest):[];} /**
	     * @param {string} type
	     * @returns {Object|null} {@link MediaInfo}
	     *
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getCurrentTrackFor(type){if(!streamingInitialized){throw STREAMING_NOT_INITIALIZED_ERROR;}var streamInfo=streamController.getActiveStreamInfo();return mediaController.getCurrentTrackFor(type,streamInfo);} /**
	     * This method allows to set media settings that will be used to pick the initial track. Format of the settings
	     * is following:
	     * {lang: langValue,
	     *  viewpoint: viewpointValue,
	     *  audioChannelConfiguration: audioChannelConfigurationValue,
	     *  accessibility: accessibilityValue,
	     *  role: roleValue}
	     *
	     *
	     * @param {string} type
	     * @param {Object} value
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setInitialMediaSettingsFor(type,value){if(!mediaPlayerInitialized){throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;}mediaController.setInitialSettings(type,value);} /**
	     * This method returns media settings that is used to pick the initial track. Format of the settings
	     * is following:
	     * {lang: langValue,
	     *  viewpoint: viewpointValue,
	     *  audioChannelConfiguration: audioChannelConfigurationValue,
	     *  accessibility: accessibilityValue,
	     *  role: roleValue}
	     * @param {string} type
	     * @returns {Object}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getInitialMediaSettingsFor(type){if(!mediaPlayerInitialized){throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;}return mediaController.getInitialSettings(type);} /**
	     * @param {MediaInfo} track - instance of {@link MediaInfo}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setCurrentTrack(track){if(!streamingInitialized){throw STREAMING_NOT_INITIALIZED_ERROR;}mediaController.setTrack(track);} /**
	     * This method returns the current track switch mode.
	     *
	     * @param {string} type
	     * @returns {string} mode
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getTrackSwitchModeFor(type){if(!mediaPlayerInitialized){throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;}return mediaController.getSwitchMode(type);} /**
	     * This method sets the current track switch mode. Available options are:
	     *
	     * MediaController.TRACK_SWITCH_MODE_NEVER_REPLACE
	     * (used to forbid clearing the buffered data (prior to current playback position) after track switch.
	     * Defers to fastSwitchEnabled for placement of new data. Default for video)
	     *
	     * MediaController.TRACK_SWITCH_MODE_ALWAYS_REPLACE
	     * (used to clear the buffered data (prior to current playback position) after track switch. Default for audio)
	     *
	     * @param {string} type
	     * @param {string} mode
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setTrackSwitchModeFor(type,mode){if(!mediaPlayerInitialized){throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;}mediaController.setSwitchMode(type,mode);} /**
	     * This method sets the selection mode for the initial track. This mode defines how the initial track will be selected
	     * if no initial media settings are set. If initial media settings are set this parameter will be ignored. Available options are:
	     *
	     * MediaController.TRACK_SELECTION_MODE_HIGHEST_BITRATE
	     * this mode makes the player select the track with a highest bitrate. This mode is a default mode.
	     *
	     * MediaController.TRACK_SELECTION_MODE_WIDEST_RANGE
	     * this mode makes the player select the track with a widest range of bitrates
	     *
	     * @param {string} mode
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setSelectionModeForInitialTrack(mode){if(!mediaPlayerInitialized){throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;}mediaController.setSelectionModeForInitialTrack(mode);} /**
	     * This method returns the track selection mode.
	     *
	     * @returns {string} mode
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getSelectionModeForInitialTrack(){if(!mediaPlayerInitialized){throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;}return mediaController.getSelectionModeForInitialTrack();} /*
	    ---------------------------------------------------------------------------

	        PROTECTION MANAGEMENT

	    ---------------------------------------------------------------------------
	    /**
	     * Detects if Protection is included and returns an instance of ProtectionController.js
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getProtectionController(){return detectProtection();} /**
	     * Will override dash.js protection controller.
	     * @param {ProtectionController} value - valid protection controller instance.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function attachProtectionController(value){protectionController = value;} /**
	     * Sets Protection Data required to setup the Protection Module (DRM). Protection Data must
	     * be set before initializing MediaPlayer or, once initialized, before PROTECTION_CREATED event is fired.
	     * @see {@link module:MediaPlayer#initialize initialize()}
	     * @see {@link ProtectionEvents#event:PROTECTION_CREATED dashjs.Protection.events.PROTECTION_CREATED}
	     * @param {ProtectionData} value - object containing
	     * property names corresponding to key system name strings and associated
	     * values being instances of.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function setProtectionData(value){protectionData = value; // Propagate changes in case StreamController is already created
	if(streamController){streamController.setProtectionData(protectionData);}} /*
	    ---------------------------------------------------------------------------

	        THUMBNAILS MANAGEMENT

	    ---------------------------------------------------------------------------
	    */ /**
	     * Return the thumbnail at time position.
	     * @returns {Thumbnail|null} - Thumbnail for the given time position. It returns null in case there are is not a thumbnails representation or
	     * if it doesn't contain a thumbnail for the given time position.
	     * @param {number} time - A relative time, in seconds, based on the return value of the {@link module:MediaPlayer#duration duration()} method is expected
	     * @param {function} callback - A Callback function provided when retrieving thumbnail
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getThumbnail(time,callback){if(time < 0){return null;}var s=playbackController.getIsDynamic()?getDVRSeekOffset(time):time;var stream=streamController.getStreamForTime(s);if(stream === null){return null;}var thumbnailController=stream.getThumbnailController();if(!thumbnailController){return null;}var timeInPeriod=streamController.getTimeRelativeToStreamId(s,stream.getId());return thumbnailController.get(timeInPeriod,callback);} /*
	    ---------------------------------------------------------------------------

	        PROTECTION CONTROLLER MANAGEMENT

	    ---------------------------------------------------------------------------
	    */ /**
	     * Set the value for the ProtectionController and MediaKeys life cycle. If true, the
	     * ProtectionController and then created MediaKeys and MediaKeySessions will be preserved during
	     * the MediaPlayer lifetime.
	     *
	     * @param {boolean=} value - True or false flag.
	     *
	     * @memberof module:MediaPlayer
	     * @instance
	     */function keepProtectionMediaKeys(value){mediaPlayerModel.setKeepProtectionMediaKeys(value);} /*
	    ---------------------------------------------------------------------------

	        TOOLS AND OTHERS FUNCTIONS

	    ---------------------------------------------------------------------------
	    */ /**
	     * Allows application to retrieve a manifest.  Manifest loading is asynchro
	     * nous and
	     * requires the app-provided callback function
	     *
	     * @param {string} url - url the manifest url
	     * @param {function} callback - A Callback function provided when retrieving manifests
	     * @memberof module:MediaPlayer
	     * @instance
	     */function retrieveManifest(url,callback){var manifestLoader=createManifestLoader();var self=this;var handler=function handler(e){if(!e.error){callback(e.manifest);}else {callback(null,e.error);}eventBus.off(_coreEventsEvents2['default'].INTERNAL_MANIFEST_LOADED,handler,self);manifestLoader.reset();};eventBus.on(_coreEventsEvents2['default'].INTERNAL_MANIFEST_LOADED,handler,self);uriFragmentModel.initialize(url);manifestLoader.load(url);} /**
	     * Returns the source string or manifest that was attached by calling attachSource()
	     * @returns {string | manifest}
	     * @memberof module:MediaPlayer
	     * @instance
	     */function getSource(){if(!source){throw SOURCE_NOT_ATTACHED_ERROR;}return source;} /**
	     * Use this method to set a source URL to a valid MPD manifest file OR
	     * a previously downloaded and parsed manifest object.  Optionally, can
	     * also provide protection information
	     *
	     * @param {string|Object} urlOrManifest - A URL to a valid MPD manifest file, or a
	     * parsed manifest object.
	     *
	     *
	     * @throws "MediaPlayer not initialized!"
	     *
	     * @memberof module:MediaPlayer
	     * @instance
	     */function attachSource(urlOrManifest){if(!mediaPlayerInitialized){throw MEDIA_PLAYER_NOT_INITIALIZED_ERROR;}if(typeof urlOrManifest === 'string'){uriFragmentModel.initialize(urlOrManifest);}source = urlOrManifest;if(streamingInitialized || playbackInitialized){resetPlaybackControllers();}if(isReady()){initializePlayback();}} /**
	     * A utility methods which converts UTC timestamp value into a valid time and date string.
	     *
	     * @param {number} time - UTC timestamp to be converted into date and time.
	     * @param {string} locales - a region identifier (i.e. en_US).
	     * @param {boolean} hour12 - 12 vs 24 hour. Set to true for 12 hour time formatting.
	     * @param {boolean} withDate - default is false. Set to true to append current date to UTC time format.
	     * @returns {string} A formatted time and date string.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function formatUTC(time,locales,hour12){var withDate=arguments.length <= 3 || arguments[3] === undefined?false:arguments[3];var dt=new Date(time * 1000);var d=dt.toLocaleDateString(locales);var t=dt.toLocaleTimeString(locales,{hour12:hour12});return withDate?t + ' ' + d:t;} /**
	     * A utility method which converts seconds into TimeCode (i.e. 300 --> 05:00).
	     *
	     * @param {number} value - A number in seconds to be converted into a formatted time code.
	     * @returns {string} A formatted time code string.
	     * @memberof module:MediaPlayer
	     * @instance
	     */function convertToTimeCode(value){value = Math.max(value,0);var h=Math.floor(value / 3600);var m=Math.floor(value % 3600 / 60);var s=Math.floor(value % 3600 % 60);return (h === 0?'':h < 10?'0' + h.toString() + ':':h.toString() + ':') + (m < 10?'0' + m.toString():m.toString()) + ':' + (s < 10?'0' + s.toString():s.toString());} /**
	     * This method should be used to extend or replace internal dash.js objects.
	     * There are two ways to extend dash.js (determined by the override argument):
	     * <ol>
	     * <li>If you set override to true any public method or property in your custom object will
	     * override the dash.js parent object's property(ies) and will be used instead but the
	     * dash.js parent module will still be created.</li>
	     *
	     * <li>If you set override to false your object will completely replace the dash.js object.
	     * (Note: This is how it was in 1.x of Dash.js with Dijon).</li>
	     * </ol>
	     * <b>When you extend you get access to this.context, this.factory and this.parent to operate with in your custom object.</b>
	     * <ul>
	     * <li><b>this.context</b> - can be used to pass context for singleton access.</li>
	     * <li><b>this.factory</b> - can be used to call factory.getSingletonInstance().</li>
	     * <li><b>this.parent</b> - is the reference of the parent object to call other public methods. (this.parent is excluded if you extend with override set to false or option 2)</li>
	     * </ul>
	     * <b>You must call extend before you call initialize</b>
	     * @see {@link module:MediaPlayer#initialize initialize()}
	     * @param {string} parentNameString - name of parent module
	     * @param {Object} childInstance - overriding object
	     * @param {boolean} override - replace only some methods (true) or the whole object (false)
	     * @memberof module:MediaPlayer
	     * @instance
	     */function extend(parentNameString,childInstance,override){_coreFactoryMaker2['default'].extend(parentNameString,childInstance,override,context);}function getActiveStream(){if(!streamingInitialized){throw STREAMING_NOT_INITIALIZED_ERROR;}var streamInfo=streamController.getActiveStreamInfo();return streamInfo?streamController.getStreamById(streamInfo.id):null;} //***********************************
	// PRIVATE METHODS
	//***********************************
	function resetPlaybackControllers(){playbackInitialized = false;streamingInitialized = false;adapter.reset();streamController.reset();playbackController.reset();abrController.reset();mediaController.reset();textController.reset();if(protectionController){if(mediaPlayerModel.getKeepProtectionMediaKeys()){protectionController.stop();}else {protectionController.reset();protectionController = null;detectProtection();}}}function createPlaybackControllers(){ // creates or get objects instances
	var manifestLoader=createManifestLoader();if(!streamController){streamController = (0,_controllersStreamController2['default'])(context).getInstance();} // configure controllers
	mediaController.setConfig({domStorage:domStorage});streamController.setConfig({capabilities:capabilities,manifestLoader:manifestLoader,manifestModel:manifestModel,dashManifestModel:dashManifestModel,mediaPlayerModel:mediaPlayerModel,protectionController:protectionController,adapter:adapter,metricsModel:metricsModel,dashMetrics:dashMetrics,errHandler:errHandler,timelineConverter:timelineConverter,videoModel:videoModel,playbackController:playbackController,domStorage:domStorage,abrController:abrController,mediaController:mediaController,textController:textController});playbackController.setConfig({streamController:streamController,metricsModel:metricsModel,dashMetrics:dashMetrics,manifestModel:manifestModel,mediaPlayerModel:mediaPlayerModel,dashManifestModel:dashManifestModel,adapter:adapter,videoModel:videoModel,timelineConverter:timelineConverter,uriFragmentModel:uriFragmentModel});abrController.setConfig({streamController:streamController,domStorage:domStorage,mediaPlayerModel:mediaPlayerModel,metricsModel:metricsModel,dashMetrics:dashMetrics,dashManifestModel:dashManifestModel,manifestModel:manifestModel,videoModel:videoModel,adapter:adapter});abrController.createAbrRulesCollection();textController.setConfig({errHandler:errHandler,manifestModel:manifestModel,dashManifestModel:dashManifestModel,mediaController:mediaController,streamController:streamController,videoModel:videoModel}); // initialises controller
	streamController.initialize(autoPlay,protectionData);}function createManifestLoader(){return (0,_ManifestLoader2['default'])(context).create({errHandler:errHandler,metricsModel:metricsModel,mediaPlayerModel:mediaPlayerModel,requestModifier:(0,_utilsRequestModifier2['default'])(context).getInstance(),mssHandler:mssHandler});}function detectProtection(){if(protectionController){return protectionController;} // do not require Protection as dependencies as this is optional and intended to be loaded separately
	var Protection=dashjs.Protection; /* jshint ignore:line */if(typeof Protection === 'function'){ //TODO need a better way to register/detect plugin components
	var protection=Protection(context).create();_coreEventsEvents2['default'].extend(Protection.events);_MediaPlayerEvents2['default'].extend(Protection.events,{publicOnly:true});_coreErrorsErrors2['default'].extend(Protection.errors);if(!capabilities){capabilities = (0,_utilsCapabilities2['default'])(context).getInstance();}protectionController = protection.createProtectionSystem({debug:debug,errHandler:errHandler,videoModel:videoModel,capabilities:capabilities,eventBus:eventBus,events:_coreEventsEvents2['default'],BASE64:_externalsBase642['default'],constants:_constantsConstants2['default']});return protectionController;}return null;}function detectMetricsReporting(){if(metricsReportingController){return;} // do not require MetricsReporting as dependencies as this is optional and intended to be loaded separately
	var MetricsReporting=dashjs.MetricsReporting; /* jshint ignore:line */if(typeof MetricsReporting === 'function'){ //TODO need a better way to register/detect plugin components
	var metricsReporting=MetricsReporting(context).create();metricsReportingController = metricsReporting.createMetricsReporting({debug:debug,eventBus:eventBus,mediaElement:getVideoElement(),dashManifestModel:dashManifestModel,metricsModel:metricsModel,events:_coreEventsEvents2['default'],constants:_constantsConstants2['default'],metricsConstants:_constantsMetricsConstants2['default']});}}function detectMss(){if(mssHandler){return;} // do not require MssHandler as dependencies as this is optional and intended to be loaded separately
	var MssHandler=dashjs.MssHandler; /* jshint ignore:line */if(typeof MssHandler === 'function'){ //TODO need a better way to register/detect plugin components
	_coreErrorsErrors2['default'].extend(MssHandler.errors);mssHandler = MssHandler(context).create({eventBus:eventBus,mediaPlayerModel:mediaPlayerModel,metricsModel:metricsModel,playbackController:playbackController,protectionController:protectionController,baseURLController:(0,_controllersBaseURLController2['default'])(context).getInstance(),errHandler:errHandler,events:_coreEventsEvents2['default'],constants:_constantsConstants2['default'],debug:debug,initSegmentType:_voMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE,BASE64:_externalsBase642['default'],ISOBoxer:_codemIsoboxer2['default']});}}function getDVRInfoMetric(){var metric=metricsModel.getReadOnlyMetricsFor(_constantsConstants2['default'].VIDEO) || metricsModel.getReadOnlyMetricsFor(_constantsConstants2['default'].AUDIO);return dashMetrics.getCurrentDVRInfo(metric);}function getAsUTC(valToConvert){var metric=getDVRInfoMetric();var availableFrom=undefined,utcValue=undefined;if(!metric){return 0;}availableFrom = metric.manifestInfo.availableFrom.getTime() / 1000;utcValue = valToConvert + (availableFrom + metric.range.start);return utcValue;}function initializePlayback(){if(!streamingInitialized && source){streamingInitialized = true;logger.info('Streaming Initialized');createPlaybackControllers();if(typeof source === 'string'){streamController.load(source);}else {streamController.loadWithManifest(source);}}if(!playbackInitialized && isReady()){playbackInitialized = true;logger.info('Playback Initialized');}}instance = {initialize:initialize,setConfig:setConfig,on:on,off:off,extend:extend,attachView:attachView,attachSource:attachSource,isReady:isReady,preload:preload,play:play,isPaused:isPaused,pause:pause,isSeeking:isSeeking,isDynamic:isDynamic,seek:seek,setPlaybackRate:setPlaybackRate,getPlaybackRate:getPlaybackRate,setMute:setMute,isMuted:isMuted,setVolume:setVolume,getVolume:getVolume,time:time,duration:duration,timeAsUTC:timeAsUTC,durationAsUTC:durationAsUTC,getActiveStream:getActiveStream,getDVRWindowSize:getDVRWindowSize,getDVRSeekOffset:getDVRSeekOffset,convertToTimeCode:convertToTimeCode,formatUTC:formatUTC,getVersion:getVersion,getDebug:getDebug,getBufferLength:getBufferLength,getVideoContainer:getVideoContainer,getTTMLRenderingDiv:getTTMLRenderingDiv,getVideoElement:getVideoElement,getSource:getSource,setLiveDelayFragmentCount:setLiveDelayFragmentCount,setLiveDelay:setLiveDelay,getLiveDelay:getLiveDelay,getCurrentLiveLatency:getCurrentLiveLatency,useSuggestedPresentationDelay:useSuggestedPresentationDelay,enableLastBitrateCaching:enableLastBitrateCaching,enableLastMediaSettingsCaching:enableLastMediaSettingsCaching,setMaxAllowedBitrateFor:setMaxAllowedBitrateFor,getMaxAllowedBitrateFor:getMaxAllowedBitrateFor,getTopBitrateInfoFor:getTopBitrateInfoFor,setMinAllowedBitrateFor:setMinAllowedBitrateFor,getMinAllowedBitrateFor:getMinAllowedBitrateFor,setMaxAllowedRepresentationRatioFor:setMaxAllowedRepresentationRatioFor,getMaxAllowedRepresentationRatioFor:getMaxAllowedRepresentationRatioFor,setAutoPlay:setAutoPlay,getAutoPlay:getAutoPlay,setScheduleWhilePaused:setScheduleWhilePaused,getScheduleWhilePaused:getScheduleWhilePaused,getDashMetrics:getDashMetrics,getMetricsFor:getMetricsFor,getQualityFor:getQualityFor,setQualityFor:setQualityFor,updatePortalSize:updatePortalSize,getLimitBitrateByPortal:getLimitBitrateByPortal,setLimitBitrateByPortal:setLimitBitrateByPortal,getUsePixelRatioInLimitBitrateByPortal:getUsePixelRatioInLimitBitrateByPortal,setUsePixelRatioInLimitBitrateByPortal:setUsePixelRatioInLimitBitrateByPortal,setTextDefaultLanguage:setTextDefaultLanguage,getTextDefaultLanguage:getTextDefaultLanguage,setTextDefaultEnabled:setTextDefaultEnabled,getTextDefaultEnabled:getTextDefaultEnabled,enableText:enableText,enableForcedTextStreaming:enableForcedTextStreaming,isTextEnabled:isTextEnabled,setTextTrack:setTextTrack,getBitrateInfoListFor:getBitrateInfoListFor,setInitialBitrateFor:setInitialBitrateFor,getInitialBitrateFor:getInitialBitrateFor,setInitialRepresentationRatioFor:setInitialRepresentationRatioFor,getInitialRepresentationRatioFor:getInitialRepresentationRatioFor,getStreamsFromManifest:getStreamsFromManifest,getTracksFor:getTracksFor,getTracksForTypeFromManifest:getTracksForTypeFromManifest,getCurrentTrackFor:getCurrentTrackFor,setInitialMediaSettingsFor:setInitialMediaSettingsFor,getInitialMediaSettingsFor:getInitialMediaSettingsFor,setCurrentTrack:setCurrentTrack,getTrackSwitchModeFor:getTrackSwitchModeFor,setTrackSwitchModeFor:setTrackSwitchModeFor,setSelectionModeForInitialTrack:setSelectionModeForInitialTrack,getSelectionModeForInitialTrack:getSelectionModeForInitialTrack,setFastSwitchEnabled:setFastSwitchEnabled,getFastSwitchEnabled:getFastSwitchEnabled,setMovingAverageMethod:setMovingAverageMethod,getMovingAverageMethod:getMovingAverageMethod,getAutoSwitchQualityFor:getAutoSwitchQualityFor,setAutoSwitchQualityFor:setAutoSwitchQualityFor,setABRStrategy:setABRStrategy,getABRStrategy:getABRStrategy,useDefaultABRRules:useDefaultABRRules,addABRCustomRule:addABRCustomRule,removeABRCustomRule:removeABRCustomRule,removeAllABRCustomRule:removeAllABRCustomRule,setBandwidthSafetyFactor:setBandwidthSafetyFactor,getBandwidthSafetyFactor:getBandwidthSafetyFactor,getAverageThroughput:getAverageThroughput,setAbandonLoadTimeout:setAbandonLoadTimeout,retrieveManifest:retrieveManifest,addUTCTimingSource:addUTCTimingSource,removeUTCTimingSource:removeUTCTimingSource,clearDefaultUTCTimingSources:clearDefaultUTCTimingSources,restoreDefaultUTCTimingSources:restoreDefaultUTCTimingSources,setBufferToKeep:setBufferToKeep,setBufferAheadToKeep:setBufferAheadToKeep,setBufferPruningInterval:setBufferPruningInterval,setStableBufferTime:setStableBufferTime,getStableBufferTime:getStableBufferTime,setBufferTimeAtTopQuality:setBufferTimeAtTopQuality,getBufferTimeAtTopQuality:getBufferTimeAtTopQuality,setBufferTimeAtTopQualityLongForm:setBufferTimeAtTopQualityLongForm,getBufferTimeAtTopQualityLongForm:getBufferTimeAtTopQualityLongForm,setFragmentLoaderRetryAttempts:setFragmentLoaderRetryAttempts,setFragmentLoaderRetryInterval:setFragmentLoaderRetryInterval,setManifestLoaderRetryAttempts:setManifestLoaderRetryAttempts,setManifestLoaderRetryInterval:setManifestLoaderRetryInterval,setXHRWithCredentialsForType:setXHRWithCredentialsForType,getXHRWithCredentialsForType:getXHRWithCredentialsForType,setJumpGaps:setJumpGaps,getJumpGaps:getJumpGaps,setSmallGapLimit:setSmallGapLimit,getSmallGapLimit:getSmallGapLimit,setLowLatencyEnabled:setLowLatencyEnabled,getLowLatencyEnabled:getLowLatencyEnabled,setCatchUpPlaybackRate:setCatchUpPlaybackRate,getCatchUpPlaybackRate:getCatchUpPlaybackRate,setLowLatencyMinDrift:setLowLatencyMinDrift,getLowLatencyMinDrift:getLowLatencyMinDrift,setLowLatencyMaxDriftBeforeSeeking:setLowLatencyMaxDriftBeforeSeeking,getLowLatencyMaxDriftBeforeSeeking:getLowLatencyMaxDriftBeforeSeeking,setManifestUpdateRetryInterval:setManifestUpdateRetryInterval,getManifestUpdateRetryInterval:getManifestUpdateRetryInterval,setLongFormContentDurationThreshold:setLongFormContentDurationThreshold,setSegmentOverlapToleranceTime:setSegmentOverlapToleranceTime,setCacheLoadThresholdForType:setCacheLoadThresholdForType,getProtectionController:getProtectionController,attachProtectionController:attachProtectionController,setProtectionData:setProtectionData,enableManifestDateHeaderTimeSource:enableManifestDateHeaderTimeSource,displayCaptionsOnTop:displayCaptionsOnTop,attachVideoContainer:attachVideoContainer,attachTTMLRenderingDiv:attachTTMLRenderingDiv,getCurrentTextTrackIndex:getCurrentTextTrackIndex,getUseDeadTimeLatencyForAbr:getUseDeadTimeLatencyForAbr,setUseDeadTimeLatencyForAbr:setUseDeadTimeLatencyForAbr,getThumbnail:getThumbnail,keepProtectionMediaKeys:keepProtectionMediaKeys,reset:reset};setup();return instance;}MediaPlayer.__dashjs_factory_name = 'MediaPlayer';var factory=_coreFactoryMaker2['default'].getClassFactory(MediaPlayer);factory.events = _MediaPlayerEvents2['default'];factory.errors = _coreErrorsErrors2['default'];_coreFactoryMaker2['default'].updateClassFactory(MediaPlayer.__dashjs_factory_name,factory);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=MediaPlayer.js.map


/***/ }),
/* 49 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * Constants declaration
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _createClass=(function(){function defineProperties(target,props){for(var i=0;i < props.length;i++) {var descriptor=props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if('value' in descriptor)descriptor.writable = true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};})();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var Constants=(function(){_createClass(Constants,[{key:'init',value:function init(){this.STREAM = 'stream';this.VIDEO = 'video';this.AUDIO = 'audio';this.TEXT = 'text';this.FRAGMENTED_TEXT = 'fragmentedText';this.EMBEDDED_TEXT = 'embeddedText';this.MUXED = 'muxed';this.IMAGE = 'image';this.LOCATION = 'Location';this.INITIALIZE = 'initialize';this.TEXT_SHOWING = 'showing';this.TEXT_HIDDEN = 'hidden';this.CC1 = 'CC1';this.CC3 = 'CC3';this.STPP = 'stpp';this.TTML = 'ttml';this.VTT = 'vtt';this.WVTT = 'wvtt';this.UTF8 = 'utf-8';this.SUGGESTED_PRESENTATION_DELAY = 'suggestedPresentationDelay';this.SCHEME_ID_URI = 'schemeIdUri';this.START_TIME = 'starttime';this.ABR_STRATEGY_DYNAMIC = 'abrDynamic';this.ABR_STRATEGY_BOLA = 'abrBola';this.ABR_STRATEGY_THROUGHPUT = 'abrThroughput';this.MOVING_AVERAGE_SLIDING_WINDOW = 'slidingWindow';this.MOVING_AVERAGE_EWMA = 'ewma';this.BAD_ARGUMENT_ERROR = 'Invalid Arguments';this.MISSING_CONFIG_ERROR = 'Missing config parameter(s)';}}]);function Constants(){_classCallCheck(this,Constants);this.init();}return Constants;})();var constants=new Constants();exports['default'] = constants;module.exports = exports['default'];
	//# sourceMappingURL=Constants.js.map


/***/ }),
/* 50 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * Metrics Constants declaration
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _createClass=(function(){function defineProperties(target,props){for(var i=0;i < props.length;i++) {var descriptor=props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if('value' in descriptor)descriptor.writable = true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};})();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var MetricsConstants=(function(){_createClass(MetricsConstants,[{key:'init',value:function init(){this.TCP_CONNECTION = 'TcpList';this.HTTP_REQUEST = 'HttpList';this.TRACK_SWITCH = 'RepSwitchList';this.BUFFER_LEVEL = 'BufferLevel';this.BUFFER_STATE = 'BufferState';this.DVR_INFO = 'DVRInfo';this.DROPPED_FRAMES = 'DroppedFrames';this.SCHEDULING_INFO = 'SchedulingInfo';this.REQUESTS_QUEUE = 'RequestsQueue';this.MANIFEST_UPDATE = 'ManifestUpdate';this.MANIFEST_UPDATE_STREAM_INFO = 'ManifestUpdatePeriodInfo';this.MANIFEST_UPDATE_TRACK_INFO = 'ManifestUpdateRepresentationInfo';this.PLAY_LIST = 'PlayList';this.DVB_ERRORS = 'DVBErrors';}}]);function MetricsConstants(){_classCallCheck(this,MetricsConstants);this.init();}return MetricsConstants;})();var constants=new MetricsConstants();exports['default'] = constants;module.exports = exports['default'];
	//# sourceMappingURL=MetricsConstants.js.map


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _BufferController=__webpack_require__(52);var _BufferController2=_interopRequireDefault(_BufferController);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var LIVE_UPDATE_PLAYBACK_TIME_INTERVAL_MS=500;function PlaybackController(){var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var instance=undefined,logger=undefined,streamController=undefined,metricsModel=undefined,dashMetrics=undefined,manifestModel=undefined,dashManifestModel=undefined,adapter=undefined,videoModel=undefined,timelineConverter=undefined,liveStartTime=undefined,wallclockTimeIntervalId=undefined,commonEarliestTime=undefined,liveDelay=undefined,bufferedRange=undefined,streamInfo=undefined,isDynamic=undefined,mediaPlayerModel=undefined,playOnceInitialized=undefined,lastLivePlaybackTime=undefined,availabilityStartTime=undefined,compatibleWithPreviousStream=undefined,isLowLatencySeekingInProgress=undefined,playbackStalled=undefined,minPlaybackRateChange=undefined,uriFragmentModel=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);reset();}function initialize(StreamInfo,compatible){streamInfo = StreamInfo;addAllListeners();isDynamic = streamInfo.manifestInfo.isDynamic;isLowLatencySeekingInProgress = false;playbackStalled = false;liveStartTime = streamInfo.start;compatibleWithPreviousStream = compatible;var ua=typeof navigator !== 'undefined'?navigator.userAgent.toLowerCase():''; // Detect safari browser (special behavior for low latency streams)
	var isSafari=/safari/.test(ua) && !/chrome/.test(ua);minPlaybackRateChange = isSafari?0.25:0.02;eventBus.on(_coreEventsEvents2['default'].DATA_UPDATE_COMPLETED,onDataUpdateCompleted,this);eventBus.on(_coreEventsEvents2['default'].BYTES_APPENDED_END_FRAGMENT,onBytesAppended,this);eventBus.on(_coreEventsEvents2['default'].LOADING_PROGRESS,onFragmentLoadProgress,this);eventBus.on(_coreEventsEvents2['default'].BUFFER_LEVEL_STATE_CHANGED,onBufferLevelStateChanged,this);eventBus.on(_coreEventsEvents2['default'].PERIOD_SWITCH_STARTED,onPeriodSwitchStarted,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_PROGRESS,onPlaybackProgression,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_TIME_UPDATED,onPlaybackProgression,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_ENDED,onPlaybackEnded,this);if(playOnceInitialized){playOnceInitialized = false;play();}}function onPeriodSwitchStarted(e){if(!isDynamic && e.fromStreamInfo && commonEarliestTime[e.fromStreamInfo.id] !== undefined){delete bufferedRange[e.fromStreamInfo.id];delete commonEarliestTime[e.fromStreamInfo.id];}}function getTimeToStreamEnd(){return parseFloat((getStreamEndTime() - getTime()).toFixed(5));}function getStreamEndTime(){var startTime=getStreamStartTime(true);var offset=isDynamic?startTime - streamInfo.start:0;return startTime + (streamInfo.duration - offset);}function play(){if(streamInfo && videoModel && videoModel.getElement()){videoModel.play();}else {playOnceInitialized = true;}}function isPaused(){return streamInfo && videoModel?videoModel.isPaused():null;}function pause(){if(streamInfo && videoModel){videoModel.pause();}}function isSeeking(){return streamInfo && videoModel?videoModel.isSeeking():null;}function seek(time,stickToBuffered,internalSeek){if(streamInfo && videoModel){if(internalSeek === true){if(time !== videoModel.getTime()){ // Internal seek = seek video model only (disable 'seeking' listener),
	// buffer(s) are already appended at given time (see onBytesAppended())
	videoModel.removeEventListener('seeking',onPlaybackSeeking);logger.info('Requesting seek to time: ' + time);videoModel.setCurrentTime(time,stickToBuffered);}}else {eventBus.trigger(_coreEventsEvents2['default'].PLAYBACK_SEEK_ASKED);logger.info('Requesting seek to time: ' + time);videoModel.setCurrentTime(time,stickToBuffered);}}}function seekToLive(){var metrics=metricsModel.getReadOnlyMetricsFor(_constantsConstants2['default'].VIDEO) || metricsModel.getReadOnlyMetricsFor(_constantsConstants2['default'].AUDIO);var DVRMetrics=dashMetrics.getCurrentDVRInfo(metrics);var DVRWindow=DVRMetrics?DVRMetrics.range:null;seek(DVRWindow.end - mediaPlayerModel.getLiveDelay(),true,false);}function getTime(){return streamInfo && videoModel?videoModel.getTime():null;}function getNormalizedTime(){var t=getTime();if(isDynamic && !isNaN(availabilityStartTime)){var timeOffset=availabilityStartTime / 1000; // Fix current time for firefox and safari (returned as an absolute time)
	if(t > timeOffset){t -= timeOffset;}}return t;}function getPlaybackRate(){return streamInfo && videoModel?videoModel.getPlaybackRate():null;}function getPlayedRanges(){return streamInfo && videoModel?videoModel.getPlayedRanges():null;}function getEnded(){return streamInfo && videoModel?videoModel.getEnded():null;}function getIsDynamic(){return isDynamic;}function getStreamController(){return streamController;}function setLiveStartTime(value){liveStartTime = value;}function getLiveStartTime(){return liveStartTime;} /**
	     * Computes the desirable delay for the live edge to avoid a risk of getting 404 when playing at the bleeding edge
	     * @param {number} fragmentDuration - seconds?
	     * @param {number} dvrWindowSize - seconds?
	     * @returns {number} object
	     * @memberof PlaybackController#
	     */function computeLiveDelay(fragmentDuration,dvrWindowSize){var mpd=dashManifestModel.getMpd(manifestModel.getValue());var delay=undefined;var ret=undefined;var END_OF_PLAYLIST_PADDING=10;if(mediaPlayerModel.getUseSuggestedPresentationDelay() && mpd.hasOwnProperty(_constantsConstants2['default'].SUGGESTED_PRESENTATION_DELAY)){delay = mpd.suggestedPresentationDelay;}else if(mediaPlayerModel.getLowLatencyEnabled()){delay = 0;}else if(mediaPlayerModel.getLiveDelay()){delay = mediaPlayerModel.getLiveDelay(); // If set by user, this value takes precedence
	}else if(!isNaN(fragmentDuration)){delay = fragmentDuration * mediaPlayerModel.getLiveDelayFragmentCount();}else {delay = streamInfo.manifestInfo.minBufferTime * 2;}if(mpd.availabilityStartTime){availabilityStartTime = mpd.availabilityStartTime.getTime();}if(dvrWindowSize > 0){ // cap target latency to:
	// - dvrWindowSize / 2 for short playlists
	// - dvrWindowSize - END_OF_PLAYLIST_PADDING for longer playlists
	var targetDelayCapping=Math.max(dvrWindowSize - END_OF_PLAYLIST_PADDING,dvrWindowSize / 2);ret = Math.min(delay,targetDelayCapping);}else {ret = delay;}liveDelay = ret;return ret;}function getLiveDelay(){return liveDelay;}function getCurrentLiveLatency(){if(!isDynamic || isNaN(availabilityStartTime)){return NaN;}var currentTime=getNormalizedTime();if(isNaN(currentTime) || currentTime === 0){return 0;}var now=new Date().getTime() + timelineConverter.getClientTimeOffset() * 1000;return Math.max(((now - availabilityStartTime - currentTime * 1000) / 1000).toFixed(3),0);}function reset(){liveStartTime = NaN;playOnceInitialized = false;commonEarliestTime = {};liveDelay = 0;availabilityStartTime = 0;bufferedRange = {};if(videoModel){eventBus.off(_coreEventsEvents2['default'].DATA_UPDATE_COMPLETED,onDataUpdateCompleted,this);eventBus.off(_coreEventsEvents2['default'].BUFFER_LEVEL_STATE_CHANGED,onBufferLevelStateChanged,this);eventBus.off(_coreEventsEvents2['default'].BYTES_APPENDED_END_FRAGMENT,onBytesAppended,this);eventBus.off(_coreEventsEvents2['default'].LOADING_PROGRESS,onFragmentLoadProgress,this);eventBus.off(_coreEventsEvents2['default'].PERIOD_SWITCH_STARTED,onPeriodSwitchStarted,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_PROGRESS,onPlaybackProgression,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_TIME_UPDATED,onPlaybackProgression,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_ENDED,onPlaybackEnded,this);stopUpdatingWallclockTime();removeAllListeners();}wallclockTimeIntervalId = null;videoModel = null;streamInfo = null;isDynamic = null;}function setConfig(config){if(!config)return;if(config.streamController){streamController = config.streamController;}if(config.metricsModel){metricsModel = config.metricsModel;}if(config.dashMetrics){dashMetrics = config.dashMetrics;}if(config.manifestModel){manifestModel = config.manifestModel;}if(config.dashManifestModel){dashManifestModel = config.dashManifestModel;}if(config.mediaPlayerModel){mediaPlayerModel = config.mediaPlayerModel;}if(config.adapter){adapter = config.adapter;}if(config.videoModel){videoModel = config.videoModel;}if(config.timelineConverter){timelineConverter = config.timelineConverter;}if(config.uriFragmentModel){uriFragmentModel = config.uriFragmentModel;}}function getStartTimeFromUriParameters(){var fragData=uriFragmentModel.getURIFragmentData();var uriParameters=undefined;if(fragData){uriParameters = {};var r=parseInt(fragData.r,10);if(r >= 0 && streamInfo && r < streamInfo.manifestInfo.DVRWindowSize && fragData.t === null){fragData.t = Math.floor(Date.now() / 1000) - streamInfo.manifestInfo.DVRWindowSize + r;}uriParameters.fragS = parseFloat(fragData.s);uriParameters.fragT = parseFloat(fragData.t);}return uriParameters;} /**
	     * @param {boolean} ignoreStartOffset - ignore URL fragment start offset if true
	     * @param {number} liveEdge - liveEdge value
	     * @returns {number} object
	     * @memberof PlaybackController#
	     */function getStreamStartTime(ignoreStartOffset,liveEdge){var presentationStartTime=undefined;var startTimeOffset=NaN;if(!ignoreStartOffset){var uriParameters=getStartTimeFromUriParameters();if(uriParameters){startTimeOffset = !isNaN(uriParameters.fragS)?uriParameters.fragS:uriParameters.fragT;}else {startTimeOffset = 0;}}else {startTimeOffset = streamInfo.start;}if(isDynamic){if(!isNaN(startTimeOffset)){presentationStartTime = startTimeOffset - streamInfo.manifestInfo.availableFrom.getTime() / 1000;if(presentationStartTime > liveStartTime || presentationStartTime < (!isNaN(liveEdge)?liveEdge - streamInfo.manifestInfo.DVRWindowSize:NaN)){presentationStartTime = null;}}presentationStartTime = presentationStartTime || liveStartTime;}else {if(!isNaN(startTimeOffset) && startTimeOffset < Math.max(streamInfo.manifestInfo.duration,streamInfo.duration) && startTimeOffset >= 0){presentationStartTime = startTimeOffset;}else {var earliestTime=commonEarliestTime[streamInfo.id]; //set by ready bufferStart after first onBytesAppended
	presentationStartTime = earliestTime !== undefined?Math.max(earliestTime.audio !== undefined?earliestTime.audio:0,earliestTime.video !== undefined?earliestTime.video:0,streamInfo.start):streamInfo.start;}}return presentationStartTime;}function getActualPresentationTime(currentTime){var metrics=metricsModel.getReadOnlyMetricsFor(_constantsConstants2['default'].VIDEO) || metricsModel.getReadOnlyMetricsFor(_constantsConstants2['default'].AUDIO);var DVRMetrics=dashMetrics.getCurrentDVRInfo(metrics);var DVRWindow=DVRMetrics?DVRMetrics.range:null;var actualTime=undefined;if(!DVRWindow)return NaN;if(currentTime > DVRWindow.end){actualTime = Math.max(DVRWindow.end - streamInfo.manifestInfo.minBufferTime * 2,DVRWindow.start);}else if(currentTime + 0.250 < DVRWindow.start){ // Checking currentTime plus 250ms as the 'timeupdate' is fired with a frequency between 4Hz and 66Hz
	// https://developer.mozilla.org/en-US/docs/Web/Events/timeupdate
	// http://w3c.github.io/html/single-page.html#offsets-into-the-media-resource
	actualTime = DVRWindow.start;}else {return currentTime;}return actualTime;}function startUpdatingWallclockTime(){if(wallclockTimeIntervalId !== null)return;var tick=function tick(){onWallclockTime();};wallclockTimeIntervalId = setInterval(tick,mediaPlayerModel.getWallclockTimeUpdateInterval());}function stopUpdatingWallclockTime(){clearInterval(wallclockTimeIntervalId);wallclockTimeIntervalId = null;}function updateCurrentTime(){if(isPaused() || !isDynamic || videoModel.getReadyState() === 0)return;var currentTime=getNormalizedTime();var actualTime=getActualPresentationTime(currentTime);var timeChanged=!isNaN(actualTime) && actualTime !== currentTime;if(timeChanged){seek(actualTime);}}function onDataUpdateCompleted(e){if(e.error)return;var representationInfo=adapter.convertDataToRepresentationInfo(e.currentRepresentation);var info=representationInfo.mediaInfo.streamInfo;if(streamInfo.id !== info.id)return;streamInfo = info;updateCurrentTime();}function onCanPlay(){eventBus.trigger(_coreEventsEvents2['default'].CAN_PLAY);}function onPlaybackStart(){logger.info('Native video element event: play');updateCurrentTime();startUpdatingWallclockTime();eventBus.trigger(_coreEventsEvents2['default'].PLAYBACK_STARTED,{startTime:getTime()});}function onPlaybackWaiting(){logger.info('Native video element event: waiting');eventBus.trigger(_coreEventsEvents2['default'].PLAYBACK_WAITING,{playingTime:getTime()});}function onPlaybackPlaying(){logger.info('Native video element event: playing');eventBus.trigger(_coreEventsEvents2['default'].PLAYBACK_PLAYING,{playingTime:getTime()});}function onPlaybackPaused(){logger.info('Native video element event: pause');eventBus.trigger(_coreEventsEvents2['default'].PLAYBACK_PAUSED,{ended:getEnded()});}function onPlaybackSeeking(){var seekTime=getTime();logger.info('Seeking to: ' + seekTime);startUpdatingWallclockTime();eventBus.trigger(_coreEventsEvents2['default'].PLAYBACK_SEEKING,{seekTime:seekTime});}function onPlaybackSeeked(){logger.info('Native video element event: seeked');eventBus.trigger(_coreEventsEvents2['default'].PLAYBACK_SEEKED); // Reactivate 'seeking' event listener (see seek())
	videoModel.addEventListener('seeking',onPlaybackSeeking);}function onPlaybackTimeUpdated(){eventBus.trigger(_coreEventsEvents2['default'].PLAYBACK_TIME_UPDATED,{timeToEnd:getTimeToStreamEnd(),time:getTime()});}function updateLivePlaybackTime(){var now=Date.now();if(!lastLivePlaybackTime || now > lastLivePlaybackTime + LIVE_UPDATE_PLAYBACK_TIME_INTERVAL_MS){lastLivePlaybackTime = now;onPlaybackTimeUpdated();}}function onPlaybackProgress(){eventBus.trigger(_coreEventsEvents2['default'].PLAYBACK_PROGRESS);}function onPlaybackRateChanged(){var rate=getPlaybackRate();logger.info('Native video element event: ratechange: ',rate);eventBus.trigger(_coreEventsEvents2['default'].PLAYBACK_RATE_CHANGED,{playbackRate:rate});}function onPlaybackMetaDataLoaded(){logger.info('Native video element event: loadedmetadata');eventBus.trigger(_coreEventsEvents2['default'].PLAYBACK_METADATA_LOADED);startUpdatingWallclockTime();} // Event to handle the native video element ended event
	function onNativePlaybackEnded(){logger.info('Native video element event: ended');pause();stopUpdatingWallclockTime();eventBus.trigger(_coreEventsEvents2['default'].PLAYBACK_ENDED,{'isLast':streamController.getActiveStreamInfo().isLast});} // Handle DASH PLAYBACK_ENDED event
	function onPlaybackEnded(e){if(wallclockTimeIntervalId && e.isLast){ // PLAYBACK_ENDED was triggered elsewhere, react.
	logger.info('onPlaybackEnded -- PLAYBACK_ENDED but native video element didn\'t fire ended');videoModel.setCurrentTime(getStreamEndTime());pause();stopUpdatingWallclockTime();}}function onPlaybackError(event){var target=event.target || event.srcElement;eventBus.trigger(_coreEventsEvents2['default'].PLAYBACK_ERROR,{error:target.error});}function onWallclockTime(){eventBus.trigger(_coreEventsEvents2['default'].WALLCLOCK_TIME_UPDATED,{isDynamic:isDynamic,time:new Date()}); // Updates playback time for paused dynamic streams
	// (video element doesn't call timeupdate when the playback is paused)
	if(getIsDynamic() && isPaused()){updateLivePlaybackTime();}}function checkTimeInRanges(time,ranges){if(ranges && ranges.length > 0){for(var i=0,len=ranges.length;i < len;i++) {if(time >= ranges.start(i) && time < ranges.end(i)){return true;}}}return false;}function onPlaybackProgression(){if(isDynamic && mediaPlayerModel.getLowLatencyEnabled() && !isPaused() && !isSeeking()){if(needToCatchUp()){startPlaybackCatchUp();}else {stopPlaybackCatchUp();}}}function getBufferLevel(){var bufferLevel=null;streamController.getActiveStreamProcessors().forEach(function(p){var bl=p.getBufferLevel();if(bufferLevel === null){bufferLevel = bl;}else {bufferLevel = Math.min(bufferLevel,bl);}});return bufferLevel;}function needToCatchUp(){return mediaPlayerModel.getCatchUpPlaybackRate() > 0 && getTime() > 0 && Math.abs(getCurrentLiveLatency() - mediaPlayerModel.getLiveDelay()) > mediaPlayerModel.getLowLatencyMinDrift();}function startPlaybackCatchUp(){if(videoModel){var cpr=mediaPlayerModel.getCatchUpPlaybackRate();var _liveDelay=mediaPlayerModel.getLiveDelay();var deltaLatency=getCurrentLiveLatency() - _liveDelay;var d=deltaLatency * 5; // Playback rate must be between (1 - cpr) - (1 + cpr)
	// ex: if cpr is 0.5, it can have values between 0.5 - 1.5
	var s=cpr * 2 / (1 + Math.pow(Math.E,-d));var newRate=1 - cpr + s; // take into account situations in which there are buffer stalls,
	// in which increasing playbackRate to reach target latency will
	// just cause more and more stall situations
	if(playbackStalled){var bufferLevel=getBufferLevel();if(bufferLevel > _liveDelay / 2){playbackStalled = false;}else if(deltaLatency > 0){newRate = 1.0;}} // don't change playbackrate for small variations (don't overload element with playbackrate changes)
	if(Math.abs(videoModel.getPlaybackRate() - newRate) > minPlaybackRateChange){videoModel.setPlaybackRate(newRate);}if(mediaPlayerModel.getLowLatencyMaxDriftBeforeSeeking() > 0 && !isLowLatencySeekingInProgress && deltaLatency > mediaPlayerModel.getLowLatencyMaxDriftBeforeSeeking()){logger.info('Low Latency catchup mechanism. Latency too high, doing a seek to live point');isLowLatencySeekingInProgress = true;seekToLive();}else {isLowLatencySeekingInProgress = false;}}}function stopPlaybackCatchUp(){if(videoModel){videoModel.setPlaybackRate(1.0);}}function onBytesAppended(e){var earliestTime=undefined,initialStartTime=undefined;var ranges=e.bufferedRanges;if(!ranges || !ranges.length)return;if(commonEarliestTime[streamInfo.id] && commonEarliestTime[streamInfo.id].started === true){ //stream has already been started.
	return;}var type=e.sender.getType();if(bufferedRange[streamInfo.id] === undefined){bufferedRange[streamInfo.id] = [];}bufferedRange[streamInfo.id][type] = ranges;if(commonEarliestTime[streamInfo.id] === undefined){commonEarliestTime[streamInfo.id] = [];commonEarliestTime[streamInfo.id].started = false;}if(commonEarliestTime[streamInfo.id][type] === undefined){commonEarliestTime[streamInfo.id][type] = Math.max(ranges.start(0),streamInfo.start);}var hasVideoTrack=streamController.isTrackTypePresent(_constantsConstants2['default'].VIDEO);var hasAudioTrack=streamController.isTrackTypePresent(_constantsConstants2['default'].AUDIO);initialStartTime = getStreamStartTime(false);if(hasAudioTrack && hasVideoTrack){ //current stream has audio and video contents
	if(!isNaN(commonEarliestTime[streamInfo.id].audio) && !isNaN(commonEarliestTime[streamInfo.id].video)){if(commonEarliestTime[streamInfo.id].audio < commonEarliestTime[streamInfo.id].video){ // common earliest is video time
	// check buffered audio range has video time, if ok, we seek, otherwise, we wait some other data
	earliestTime = commonEarliestTime[streamInfo.id].video > initialStartTime?commonEarliestTime[streamInfo.id].video:initialStartTime;ranges = bufferedRange[streamInfo.id].audio;}else { // common earliest is audio time
	// check buffered video range has audio time, if ok, we seek, otherwise, we wait some other data
	earliestTime = commonEarliestTime[streamInfo.id].audio > initialStartTime?commonEarliestTime[streamInfo.id].audio:initialStartTime;ranges = bufferedRange[streamInfo.id].video;}if(checkTimeInRanges(earliestTime,ranges)){if(!isSeeking() && !compatibleWithPreviousStream && earliestTime !== 0){seek(earliestTime,true,true);}commonEarliestTime[streamInfo.id].started = true;}}}else { //current stream has only audio or only video content
	if(commonEarliestTime[streamInfo.id][type]){earliestTime = commonEarliestTime[streamInfo.id][type] > initialStartTime?commonEarliestTime[streamInfo.id][type]:initialStartTime;if(!isSeeking() && !compatibleWithPreviousStream){seek(earliestTime,false,true);}commonEarliestTime[streamInfo.id].started = true;}}}function onFragmentLoadProgress(e){ // If using fetch and stream mode is not available, readjust live latency so it is 20% higher than segment duration
	if(e.stream === false && mediaPlayerModel.getLowLatencyEnabled() && !isNaN(e.request.duration)){var minDelay=1.2 * e.request.duration;if(minDelay > mediaPlayerModel.getLiveDelay()){logger.warn('Browser does not support fetch API with StreamReader. Increasing live delay to be 20% higher than segment duration:',minDelay.toFixed(2));mediaPlayerModel.setLiveDelay(minDelay);}}}function onBufferLevelStateChanged(e){ // do not stall playback when get an event from Stream that is not active
	if(e.streamInfo.id !== streamInfo.id)return;if(e.state === _BufferController2['default'].BUFFER_EMPTY && !isSeeking()){if(!playbackStalled){playbackStalled = true;if(!mediaPlayerModel.getLowLatencyEnabled()){stopPlaybackCatchUp();}}}}function onPlaybackStalled(e){eventBus.trigger(_coreEventsEvents2['default'].PLAYBACK_STALLED,{e:e});}function addAllListeners(){videoModel.addEventListener('canplay',onCanPlay);videoModel.addEventListener('play',onPlaybackStart);videoModel.addEventListener('waiting',onPlaybackWaiting);videoModel.addEventListener('playing',onPlaybackPlaying);videoModel.addEventListener('pause',onPlaybackPaused);videoModel.addEventListener('error',onPlaybackError);videoModel.addEventListener('seeking',onPlaybackSeeking);videoModel.addEventListener('seeked',onPlaybackSeeked);videoModel.addEventListener('timeupdate',onPlaybackTimeUpdated);videoModel.addEventListener('progress',onPlaybackProgress);videoModel.addEventListener('ratechange',onPlaybackRateChanged);videoModel.addEventListener('loadedmetadata',onPlaybackMetaDataLoaded);videoModel.addEventListener('stalled',onPlaybackStalled);videoModel.addEventListener('ended',onNativePlaybackEnded);}function removeAllListeners(){videoModel.removeEventListener('canplay',onCanPlay);videoModel.removeEventListener('play',onPlaybackStart);videoModel.removeEventListener('waiting',onPlaybackWaiting);videoModel.removeEventListener('playing',onPlaybackPlaying);videoModel.removeEventListener('pause',onPlaybackPaused);videoModel.removeEventListener('error',onPlaybackError);videoModel.removeEventListener('seeking',onPlaybackSeeking);videoModel.removeEventListener('seeked',onPlaybackSeeked);videoModel.removeEventListener('timeupdate',onPlaybackTimeUpdated);videoModel.removeEventListener('progress',onPlaybackProgress);videoModel.removeEventListener('ratechange',onPlaybackRateChanged);videoModel.removeEventListener('loadedmetadata',onPlaybackMetaDataLoaded);videoModel.removeEventListener('stalled',onPlaybackStalled);videoModel.removeEventListener('ended',onNativePlaybackEnded);}instance = {initialize:initialize,setConfig:setConfig,getStartTimeFromUriParameters:getStartTimeFromUriParameters,getStreamStartTime:getStreamStartTime,getTimeToStreamEnd:getTimeToStreamEnd,getTime:getTime,getNormalizedTime:getNormalizedTime,getPlaybackRate:getPlaybackRate,getPlayedRanges:getPlayedRanges,getEnded:getEnded,getIsDynamic:getIsDynamic,getStreamController:getStreamController,setLiveStartTime:setLiveStartTime,getLiveStartTime:getLiveStartTime,computeLiveDelay:computeLiveDelay,getLiveDelay:getLiveDelay,getCurrentLiveLatency:getCurrentLiveLatency,play:play,isPaused:isPaused,pause:pause,isSeeking:isSeeking,seek:seek,reset:reset};setup();return instance;}PlaybackController.__dashjs_factory_name = 'PlaybackController';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(PlaybackController);module.exports = exports['default'];
	//# sourceMappingURL=PlaybackController.js.map


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _modelsFragmentModel=__webpack_require__(53);var _modelsFragmentModel2=_interopRequireDefault(_modelsFragmentModel);var _SourceBufferSink=__webpack_require__(61);var _SourceBufferSink2=_interopRequireDefault(_SourceBufferSink);var _PreBufferSink=__webpack_require__(121);var _PreBufferSink2=_interopRequireDefault(_PreBufferSink);var _AbrController=__webpack_require__(122);var _AbrController2=_interopRequireDefault(_AbrController);var _MediaController=__webpack_require__(136);var _MediaController2=_interopRequireDefault(_MediaController);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _utilsBoxParser=__webpack_require__(67);var _utilsBoxParser2=_interopRequireDefault(_utilsBoxParser);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _utilsInitCache=__webpack_require__(137);var _utilsInitCache2=_interopRequireDefault(_utilsInitCache);var _voDashJSError=__webpack_require__(62);var _voDashJSError2=_interopRequireDefault(_voDashJSError);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);var _voMetricsHTTPRequest=__webpack_require__(65);var BUFFER_LOADED='bufferLoaded';var BUFFER_EMPTY='bufferStalled';var STALL_THRESHOLD=0.5;var BUFFER_END_THRESHOLD=0.5;var BUFFER_RANGE_CALCULATION_THRESHOLD=0.01;var QUOTA_EXCEEDED_ERROR_CODE=22;var BUFFER_CONTROLLER_TYPE='BufferController';function BufferController(config){config = config || {};var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var metricsModel=config.metricsModel;var mediaPlayerModel=config.mediaPlayerModel;var errHandler=config.errHandler;var streamController=config.streamController;var mediaController=config.mediaController;var adapter=config.adapter;var textController=config.textController;var abrController=config.abrController;var playbackController=config.playbackController;var type=config.type;var streamProcessor=config.streamProcessor;var instance=undefined,logger=undefined,requiredQuality=undefined,isBufferingCompleted=undefined,bufferLevel=undefined,criticalBufferLevel=undefined,mediaSource=undefined,maxAppendedIndex=undefined,lastIndex=undefined,buffer=undefined,dischargeBuffer=undefined,bufferState=undefined,appendedBytesInfo=undefined,wallclockTicked=undefined,isPruningInProgress=undefined,initCache=undefined,seekStartTime=undefined,seekClearedBufferingCompleted=undefined,pendingPruningRanges=undefined,bufferResetInProgress=undefined,mediaChunk=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);initCache = (0,_utilsInitCache2['default'])(context).getInstance();resetInitialSettings();}function getBufferControllerType(){return BUFFER_CONTROLLER_TYPE;}function initialize(Source){setMediaSource(Source);requiredQuality = abrController.getQualityFor(type,streamProcessor.getStreamInfo());eventBus.on(_coreEventsEvents2['default'].DATA_UPDATE_COMPLETED,onDataUpdateCompleted,this);eventBus.on(_coreEventsEvents2['default'].INIT_FRAGMENT_LOADED,onInitFragmentLoaded,this);eventBus.on(_coreEventsEvents2['default'].MEDIA_FRAGMENT_LOADED,onMediaFragmentLoaded,this);eventBus.on(_coreEventsEvents2['default'].QUALITY_CHANGE_REQUESTED,onQualityChanged,this);eventBus.on(_coreEventsEvents2['default'].STREAM_COMPLETED,onStreamCompleted,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_PLAYING,onPlaybackPlaying,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_PROGRESS,onPlaybackProgression,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_TIME_UPDATED,onPlaybackProgression,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_RATE_CHANGED,onPlaybackRateChanged,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_SEEKING,onPlaybackSeeking,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_SEEKED,onPlaybackSeeked,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_STALLED,onPlaybackStalled,this);eventBus.on(_coreEventsEvents2['default'].WALLCLOCK_TIME_UPDATED,onWallclockTimeUpdated,this);eventBus.on(_coreEventsEvents2['default'].CURRENT_TRACK_CHANGED,onCurrentTrackChanged,this,_coreEventBus2['default'].EVENT_PRIORITY_HIGH);eventBus.on(_coreEventsEvents2['default'].SOURCEBUFFER_REMOVE_COMPLETED,onRemoved,this);}function createBuffer(mediaInfo,oldBuffers){if(!initCache || !mediaInfo || !streamProcessor)return null;if(mediaSource){try{if(oldBuffers && oldBuffers[type]){buffer = (0,_SourceBufferSink2['default'])(context).create(mediaSource,mediaInfo,onAppended.bind(this),oldBuffers[type]);}else {buffer = (0,_SourceBufferSink2['default'])(context).create(mediaSource,mediaInfo,onAppended.bind(this));}if(typeof buffer.getBuffer().initialize === 'function'){buffer.getBuffer().initialize(type,streamProcessor);}}catch(e) {logger.fatal('Caught error on create SourceBuffer: ' + e);errHandler.mediaSourceError('Error creating ' + type + ' source buffer.');errHandler.error(new _voDashJSError2['default'](_coreErrorsErrors2['default'].MEDIASOURCE_TYPE_UNSUPPORTED_CODE,_coreErrorsErrors2['default'].MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type));}}else {buffer = (0,_PreBufferSink2['default'])(context).create(onAppended.bind(this));}updateBufferTimestampOffset(streamProcessor.getRepresentationInfo(requiredQuality).MSETimeOffset);return buffer;}function dischargePreBuffer(){if(buffer && dischargeBuffer && typeof dischargeBuffer.discharge === 'function'){var ranges=dischargeBuffer.getAllBufferRanges();if(ranges.length > 0){var rangeStr='Beginning ' + type + 'PreBuffer discharge, adding buffer for:';for(var i=0;i < ranges.length;i++) {rangeStr += ' start: ' + ranges.start(i) + ', end: ' + ranges.end(i) + ';';}logger.debug(rangeStr);}else {logger.debug('PreBuffer discharge requested, but there were no media segments in the PreBuffer.');}var chunks=dischargeBuffer.discharge();var lastInit=null;for(var j=0;j < chunks.length;j++) {var chunk=chunks[j];var initChunk=initCache.extract(chunk.streamId,chunk.representationId);if(initChunk){if(lastInit !== initChunk){buffer.append(initChunk);lastInit = initChunk;}buffer.append(chunk); //TODO Think about supressing buffer events the second time round after a discharge?
	}}dischargeBuffer.reset();dischargeBuffer = null;}}function isActive(){return streamProcessor && streamController && streamProcessor.getStreamInfo();}function onInitFragmentLoaded(e){if(e.fragmentModel !== streamProcessor.getFragmentModel())return;logger.info('Init fragment finished loading saving to',type + '\'s init cache');initCache.save(e.chunk);logger.debug('Append Init fragment',type,' with representationId:',e.chunk.representationId,' and quality:',e.chunk.quality);appendToBuffer(e.chunk);}function switchInitData(streamId,representationId,bufferResetEnabled){var chunk=initCache.extract(streamId,representationId);bufferResetInProgress = bufferResetEnabled === true?bufferResetEnabled:false;if(chunk){logger.info('Append Init fragment',type,' with representationId:',chunk.representationId,' and quality:',chunk.quality);appendToBuffer(chunk);}else {eventBus.trigger(_coreEventsEvents2['default'].INIT_REQUESTED,{sender:instance});}}function onMediaFragmentLoaded(e){if(e.fragmentModel !== streamProcessor.getFragmentModel())return;var chunk=e.chunk;var bytes=chunk.bytes;var quality=chunk.quality;var currentRepresentation=streamProcessor.getRepresentationInfo(quality);var eventStreamMedia=adapter.getEventsFor(currentRepresentation.mediaInfo,streamProcessor);var eventStreamTrack=adapter.getEventsFor(currentRepresentation,streamProcessor);if(eventStreamMedia && eventStreamMedia.length > 0 || eventStreamTrack && eventStreamTrack.length > 0){var request=streamProcessor.getFragmentModel().getRequests({state:_modelsFragmentModel2['default'].FRAGMENT_MODEL_EXECUTED,quality:quality,index:chunk.index})[0];var events=handleInbandEvents(bytes,request,eventStreamMedia,eventStreamTrack);streamProcessor.addInbandEvents(events);}if(bufferResetInProgress){mediaChunk = chunk;var ranges=buffer && buffer.getAllBufferRanges();if(ranges && ranges.length > 0 && playbackController.getTimeToStreamEnd() > STALL_THRESHOLD){logger.debug('Clearing buffer because track changed - ' + (ranges.end(ranges.length - 1) + BUFFER_END_THRESHOLD));clearBuffers([{start:0,end:ranges.end(ranges.length - 1) + BUFFER_END_THRESHOLD,force:true // Force buffer removal even when buffering is completed and MediaSource is ended
	}]);}}else {appendToBuffer(chunk);}}function appendToBuffer(chunk){buffer.append(chunk);if(chunk.mediaInfo.type === _constantsConstants2['default'].VIDEO){eventBus.trigger(_coreEventsEvents2['default'].VIDEO_CHUNK_RECEIVED,{chunk:chunk});}}function showBufferRanges(ranges){if(ranges && ranges.length > 0){for(var i=0,len=ranges.length;i < len;i++) {logger.debug('Buffered Range for type:',type,':',ranges.start(i),' - ',ranges.end(i),' currentTime = ',playbackController.getTime());}}}function onAppended(e){if(e.error){if(e.error.code === QUOTA_EXCEEDED_ERROR_CODE){criticalBufferLevel = getTotalBufferedTime() * 0.8;logger.warn('Quota exceeded for type: ' + type + ', Critical Buffer: ' + criticalBufferLevel);if(criticalBufferLevel > 0){ // recalculate buffer lengths to keep (bufferToKeep, bufferAheadToKeep, bufferTimeAtTopQuality) according to criticalBufferLevel
	var bufferToKeep=Math.max(0.2 * criticalBufferLevel,1);var bufferAhead=criticalBufferLevel - bufferToKeep;mediaPlayerModel.setBufferToKeep(parseFloat(bufferToKeep).toFixed(5));mediaPlayerModel.setBufferAheadToKeep(parseFloat(bufferAhead).toFixed(5));}}if(e.error.code === QUOTA_EXCEEDED_ERROR_CODE || !hasEnoughSpaceToAppend()){logger.warn('Clearing playback buffer to overcome quota exceed situation for type: ' + type);eventBus.trigger(_coreEventsEvents2['default'].QUOTA_EXCEEDED,{sender:instance,criticalBufferLevel:criticalBufferLevel}); //Tells ScheduleController to stop scheduling.
	pruneAllSafely(); // Then we clear the buffer and onCleared event will tell ScheduleController to start scheduling again.
	}return;}appendedBytesInfo = e.chunk;if(appendedBytesInfo && !isNaN(appendedBytesInfo.index)){maxAppendedIndex = Math.max(appendedBytesInfo.index,maxAppendedIndex);checkIfBufferingCompleted();}var ranges=buffer.getAllBufferRanges();if(appendedBytesInfo.segmentType === _voMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE){showBufferRanges(ranges);onPlaybackProgression();}else {if(bufferResetInProgress){var currentTime=playbackController.getTime();logger.debug('AppendToBuffer seek target should be ' + currentTime);streamProcessor.getScheduleController().setSeekTarget(currentTime);adapter.setIndexHandlerTime(streamProcessor,currentTime);}}var dataEvent={sender:instance,quality:appendedBytesInfo.quality,startTime:appendedBytesInfo.start,index:appendedBytesInfo.index,bufferedRanges:ranges};if(appendedBytesInfo && !appendedBytesInfo.endFragment){eventBus.trigger(_coreEventsEvents2['default'].BYTES_APPENDED,dataEvent);}else if(appendedBytesInfo){eventBus.trigger(_coreEventsEvents2['default'].BYTES_APPENDED_END_FRAGMENT,dataEvent);}}function onQualityChanged(e){if(requiredQuality === e.newQuality || type !== e.mediaType || streamProcessor.getStreamInfo().id !== e.streamInfo.id)return;updateBufferTimestampOffset(streamProcessor.getRepresentationInfo(e.newQuality).MSETimeOffset);requiredQuality = e.newQuality;} //**********************************************************************
	// START Buffer Level, State & Sufficiency Handling.
	//**********************************************************************
	function onPlaybackSeeking(){if(isBufferingCompleted){seekClearedBufferingCompleted = true;isBufferingCompleted = false; //a seek command has occured, reset lastIndex value, it will be set next time that onStreamCompleted will be called.
	lastIndex = Number.POSITIVE_INFINITY;}if(type !== _constantsConstants2['default'].FRAGMENTED_TEXT){ // remove buffer after seeking operations
	pruneAllSafely();}else {onPlaybackProgression();}}function onPlaybackSeeked(){seekStartTime = undefined;} // Prune full buffer but what is around current time position
	function pruneAllSafely(){var ranges=getAllRangesWithSafetyFactor();if(!ranges || ranges.length === 0){onPlaybackProgression();}clearBuffers(ranges);} // Get all buffer ranges but a range around current time position
	function getAllRangesWithSafetyFactor(){var clearRanges=[];var ranges=buffer.getAllBufferRanges();if(!ranges || ranges.length === 0){return clearRanges;}var currentTime=playbackController.getTime();var endOfBuffer=ranges.end(ranges.length - 1) + BUFFER_END_THRESHOLD;var currentTimeRequest=streamProcessor.getFragmentModel().getRequests({state:_modelsFragmentModel2['default'].FRAGMENT_MODEL_EXECUTED,time:currentTime,threshold:BUFFER_RANGE_CALCULATION_THRESHOLD})[0]; // There is no request in current time position yet. Let's remove everything
	if(!currentTimeRequest){logger.debug('getAllRangesWithSafetyFactor for',type,'- No request found in current time position, removing full buffer 0 -',endOfBuffer);clearRanges.push({start:0,end:endOfBuffer});}else { // Build buffer behind range. To avoid pruning time around current time position,
	// we include fragment right behind the one in current time position
	var behindRange={start:0,end:currentTimeRequest.startTime - STALL_THRESHOLD};var prevReq=streamProcessor.getFragmentModel().getRequests({state:_modelsFragmentModel2['default'].FRAGMENT_MODEL_EXECUTED,time:currentTimeRequest.startTime - currentTimeRequest.duration / 2,threshold:BUFFER_RANGE_CALCULATION_THRESHOLD})[0];if(prevReq && prevReq.startTime != currentTimeRequest.startTime){behindRange.end = prevReq.startTime;}if(behindRange.start < behindRange.end && behindRange.end > ranges.start(0)){clearRanges.push(behindRange);} // Build buffer ahead range. To avoid pruning time around current time position,
	// we include fragment right after the one in current time position
	var aheadRange={start:currentTimeRequest.startTime + currentTimeRequest.duration + STALL_THRESHOLD,end:endOfBuffer};var nextReq=streamProcessor.getFragmentModel().getRequests({state:_modelsFragmentModel2['default'].FRAGMENT_MODEL_EXECUTED,time:currentTimeRequest.startTime + currentTimeRequest.duration + STALL_THRESHOLD,threshold:BUFFER_RANGE_CALCULATION_THRESHOLD})[0];if(nextReq && nextReq.startTime !== currentTimeRequest.startTime){aheadRange.start = nextReq.startTime + nextReq.duration + STALL_THRESHOLD;}if(aheadRange.start < aheadRange.end && aheadRange.start < endOfBuffer){clearRanges.push(aheadRange);}}return clearRanges;}function getWorkingTime(){ // This function returns current working time for buffer (either start time or current time if playback has started)
	var ret=playbackController.getTime();if(seekStartTime){ // if there is a seek start time, the first buffer data will be available on maximum value between first buffer range value and seek start time.
	var ranges=buffer.getAllBufferRanges();if(ranges && ranges.length){ret = Math.max(ranges.start(0),seekStartTime);}}return ret;}function onPlaybackProgression(){if(!bufferResetInProgress || type === _constantsConstants2['default'].FRAGMENTED_TEXT && textController.isTextEnabled()){updateBufferLevel();addBufferMetrics();}}function onPlaybackStalled(){checkIfSufficientBuffer();}function onPlaybackPlaying(){checkIfSufficientBuffer();}function getRangeAt(time,tolerance){var ranges=buffer.getAllBufferRanges();var start=0;var end=0;var firstStart=null;var lastEnd=null;var gap=0;var len=undefined,i=undefined;var toler=tolerance || 0.15;if(ranges !== null && ranges !== undefined){for(i = 0,len = ranges.length;i < len;i++) {start = ranges.start(i);end = ranges.end(i);if(firstStart === null){gap = Math.abs(start - time);if(time >= start && time < end){ // start the range
	firstStart = start;lastEnd = end;}else if(gap <= toler){ // start the range even though the buffer does not contain time 0
	firstStart = start;lastEnd = end;}}else {gap = start - lastEnd;if(gap <= toler){ // the discontinuity is smaller than the tolerance, combine the ranges
	lastEnd = end;}else {break;}}}if(firstStart !== null){return {start:firstStart,end:lastEnd};}}return null;}function getBufferLength(time,tolerance){var range=undefined,length=undefined;range = getRangeAt(time,tolerance);if(range === null){length = 0;}else {length = range.end - time;}return length;}function updateBufferLevel(){if(playbackController){bufferLevel = getBufferLength(getWorkingTime() || 0);eventBus.trigger(_coreEventsEvents2['default'].BUFFER_LEVEL_UPDATED,{sender:instance,bufferLevel:bufferLevel});checkIfSufficientBuffer();}}function addBufferMetrics(){if(!isActive())return;metricsModel.addBufferState(type,bufferState,streamProcessor.getScheduleController().getBufferTarget());metricsModel.addBufferLevel(type,new Date(),bufferLevel * 1000);}function checkIfBufferingCompleted(){var isLastIdxAppended=maxAppendedIndex >= lastIndex - 1; // Handles 0 and non 0 based request index
	if(isLastIdxAppended && !isBufferingCompleted && buffer.discharge === undefined){isBufferingCompleted = true;logger.debug('checkIfBufferingCompleted trigger BUFFERING_COMPLETED');eventBus.trigger(_coreEventsEvents2['default'].BUFFERING_COMPLETED,{sender:instance,streamInfo:streamProcessor.getStreamInfo()});}}function checkIfSufficientBuffer(){ // No need to check buffer if type is not audio or video (for example if several errors occur during text parsing, so that the buffer cannot be filled, no error must occur on video playback)
	if(type !== 'audio' && type !== 'video')return;if(seekClearedBufferingCompleted && !isBufferingCompleted && playbackController && playbackController.getTimeToStreamEnd() - bufferLevel < STALL_THRESHOLD){seekClearedBufferingCompleted = false;isBufferingCompleted = true;logger.debug('checkIfSufficientBuffer trigger BUFFERING_COMPLETED');eventBus.trigger(_coreEventsEvents2['default'].BUFFERING_COMPLETED,{sender:instance,streamInfo:streamProcessor.getStreamInfo()});} // When the player is working in low latency mode, the buffer is often below STALL_THRESHOLD.
	// So, when in low latency mode, change dash.js behavior so it notifies a stall just when
	// buffer reach 0 seconds
	if((!mediaPlayerModel.getLowLatencyEnabled() && bufferLevel < STALL_THRESHOLD || bufferLevel === 0) && !isBufferingCompleted){notifyBufferStateChanged(BUFFER_EMPTY);}else {if(isBufferingCompleted || bufferLevel >= mediaPlayerModel.getStableBufferTime()){notifyBufferStateChanged(BUFFER_LOADED);}}}function notifyBufferStateChanged(state){if(bufferState === state || state === BUFFER_EMPTY && playbackController.getTime() === 0 ||  // Don't trigger BUFFER_EMPTY if it's initial loading
	type === _constantsConstants2['default'].FRAGMENTED_TEXT && !textController.isTextEnabled()){return;}bufferState = state;addBufferMetrics();eventBus.trigger(_coreEventsEvents2['default'].BUFFER_LEVEL_STATE_CHANGED,{sender:instance,state:state,mediaType:type,streamInfo:streamProcessor.getStreamInfo()});eventBus.trigger(state === BUFFER_LOADED?_coreEventsEvents2['default'].BUFFER_LOADED:_coreEventsEvents2['default'].BUFFER_EMPTY,{mediaType:type});logger.debug(state === BUFFER_LOADED?'Got enough buffer to start for ' + type:'Waiting for more buffer before starting playback for ' + type);}function handleInbandEvents(data,request,mediaInbandEvents,trackInbandEvents){var fragmentStartTime=Math.max(!request || isNaN(request.startTime)?0:request.startTime,0);var eventStreams=[];var events=[]; /* Extract the possible schemeIdUri : If a DASH client detects an event message box with a scheme that is not defined in MPD, the client is expected to ignore it */var inbandEvents=mediaInbandEvents.concat(trackInbandEvents);for(var i=0,ln=inbandEvents.length;i < ln;i++) {eventStreams[inbandEvents[i].schemeIdUri] = inbandEvents[i];}var isoFile=(0,_utilsBoxParser2['default'])(context).getInstance().parse(data);var eventBoxes=isoFile.getBoxes('emsg');for(var i=0,ln=eventBoxes.length;i < ln;i++) {var _event=adapter.getEvent(eventBoxes[i],eventStreams,fragmentStartTime);if(_event){events.push(_event);}}return events;} /* prune buffer on our own in background to avoid browsers pruning buffer silently */function pruneBuffer(){if(!buffer || type === _constantsConstants2['default'].FRAGMENTED_TEXT){return;}if(!isBufferingCompleted){clearBuffers(getClearRanges());}}function getClearRanges(){var clearRanges=[];var ranges=buffer.getAllBufferRanges();if(!ranges || ranges.length === 0){return clearRanges;}var currentTime=playbackController.getTime();var rangeToKeep={start:Math.max(0,currentTime - mediaPlayerModel.getBufferToKeep()),end:currentTime + mediaPlayerModel.getBufferAheadToKeep()};var currentTimeRequest=streamProcessor.getFragmentModel().getRequests({state:_modelsFragmentModel2['default'].FRAGMENT_MODEL_EXECUTED,time:currentTime,threshold:BUFFER_RANGE_CALCULATION_THRESHOLD})[0]; // Ensure we keep full range of current fragment
	if(currentTimeRequest){rangeToKeep.start = Math.min(currentTimeRequest.startTime,rangeToKeep.start);rangeToKeep.end = Math.max(currentTimeRequest.startTime + currentTimeRequest.duration,rangeToKeep.end);}else if(currentTime === 0 && playbackController.getIsDynamic()){ // Don't prune before the live stream starts, it messes with low latency
	return [];}if(ranges.start(0) <= rangeToKeep.start){var behindRange={start:0,end:rangeToKeep.start};for(var i=0;i < ranges.length && ranges.end(i) <= rangeToKeep.start;i++) {behindRange.end = ranges.end(i);}if(behindRange.start < behindRange.end){clearRanges.push(behindRange);}}if(ranges.end(ranges.length - 1) >= rangeToKeep.end){var aheadRange={start:rangeToKeep.end,end:ranges.end(ranges.length - 1) + BUFFER_RANGE_CALCULATION_THRESHOLD};if(aheadRange.start < aheadRange.end){clearRanges.push(aheadRange);}}return clearRanges;}function clearBuffers(ranges){if(!ranges || !buffer || ranges.length === 0)return;pendingPruningRanges.push.apply(pendingPruningRanges,ranges);if(isPruningInProgress){return;}clearNextRange();}function clearNextRange(){ // If there's nothing to prune reset state
	if(pendingPruningRanges.length === 0 || !buffer){logger.debug('Nothing to prune, halt pruning');pendingPruningRanges = [];isPruningInProgress = false;return;}var sourceBuffer=buffer.getBuffer(); // If there's nothing buffered any pruning is invalid, so reset our state
	if(!sourceBuffer || !sourceBuffer.buffered || sourceBuffer.buffered.length === 0){logger.debug('SourceBuffer is empty (or does not exist), halt pruning');pendingPruningRanges = [];isPruningInProgress = false;return;}var range=pendingPruningRanges.shift();logger.debug('Removing',type,'buffer from:',range.start,'to',range.end);isPruningInProgress = true; // If removing buffer ahead current playback position, update maxAppendedIndex
	var currentTime=playbackController.getTime();if(currentTime < range.end){isBufferingCompleted = false;maxAppendedIndex = 0;if(!bufferResetInProgress){streamProcessor.getScheduleController().setSeekTarget(currentTime);adapter.setIndexHandlerTime(streamProcessor,currentTime);}}buffer.remove(range.start,range.end,range.force);}function onRemoved(e){if(buffer !== e.buffer)return;logger.debug('onRemoved buffer from:',e.from,'to',e.to);var ranges=buffer.getAllBufferRanges();showBufferRanges(ranges);if(pendingPruningRanges.length === 0){isPruningInProgress = false;}if(e.unintended){logger.warn('Detected unintended removal from:',e.from,'to',e.to,'setting index handler time to',e.from);adapter.setIndexHandlerTime(streamProcessor,e.from);}if(isPruningInProgress){clearNextRange();}else {if(!bufferResetInProgress){logger.debug('onRemoved : call updateBufferLevel');updateBufferLevel();}else {bufferResetInProgress = false;if(mediaChunk){appendToBuffer(mediaChunk);}}eventBus.trigger(_coreEventsEvents2['default'].BUFFER_CLEARED,{sender:instance,from:e.from,to:e.to,unintended:e.unintended,hasEnoughSpaceToAppend:hasEnoughSpaceToAppend()});} //TODO - REMEMBER removed a timerout hack calling clearBuffer after manifestInfo.minBufferTime * 1000 if !hasEnoughSpaceToAppend() Aug 04 2016
	}function updateBufferTimestampOffset(MSETimeOffset){ // Each track can have its own @presentationTimeOffset, so we should set the offset
	// if it has changed after switching the quality or updating an mpd
	if(buffer && buffer.updateTimestampOffset){buffer.updateTimestampOffset(MSETimeOffset);}}function onDataUpdateCompleted(e){if(e.sender.getStreamProcessor() !== streamProcessor || e.error)return;updateBufferTimestampOffset(e.currentRepresentation.MSETimeOffset);}function onStreamCompleted(e){if(e.fragmentModel !== streamProcessor.getFragmentModel())return;lastIndex = e.request.index;checkIfBufferingCompleted();}function onCurrentTrackChanged(e){var ranges=buffer && buffer.getAllBufferRanges();if(!ranges || e.newMediaInfo.type !== type || e.newMediaInfo.streamInfo.id !== streamProcessor.getStreamInfo().id)return;logger.info('Track change asked');if(mediaController.getSwitchMode(type) === _MediaController2['default'].TRACK_SWITCH_MODE_ALWAYS_REPLACE){if(ranges && ranges.length > 0 && playbackController.getTimeToStreamEnd() > STALL_THRESHOLD){isBufferingCompleted = false;lastIndex = Number.POSITIVE_INFINITY;}}}function onWallclockTimeUpdated(){wallclockTicked++;var secondsElapsed=wallclockTicked * (mediaPlayerModel.getWallclockTimeUpdateInterval() / 1000);if(secondsElapsed >= mediaPlayerModel.getBufferPruningInterval()){wallclockTicked = 0;pruneBuffer();}}function onPlaybackRateChanged(){checkIfSufficientBuffer();}function getType(){return type;}function getStreamProcessor(){return streamProcessor;}function setSeekStartTime(value){seekStartTime = value;}function getBuffer(){return buffer;}function setBuffer(newBuffer){buffer = newBuffer;}function getBufferLevel(){return bufferLevel;}function setMediaSource(value,mediaInfo){mediaSource = value;if(buffer && mediaInfo){ //if we have a prebuffer, we should prepare to discharge it, and make a new sourceBuffer ready
	if(typeof buffer.discharge === 'function'){dischargeBuffer = buffer;createBuffer(mediaInfo);}}}function getMediaSource(){return mediaSource;}function getIsBufferingCompleted(){return isBufferingCompleted;}function getIsPruningInProgress(){return isPruningInProgress;}function getTotalBufferedTime(){var ranges=buffer.getAllBufferRanges();var totalBufferedTime=0;var ln=undefined,i=undefined;if(!ranges)return totalBufferedTime;for(i = 0,ln = ranges.length;i < ln;i++) {totalBufferedTime += ranges.end(i) - ranges.start(i);}return totalBufferedTime;}function hasEnoughSpaceToAppend(){var totalBufferedTime=getTotalBufferedTime();return totalBufferedTime < criticalBufferLevel;}function resetInitialSettings(errored,keepBuffers){criticalBufferLevel = Number.POSITIVE_INFINITY;bufferState = undefined;requiredQuality = _AbrController2['default'].QUALITY_DEFAULT;lastIndex = Number.POSITIVE_INFINITY;maxAppendedIndex = 0;appendedBytesInfo = null;isBufferingCompleted = false;isPruningInProgress = false;seekClearedBufferingCompleted = false;bufferLevel = 0;wallclockTicked = 0;pendingPruningRanges = [];if(buffer){if(!errored){buffer.abort();}buffer.reset(keepBuffers);buffer = null;}bufferResetInProgress = false;}function reset(errored,keepBuffers){eventBus.off(_coreEventsEvents2['default'].DATA_UPDATE_COMPLETED,onDataUpdateCompleted,this);eventBus.off(_coreEventsEvents2['default'].QUALITY_CHANGE_REQUESTED,onQualityChanged,this);eventBus.off(_coreEventsEvents2['default'].INIT_FRAGMENT_LOADED,onInitFragmentLoaded,this);eventBus.off(_coreEventsEvents2['default'].MEDIA_FRAGMENT_LOADED,onMediaFragmentLoaded,this);eventBus.off(_coreEventsEvents2['default'].STREAM_COMPLETED,onStreamCompleted,this);eventBus.off(_coreEventsEvents2['default'].CURRENT_TRACK_CHANGED,onCurrentTrackChanged,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_PLAYING,onPlaybackPlaying,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_PROGRESS,onPlaybackProgression,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_TIME_UPDATED,onPlaybackProgression,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_RATE_CHANGED,onPlaybackRateChanged,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_SEEKING,onPlaybackSeeking,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_SEEKED,onPlaybackSeeked,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_STALLED,onPlaybackStalled,this);eventBus.off(_coreEventsEvents2['default'].WALLCLOCK_TIME_UPDATED,onWallclockTimeUpdated,this);eventBus.off(_coreEventsEvents2['default'].SOURCEBUFFER_REMOVE_COMPLETED,onRemoved,this);resetInitialSettings(errored,keepBuffers);}instance = {getBufferControllerType:getBufferControllerType,initialize:initialize,createBuffer:createBuffer,dischargePreBuffer:dischargePreBuffer,getType:getType,getStreamProcessor:getStreamProcessor,setSeekStartTime:setSeekStartTime,getBuffer:getBuffer,setBuffer:setBuffer,getBufferLevel:getBufferLevel,getRangeAt:getRangeAt,setMediaSource:setMediaSource,getMediaSource:getMediaSource,getIsBufferingCompleted:getIsBufferingCompleted,switchInitData:switchInitData,getIsPruningInProgress:getIsPruningInProgress,reset:reset};setup();return instance;}BufferController.__dashjs_factory_name = BUFFER_CONTROLLER_TYPE;var factory=_coreFactoryMaker2['default'].getClassFactory(BufferController);factory.BUFFER_LOADED = BUFFER_LOADED;factory.BUFFER_EMPTY = BUFFER_EMPTY;_coreFactoryMaker2['default'].updateClassFactory(BufferController.__dashjs_factory_name,factory);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=BufferController.js.map


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _voFragmentRequest=__webpack_require__(59);var _voFragmentRequest2=_interopRequireDefault(_voFragmentRequest);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var FRAGMENT_MODEL_LOADING='loading';var FRAGMENT_MODEL_EXECUTED='executed';var FRAGMENT_MODEL_CANCELED='canceled';var FRAGMENT_MODEL_FAILED='failed';function FragmentModel(config){config = config || {};var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var metricsModel=config.metricsModel;var fragmentLoader=config.fragmentLoader;var instance=undefined,logger=undefined,streamProcessor=undefined,executedRequests=undefined,loadingRequests=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);resetInitialSettings();eventBus.on(_coreEventsEvents2['default'].LOADING_COMPLETED,onLoadingCompleted,instance);eventBus.on(_coreEventsEvents2['default'].LOADING_DATA_PROGRESS,onLoadingInProgress,instance);eventBus.on(_coreEventsEvents2['default'].LOADING_ABANDONED,onLoadingAborted,instance);}function setStreamProcessor(value){streamProcessor = value;}function getStreamProcessor(){return streamProcessor;}function isFragmentLoaded(request){var isEqualComplete=function isEqualComplete(req1,req2){return req1.action === _voFragmentRequest2['default'].ACTION_COMPLETE && req1.action === req2.action;};var isEqualMedia=function isEqualMedia(req1,req2){return !isNaN(req1.index) && req1.startTime === req2.startTime && req1.adaptationIndex === req2.adaptationIndex && req1.type === req2.type;};var isEqualInit=function isEqualInit(req1,req2){return isNaN(req1.index) && isNaN(req2.index) && req1.quality === req2.quality;};var check=function check(requests){var isLoaded=false;requests.some(function(req){if(isEqualMedia(request,req) || isEqualInit(request,req) || isEqualComplete(request,req)){isLoaded = true;return isLoaded;}});return isLoaded;};if(!request){return false;}return check(executedRequests);}function isFragmentLoadedOrPending(request){var isLoaded=false;var i=0;var req=undefined; // First, check if the fragment has already been loaded
	isLoaded = isFragmentLoaded(request); // Then, check if the fragment is about to be loeaded
	if(!isLoaded){for(i = 0;i < loadingRequests.length;i++) {req = loadingRequests[i];if(request.url === req.url && request.startTime === req.startTime){isLoaded = true;}}}return isLoaded;} /**
	     *
	     * Gets an array of {@link FragmentRequest} objects
	     *
	     * @param {Object} filter The object with properties by which the method filters the requests to be returned.
	     *  the only mandatory property is state, which must be a value from
	     *  other properties should match the properties of {@link FragmentRequest}. E.g.:
	     *  getRequests({state: FragmentModel.FRAGMENT_MODEL_EXECUTED, quality: 0}) - returns
	     *  all the requests from executedRequests array where requests.quality = filter.quality
	     *
	     * @returns {Array}
	     * @memberof FragmentModel#
	     */function getRequests(filter){var states=filter?filter.state instanceof Array?filter.state:[filter.state]:[];var filteredRequests=[];states.forEach(function(state){var requests=getRequestsForState(state);filteredRequests = filteredRequests.concat(filterRequests(requests,filter));});return filteredRequests;}function getRequestThreshold(req){return isNaN(req.duration)?0.25:Math.min(req.duration / 8,0.5);}function removeExecutedRequestsBeforeTime(time){executedRequests = executedRequests.filter(function(req){var threshold=getRequestThreshold(req);return isNaN(req.startTime) || (time !== undefined?req.startTime >= time - threshold:false);});}function removeExecutedRequestsAfterTime(time){executedRequests = executedRequests.filter(function(req){var threshold=getRequestThreshold(req);return isNaN(req.startTime) || (time !== undefined?req.startTime + req.duration < time + threshold:false);});}function removeExecutedRequestsInTimeRange(start,end){if(end <= start + 0.5){return;}executedRequests = executedRequests.filter(function(req){var threshold=getRequestThreshold(req);return isNaN(req.startTime) || req.startTime >= end - threshold || isNaN(req.duration) || req.startTime + req.duration <= start + threshold;});} // Remove requests that are not "represented" by any of buffered ranges
	function syncExecutedRequestsWithBufferedRange(bufferedRanges,streamDuration){if(!bufferedRanges || bufferedRanges.length === 0){removeExecutedRequestsBeforeTime();return;}var start=0;for(var i=0,ln=bufferedRanges.length;i < ln;i++) {removeExecutedRequestsInTimeRange(start,bufferedRanges.start(i));start = bufferedRanges.end(i);}if(streamDuration > 0){removeExecutedRequestsInTimeRange(start,streamDuration);}}function abortRequests(){fragmentLoader.abort();loadingRequests = [];}function executeRequest(request){switch(request.action){case _voFragmentRequest2['default'].ACTION_COMPLETE:executedRequests.push(request);addSchedulingInfoMetrics(request,FRAGMENT_MODEL_EXECUTED);logger.debug('executeRequest trigger STREAM_COMPLETED');eventBus.trigger(_coreEventsEvents2['default'].STREAM_COMPLETED,{request:request,fragmentModel:this});break;case _voFragmentRequest2['default'].ACTION_DOWNLOAD:addSchedulingInfoMetrics(request,FRAGMENT_MODEL_LOADING);loadingRequests.push(request);loadCurrentFragment(request);break;default:logger.warn('Unknown request action.');}}function loadCurrentFragment(request){eventBus.trigger(_coreEventsEvents2['default'].FRAGMENT_LOADING_STARTED,{sender:instance,request:request});fragmentLoader.load(request);}function getRequestForTime(arr,time,threshold){ // loop through the executed requests and pick the one for which the playback interval matches the given time
	var lastIdx=arr.length - 1;for(var i=lastIdx;i >= 0;i--) {var req=arr[i];var start=req.startTime;var end=start + req.duration;threshold = !isNaN(threshold)?threshold:getRequestThreshold(req);if(!isNaN(start) && !isNaN(end) && time + threshold >= start && time - threshold < end || isNaN(start) && isNaN(time)){return req;}}return null;}function filterRequests(arr,filter){ // for time use a specific filtration function
	if(filter.hasOwnProperty('time')){return [getRequestForTime(arr,filter.time,filter.threshold)];}return arr.filter(function(request){for(var prop in filter) {if(prop === 'state')continue;if(filter.hasOwnProperty(prop) && request[prop] != filter[prop])return false;}return true;});}function getRequestsForState(state){var requests=undefined;switch(state){case FRAGMENT_MODEL_LOADING:requests = loadingRequests;break;case FRAGMENT_MODEL_EXECUTED:requests = executedRequests;break;default:requests = [];}return requests;}function addSchedulingInfoMetrics(request,state){metricsModel.addSchedulingInfo(request.mediaType,new Date(),request.type,request.startTime,request.availabilityStartTime,request.duration,request.quality,request.range,state);metricsModel.addRequestsQueue(request.mediaType,loadingRequests,executedRequests);}function onLoadingCompleted(e){if(e.sender !== fragmentLoader)return;loadingRequests.splice(loadingRequests.indexOf(e.request),1);if(e.response && !e.error){executedRequests.push(e.request);}addSchedulingInfoMetrics(e.request,e.error?FRAGMENT_MODEL_FAILED:FRAGMENT_MODEL_EXECUTED);eventBus.trigger(_coreEventsEvents2['default'].FRAGMENT_LOADING_COMPLETED,{request:e.request,response:e.response,error:e.error,sender:this});}function onLoadingInProgress(e){if(e.sender !== fragmentLoader)return;eventBus.trigger(_coreEventsEvents2['default'].FRAGMENT_LOADING_PROGRESS,{request:e.request,response:e.response,error:e.error,sender:this});}function onLoadingAborted(e){if(e.sender !== fragmentLoader)return;eventBus.trigger(_coreEventsEvents2['default'].FRAGMENT_LOADING_ABANDONED,{streamProcessor:this.getStreamProcessor(),request:e.request,mediaType:e.mediaType});}function resetInitialSettings(){executedRequests = [];loadingRequests = [];}function reset(){eventBus.off(_coreEventsEvents2['default'].LOADING_COMPLETED,onLoadingCompleted,this);eventBus.off(_coreEventsEvents2['default'].LOADING_DATA_PROGRESS,onLoadingInProgress,this);eventBus.off(_coreEventsEvents2['default'].LOADING_ABANDONED,onLoadingAborted,this);if(fragmentLoader){fragmentLoader.reset();}resetInitialSettings();}function addExecutedRequest(request){executedRequests.push(request);}instance = {setStreamProcessor:setStreamProcessor,getStreamProcessor:getStreamProcessor,getRequests:getRequests,isFragmentLoaded:isFragmentLoaded,isFragmentLoadedOrPending:isFragmentLoadedOrPending,removeExecutedRequestsBeforeTime:removeExecutedRequestsBeforeTime,removeExecutedRequestsAfterTime:removeExecutedRequestsAfterTime,syncExecutedRequestsWithBufferedRange:syncExecutedRequestsWithBufferedRange,abortRequests:abortRequests,executeRequest:executeRequest,reset:reset,addExecutedRequest:addExecutedRequest};setup();return instance;}FragmentModel.__dashjs_factory_name = 'FragmentModel';var factory=_coreFactoryMaker2['default'].getClassFactory(FragmentModel);factory.FRAGMENT_MODEL_LOADING = FRAGMENT_MODEL_LOADING;factory.FRAGMENT_MODEL_EXECUTED = FRAGMENT_MODEL_EXECUTED;factory.FRAGMENT_MODEL_CANCELED = FRAGMENT_MODEL_CANCELED;factory.FRAGMENT_MODEL_FAILED = FRAGMENT_MODEL_FAILED;_coreFactoryMaker2['default'].updateClassFactory(FragmentModel.__dashjs_factory_name,factory);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=FragmentModel.js.map


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _FactoryMaker=__webpack_require__(55);var _FactoryMaker2=_interopRequireDefault(_FactoryMaker);var EVENT_PRIORITY_LOW=0;var EVENT_PRIORITY_HIGH=5000;function EventBus(){var handlers={};function on(type,listener,scope){var priority=arguments.length <= 3 || arguments[3] === undefined?EVENT_PRIORITY_LOW:arguments[3];if(!type){throw new Error('event type cannot be null or undefined');}if(!listener || typeof listener !== 'function'){throw new Error('listener must be a function: ' + listener);}if(getHandlerIdx(type,listener,scope) >= 0)return;handlers[type] = handlers[type] || [];var handler={callback:listener,scope:scope,priority:priority};var inserted=handlers[type].some(function(item,idx){if(item && priority > item.priority){handlers[type].splice(idx,0,handler);return true;}});if(!inserted){handlers[type].push(handler);}}function off(type,listener,scope){if(!type || !listener || !handlers[type])return;var idx=getHandlerIdx(type,listener,scope);if(idx < 0)return;handlers[type][idx] = null;}function trigger(type,payload){if(!type || !handlers[type])return;payload = payload || {};if(payload.hasOwnProperty('type'))throw new Error('\'type\' is a reserved word for event dispatching');payload.type = type;handlers[type] = handlers[type].filter(function(item){return item;});handlers[type].forEach(function(handler){return handler && handler.callback.call(handler.scope,payload);});}function getHandlerIdx(type,listener,scope){var idx=-1;if(!handlers[type])return idx;handlers[type].some(function(item,index){if(item && item.callback === listener && (!scope || scope === item.scope)){idx = index;return true;}});return idx;}function reset(){handlers = {};}var instance={on:on,off:off,trigger:trigger,reset:reset};return instance;}EventBus.__dashjs_factory_name = 'EventBus';var factory=_FactoryMaker2['default'].getSingletonFactory(EventBus);factory.EVENT_PRIORITY_LOW = EVENT_PRIORITY_LOW;factory.EVENT_PRIORITY_HIGH = EVENT_PRIORITY_HIGH;_FactoryMaker2['default'].updateSingletonFactory(EventBus.__dashjs_factory_name,factory);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=EventBus.js.map


/***/ }),
/* 55 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @module FactoryMaker
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});var FactoryMaker=(function(){var instance=undefined;var singletonContexts=[];var singletonFactories={};var classFactories={};function extend(name,childInstance,override,context){if(!context[name] && childInstance){context[name] = {instance:childInstance,override:override};}} /**
	     * Use this method from your extended object.  this.factory is injected into your object.
	     * this.factory.getSingletonInstance(this.context, 'VideoModel')
	     * will return the video model for use in the extended object.
	     *
	     * @param {Object} context - injected into extended object as this.context
	     * @param {string} className - string name found in all dash.js objects
	     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.
	     * @returns {*} Context aware instance of specified singleton name.
	     * @memberof module:FactoryMaker
	     * @instance
	     */function getSingletonInstance(context,className){for(var i in singletonContexts) {var obj=singletonContexts[i];if(obj.context === context && obj.name === className){return obj.instance;}}return null;} /**
	     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.
	     *
	     * @param {Object} context
	     * @param {string} className
	     * @param {Object} instance
	     * @memberof module:FactoryMaker
	     * @instance
	     */function setSingletonInstance(context,className,instance){for(var i in singletonContexts) {var obj=singletonContexts[i];if(obj.context === context && obj.name === className){singletonContexts[i].instance = instance;return;}}singletonContexts.push({name:className,context:context,instance:instance});} /*------------------------------------------------------------------------------------------*/ // Factories storage Management
	/*------------------------------------------------------------------------------------------*/function getFactoryByName(name,factoriesArray){return factoriesArray[name];}function updateFactory(name,factory,factoriesArray){if(name in factoriesArray){factoriesArray[name] = factory;}} /*------------------------------------------------------------------------------------------*/ // Class Factories Management
	/*------------------------------------------------------------------------------------------*/function updateClassFactory(name,factory){updateFactory(name,factory,classFactories);}function getClassFactoryByName(name){return getFactoryByName(name,classFactories);}function getClassFactory(classConstructor){var factory=getFactoryByName(classConstructor.__dashjs_factory_name,classFactories);if(!factory){factory = function(context){if(context === undefined){context = {};}return {create:function create(){return merge(classConstructor,context,arguments);}};};classFactories[classConstructor.__dashjs_factory_name] = factory; // store factory
	}return factory;} /*------------------------------------------------------------------------------------------*/ // Singleton Factory MAangement
	/*------------------------------------------------------------------------------------------*/function updateSingletonFactory(name,factory){updateFactory(name,factory,singletonFactories);}function getSingletonFactoryByName(name){return getFactoryByName(name,singletonFactories);}function getSingletonFactory(classConstructor){var factory=getFactoryByName(classConstructor.__dashjs_factory_name,singletonFactories);if(!factory){factory = function(context){var instance=undefined;if(context === undefined){context = {};}return {getInstance:function getInstance(){ // If we don't have an instance yet check for one on the context
	if(!instance){instance = getSingletonInstance(context,classConstructor.__dashjs_factory_name);} // If there's no instance on the context then create one
	if(!instance){instance = merge(classConstructor,context,arguments);singletonContexts.push({name:classConstructor.__dashjs_factory_name,context:context,instance:instance});}return instance;}};};singletonFactories[classConstructor.__dashjs_factory_name] = factory; // store factory
	}return factory;}function merge(classConstructor,context,args){var classInstance=undefined;var className=classConstructor.__dashjs_factory_name;var extensionObject=context[className];if(extensionObject){var extension=extensionObject.instance;if(extensionObject.override){ //Override public methods in parent but keep parent.
	classInstance = classConstructor.apply({context:context},args);extension = extension.apply({context:context,factory:instance,parent:classInstance},args);for(var prop in extension) {if(classInstance.hasOwnProperty(prop)){classInstance[prop] = extension[prop];}}}else { //replace parent object completely with new object. Same as dijon.
	return extension.apply({context:context,factory:instance},args);}}else { // Create new instance of the class
	classInstance = classConstructor.apply({context:context},args);} // Add getClassName function to class instance prototype (used by Debug)
	classInstance.getClassName = function(){return className;};return classInstance;}instance = {extend:extend,getSingletonInstance:getSingletonInstance,setSingletonInstance:setSingletonInstance,getSingletonFactory:getSingletonFactory,getSingletonFactoryByName:getSingletonFactoryByName,updateSingletonFactory:updateSingletonFactory,getClassFactory:getClassFactory,getClassFactoryByName:getClassFactoryByName,updateClassFactory:updateClassFactory};return instance;})();exports["default"] = FactoryMaker;module.exports = exports["default"];
	//# sourceMappingURL=FactoryMaker.js.map


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _get=function get(_x,_x2,_x3){var _again=true;_function: while(_again) {var object=_x,property=_x2,receiver=_x3;_again = false;if(object === null)object = Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc === undefined){var parent=Object.getPrototypeOf(object);if(parent === null){return undefined;}else {_x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;}}else if('value' in desc){return desc.value;}else {var getter=desc.get;if(getter === undefined){return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass,superClass){if(typeof superClass !== 'function' && superClass !== null){throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__ = superClass;}var _CoreEvents2=__webpack_require__(57);var _CoreEvents3=_interopRequireDefault(_CoreEvents2);var Events=(function(_CoreEvents){_inherits(Events,_CoreEvents);function Events(){_classCallCheck(this,Events);_get(Object.getPrototypeOf(Events.prototype),'constructor',this).apply(this,arguments);}return Events;})(_CoreEvents3['default']);var events=new Events();exports['default'] = events;module.exports = exports['default'];
	//# sourceMappingURL=Events.js.map


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _get=function get(_x,_x2,_x3){var _again=true;_function: while(_again) {var object=_x,property=_x2,receiver=_x3;_again = false;if(object === null)object = Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc === undefined){var parent=Object.getPrototypeOf(object);if(parent === null){return undefined;}else {_x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;}}else if('value' in desc){return desc.value;}else {var getter=desc.get;if(getter === undefined){return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass,superClass){if(typeof superClass !== 'function' && superClass !== null){throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__ = superClass;}var _EventsBase2=__webpack_require__(58);var _EventsBase3=_interopRequireDefault(_EventsBase2); /**
	 * These are internal events that should not be needed at the player level.
	 * If you find and event in here that you would like access to from MediaPlayer level
	 * please add an issue at https://github.com/Dash-Industry-Forum/dash.js/issues/new
	 * @class
	 * @ignore
	 */var CoreEvents=(function(_EventsBase){_inherits(CoreEvents,_EventsBase);function CoreEvents(){_classCallCheck(this,CoreEvents);_get(Object.getPrototypeOf(CoreEvents.prototype),'constructor',this).call(this);this.BUFFERING_COMPLETED = 'bufferingCompleted';this.BUFFER_CLEARED = 'bufferCleared';this.BUFFER_LEVEL_UPDATED = 'bufferLevelUpdated';this.BYTES_APPENDED = 'bytesAppended';this.BYTES_APPENDED_END_FRAGMENT = 'bytesAppendedEndFragment';this.CHECK_FOR_EXISTENCE_COMPLETED = 'checkForExistenceCompleted';this.CURRENT_TRACK_CHANGED = 'currentTrackChanged';this.DATA_UPDATE_COMPLETED = 'dataUpdateCompleted';this.DATA_UPDATE_STARTED = 'dataUpdateStarted';this.INITIALIZATION_LOADED = 'initializationLoaded';this.INIT_FRAGMENT_LOADED = 'initFragmentLoaded';this.INIT_REQUESTED = 'initRequested';this.INTERNAL_MANIFEST_LOADED = 'internalManifestLoaded';this.LIVE_EDGE_SEARCH_COMPLETED = 'liveEdgeSearchCompleted';this.LOADING_COMPLETED = 'loadingCompleted';this.LOADING_PROGRESS = 'loadingProgress';this.LOADING_DATA_PROGRESS = 'loadingDataProgress';this.LOADING_ABANDONED = 'loadingAborted';this.MANIFEST_UPDATED = 'manifestUpdated';this.MEDIA_FRAGMENT_LOADED = 'mediaFragmentLoaded';this.QUOTA_EXCEEDED = 'quotaExceeded';this.REPRESENTATION_UPDATED = 'representationUpdated';this.SEGMENTS_LOADED = 'segmentsLoaded';this.SERVICE_LOCATION_BLACKLIST_ADD = 'serviceLocationBlacklistAdd';this.SERVICE_LOCATION_BLACKLIST_CHANGED = 'serviceLocationBlacklistChanged';this.SOURCEBUFFER_REMOVE_COMPLETED = 'sourceBufferRemoveCompleted';this.STREAMS_COMPOSED = 'streamsComposed';this.STREAM_BUFFERING_COMPLETED = 'streamBufferingCompleted';this.STREAM_COMPLETED = 'streamCompleted';this.TEXT_TRACKS_QUEUE_INITIALIZED = 'textTracksQueueInitialized';this.TIMED_TEXT_REQUESTED = 'timedTextRequested';this.TIME_SYNCHRONIZATION_COMPLETED = 'timeSynchronizationComplete';this.URL_RESOLUTION_FAILED = 'urlResolutionFailed';this.VIDEO_CHUNK_RECEIVED = 'videoChunkReceived';this.WALLCLOCK_TIME_UPDATED = 'wallclockTimeUpdated';this.XLINK_ELEMENT_LOADED = 'xlinkElementLoaded';this.XLINK_READY = 'xlinkReady';}return CoreEvents;})(_EventsBase3['default']);exports['default'] = CoreEvents;module.exports = exports['default'];
	//# sourceMappingURL=CoreEvents.js.map


/***/ }),
/* 58 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _createClass=(function(){function defineProperties(target,props){for(var i=0;i < props.length;i++) {var descriptor=props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if('value' in descriptor)descriptor.writable = true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};})();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var EventsBase=(function(){function EventsBase(){_classCallCheck(this,EventsBase);}_createClass(EventsBase,[{key:'extend',value:function extend(events,config){if(!events)return;var override=config?config.override:false;var publicOnly=config?config.publicOnly:false;for(var evt in events) {if(!events.hasOwnProperty(evt) || this[evt] && !override)continue;if(publicOnly && events[evt].indexOf('public_') === -1)continue;this[evt] = events[evt];}}}]);return EventsBase;})();exports['default'] = EventsBase;module.exports = exports['default'];
	//# sourceMappingURL=EventsBase.js.map


/***/ }),
/* 59 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var FragmentRequest=function FragmentRequest(){_classCallCheck(this,FragmentRequest);this.action = FragmentRequest.ACTION_DOWNLOAD;this.startTime = NaN;this.mediaType = null;this.mediaInfo = null;this.type = null;this.duration = NaN;this.timescale = NaN;this.range = null;this.url = null;this.serviceLocation = null;this.requestStartDate = null;this.firstByteDate = null;this.requestEndDate = null;this.quality = NaN;this.index = NaN;this.availabilityStartTime = null;this.availabilityEndTime = null;this.wallStartTime = null;this.bytesLoaded = NaN;this.bytesTotal = NaN;this.delayLoadingTime = NaN;this.responseType = 'arraybuffer';this.representationId = null;};FragmentRequest.ACTION_DOWNLOAD = 'download';FragmentRequest.ACTION_COMPLETE = 'complete';exports['default'] = FragmentRequest;module.exports = exports['default'];
	//# sourceMappingURL=FragmentRequest.js.map


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _EventBus=__webpack_require__(54);var _EventBus2=_interopRequireDefault(_EventBus);var _eventsEvents=__webpack_require__(56);var _eventsEvents2=_interopRequireDefault(_eventsEvents);var _FactoryMaker=__webpack_require__(55);var _FactoryMaker2=_interopRequireDefault(_FactoryMaker);var LOG_LEVEL_NONE=0;var LOG_LEVEL_FATAL=1;var LOG_LEVEL_ERROR=2;var LOG_LEVEL_WARNING=3;var LOG_LEVEL_INFO=4;var LOG_LEVEL_DEBUG=5; /**
	 * @module Debug
	 */function Debug(){var context=this.context;var eventBus=(0,_EventBus2['default'])(context).getInstance();var logFn=[];var instance=undefined,showLogTimestamp=undefined,showCalleeName=undefined,startTime=undefined,logLevel=undefined;function setup(){showLogTimestamp = true;showCalleeName = true;logLevel = LOG_LEVEL_WARNING;startTime = new Date().getTime();if(typeof window !== 'undefined' && window.console){logFn[LOG_LEVEL_FATAL] = getLogFn(window.console.error);logFn[LOG_LEVEL_ERROR] = getLogFn(window.console.error);logFn[LOG_LEVEL_WARNING] = getLogFn(window.console.warn);logFn[LOG_LEVEL_INFO] = getLogFn(window.console.info);logFn[LOG_LEVEL_DEBUG] = getLogFn(window.console.debug);}}function getLogFn(fn){if(fn && fn.bind){return fn.bind(window.console);} // if not define, return the default function for reporting logs
	return window.console.log.bind(window.console);} /**
	     * Retrieves a logger which can be used to write logging information in browser console.
	     * @param {object} instance Object for which the logger is created. It is used
	     * to include calle object information in log messages.
	     * @memberof module:Debug
	     * @returns {Logger}
	     * @instance
	     */function getLogger(instance){return {fatal:fatal.bind(instance),error:error.bind(instance),warn:warn.bind(instance),info:info.bind(instance),debug:debug.bind(instance)};} /**
	     * Sets up the log level. The levels are cumulative. For example, if you set the log level
	     * to dashjs.Debug.LOG_LEVEL_WARNING all warnings, errors and fatals will be logged. Possible values
	     *
	     * <ul>
	     * <li>dashjs.Debug.LOG_LEVEL_NONE<br/>
	     * No message is written in the browser console.
	     *
	     * <li>dashjs.Debug.LOG_LEVEL_FATAL<br/>
	     * Log fatal errors. An error is considered fatal when it causes playback to fail completely.
	     *
	     * <li>dashjs.Debug.LOG_LEVEL_ERROR<br/>
	     * Log error messages.
	     *
	     * <li>dashjs.Debug.LOG_LEVEL_WARNING<br/>
	     * Log warning messages.
	     *
	     * <li>dashjs.Debug.LOG_LEVEL_INFO<br/>
	     * Log info messages.
	     *
	     * <li>dashjs.Debug.LOG_LEVEL_DEBUG<br/>
	     * Log debug messages.
	     * </ul>
	     * @param {number} value Log level
	     * @default true
	     * @memberof module:Debug
	     * @instance
	     */function setLogLevel(value){logLevel = value;} /**
	     * Use this method to get the current log level.
	     * @memberof module:Debug
	     * @instance
	     */function getLogLevel(){return logLevel;} /**
	     * Prepends a timestamp in milliseconds to each log message.
	     * @param {boolean} value Set to true if you want to see a timestamp in each log message.
	     * @default LOG_LEVEL_WARNING
	     * @memberof module:Debug
	     * @instance
	     */function setLogTimestampVisible(value){showLogTimestamp = value;} /**
	     * Prepends the callee object name, and media type if available, to each log message.
	     * @param {boolean} value Set to true if you want to see the callee object name and media type in each log message.
	     * @default true
	     * @memberof module:Debug
	     * @instance
	     */function setCalleeNameVisible(value){showCalleeName = value;} /**
	     * Toggles logging to the browser's javascript console.  If you set to false you will still receive a log event with the same message.
	     * @param {boolean} value Set to false if you want to turn off logging to the browser's console.
	     * @default true
	     * @memberof module:Debug
	     * @instance
	     * @deprecated
	     */function setLogToBrowserConsole(value){ // Replicate functionality previous to log levels feature
	if(value){logLevel = LOG_LEVEL_DEBUG;}else {logLevel = LOG_LEVEL_NONE;}} /**
	     * Use this method to get the state of logToBrowserConsole.
	     * @returns {boolean} The current value of logToBrowserConsole
	     * @memberof module:Debug
	     * @instance
	     * @deprecated
	     */function getLogToBrowserConsole(){return logLevel !== LOG_LEVEL_NONE;}function fatal(){for(var _len=arguments.length,params=Array(_len),_key=0;_key < _len;_key++) {params[_key] = arguments[_key];}doLog.apply(undefined,[LOG_LEVEL_FATAL,this].concat(params));}function error(){for(var _len2=arguments.length,params=Array(_len2),_key2=0;_key2 < _len2;_key2++) {params[_key2] = arguments[_key2];}doLog.apply(undefined,[LOG_LEVEL_ERROR,this].concat(params));}function warn(){for(var _len3=arguments.length,params=Array(_len3),_key3=0;_key3 < _len3;_key3++) {params[_key3] = arguments[_key3];}doLog.apply(undefined,[LOG_LEVEL_WARNING,this].concat(params));}function info(){for(var _len4=arguments.length,params=Array(_len4),_key4=0;_key4 < _len4;_key4++) {params[_key4] = arguments[_key4];}doLog.apply(undefined,[LOG_LEVEL_INFO,this].concat(params));}function debug(){for(var _len5=arguments.length,params=Array(_len5),_key5=0;_key5 < _len5;_key5++) {params[_key5] = arguments[_key5];}doLog.apply(undefined,[LOG_LEVEL_DEBUG,this].concat(params));}function doLog(level,_this){var message='';var logTime=null;if(showLogTimestamp){logTime = new Date().getTime();message += '[' + (logTime - startTime) + ']';}if(showCalleeName && _this && _this.getClassName){message += '[' + _this.getClassName() + ']';if(_this.getType){message += '[' + _this.getType() + ']';}}if(message.length > 0){message += ' ';}for(var _len6=arguments.length,params=Array(_len6 > 2?_len6 - 2:0),_key6=2;_key6 < _len6;_key6++) {params[_key6 - 2] = arguments[_key6];}Array.apply(null,params).forEach(function(item){message += item + ' ';}); // log to console if the log level is high enough
	if(logFn[level] && logLevel >= level){logFn[level](message);} // send log event regardless of log level
	eventBus.trigger(_eventsEvents2['default'].LOG,{message:message,level:level});}instance = {getLogger:getLogger,setLogTimestampVisible:setLogTimestampVisible,setCalleeNameVisible:setCalleeNameVisible,setLogToBrowserConsole:setLogToBrowserConsole,getLogToBrowserConsole:getLogToBrowserConsole,setLogLevel:setLogLevel,getLogLevel:getLogLevel};setup();return instance;}Debug.__dashjs_factory_name = 'Debug';var factory=_FactoryMaker2['default'].getSingletonFactory(Debug);factory.LOG_LEVEL_NONE = LOG_LEVEL_NONE;factory.LOG_LEVEL_FATAL = LOG_LEVEL_FATAL;factory.LOG_LEVEL_ERROR = LOG_LEVEL_ERROR;factory.LOG_LEVEL_WARNING = LOG_LEVEL_WARNING;factory.LOG_LEVEL_INFO = LOG_LEVEL_INFO;factory.LOG_LEVEL_DEBUG = LOG_LEVEL_DEBUG;_FactoryMaker2['default'].updateSingletonFactory(Debug.__dashjs_factory_name,factory);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=Debug.js.map


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _voDashJSError=__webpack_require__(62);var _voDashJSError2=_interopRequireDefault(_voDashJSError);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _textTextController=__webpack_require__(63);var _textTextController2=_interopRequireDefault(_textTextController);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors); /**
	 * @class SourceBufferSink
	 * @implements FragmentSink
	 */function SourceBufferSink(mediaSource,mediaInfo,onAppendedCallback,oldBuffer){var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var instance=undefined,logger=undefined,buffer=undefined,isAppendingInProgress=undefined,intervalId=undefined;var callbacks=[];var appendQueue=[];var onAppended=onAppendedCallback;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);isAppendingInProgress = false;var codec=mediaInfo.codec;try{ // Safari claims to support anything starting 'application/mp4'.
	// it definitely doesn't understand 'application/mp4;codecs="stpp"'
	// - currently no browser does, so check for it and use our own
	// implementation. The same is true for codecs="wvtt".
	if(codec.match(/application\/mp4;\s*codecs="(stpp|wvtt).*"/i)){throw new Error('not really supported');}buffer = oldBuffer?oldBuffer:mediaSource.addSourceBuffer(codec);var CHECK_INTERVAL=50; // use updateend event if possible
	if(typeof buffer.addEventListener === 'function'){try{buffer.addEventListener('updateend',updateEndHandler,false);buffer.addEventListener('error',errHandler,false);buffer.addEventListener('abort',errHandler,false);}catch(err) { // use setInterval to periodically check if updating has been completed
	intervalId = setInterval(checkIsUpdateEnded,CHECK_INTERVAL);}}else { // use setInterval to periodically check if updating has been completed
	intervalId = setInterval(checkIsUpdateEnded,CHECK_INTERVAL);}}catch(ex) { // Note that in the following, the quotes are open to allow for extra text after stpp and wvtt
	if(mediaInfo.isText || codec.indexOf('codecs="stpp') !== -1 || codec.indexOf('codecs="wvtt') !== -1){var textController=(0,_textTextController2['default'])(context).getInstance();buffer = textController.getTextSourceBuffer();}else {throw ex;}}}function reset(keepBuffer){if(buffer){if(typeof buffer.removeEventListener === 'function'){buffer.removeEventListener('updateend',updateEndHandler,false);buffer.removeEventListener('error',errHandler,false);buffer.removeEventListener('abort',errHandler,false);}clearInterval(intervalId);if(!keepBuffer){try{if(!buffer.getClassName || buffer.getClassName() !== 'TextSourceBuffer'){mediaSource.removeSourceBuffer(buffer);}}catch(e) {logger.error('Failed to remove source buffer from media source.');}buffer = null;}isAppendingInProgress = false;}appendQueue = [];onAppended = null;}function getBuffer(){return buffer;}function getAllBufferRanges(){try{return buffer.buffered;}catch(e) {logger.error('getAllBufferRanges exception: ' + e.message);return null;}}function append(chunk){if(!chunk){onAppended({chunk:chunk,error:new _voDashJSError2['default'](_coreErrorsErrors2['default'].APPEND_ERROR_CODE,_coreErrorsErrors2['default'].APPEND_ERROR_MESSAGE)});return;}appendQueue.push(chunk);if(!isAppendingInProgress){waitForUpdateEnd(buffer,appendNextInQueue.bind(this));}}function updateTimestampOffset(MSETimeOffset){if(buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)){waitForUpdateEnd(buffer,function(){buffer.timestampOffset = MSETimeOffset;});}}function remove(start,end,forceRemoval){var sourceBufferSink=this; // make sure that the given time range is correct. Otherwise we will get InvalidAccessError
	waitForUpdateEnd(buffer,function(){try{if(start >= 0 && end > start && (forceRemoval || mediaSource.readyState !== 'ended')){buffer.remove(start,end);} // updating is in progress, we should wait for it to complete before signaling that this operation is done
	waitForUpdateEnd(buffer,function(){eventBus.trigger(_coreEventsEvents2['default'].SOURCEBUFFER_REMOVE_COMPLETED,{buffer:sourceBufferSink,from:start,to:end,unintended:false});});}catch(err) {eventBus.trigger(_coreEventsEvents2['default'].SOURCEBUFFER_REMOVE_COMPLETED,{buffer:sourceBufferSink,from:start,to:end,unintended:false,error:new _voDashJSError2['default'](err.code,err.message)});}});}function appendNextInQueue(){var _this=this;var sourceBufferSink=this;if(appendQueue.length > 0){(function(){isAppendingInProgress = true;var nextChunk=appendQueue[0];appendQueue.splice(0,1);var oldRanges=[];var afterSuccess=function afterSuccess(){ // Safari sometimes drops a portion of a buffer after appending. Handle these situations here
	var newRanges=getAllBufferRanges();checkBufferGapsAfterAppend(sourceBufferSink,oldRanges,newRanges,nextChunk);if(appendQueue.length > 0){appendNextInQueue.call(this);}else {isAppendingInProgress = false;if(onAppended){onAppended({chunk:nextChunk});}}};try{if(nextChunk.bytes.length === 0){afterSuccess.call(_this);}else {oldRanges = getAllBufferRanges();if(buffer.appendBuffer){buffer.appendBuffer(nextChunk.bytes);}else {buffer.append(nextChunk.bytes,nextChunk);} // updating is in progress, we should wait for it to complete before signaling that this operation is done
	waitForUpdateEnd(buffer,afterSuccess.bind(_this));}}catch(err) {logger.fatal('SourceBuffer append failed "' + err + '"');if(appendQueue.length > 0){appendNextInQueue();}else {isAppendingInProgress = false;}if(onAppended){onAppended({chunk:nextChunk,error:new _voDashJSError2['default'](err.code,err.message)});}}})();}}function checkBufferGapsAfterAppend(buffer,oldRanges,newRanges,chunk){if(oldRanges && oldRanges.length > 0 && oldRanges.length < newRanges.length && isChunkAlignedWithRange(oldRanges,chunk)){ // A split in the range was created while appending
	eventBus.trigger(_coreEventsEvents2['default'].SOURCEBUFFER_REMOVE_COMPLETED,{buffer:buffer,from:newRanges.end(newRanges.length - 2),to:newRanges.start(newRanges.length - 1),unintended:true});}}function isChunkAlignedWithRange(oldRanges,chunk){for(var i=0;i < oldRanges.length;i++) {var start=Math.round(oldRanges.start(i));var end=Math.round(oldRanges.end(i));if(end === chunk.start || start === chunk.end || chunk.start >= start && chunk.end <= end){return true;}}return false;}function abort(){try{if(mediaSource.readyState === 'open'){buffer.abort();}else if(buffer.setTextTrack && mediaSource.readyState === 'ended'){buffer.abort(); //The cues need to be removed from the TextSourceBuffer via a call to abort()
	}}catch(ex) {logger.error('SourceBuffer append abort failed: "' + ex + '"');}appendQueue = [];}function executeCallback(){if(callbacks.length > 0){var cb=callbacks.shift();if(buffer.updating){waitForUpdateEnd(buffer,cb);}else {cb(); // Try to execute next callback if still not updating
	executeCallback();}}}function checkIsUpdateEnded(){ // if updating is still in progress do nothing and wait for the next check again.
	if(buffer.updating)return; // updating is completed, now we can stop checking and resolve the promise
	executeCallback();}function updateEndHandler(){if(buffer.updating)return;executeCallback();}function errHandler(){logger.error('SourceBufferSink error',mediaInfo.type);}function waitForUpdateEnd(buffer,callback){callbacks.push(callback);if(!buffer.updating){executeCallback();}}instance = {getAllBufferRanges:getAllBufferRanges,getBuffer:getBuffer,append:append,remove:remove,abort:abort,reset:reset,updateTimestampOffset:updateTimestampOffset};setup();return instance;}SourceBufferSink.__dashjs_factory_name = 'SourceBufferSink';var factory=_coreFactoryMaker2['default'].getClassFactory(SourceBufferSink);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=SourceBufferSink.js.map


/***/ }),
/* 62 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var DashJSError=function DashJSError(code,message,data){_classCallCheck(this,DashJSError);this.code = code || null;this.message = message || null;this.data = data || null;};exports["default"] = DashJSError;module.exports = exports["default"];
	//# sourceMappingURL=DashJSError.js.map


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _TextSourceBuffer=__webpack_require__(64);var _TextSourceBuffer2=_interopRequireDefault(_TextSourceBuffer);var _TextTracks=__webpack_require__(74);var _TextTracks2=_interopRequireDefault(_TextTracks);var _utilsVTTParser=__webpack_require__(119);var _utilsVTTParser2=_interopRequireDefault(_utilsVTTParser);var _utilsTTMLParser=__webpack_require__(120);var _utilsTTMLParser2=_interopRequireDefault(_utilsTTMLParser);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _utilsSupervisorTools=__webpack_require__(73);function TextController(){var context=this.context;var instance=undefined;var textSourceBuffer=undefined;var errHandler=undefined,dashManifestModel=undefined,manifestModel=undefined,mediaController=undefined,videoModel=undefined,streamController=undefined,textTracks=undefined,vttParser=undefined,ttmlParser=undefined,eventBus=undefined,defaultLanguage=undefined,lastEnabledIndex=undefined,textDefaultEnabled=undefined, // this is used for default settings (each time a file is loaded, we check value of this settings )
	allTracksAreDisabled=undefined, // this is used for one session (when a file has been loaded, we use this settings to enable/disable text)
	forceTextStreaming=undefined;function setup(){defaultLanguage = '';lastEnabledIndex = -1;textDefaultEnabled = true;forceTextStreaming = false;textTracks = (0,_TextTracks2['default'])(context).getInstance();vttParser = (0,_utilsVTTParser2['default'])(context).getInstance();ttmlParser = (0,_utilsTTMLParser2['default'])(context).getInstance();textSourceBuffer = (0,_TextSourceBuffer2['default'])(context).getInstance();eventBus = (0,_coreEventBus2['default'])(context).getInstance();textTracks.initialize();eventBus.on(_coreEventsEvents2['default'].TEXT_TRACKS_QUEUE_INITIALIZED,onTextTracksAdded,instance);resetInitialSettings();}function setConfig(config){if(!config){return;}if(config.errHandler){errHandler = config.errHandler;}if(config.dashManifestModel){dashManifestModel = config.dashManifestModel;}if(config.manifestModel){manifestModel = config.manifestModel;}if(config.mediaController){mediaController = config.mediaController;}if(config.videoModel){videoModel = config.videoModel;}if(config.streamController){streamController = config.streamController;}if(config.textTracks){textTracks = config.textTracks;}if(config.vttParser){vttParser = config.vttParser;}if(config.ttmlParser){ttmlParser = config.ttmlParser;} // create config for source buffer
	textSourceBuffer.setConfig({errHandler:errHandler,dashManifestModel:dashManifestModel,manifestModel:manifestModel,mediaController:mediaController,videoModel:videoModel,streamController:streamController,textTracks:textTracks,vttParser:vttParser,ttmlParser:ttmlParser});}function getTextSourceBuffer(){return textSourceBuffer;}function getAllTracksAreDisabled(){return allTracksAreDisabled;}function addEmbeddedTrack(mediaInfo){textSourceBuffer.addEmbeddedTrack(mediaInfo);}function setTextDefaultLanguage(lang){(0,_utilsSupervisorTools.checkParameterType)(lang,'string');defaultLanguage = lang;}function getTextDefaultLanguage(){return defaultLanguage;}function onTextTracksAdded(e){var _this=this;var tracks=e.tracks;var index=e.index;tracks.some(function(item,idx){if(item.lang === defaultLanguage){_this.setTextTrack(idx);index = idx;return true;}});if(!textDefaultEnabled){ // disable text at startup
	this.setTextTrack(-1);}lastEnabledIndex = index;eventBus.trigger(_coreEventsEvents2['default'].TEXT_TRACKS_ADDED,{enabled:isTextEnabled(),index:index,tracks:tracks});}function setTextDefaultEnabled(enable){(0,_utilsSupervisorTools.checkParameterType)(enable,'boolean');textDefaultEnabled = enable;if(!textDefaultEnabled){ // disable text at startup
	this.setTextTrack(-1);}}function getTextDefaultEnabled(){return textDefaultEnabled;}function enableText(enable){(0,_utilsSupervisorTools.checkParameterType)(enable,'boolean');if(isTextEnabled() !== enable){ // change track selection
	if(enable){ // apply last enabled tractk
	this.setTextTrack(lastEnabledIndex);}if(!enable){ // keep last index and disable text track
	lastEnabledIndex = this.getCurrentTrackIdx();this.setTextTrack(-1);}}}function isTextEnabled(){var enabled=true;if(allTracksAreDisabled && !forceTextStreaming){enabled = false;}return enabled;} // when set to true NextFragmentRequestRule will allow schedule of chunks even if tracks are all disabled. Allowing streaming to hidden track for external players to work with.
	function enableForcedTextStreaming(enable){(0,_utilsSupervisorTools.checkParameterType)(enable,'boolean');forceTextStreaming = enable;}function setTextTrack(idx){ //For external time text file,  the only action needed to change a track is marking the track mode to showing.
	// Fragmented text tracks need the additional step of calling TextController.setTextTrack();
	var config=textSourceBuffer.getConfig();var fragmentModel=config.fragmentModel;var fragmentedTracks=config.fragmentedTracks;var videoModel=config.videoModel;var mediaInfosArr=undefined,streamProcessor=undefined;allTracksAreDisabled = idx === -1?true:false;var oldTrackIdx=textTracks.getCurrentTrackIdx();if(oldTrackIdx !== idx){textTracks.setModeForTrackIdx(oldTrackIdx,_constantsConstants2['default'].TEXT_HIDDEN);textTracks.setCurrentTrackIdx(idx);textTracks.setModeForTrackIdx(idx,_constantsConstants2['default'].TEXT_SHOWING);var currentTrackInfo=textTracks.getCurrentTrackInfo();if(currentTrackInfo && currentTrackInfo.isFragmented && !currentTrackInfo.isEmbedded){for(var i=0;i < fragmentedTracks.length;i++) {var mediaInfo=fragmentedTracks[i];if(currentTrackInfo.lang === mediaInfo.lang && currentTrackInfo.index === mediaInfo.index && (mediaInfo.id?currentTrackInfo.label === mediaInfo.id:currentTrackInfo.label === mediaInfo.index)){var currentFragTrack=mediaController.getCurrentTrackFor(_constantsConstants2['default'].FRAGMENTED_TEXT,streamController.getActiveStreamInfo());if(mediaInfo !== currentFragTrack){fragmentModel.abortRequests();fragmentModel.removeExecutedRequestsBeforeTime();textSourceBuffer.remove();textTracks.deleteCuesFromTrackIdx(oldTrackIdx);mediaController.setTrack(mediaInfo);textSourceBuffer.setCurrentFragmentedTrackIdx(i);}else if(oldTrackIdx === -1){ //in fragmented use case, if the user selects the older track (the one selected before disabled text track)
	//no CURRENT_TRACK_CHANGED event will be trigger, so dashHandler current time has to be updated and the scheduleController
	//has to be restarted.
	var streamProcessors=streamController.getActiveStreamProcessors();for(var _i=0;_i < streamProcessors.length;_i++) {if(streamProcessors[_i].getType() === _constantsConstants2['default'].FRAGMENTED_TEXT){streamProcessor = streamProcessors[_i];break;}}streamProcessor.getIndexHandler().setCurrentTime(videoModel.getTime());streamProcessor.getScheduleController().start();}}}}else if(currentTrackInfo && !currentTrackInfo.isFragmented){var streamProcessors=streamController.getActiveStreamProcessors();for(var i=0;i < streamProcessors.length;i++) {if(streamProcessors[i].getType() === _constantsConstants2['default'].TEXT){streamProcessor = streamProcessors[i];mediaInfosArr = streamProcessor.getMediaInfoArr();break;}}if(streamProcessor && mediaInfosArr){for(var i=0;i < mediaInfosArr.length;i++) {if(mediaInfosArr[i].index === currentTrackInfo.index && mediaInfosArr[i].lang === currentTrackInfo.lang){streamProcessor.selectMediaInfo(mediaInfosArr[i]);break;}}}}}}function getCurrentTrackIdx(){return textTracks.getCurrentTrackIdx();}function resetInitialSettings(){allTracksAreDisabled = false;}function reset(){resetInitialSettings();textSourceBuffer.resetEmbedded();textSourceBuffer.reset();}instance = {setConfig:setConfig,getTextSourceBuffer:getTextSourceBuffer,getAllTracksAreDisabled:getAllTracksAreDisabled,addEmbeddedTrack:addEmbeddedTrack,getTextDefaultLanguage:getTextDefaultLanguage,setTextDefaultLanguage:setTextDefaultLanguage,setTextDefaultEnabled:setTextDefaultEnabled,getTextDefaultEnabled:getTextDefaultEnabled,enableText:enableText,isTextEnabled:isTextEnabled,setTextTrack:setTextTrack,getCurrentTrackIdx:getCurrentTrackIdx,enableForcedTextStreaming:enableForcedTextStreaming,reset:reset};setup();return instance;}TextController.__dashjs_factory_name = 'TextController';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(TextController);module.exports = exports['default'];
	//# sourceMappingURL=TextController.js.map


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _voMetricsHTTPRequest=__webpack_require__(65);var _voTextTrackInfo=__webpack_require__(66);var _voTextTrackInfo2=_interopRequireDefault(_voTextTrackInfo);var _utilsBoxParser=__webpack_require__(67);var _utilsBoxParser2=_interopRequireDefault(_utilsBoxParser);var _utilsCustomTimeRanges=__webpack_require__(72);var _utilsCustomTimeRanges2=_interopRequireDefault(_utilsCustomTimeRanges);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _TextTracks=__webpack_require__(74);var _TextTracks2=_interopRequireDefault(_TextTracks);var _EmbeddedTextHtmlRender=__webpack_require__(115);var _EmbeddedTextHtmlRender2=_interopRequireDefault(_EmbeddedTextHtmlRender);var _codemIsoboxer=__webpack_require__(70);var _codemIsoboxer2=_interopRequireDefault(_codemIsoboxer);var _externalsCea608Parser=__webpack_require__(116);var _externalsCea608Parser2=_interopRequireDefault(_externalsCea608Parser);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _voDashJSError=__webpack_require__(62);var _voDashJSError2=_interopRequireDefault(_voDashJSError);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);function TextSourceBuffer(){var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var embeddedInitialized=false;var instance=undefined,logger=undefined,boxParser=undefined,errHandler=undefined,dashManifestModel=undefined,manifestModel=undefined,mediaController=undefined,parser=undefined,vttParser=undefined,ttmlParser=undefined,mediaInfos=undefined,textTracks=undefined,fragmentedFragmentModel=undefined,initializationSegmentReceived=undefined,timescale=undefined,fragmentedTracks=undefined,videoModel=undefined,streamController=undefined,firstFragmentedSubtitleStart=undefined,currFragmentedTrackIdx=undefined,embeddedTracks=undefined,embeddedInitializationSegmentReceived=undefined,embeddedTimescale=undefined,embeddedLastSequenceNumber=undefined,embeddedSequenceNumbers=undefined,embeddedCea608FieldParsers=undefined,embeddedTextHtmlRender=undefined,mseTimeOffset=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);resetInitialSettings();}function resetFragmented(){fragmentedFragmentModel = null;timescale = NaN;fragmentedTracks = [];firstFragmentedSubtitleStart = null;initializationSegmentReceived = false;}function resetInitialSettings(){resetFragmented();mediaInfos = [];parser = null;}function initialize(mimeType,streamProcessor){if(!embeddedInitialized){initEmbedded();}textTracks.setConfig({videoModel:videoModel});textTracks.initialize();if(!boxParser){boxParser = (0,_utilsBoxParser2['default'])(context).getInstance();}addMediaInfos(mimeType,streamProcessor);}function addMediaInfos(mimeType,streamProcessor){var isFragmented=!dashManifestModel.getIsTextTrack(mimeType);if(streamProcessor){mediaInfos = mediaInfos.concat(streamProcessor.getMediaInfoArr());if(isFragmented){fragmentedFragmentModel = streamProcessor.getFragmentModel();instance.buffered = (0,_utilsCustomTimeRanges2['default'])(context).create();fragmentedTracks = mediaController.getTracksFor(_constantsConstants2['default'].FRAGMENTED_TEXT,streamController.getActiveStreamInfo());var currFragTrack=mediaController.getCurrentTrackFor(_constantsConstants2['default'].FRAGMENTED_TEXT,streamController.getActiveStreamInfo());for(var i=0;i < fragmentedTracks.length;i++) {if(fragmentedTracks[i] === currFragTrack){setCurrentFragmentedTrackIdx(i);break;}}}for(var i=0;i < mediaInfos.length;i++) {createTextTrackFromMediaInfo(null,mediaInfos[i]);}}}function abort(){textTracks.deleteAllTextTracks();boxParser = null;mediaInfos = [];fragmentedFragmentModel = null;initializationSegmentReceived = false;fragmentedTracks = [];}function reset(){resetInitialSettings();streamController = null;videoModel = null;textTracks = null;}function onVideoChunkReceived(e){var chunk=e.chunk;if(chunk.mediaInfo.embeddedCaptions){append(chunk.bytes,chunk);}}function initEmbedded(){embeddedTracks = [];textTracks = (0,_TextTracks2['default'])(context).getInstance();textTracks.setConfig({videoModel:videoModel});textTracks.initialize();boxParser = (0,_utilsBoxParser2['default'])(context).getInstance();currFragmentedTrackIdx = null;embeddedInitializationSegmentReceived = false;embeddedTimescale = 0;embeddedCea608FieldParsers = [];embeddedSequenceNumbers = [];embeddedLastSequenceNumber = null;embeddedInitialized = true;embeddedTextHtmlRender = (0,_EmbeddedTextHtmlRender2['default'])(context).getInstance();var streamProcessors=streamController.getActiveStreamProcessors();for(var i in streamProcessors) {if(streamProcessors[i].getType() === 'video'){mseTimeOffset = streamProcessors[i].getRepresentationInfo().MSETimeOffset;break;}}eventBus.on(_coreEventsEvents2['default'].VIDEO_CHUNK_RECEIVED,onVideoChunkReceived,this);}function resetEmbedded(){eventBus.off(_coreEventsEvents2['default'].VIDEO_CHUNK_RECEIVED,onVideoChunkReceived,this);if(textTracks){textTracks.deleteAllTextTracks();}embeddedInitialized = false;embeddedTracks = [];embeddedCea608FieldParsers = [null,null];embeddedSequenceNumbers = [];embeddedLastSequenceNumber = null;}function addEmbeddedTrack(mediaInfo){if(!embeddedInitialized){initEmbedded();}if(mediaInfo){if(mediaInfo.id === _constantsConstants2['default'].CC1 || mediaInfo.id === _constantsConstants2['default'].CC3){for(var i=0;i < embeddedTracks.length;i++) {if(embeddedTracks[i].id === mediaInfo.id){return;}}embeddedTracks.push(mediaInfo);}else {logger.warn('Embedded track ' + mediaInfo.id + ' not supported!');}}}function setConfig(config){if(!config){return;}if(config.errHandler){errHandler = config.errHandler;}if(config.dashManifestModel){dashManifestModel = config.dashManifestModel;}if(config.manifestModel){manifestModel = config.manifestModel;}if(config.mediaController){mediaController = config.mediaController;}if(config.videoModel){videoModel = config.videoModel;}if(config.streamController){streamController = config.streamController;}if(config.textTracks){textTracks = config.textTracks;}if(config.vttParser){vttParser = config.vttParser;}if(config.ttmlParser){ttmlParser = config.ttmlParser;}}function getConfig(){var config={fragmentModel:fragmentedFragmentModel,fragmentedTracks:fragmentedTracks,videoModel:videoModel};return config;}function setCurrentFragmentedTrackIdx(idx){currFragmentedTrackIdx = idx;}function createTextTrackFromMediaInfo(captionData,mediaInfo){var textTrackInfo=new _voTextTrackInfo2['default']();var trackKindMap={subtitle:'subtitles',caption:'captions'}; //Dash Spec has no "s" on end of KIND but HTML needs plural.
	var getKind=function getKind(){var kind=mediaInfo.roles.length > 0?trackKindMap[mediaInfo.roles[0]]:trackKindMap.caption;kind = kind === trackKindMap.caption || kind === trackKindMap.subtitle?kind:trackKindMap.caption;return kind;};var checkTTML=function checkTTML(){var ttml=false;if(mediaInfo.codec && mediaInfo.codec.search(_constantsConstants2['default'].STPP) >= 0){ttml = true;}if(mediaInfo.mimeType && mediaInfo.mimeType.search(_constantsConstants2['default'].TTML) >= 0){ttml = true;}return ttml;};textTrackInfo.captionData = captionData;textTrackInfo.lang = mediaInfo.lang;textTrackInfo.label = mediaInfo.id?mediaInfo.id:mediaInfo.index; // AdaptationSet id (an unsigned int) as it's optionnal parameter, use mediaInfo.index
	textTrackInfo.index = mediaInfo.index; // AdaptationSet index in manifest
	textTrackInfo.isTTML = checkTTML();textTrackInfo.defaultTrack = getIsDefault(mediaInfo);textTrackInfo.isFragmented = !dashManifestModel.getIsTextTrack(mediaInfo.mimeType);textTrackInfo.isEmbedded = mediaInfo.isEmbedded?true:false;textTrackInfo.kind = getKind();textTrackInfo.roles = mediaInfo.roles;textTrackInfo.accessibility = mediaInfo.accessibility;var totalNrTracks=(mediaInfos?mediaInfos.length:0) + embeddedTracks.length;textTracks.addTextTrack(textTrackInfo,totalNrTracks);}function append(bytes,chunk){var result=undefined,sampleList=undefined,i=undefined,j=undefined,k=undefined,samplesInfo=undefined,ccContent=undefined;var mediaInfo=chunk.mediaInfo;var mediaType=mediaInfo.type;var mimeType=mediaInfo.mimeType;var codecType=mediaInfo.codec || mimeType;if(!codecType){logger.error('No text type defined');return;}if(mediaType === _constantsConstants2['default'].FRAGMENTED_TEXT){if(!initializationSegmentReceived){initializationSegmentReceived = true;timescale = boxParser.getMediaTimescaleFromMoov(bytes);}else {samplesInfo = boxParser.getSamplesInfo(bytes);sampleList = samplesInfo.sampleList;if(firstFragmentedSubtitleStart === null && sampleList.length > 0){firstFragmentedSubtitleStart = sampleList[0].cts - chunk.start * timescale;}if(codecType.search(_constantsConstants2['default'].STPP) >= 0){parser = parser !== null?parser:getParser(codecType);for(i = 0;i < sampleList.length;i++) {var sample=sampleList[i];var sampleStart=sample.cts;var sampleRelStart=sampleStart - firstFragmentedSubtitleStart;this.buffered.add(sampleRelStart / timescale,(sampleRelStart + sample.duration) / timescale);var dataView=new DataView(bytes,sample.offset,sample.subSizes[0]);ccContent = _codemIsoboxer2['default'].Utils.dataViewToString(dataView,_constantsConstants2['default'].UTF8);var images=[];var subOffset=sample.offset + sample.subSizes[0];for(j = 1;j < sample.subSizes.length;j++) {var inData=new Uint8Array(bytes,subOffset,sample.subSizes[j]);var raw=String.fromCharCode.apply(null,inData);images.push(raw);subOffset += sample.subSizes[j];}try{ // Only used for Miscrosoft Smooth Streaming support - caption time is relative to sample time. In this case, we apply an offset.
	var manifest=manifestModel.getValue();var offsetTime=manifest.ttmlTimeIsRelative?sampleStart / timescale:0;result = parser.parse(ccContent,offsetTime,sampleStart / timescale,(sampleStart + sample.duration) / timescale,images);textTracks.addCaptions(currFragmentedTrackIdx,firstFragmentedSubtitleStart / timescale,result);}catch(e) {fragmentedFragmentModel.removeExecutedRequestsBeforeTime();this.remove();logger.error('TTML parser error: ' + e.message);}}}else { // WebVTT case
	var captionArray=[];for(i = 0;i < sampleList.length;i++) {var sample=sampleList[i];sample.cts -= firstFragmentedSubtitleStart;this.buffered.add(sample.cts / timescale,(sample.cts + sample.duration) / timescale);var sampleData=bytes.slice(sample.offset,sample.offset + sample.size); // There are boxes inside the sampleData, so we need a ISOBoxer to get at it.
	var sampleBoxes=_codemIsoboxer2['default'].parseBuffer(sampleData);for(j = 0;j < sampleBoxes.boxes.length;j++) {var box1=sampleBoxes.boxes[j];logger.debug('VTT box1: ' + box1.type);if(box1.type === 'vtte'){continue; //Empty box
	}if(box1.type === 'vttc'){logger.debug('VTT vttc boxes.length = ' + box1.boxes.length);for(k = 0;k < box1.boxes.length;k++) {var box2=box1.boxes[k];logger.debug('VTT box2: ' + box2.type);if(box2.type === 'payl'){var cue_text=box2.cue_text;logger.debug('VTT cue_text = ' + cue_text);var start_time=sample.cts / timescale;var end_time=(sample.cts + sample.duration) / timescale;captionArray.push({start:start_time,end:end_time,data:cue_text,styles:{}});logger.debug('VTT ' + start_time + '-' + end_time + ' : ' + cue_text);}}}}}if(captionArray.length > 0){textTracks.addCaptions(currFragmentedTrackIdx,0,captionArray);}}}}else if(mediaType === _constantsConstants2['default'].TEXT){var dataView=new DataView(bytes,0,bytes.byteLength);ccContent = _codemIsoboxer2['default'].Utils.dataViewToString(dataView,_constantsConstants2['default'].UTF8);try{result = getParser(codecType).parse(ccContent,0);textTracks.addCaptions(textTracks.getCurrentTrackIdx(),0,result);}catch(e) {errHandler.timedTextError(e,'parse',ccContent);errHandler.error(new _voDashJSError2['default'](_coreErrorsErrors2['default'].TIMED_TEXT_ERROR_ID_PARSE_CODE,_coreErrorsErrors2['default'].TIMED_TEXT_ERROR_MESSAGE_PARSE + e.message,ccContent));}}else if(mediaType === _constantsConstants2['default'].VIDEO){ //embedded text
	if(chunk.segmentType === _voMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE){if(embeddedTimescale === 0){embeddedTimescale = boxParser.getMediaTimescaleFromMoov(bytes);for(i = 0;i < embeddedTracks.length;i++) {createTextTrackFromMediaInfo(null,embeddedTracks[i]);}}}else { // MediaSegment
	if(embeddedTimescale === 0){logger.warn('CEA-608: No timescale for embeddedTextTrack yet');return;}var makeCueAdderForIndex=function makeCueAdderForIndex(self,trackIndex){function newCue(startTime,endTime,captionScreen){var captionsArray=null;if(videoModel.getTTMLRenderingDiv()){captionsArray = embeddedTextHtmlRender.createHTMLCaptionsFromScreen(videoModel.getElement(),startTime,endTime,captionScreen);}else {var text=captionScreen.getDisplayText();captionsArray = [{start:startTime,end:endTime,data:text,styles:{}}];}if(captionsArray){textTracks.addCaptions(trackIndex,0,captionsArray);}}return newCue;};samplesInfo = boxParser.getSamplesInfo(bytes);var sequenceNumber=samplesInfo.lastSequenceNumber;if(!embeddedCea608FieldParsers[0] && !embeddedCea608FieldParsers[1]){ // Time to setup the CEA-608 parsing
	var field=undefined,handler=undefined,trackIdx=undefined;for(i = 0;i < embeddedTracks.length;i++) {if(embeddedTracks[i].id === _constantsConstants2['default'].CC1){field = 0;trackIdx = textTracks.getTrackIdxForId(_constantsConstants2['default'].CC1);}else if(embeddedTracks[i].id === _constantsConstants2['default'].CC3){field = 1;trackIdx = textTracks.getTrackIdxForId(_constantsConstants2['default'].CC3);}if(trackIdx === -1){logger.warn('CEA-608: data before track is ready.');return;}handler = makeCueAdderForIndex(this,trackIdx);embeddedCea608FieldParsers[i] = new _externalsCea608Parser2['default'].Cea608Parser(i + 1,{'newCue':handler},null);}}if(embeddedTimescale && embeddedSequenceNumbers.indexOf(sequenceNumber) == -1){if(embeddedLastSequenceNumber !== null && sequenceNumber !== embeddedLastSequenceNumber + samplesInfo.numSequences){for(i = 0;i < embeddedCea608FieldParsers.length;i++) {if(embeddedCea608FieldParsers[i]){embeddedCea608FieldParsers[i].reset();}}}var allCcData=extractCea608Data(bytes,samplesInfo.sampleList);for(var fieldNr=0;fieldNr < embeddedCea608FieldParsers.length;fieldNr++) {var ccData=allCcData.fields[fieldNr];var fieldParser=embeddedCea608FieldParsers[fieldNr];if(fieldParser){for(i = 0;i < ccData.length;i++) {fieldParser.addData(ccData[i][0] / embeddedTimescale,ccData[i][1]);}}}embeddedLastSequenceNumber = sequenceNumber;embeddedSequenceNumbers.push(sequenceNumber);}}}} /**
	     * Extract CEA-608 data from a buffer of data.
	     * @param {ArrayBuffer} data
	     * @param {Array} samples cue information
	     * @returns {Object|null} ccData corresponding to one segment.
	     */function extractCea608Data(data,samples){if(samples.length === 0){return null;}var allCcData={splits:[],fields:[[],[]]};var raw=new DataView(data);for(var i=0;i < samples.length;i++) {var sample=samples[i];var cea608Ranges=_externalsCea608Parser2['default'].findCea608Nalus(raw,sample.offset,sample.size);var lastSampleTime=null;var idx=0;for(var j=0;j < cea608Ranges.length;j++) {var ccData=_externalsCea608Parser2['default'].extractCea608DataFromRange(raw,cea608Ranges[j]);for(var k=0;k < 2;k++) {if(ccData[k].length > 0){if(sample.cts !== lastSampleTime){idx = 0;}else {idx += 1;}allCcData.fields[k].push([sample.cts + mseTimeOffset * embeddedTimescale,ccData[k],idx]);lastSampleTime = sample.cts;}}}} // Sort by sampleTime ascending order
	// If two packets have the same sampleTime, use them in the order
	// they were received
	allCcData.fields.forEach(function sortField(field){field.sort(function(a,b){if(a[0] === b[0]){return a[2] - b[2];}return a[0] - b[0];});});return allCcData;}function getIsDefault(mediaInfo){ //TODO How to tag default. currently same order as listed in manifest.
	// Is there a way to mark a text adaptation set as the default one? DASHIF meeting talk about using role which is being used for track KIND
	// Eg subtitles etc. You can have multiple role tags per adaptation Not defined in the spec yet.
	var isDefault=false;if(embeddedTracks.length > 1 && mediaInfo.isEmbedded){isDefault = mediaInfo.id && mediaInfo.id === _constantsConstants2['default'].CC1; // CC1 if both CC1 and CC3 exist
	}else if(embeddedTracks.length === 1){if(mediaInfo.id && mediaInfo.id.substring(0,2) === 'CC'){ // Either CC1 or CC3
	isDefault = true;}}else if(embeddedTracks.length === 0){isDefault = mediaInfo.index === mediaInfos[0].index;}return isDefault;}function getParser(codecType){var parser=undefined;if(codecType.search(_constantsConstants2['default'].VTT) >= 0){parser = vttParser;}else if(codecType.search(_constantsConstants2['default'].TTML) >= 0 || codecType.search(_constantsConstants2['default'].STPP) >= 0){parser = ttmlParser;}return parser;}function remove(start,end){ //if start and end are not defined, remove all
	if(start === undefined && start === end){start = this.buffered.start(0);end = this.buffered.end(this.buffered.length - 1);}this.buffered.remove(start,end);}instance = {initialize:initialize,append:append,abort:abort,addEmbeddedTrack:addEmbeddedTrack,resetEmbedded:resetEmbedded,setConfig:setConfig,getConfig:getConfig,setCurrentFragmentedTrackIdx:setCurrentFragmentedTrackIdx,remove:remove,reset:reset};setup();return instance;}TextSourceBuffer.__dashjs_factory_name = 'TextSourceBuffer';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(TextSourceBuffer);module.exports = exports['default'];
	//# sourceMappingURL=TextSourceBuffer.js.map


/***/ }),
/* 65 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc This Object holds reference to the HTTPRequest for manifest, fragment and xlink loading.
	 * Members which are not defined in ISO23009-1 Annex D should be prefixed by a _ so that they are ignored
	 * by Metrics Reporting code.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var HTTPRequest= /**
	     * @class
	     */function HTTPRequest(){_classCallCheck(this,HTTPRequest); /**
	         * Identifier of the TCP connection on which the HTTP request was sent.
	         * @public
	         */this.tcpid = null; /**
	         * This is an optional parameter and should not be included in HTTP request/response transactions for progressive download.
	         * The type of the request:
	         * - MPD
	         * - XLink expansion
	         * - Initialization Fragment
	         * - Index Fragment
	         * - Media Fragment
	         * - Bitstream Switching Fragment
	         * - other
	         * @public
	         */this.type = null; /**
	         * The original URL (before any redirects or failures)
	         * @public
	         */this.url = null; /**
	         * The actual URL requested, if different from above
	         * @public
	         */this.actualurl = null; /**
	         * The contents of the byte-range-spec part of the HTTP Range header.
	         * @public
	         */this.range = null; /**
	         * Real-Time | The real time at which the request was sent.
	         * @public
	         */this.trequest = null; /**
	         * Real-Time | The real time at which the first byte of the response was received.
	         * @public
	         */this.tresponse = null; /**
	         * The HTTP response code.
	         * @public
	         */this.responsecode = null; /**
	         * The duration of the throughput trace intervals (ms), for successful requests only.
	         * @public
	         */this.interval = null; /**
	         * Throughput traces, for successful requests only.
	         * @public
	         */this.trace = []; /**
	         * Type of stream ("audio" | "video" etc..)
	         * @public
	         */this._stream = null; /**
	         * Real-Time | The real time at which the request finished.
	         * @public
	         */this._tfinish = null; /**
	         * The duration of the media requests, if available, in milliseconds.
	         * @public
	         */this._mediaduration = null; /**
	         * all the response headers from request.
	         * @public
	         */this._responseHeaders = null; /**
	         * The selected service location for the request. string.
	         * @public
	         */this._serviceLocation = null;} /**
	 * @classdesc This Object holds reference to the progress of the HTTPRequest.
	 */;var HTTPRequestTrace= /**
	    * @class
	    */function HTTPRequestTrace(){_classCallCheck(this,HTTPRequestTrace); /**
	         * Real-Time | Measurement stream start.
	         * @public
	         */this.s = null; /**
	         * Measurement stream duration (ms).
	         * @public
	         */this.d = null; /**
	         * List of integers counting the bytes received in each trace interval within the measurement stream.
	         * @public
	         */this.b = [];};HTTPRequest.GET = 'GET';HTTPRequest.HEAD = 'HEAD';HTTPRequest.MPD_TYPE = 'MPD';HTTPRequest.XLINK_EXPANSION_TYPE = 'XLinkExpansion';HTTPRequest.INIT_SEGMENT_TYPE = 'InitializationSegment';HTTPRequest.INDEX_SEGMENT_TYPE = 'IndexSegment';HTTPRequest.MEDIA_SEGMENT_TYPE = 'MediaSegment';HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE = 'BitstreamSwitchingSegment';HTTPRequest.OTHER_TYPE = 'other';exports.HTTPRequest = HTTPRequest;exports.HTTPRequestTrace = HTTPRequestTrace;
	//# sourceMappingURL=HTTPRequest.js.map


/***/ }),
/* 66 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var TextTrackInfo=function TextTrackInfo(){_classCallCheck(this,TextTrackInfo);this.captionData = null;this.label = null;this.lang = null;this.defaultTrack = false;this.kind = null;this.isFragmented = false;this.isEmbedded = false;};exports["default"] = TextTrackInfo;module.exports = exports["default"];
	//# sourceMappingURL=TextTrackInfo.js.map


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _IsoFile=__webpack_require__(68);var _IsoFile2=_interopRequireDefault(_IsoFile);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _codemIsoboxer=__webpack_require__(70);var _codemIsoboxer2=_interopRequireDefault(_codemIsoboxer);var _voIsoBoxSearchInfo=__webpack_require__(71);var _voIsoBoxSearchInfo2=_interopRequireDefault(_voIsoBoxSearchInfo);function BoxParser() /*config*/{var logger=undefined,instance=undefined;var context=this.context;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);} /**
	     * @param {ArrayBuffer} data
	     * @returns {IsoFile|null}
	     * @memberof BoxParser#
	     */function parse(data){if(!data)return null;if(data.fileStart === undefined){data.fileStart = 0;}var parsedFile=_codemIsoboxer2['default'].parseBuffer(data);var dashIsoFile=(0,_IsoFile2['default'])(context).create();dashIsoFile.setData(parsedFile);return dashIsoFile;} /**
	     * From the list of type boxes to look for, returns the latest one that is fully completed (header + payload). This
	     * method only looks into the list of top boxes and doesn't analyze nested boxes.
	     * @param {string[]} types
	     * @param {ArrayBuffer|uint8Array} buffer
	     * @param {number} offset
	     * @returns {IsoBoxSearchInfo}
	     * @memberof BoxParser#
	     */function findLastTopIsoBoxCompleted(types,buffer,offset){if(offset === undefined){offset = 0;} // 8 = size (uint32) + type (4 characters)
	if(!buffer || offset + 8 >= buffer.byteLength){return new _voIsoBoxSearchInfo2['default'](0,false);}var data=buffer instanceof ArrayBuffer?new Uint8Array(buffer):buffer;var boxInfo=undefined;var lastCompletedOffset=0;while(offset < data.byteLength) {var boxSize=parseUint32(data,offset);var boxType=parseIsoBoxType(data,offset + 4);if(boxSize === 0){break;}if(offset + boxSize <= data.byteLength){if(types.indexOf(boxType) >= 0){boxInfo = new _voIsoBoxSearchInfo2['default'](offset,true,boxSize);}else {lastCompletedOffset = offset + boxSize;}}offset += boxSize;}if(!boxInfo){return new _voIsoBoxSearchInfo2['default'](lastCompletedOffset,false);}return boxInfo;}function getSamplesInfo(ab){if(!ab || ab.byteLength === 0){return {sampleList:[],lastSequenceNumber:NaN,totalDuration:NaN,numSequences:NaN};}var isoFile=parse(ab); // zero or more moofs
	var moofBoxes=isoFile.getBoxes('moof'); // exactly one mfhd per moof
	var mfhdBoxes=isoFile.getBoxes('mfhd');var sampleDuration=undefined,sampleCompositionTimeOffset=undefined,sampleCount=undefined,sampleSize=undefined,sampleDts=undefined,sampleList=undefined,sample=undefined,i=undefined,j=undefined,k=undefined,l=undefined,m=undefined,n=undefined,dataOffset=undefined,lastSequenceNumber=undefined,numSequences=undefined,totalDuration=undefined;numSequences = isoFile.getBoxes('moof').length;lastSequenceNumber = mfhdBoxes[mfhdBoxes.length - 1].sequence_number;sampleCount = 0;sampleList = [];var subsIndex=-1;var nextSubsSample=-1;for(l = 0;l < moofBoxes.length;l++) {var moofBox=moofBoxes[l]; // zero or more trafs per moof
	var trafBoxes=moofBox.getChildBoxes('traf');for(j = 0;j < trafBoxes.length;j++) {var trafBox=trafBoxes[j]; // exactly one tfhd per traf
	var tfhdBox=trafBox.getChildBox('tfhd'); // zero or one tfdt per traf
	var tfdtBox=trafBox.getChildBox('tfdt');sampleDts = tfdtBox.baseMediaDecodeTime; // zero or more truns per traf
	var trunBoxes=trafBox.getChildBoxes('trun'); // zero or more subs per traf
	var subsBoxes=trafBox.getChildBoxes('subs');for(k = 0;k < trunBoxes.length;k++) {var trunBox=trunBoxes[k];sampleCount = trunBox.sample_count;dataOffset = (tfhdBox.base_data_offset || 0) + (trunBox.data_offset || 0);for(i = 0;i < sampleCount;i++) {sample = trunBox.samples[i];sampleDuration = sample.sample_duration !== undefined?sample.sample_duration:tfhdBox.default_sample_duration;sampleSize = sample.sample_size !== undefined?sample.sample_size:tfhdBox.default_sample_size;sampleCompositionTimeOffset = sample.sample_composition_time_offset !== undefined?sample.sample_composition_time_offset:0;var sampleData={'dts':sampleDts,'cts':sampleDts + sampleCompositionTimeOffset,'duration':sampleDuration,'offset':moofBox.offset + dataOffset,'size':sampleSize,'subSizes':[sampleSize]};if(subsBoxes){for(m = 0;m < subsBoxes.length;m++) {var subsBox=subsBoxes[m];if(subsIndex < subsBox.entry_count - 1 && i > nextSubsSample){subsIndex++;nextSubsSample += subsBox.entries[subsIndex].sample_delta;}if(i == nextSubsSample){sampleData.subSizes = [];var entry=subsBox.entries[subsIndex];for(n = 0;n < entry.subsample_count;n++) {sampleData.subSizes.push(entry.subsamples[n].subsample_size);}}}}sampleList.push(sampleData);dataOffset += sampleSize;sampleDts += sampleDuration;}}totalDuration = sampleDts - tfdtBox.baseMediaDecodeTime;}}return {sampleList:sampleList,lastSequenceNumber:lastSequenceNumber,totalDuration:totalDuration,numSequences:numSequences};}function getMediaTimescaleFromMoov(ab){var isoFile=parse(ab);var mdhdBox=isoFile?isoFile.getBox('mdhd'):undefined;return mdhdBox?mdhdBox.timescale:NaN;}function parseUint32(data,offset){return data[offset + 3] >>> 0 | data[offset + 2] << 8 >>> 0 | data[offset + 1] << 16 >>> 0 | data[offset] << 24 >>> 0;}function parseIsoBoxType(data,offset){return String.fromCharCode(data[offset++]) + String.fromCharCode(data[offset++]) + String.fromCharCode(data[offset++]) + String.fromCharCode(data[offset]);}function findInitRange(data){var initRange=null;var start=undefined,end=undefined;var isoFile=parse(data);if(!isoFile){return initRange;}var ftyp=isoFile.getBox('ftyp');var moov=isoFile.getBox('moov');logger.debug('Searching for initialization.');if(moov && moov.isComplete){start = ftyp?ftyp.offset:moov.offset;end = moov.offset + moov.size - 1;initRange = start + '-' + end;logger.debug('Found the initialization.  Range: ' + initRange);}return initRange;}instance = {parse:parse,findLastTopIsoBoxCompleted:findLastTopIsoBoxCompleted,getMediaTimescaleFromMoov:getMediaTimescaleFromMoov,getSamplesInfo:getSamplesInfo,findInitRange:findInitRange};setup();return instance;}BoxParser.__dashjs_factory_name = 'BoxParser';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(BoxParser);module.exports = exports['default'];
	//# sourceMappingURL=BoxParser.js.map


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _voIsoBox=__webpack_require__(69);var _voIsoBox2=_interopRequireDefault(_voIsoBox);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);function IsoFile(){var instance=undefined,parsedIsoFile=undefined; /**
	    * @param {string} type
	    * @returns {IsoBox|null}
	    * @memberof IsoFile#
	    */function getBox(type){if(!type || !parsedIsoFile || !parsedIsoFile.boxes || parsedIsoFile.boxes.length === 0 || typeof parsedIsoFile.fetch !== 'function')return null;return convertToDashIsoBox(parsedIsoFile.fetch(type));} /**
	    * @param {string} type
	    * @returns {Array|null} array of {@link IsoBox}
	    * @memberof IsoFile#
	    */function getBoxes(type){var boxes=[];if(!type || !parsedIsoFile || typeof parsedIsoFile.fetchAll !== 'function'){return boxes;}var boxData=parsedIsoFile.fetchAll(type);var box=undefined;for(var i=0,ln=boxData.length;i < ln;i++) {box = convertToDashIsoBox(boxData[i]);if(box){boxes.push(box);}}return boxes;} /**
	    * @param {string} value
	    * @memberof IsoFile#
	    */function setData(value){parsedIsoFile = value;} /**
	    * @returns {IsoBox|null}
	    * @memberof IsoFile#
	    */function getLastBox(){if(!parsedIsoFile || !parsedIsoFile.boxes || !parsedIsoFile.boxes.length)return null;var type=parsedIsoFile.boxes[parsedIsoFile.boxes.length - 1].type;var boxes=getBoxes(type);return boxes.length > 0?boxes[boxes.length - 1]:null;}function convertToDashIsoBox(boxData){if(!boxData)return null;var box=new _voIsoBox2['default'](boxData);if(boxData.hasOwnProperty('_incomplete')){box.isComplete = !boxData._incomplete;}return box;}instance = {getBox:getBox,getBoxes:getBoxes,setData:setData,getLastBox:getLastBox};return instance;}IsoFile.__dashjs_factory_name = 'IsoFile';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(IsoFile);module.exports = exports['default'];
	//# sourceMappingURL=IsoFile.js.map


/***/ }),
/* 69 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _createClass=(function(){function defineProperties(target,props){for(var i=0;i < props.length;i++) {var descriptor=props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if('value' in descriptor)descriptor.writable = true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};})();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var IsoBox=(function(){function IsoBox(boxData){_classCallCheck(this,IsoBox);this.offset = boxData._offset;this.type = boxData.type;this.size = boxData.size;this.boxes = [];if(boxData.boxes){for(var i=0;i < boxData.boxes.length;i++) {this.boxes.push(new IsoBox(boxData.boxes[i]));}}this.isComplete = true;switch(boxData.type){case 'sidx':this.timescale = boxData.timescale;this.earliest_presentation_time = boxData.earliest_presentation_time;this.first_offset = boxData.first_offset;this.references = boxData.references;if(boxData.references){this.references = [];for(var i=0;i < boxData.references.length;i++) {var reference={reference_type:boxData.references[i].reference_type,referenced_size:boxData.references[i].referenced_size,subsegment_duration:boxData.references[i].subsegment_duration};this.references.push(reference);}}break;case 'emsg':this.id = boxData.id;this.value = boxData.value;this.timescale = boxData.timescale;this.scheme_id_uri = boxData.scheme_id_uri;this.presentation_time_delta = boxData.version === 1?boxData.presentation_time:boxData.presentation_time_delta;this.event_duration = boxData.event_duration;this.message_data = boxData.message_data;break;case 'mdhd':this.timescale = boxData.timescale;break;case 'mfhd':this.sequence_number = boxData.sequence_number;break;case 'subs':this.entry_count = boxData.entry_count;this.entries = boxData.entries;break;case 'tfhd':this.base_data_offset = boxData.base_data_offset;this.sample_description_index = boxData.sample_description_index;this.default_sample_duration = boxData.default_sample_duration;this.default_sample_size = boxData.default_sample_size;this.default_sample_flags = boxData.default_sample_flags;this.flags = boxData.flags;break;case 'tfdt':this.version = boxData.version;this.baseMediaDecodeTime = boxData.baseMediaDecodeTime;this.flags = boxData.flags;break;case 'trun':this.sample_count = boxData.sample_count;this.first_sample_flags = boxData.first_sample_flags;this.data_offset = boxData.data_offset;this.flags = boxData.flags;this.samples = boxData.samples;if(boxData.samples){this.samples = [];for(var i=0,ln=boxData.samples.length;i < ln;i++) {var sample={sample_size:boxData.samples[i].sample_size,sample_duration:boxData.samples[i].sample_duration,sample_composition_time_offset:boxData.samples[i].sample_composition_time_offset};this.samples.push(sample);}}break;}}_createClass(IsoBox,[{key:'getChildBox',value:function getChildBox(type){for(var i=0;i < this.boxes.length;i++) {if(this.boxes[i].type === type){return this.boxes[i];}}}},{key:'getChildBoxes',value:function getChildBoxes(type){var boxes=[];for(var i=0;i < this.boxes.length;i++) {if(this.boxes[i].type === type){boxes.push(this.boxes[i]);}}return boxes;}}]);return IsoBox;})();exports['default'] = IsoBox;module.exports = exports['default'];
	//# sourceMappingURL=IsoBox.js.map


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	/*! codem-isoboxer v0.3.6 https://github.com/madebyhiro/codem-isoboxer/blob/master/LICENSE.txt */
	var ISOBoxer = {};

	ISOBoxer.parseBuffer = function(arrayBuffer) {
	  return new ISOFile(arrayBuffer).parse();
	};

	ISOBoxer.addBoxProcessor = function(type, parser) {
	  if (typeof type !== 'string' || typeof parser !== 'function') {
	    return;
	  }
	  ISOBox.prototype._boxProcessors[type] = parser;
	};

	ISOBoxer.createFile = function() {
	  return new ISOFile();
	};

	// See ISOBoxer.append() for 'pos' parameter syntax
	ISOBoxer.createBox = function(type, parent, pos) {
	  var newBox = ISOBox.create(type);
	  if (parent) {
	    parent.append(newBox, pos);
	  }
	  return newBox;
	};

	// See ISOBoxer.append() for 'pos' parameter syntax
	ISOBoxer.createFullBox = function(type, parent, pos) {
	  var newBox = ISOBoxer.createBox(type, parent, pos);
	  newBox.version = 0;
	  newBox.flags = 0;
	  return newBox;
	};

	ISOBoxer.Utils = {};
	ISOBoxer.Utils.dataViewToString = function(dataView, encoding) {
	  var impliedEncoding = encoding || 'utf-8';
	  if (typeof TextDecoder !== 'undefined') {
	    return new TextDecoder(impliedEncoding).decode(dataView);
	  }
	  var a = [];
	  var i = 0;

	  if (impliedEncoding === 'utf-8') {
	    /* The following algorithm is essentially a rewrite of the UTF8.decode at
	    http://bannister.us/weblog/2007/simple-base64-encodedecode-javascript/
	    */

	    while (i < dataView.byteLength) {
	      var c = dataView.getUint8(i++);
	      if (c < 0x80) {
	        // 1-byte character (7 bits)
	      } else if (c < 0xe0) {
	        // 2-byte character (11 bits)
	        c = (c & 0x1f) << 6;
	        c |= (dataView.getUint8(i++) & 0x3f);
	      } else if (c < 0xf0) {
	        // 3-byte character (16 bits)
	        c = (c & 0xf) << 12;
	        c |= (dataView.getUint8(i++) & 0x3f) << 6;
	        c |= (dataView.getUint8(i++) & 0x3f);
	      } else {
	        // 4-byte character (21 bits)
	        c = (c & 0x7) << 18;
	        c |= (dataView.getUint8(i++) & 0x3f) << 12;
	        c |= (dataView.getUint8(i++) & 0x3f) << 6;
	        c |= (dataView.getUint8(i++) & 0x3f);
	      }
	      a.push(String.fromCharCode(c));
	    }
	  } else { // Just map byte-by-byte (probably wrong)
	    while (i < dataView.byteLength) {
	      a.push(String.fromCharCode(dataView.getUint8(i++)));
	    }
	  }
	  return a.join('');
	};

	ISOBoxer.Utils.utf8ToByteArray = function(string) {
	  // Only UTF-8 encoding is supported by TextEncoder
	  var u, i;
	  if (typeof TextEncoder !== 'undefined') {
	    u = new TextEncoder().encode(string);
	  } else {
	    u = [];
	    for (i = 0; i < string.length; ++i) {
	      var c = string.charCodeAt(i);
	      if (c < 0x80) {
	        u.push(c);
	      } else if (c < 0x800) {
	        u.push(0xC0 | (c >> 6));
	        u.push(0x80 | (63 & c));
	      } else if (c < 0x10000) {
	        u.push(0xE0 | (c >> 12));
	        u.push(0x80 | (63 & (c >> 6)));
	        u.push(0x80 | (63 & c));
	      } else {
	        u.push(0xF0 | (c >> 18));
	        u.push(0x80 | (63 & (c >> 12)));
	        u.push(0x80 | (63 & (c >> 6)));
	        u.push(0x80 | (63 & c));
	      }
	    }
	  }
	  return u;
	};

	// Method to append a box in the list of child boxes
	// The 'pos' parameter can be either:
	//   - (number) a position index at which to insert the new box
	//   - (string) the type of the box after which to insert the new box
	//   - (object) the box after which to insert the new box
	ISOBoxer.Utils.appendBox = function(parent, box, pos) {
	  box._offset = parent._cursor.offset;
	  box._root = (parent._root ? parent._root : parent);
	  box._raw = parent._raw;
	  box._parent = parent;

	  if (pos === -1) {
	    // The new box is a sub-box of the parent but not added in boxes array,
	    // for example when the new box is set as an entry (see dref and stsd for example)
	    return;
	  }

	  if (pos === undefined || pos === null) {
	    parent.boxes.push(box);
	    return;
	  }

	  var index = -1,
	      type;

	  if (typeof pos === "number") {
	    index = pos;
	  } else {
	    if (typeof pos === "string") {
	      type = pos;
	    } else if (typeof pos === "object" && pos.type) {
	      type = pos.type;
	    } else {
	      parent.boxes.push(box);
	      return;
	    }

	    for (var i = 0; i < parent.boxes.length; i++) {
	      if (type === parent.boxes[i].type) {
	        index = i + 1;
	        break;
	      }
	    }
	  }
	  parent.boxes.splice(index, 0, box);
	};

	if (true) {
	  exports.parseBuffer     = ISOBoxer.parseBuffer;
	  exports.addBoxProcessor = ISOBoxer.addBoxProcessor;
	  exports.createFile      = ISOBoxer.createFile;
	  exports.createBox       = ISOBoxer.createBox;
	  exports.createFullBox   = ISOBoxer.createFullBox;
	  exports.Utils           = ISOBoxer.Utils;
	}

	ISOBoxer.Cursor = function(initialOffset) {
	  this.offset = (typeof initialOffset == 'undefined' ? 0 : initialOffset);
	};

	var ISOFile = function(arrayBuffer) {
	  this._cursor = new ISOBoxer.Cursor();
	  this.boxes = [];
	  if (arrayBuffer) {
	    this._raw = new DataView(arrayBuffer);
	  }
	};

	ISOFile.prototype.fetch = function(type) {
	  var result = this.fetchAll(type, true);
	  return (result.length ? result[0] : null);
	};

	ISOFile.prototype.fetchAll = function(type, returnEarly) {
	  var result = [];
	  ISOFile._sweep.call(this, type, result, returnEarly);
	  return result;
	};

	ISOFile.prototype.parse = function() {
	  this._cursor.offset = 0;
	  this.boxes = [];
	  while (this._cursor.offset < this._raw.byteLength) {
	    var box = ISOBox.parse(this);

	    // Box could not be parsed
	    if (typeof box.type === 'undefined') break;

	    this.boxes.push(box);
	  }
	  return this;
	};

	ISOFile._sweep = function(type, result, returnEarly) {
	  if (this.type && this.type == type) result.push(this);
	  for (var box in this.boxes) {
	    if (result.length && returnEarly) return;
	    ISOFile._sweep.call(this.boxes[box], type, result, returnEarly);
	  }
	};

	ISOFile.prototype.write = function() {

	  var length = 0,
	      i;

	  for (i = 0; i < this.boxes.length; i++) {
	    length += this.boxes[i].getLength(false);
	  }

	  var bytes = new Uint8Array(length);
	  this._rawo = new DataView(bytes.buffer);
	  this.bytes = bytes;
	  this._cursor.offset = 0;

	  for (i = 0; i < this.boxes.length; i++) {
	    this.boxes[i].write();
	  }

	  return bytes.buffer;
	};

	ISOFile.prototype.append = function(box, pos) {
	  ISOBoxer.Utils.appendBox(this, box, pos);
	};
	var ISOBox = function() {
	  this._cursor = new ISOBoxer.Cursor();
	};

	ISOBox.parse = function(parent) {
	  var newBox = new ISOBox();
	  newBox._offset = parent._cursor.offset;
	  newBox._root = (parent._root ? parent._root : parent);
	  newBox._raw = parent._raw;
	  newBox._parent = parent;
	  newBox._parseBox();
	  parent._cursor.offset = newBox._raw.byteOffset + newBox._raw.byteLength;
	  return newBox;
	};

	ISOBox.create = function(type) {
	  var newBox = new ISOBox();
	  newBox.type = type;
	  newBox.boxes = [];
	  return newBox;
	};

	ISOBox.prototype._boxContainers = ['dinf', 'edts', 'mdia', 'meco', 'mfra', 'minf', 'moof', 'moov', 'mvex', 'stbl', 'strk', 'traf', 'trak', 'tref', 'udta', 'vttc', 'sinf', 'schi', 'encv', 'enca'];

	ISOBox.prototype._boxProcessors = {};

	///////////////////////////////////////////////////////////////////////////////////////////////////
	// Generic read/write functions

	ISOBox.prototype._procField = function (name, type, size) {
	  if (this._parsing) {
	    this[name] = this._readField(type, size);
	  }
	  else {
	    this._writeField(type, size, this[name]);
	  }
	};

	ISOBox.prototype._procFieldArray = function (name, length, type, size) {
	  var i;
	  if (this._parsing) {
	    this[name] = [];
	    for (i = 0; i < length; i++) {
	      this[name][i] = this._readField(type, size);
	    }
	  }
	  else {
	    for (i = 0; i < this[name].length; i++) {
	      this._writeField(type, size, this[name][i]);
	    }
	  }
	};

	ISOBox.prototype._procFullBox = function() {
	  this._procField('version', 'uint', 8);
	  this._procField('flags', 'uint', 24);
	};

	ISOBox.prototype._procEntries = function(name, length, fn) {
	  var i;
	  if (this._parsing) {
	    this[name] = [];
	    for (i = 0; i < length; i++) {
	      this[name].push({});
	      fn.call(this, this[name][i]);
	    }
	  }
	  else {
	    for (i = 0; i < length; i++) {
	      fn.call(this, this[name][i]);
	    }
	  }
	};

	ISOBox.prototype._procSubEntries = function(entry, name, length, fn) {
	  var i;
	  if (this._parsing) {
	    entry[name] = [];
	    for (i = 0; i < length; i++) {
	      entry[name].push({});
	      fn.call(this, entry[name][i]);
	    }
	  }
	  else {
	    for (i = 0; i < length; i++) {
	      fn.call(this, entry[name][i]);
	    }
	  }
	};

	ISOBox.prototype._procEntryField = function (entry, name, type, size) {
	  if (this._parsing) {
	    entry[name] = this._readField(type, size);
	  }
	  else {
	    this._writeField(type, size, entry[name]);
	  }
	};

	ISOBox.prototype._procSubBoxes = function(name, length) {
	  var i;
	  if (this._parsing) {
	    this[name] = [];
	    for (i = 0; i < length; i++) {
	      this[name].push(ISOBox.parse(this));
	    }
	  }
	  else {
	    for (i = 0; i < length; i++) {
	      if (this._rawo) {
	        this[name][i].write();
	      } else {
	        this.size += this[name][i].getLength();
	      }
	    }
	  }
	};

	///////////////////////////////////////////////////////////////////////////////////////////////////
	// Read/parse functions

	ISOBox.prototype._readField = function(type, size) {
	  switch (type) {
	    case 'uint':
	      return this._readUint(size);
	    case 'int':
	      return this._readInt(size);
	    case 'template':
	      return this._readTemplate(size);
	    case 'string':
	      return (size === -1) ? this._readTerminatedString() : this._readString(size);
	    case 'data':
	      return this._readData(size);
	    case 'utf8':
	      return this._readUTF8String();
	    default:
	      return -1;
	  }
	};

	ISOBox.prototype._readInt = function(size) {
	  var result = null,
	      offset = this._cursor.offset - this._raw.byteOffset;
	  switch(size) {
	  case 8:
	    result = this._raw.getInt8(offset);
	    break;
	  case 16:
	    result = this._raw.getInt16(offset);
	    break;
	  case 32:
	    result = this._raw.getInt32(offset);
	    break;
	  case 64:
	    // Warning: JavaScript cannot handle 64-bit integers natively.
	    // This will give unexpected results for integers >= 2^53
	    var s1 = this._raw.getInt32(offset);
	    var s2 = this._raw.getInt32(offset + 4);
	    result = (s1 * Math.pow(2,32)) + s2;
	    break;
	  }
	  this._cursor.offset += (size >> 3);
	  return result;
	};

	ISOBox.prototype._readUint = function(size) {
	  var result = null,
	      offset = this._cursor.offset - this._raw.byteOffset,
	      s1, s2;
	  switch(size) {
	  case 8:
	    result = this._raw.getUint8(offset);
	    break;
	  case 16:
	    result = this._raw.getUint16(offset);
	    break;
	  case 24:
	    s1 = this._raw.getUint16(offset);
	    s2 = this._raw.getUint8(offset + 2);
	    result = (s1 << 8) + s2;
	    break;
	  case 32:
	    result = this._raw.getUint32(offset);
	    break;
	  case 64:
	    // Warning: JavaScript cannot handle 64-bit integers natively.
	    // This will give unexpected results for integers >= 2^53
	    s1 = this._raw.getUint32(offset);
	    s2 = this._raw.getUint32(offset + 4);
	    result = (s1 * Math.pow(2,32)) + s2;
	    break;
	  }
	  this._cursor.offset += (size >> 3);
	  return result;
	};

	ISOBox.prototype._readString = function(length) {
	  var str = '';
	  for (var c = 0; c < length; c++) {
	    var char = this._readUint(8);
	    str += String.fromCharCode(char);
	  }
	  return str;
	};

	ISOBox.prototype._readTemplate = function(size) {
	  var pre = this._readUint(size / 2);
	  var post = this._readUint(size / 2);
	  return pre + (post / Math.pow(2, size / 2));
	};

	ISOBox.prototype._readTerminatedString = function() {
	  var str = '';
	  while (this._cursor.offset - this._offset < this._raw.byteLength) {
	    var char = this._readUint(8);
	    if (char === 0) break;
	    str += String.fromCharCode(char);
	  }
	  return str;
	};

	ISOBox.prototype._readData = function(size) {
	  var length = (size > 0) ? size : (this._raw.byteLength - (this._cursor.offset - this._offset));
	  if (length > 0) {
	    var data = new Uint8Array(this._raw.buffer, this._cursor.offset, length);

	    this._cursor.offset += length;
	    return data;
	  }
	  else {
	    return null;
	  }
	};

	ISOBox.prototype._readUTF8String = function() {
	  var length = this._raw.byteLength - (this._cursor.offset - this._offset);
	  var data = null;
	  if (length > 0) {
	    data = new DataView(this._raw.buffer, this._cursor.offset, length);
	    this._cursor.offset += length;
	  }
	 
	  return data ? ISOBoxer.Utils.dataViewToString(data) : data;
	};

	ISOBox.prototype._parseBox = function() {
	  this._parsing = true;
	  this._cursor.offset = this._offset;

	  // return immediately if there are not enough bytes to read the header
	  if (this._offset + 8 > this._raw.buffer.byteLength) {
	    this._root._incomplete = true;
	    return;
	  }

	  this._procField('size', 'uint', 32);
	  this._procField('type', 'string', 4);

	  if (this.size === 1)      { this._procField('largesize', 'uint', 64); }
	  if (this.type === 'uuid') { this._procFieldArray('usertype', 16, 'uint', 8); }

	  switch(this.size) {
	  case 0:
	    this._raw = new DataView(this._raw.buffer, this._offset, (this._raw.byteLength - this._cursor.offset + 8));
	    break;
	  case 1:
	    if (this._offset + this.size > this._raw.buffer.byteLength) {
	      this._incomplete = true;
	      this._root._incomplete = true;
	    } else {
	      this._raw = new DataView(this._raw.buffer, this._offset, this.largesize);
	    }
	    break;
	  default:
	    if (this._offset + this.size > this._raw.buffer.byteLength) {
	      this._incomplete = true;
	      this._root._incomplete = true;
	    } else {
	      this._raw = new DataView(this._raw.buffer, this._offset, this.size);
	    }
	  }

	  // additional parsing
	  if (!this._incomplete) {
	    if (this._boxProcessors[this.type]) {
	      this._boxProcessors[this.type].call(this);
	    }
	    if (this._boxContainers.indexOf(this.type) !== -1) {
	      this._parseContainerBox();
	    } else{
	      // Unknown box => read and store box content
	      this._data = this._readData();
	    }
	  }
	};

	ISOBox.prototype._parseFullBox = function() {
	  this.version = this._readUint(8);
	  this.flags = this._readUint(24);
	};

	ISOBox.prototype._parseContainerBox = function() {
	  this.boxes = [];
	  while (this._cursor.offset - this._raw.byteOffset < this._raw.byteLength) {
	    this.boxes.push(ISOBox.parse(this));
	  }
	};

	///////////////////////////////////////////////////////////////////////////////////////////////////
	// Write functions

	ISOBox.prototype.append = function(box, pos) {
	  ISOBoxer.Utils.appendBox(this, box, pos);
	};

	ISOBox.prototype.getLength = function() {
	  this._parsing = false;
	  this._rawo = null;

	  this.size = 0;
	  this._procField('size', 'uint', 32);
	  this._procField('type', 'string', 4);

	  if (this.size === 1)      { this._procField('largesize', 'uint', 64); }
	  if (this.type === 'uuid') { this._procFieldArray('usertype', 16, 'uint', 8); }

	  if (this._boxProcessors[this.type]) {
	    this._boxProcessors[this.type].call(this);
	  }

	  if (this._boxContainers.indexOf(this.type) !== -1) {
	    for (var i = 0; i < this.boxes.length; i++) {
	      this.size += this.boxes[i].getLength();
	    }
	  } 

	  if (this._data) {
	    this._writeData(this._data);
	  }

	  return this.size;
	};

	ISOBox.prototype.write = function() {
	  this._parsing = false;
	  this._cursor.offset = this._parent._cursor.offset;

	  switch(this.size) {
	  case 0:
	    this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, (this.parent._rawo.byteLength - this._cursor.offset));
	    break;
	  case 1:
	      this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, this.largesize);
	    break;
	  default:
	      this._rawo = new DataView(this._parent._rawo.buffer, this._cursor.offset, this.size);
	  }

	  this._procField('size', 'uint', 32);
	  this._procField('type', 'string', 4);

	  if (this.size === 1)      { this._procField('largesize', 'uint', 64); }
	  if (this.type === 'uuid') { this._procFieldArray('usertype', 16, 'uint', 8); }

	  if (this._boxProcessors[this.type]) {
	    this._boxProcessors[this.type].call(this);
	  }

	  if (this._boxContainers.indexOf(this.type) !== -1) {
	    for (var i = 0; i < this.boxes.length; i++) {
	      this.boxes[i].write();
	    }
	  } 

	  if (this._data) {
	    this._writeData(this._data);
	  }

	  this._parent._cursor.offset += this.size;

	  return this.size;
	};

	ISOBox.prototype._writeInt = function(size, value) {
	  if (this._rawo) {
	    var offset = this._cursor.offset - this._rawo.byteOffset;
	    switch(size) {
	    case 8:
	      this._rawo.setInt8(offset, value);
	      break;
	    case 16:
	      this._rawo.setInt16(offset, value);
	      break;
	    case 32:
	      this._rawo.setInt32(offset, value);
	      break;
	    case 64:
	      // Warning: JavaScript cannot handle 64-bit integers natively.
	      // This will give unexpected results for integers >= 2^53
	      var s1 = Math.floor(value / Math.pow(2,32));
	      var s2 = value - (s1 * Math.pow(2,32));
	      this._rawo.setUint32(offset, s1);
	      this._rawo.setUint32(offset + 4, s2);
	      break;
	    }
	    this._cursor.offset += (size >> 3);
	  } else {
	    this.size += (size >> 3);
	  }
	};

	ISOBox.prototype._writeUint = function(size, value) {

	  if (this._rawo) {
	    var offset = this._cursor.offset - this._rawo.byteOffset,
	        s1, s2;
	    switch(size) {
	    case 8:
	      this._rawo.setUint8(offset, value);
	      break;
	    case 16:
	      this._rawo.setUint16(offset, value);
	      break;
	    case 24:
	      s1 = (value & 0xFFFF00) >> 8;
	      s2 = (value & 0x0000FF);
	      this._rawo.setUint16(offset, s1);
	      this._rawo.setUint8(offset + 2, s2);
	      break;
	    case 32:
	      this._rawo.setUint32(offset, value);
	      break;
	    case 64:
	      // Warning: JavaScript cannot handle 64-bit integers natively.
	      // This will give unexpected results for integers >= 2^53
	      s1 = Math.floor(value / Math.pow(2,32));
	      s2 = value - (s1 * Math.pow(2,32));
	      this._rawo.setUint32(offset, s1);
	      this._rawo.setUint32(offset + 4, s2);
	      break;
	    }
	    this._cursor.offset += (size >> 3);
	  } else {
	    this.size += (size >> 3);
	  }
	};

	ISOBox.prototype._writeString = function(size, str) {
	  for (var c = 0; c < size; c++) {
	    this._writeUint(8, str.charCodeAt(c));
	  }
	};

	ISOBox.prototype._writeTerminatedString = function(str) {
	  if (str.length === 0) {
	    return;
	  }
	  for (var c = 0; c < str.length; c++) {
	    this._writeUint(8, str.charCodeAt(c));
	  }
	  this._writeUint(8, 0);
	};

	ISOBox.prototype._writeTemplate = function(size, value) {
	  var pre = Math.floor(value);
	  var post = (value - pre) * Math.pow(2, size / 2);
	  this._writeUint(size / 2, pre);
	  this._writeUint(size / 2, post);
	};

	ISOBox.prototype._writeData = function(data) {
	  var i;
	  //data to copy
	  if (data) {
	    if (this._rawo) {
	      //Array and Uint8Array has also to be managed
	      if (data instanceof Array) {
	        var offset = this._cursor.offset - this._rawo.byteOffset;
	        for (var i = 0; i < data.length; i++) {
	          this._rawo.setInt8(offset + i, data[i]);
	        }
	        this._cursor.offset += data.length;
	      } 

	      if (data instanceof Uint8Array) {
	        this._root.bytes.set(data, this._cursor.offset);
	        this._cursor.offset += data.length;
	      }

	    } else {
	      //nothing to copy only size to compute
	      this.size += data.length;
	    }
	  }
	};

	ISOBox.prototype._writeUTF8String = function(string) {
	  var u = ISOBoxer.Utils.utf8ToByteArray(string);
	  if (this._rawo) {
	    var dataView = new DataView(this._rawo.buffer, this._cursor.offset, u.length);
	    for (var i = 0; i < u.length; i++) {
	      dataView.setUint8(i, u[i]);
	    }
	  } else {
	    this.size += u.length;
	  }
	};

	ISOBox.prototype._writeField = function(type, size, value) {
	  switch (type) {
	  case 'uint':
	    this._writeUint(size, value);
	    break;
	  case 'int':
	    this._writeInt(size, value);
	    break;
	  case 'template':
	    this._writeTemplate(size, value);
	    break;
	  case 'string':
	      if (size == -1) {
	        this._writeTerminatedString(value);
	      } else {
	        this._writeString(size, value);
	      }
	      break;
	  case 'data':
	    this._writeData(value);
	    break;
	  case 'utf8':
	    this._writeUTF8String(value);
	    break;
	  default:
	    break;
	  }
	};

	// ISO/IEC 14496-15:2014 - avc1 box
	ISOBox.prototype._boxProcessors['avc1'] = ISOBox.prototype._boxProcessors['encv'] = function() {
	  // SampleEntry fields
	  this._procFieldArray('reserved1', 6,    'uint', 8);
	  this._procField('data_reference_index', 'uint', 16);
	  // VisualSampleEntry fields
	  this._procField('pre_defined1',         'uint',     16);
	  this._procField('reserved2',            'uint',     16);
	  this._procFieldArray('pre_defined2', 3, 'uint',     32);
	  this._procField('width',                'uint',     16);
	  this._procField('height',               'uint',     16);
	  this._procField('horizresolution',      'template', 32);
	  this._procField('vertresolution',       'template', 32);
	  this._procField('reserved3',            'uint',     32);
	  this._procField('frame_count',          'uint',     16);
	  this._procFieldArray('compressorname', 32,'uint',    8);
	  this._procField('depth',                'uint',     16);
	  this._procField('pre_defined3',         'int',      16);
	  // AVCSampleEntry fields
	  this._procField('config', 'data', -1);
	};

	// ISO/IEC 14496-12:2012 - 8.7.2 Data Reference Box
	ISOBox.prototype._boxProcessors['dref'] = function() {
	  this._procFullBox();
	  this._procField('entry_count', 'uint', 32);
	  this._procSubBoxes('entries', this.entry_count);
	};

	// ISO/IEC 14496-12:2012 - 8.6.6 Edit List Box
	ISOBox.prototype._boxProcessors['elst'] = function() {
	  this._procFullBox();
	  this._procField('entry_count', 'uint', 32);
	  this._procEntries('entries', this.entry_count, function(entry) {
	    this._procEntryField(entry, 'segment_duration',     'uint', (this.version === 1) ? 64 : 32);
	    this._procEntryField(entry, 'media_time',           'int',  (this.version === 1) ? 64 : 32);
	    this._procEntryField(entry, 'media_rate_integer',   'int',  16);
	    this._procEntryField(entry, 'media_rate_fraction',  'int',  16);
	  });
	};

	// ISO/IEC 23009-1:2014 - 5.10.3.3 Event Message Box
	ISOBox.prototype._boxProcessors['emsg'] = function() {
	  this._procFullBox();
	  if (this.version == 1) {
	    this._procField('timescale',                'uint',   32);
	    this._procField('presentation_time',        'uint',   64);
	    this._procField('event_duration',           'uint',   32);
	    this._procField('id',                       'uint',   32);
	    this._procField('scheme_id_uri',            'string', -1);
	    this._procField('value',                    'string', -1);
	  } else {
	    this._procField('scheme_id_uri',            'string', -1);
	    this._procField('value',                    'string', -1);
	    this._procField('timescale',                'uint',   32);
	    this._procField('presentation_time_delta',  'uint',   32);
	    this._procField('event_duration',           'uint',   32);
	    this._procField('id',                       'uint',   32);
	  }
	  this._procField('message_data',             'data',   -1);
	};
	// ISO/IEC 14496-12:2012 - 8.1.2 Free Space Box
	ISOBox.prototype._boxProcessors['free'] = ISOBox.prototype._boxProcessors['skip'] = function() {
	  this._procField('data', 'data', -1);
	};

	// ISO/IEC 14496-12:2012 - 8.12.2 Original Format Box
	ISOBox.prototype._boxProcessors['frma'] = function() {
	  this._procField('data_format', 'uint', 32);
	};
	// ISO/IEC 14496-12:2012 - 4.3 File Type Box / 8.16.2 Segment Type Box
	ISOBox.prototype._boxProcessors['ftyp'] =
	ISOBox.prototype._boxProcessors['styp'] = function() {
	  this._procField('major_brand', 'string', 4);
	  this._procField('minor_version', 'uint', 32);
	  var nbCompatibleBrands = -1;
	  if (this._parsing) {
	    nbCompatibleBrands = (this._raw.byteLength - (this._cursor.offset - this._raw.byteOffset)) / 4;
	  }
	  this._procFieldArray('compatible_brands', nbCompatibleBrands, 'string', 4);
	};

	// ISO/IEC 14496-12:2012 - 8.4.3 Handler Reference Box
	ISOBox.prototype._boxProcessors['hdlr'] = function() {
	  this._procFullBox();
	  this._procField('pre_defined',      'uint',   32);
	  this._procField('handler_type',     'string', 4);
	  this._procFieldArray('reserved', 3, 'uint', 32);
	  this._procField('name',             'string', -1);
	};

	// ISO/IEC 14496-12:2012 - 8.1.1 Media Data Box
	ISOBox.prototype._boxProcessors['mdat'] = function() {
	  this._procField('data', 'data', -1);
	};

	// ISO/IEC 14496-12:2012 - 8.4.2 Media Header Box
	ISOBox.prototype._boxProcessors['mdhd'] = function() {
	  this._procFullBox();
	  this._procField('creation_time',      'uint', (this.version == 1) ? 64 : 32);
	  this._procField('modification_time',  'uint', (this.version == 1) ? 64 : 32);
	  this._procField('timescale',          'uint', 32);
	  this._procField('duration',           'uint', (this.version == 1) ? 64 : 32);
	  if (!this._parsing && typeof this.language === 'string') {
	    // In case of writing and language has been set as a string, then convert it into char codes array
	    this.language = ((this.language.charCodeAt(0) - 0x60) << 10) |
	                    ((this.language.charCodeAt(1) - 0x60) << 5) |
	                    ((this.language.charCodeAt(2) - 0x60));
	  }
	  this._procField('language',           'uint', 16);
	  if (this._parsing) {
	    this.language = String.fromCharCode(((this.language >> 10) & 0x1F) + 0x60,
	                                        ((this.language >> 5) & 0x1F) + 0x60,
	                                        (this.language & 0x1F) + 0x60);
	  }
	  this._procField('pre_defined',        'uint', 16);
	};

	// ISO/IEC 14496-12:2012 - 8.8.2 Movie Extends Header Box
	ISOBox.prototype._boxProcessors['mehd'] = function() {
	  this._procFullBox();
	  this._procField('fragment_duration', 'uint', (this.version == 1) ? 64 : 32);
	};

	// ISO/IEC 14496-12:2012 - 8.8.5 Movie Fragment Header Box
	ISOBox.prototype._boxProcessors['mfhd'] = function() {
	  this._procFullBox();
	  this._procField('sequence_number', 'uint', 32);
	};

	// ISO/IEC 14496-12:2012 - 8.8.11 Movie Fragment Random Access Box
	ISOBox.prototype._boxProcessors['mfro'] = function() {
	  this._procFullBox();
	  this._procField('mfra_size', 'uint', 32); // Called mfra_size to distinguish from the normal "size" attribute of a box
	};


	// ISO/IEC 14496-12:2012 - 8.5.2.2 mp4a box (use AudioSampleEntry definition and naming)
	ISOBox.prototype._boxProcessors['mp4a'] = ISOBox.prototype._boxProcessors['enca'] = function() {
	  // SampleEntry fields
	  this._procFieldArray('reserved1', 6,    'uint', 8);
	  this._procField('data_reference_index', 'uint', 16);
	  // AudioSampleEntry fields
	  this._procFieldArray('reserved2', 2,    'uint', 32);
	  this._procField('channelcount',         'uint', 16);
	  this._procField('samplesize',           'uint', 16);
	  this._procField('pre_defined',          'uint', 16);
	  this._procField('reserved3',            'uint', 16);
	  this._procField('samplerate',           'template', 32);
	  // ESDescriptor fields
	  this._procField('esds',                 'data', -1);
	};

	// ISO/IEC 14496-12:2012 - 8.2.2 Movie Header Box
	ISOBox.prototype._boxProcessors['mvhd'] = function() {
	  this._procFullBox();
	  this._procField('creation_time',      'uint',     (this.version == 1) ? 64 : 32);
	  this._procField('modification_time',  'uint',     (this.version == 1) ? 64 : 32);
	  this._procField('timescale',          'uint',     32);
	  this._procField('duration',           'uint',     (this.version == 1) ? 64 : 32);
	  this._procField('rate',               'template', 32);
	  this._procField('volume',             'template', 16);
	  this._procField('reserved1',          'uint',  16);
	  this._procFieldArray('reserved2', 2,  'uint',     32);
	  this._procFieldArray('matrix', 9,     'template', 32);
	  this._procFieldArray('pre_defined', 6,'uint',   32);
	  this._procField('next_track_ID',      'uint',     32);
	};

	// ISO/IEC 14496-30:2014 - WebVTT Cue Payload Box.
	ISOBox.prototype._boxProcessors['payl'] = function() {
	  this._procField('cue_text', 'utf8');
	};

	//ISO/IEC 23001-7:2011 - 8.1 Protection System Specific Header Box
	ISOBox.prototype._boxProcessors['pssh'] = function() {
	  this._procFullBox();
	  
	  this._procFieldArray('SystemID', 16, 'uint', 8);
	  this._procField('DataSize', 'uint', 32);
	  this._procFieldArray('Data', this.DataSize, 'uint', 8);
	};
	// ISO/IEC 14496-12:2012 - 8.12.5 Scheme Type Box
	ISOBox.prototype._boxProcessors['schm'] = function() {
	    this._procFullBox();
	    
	    this._procField('scheme_type', 'uint', 32);
	    this._procField('scheme_version', 'uint', 32);

	    if (this.flags & 0x000001) {
	        this._procField('scheme_uri', 'string', -1);
	    }
	};
	// ISO/IEC 14496-12:2012 - 8.6.4.1 sdtp box 
	ISOBox.prototype._boxProcessors['sdtp'] = function() {
	  this._procFullBox();

	  var sample_count = -1;
	  if (this._parsing) {
	    sample_count = (this._raw.byteLength - (this._cursor.offset - this._raw.byteOffset));
	  }

	  this._procFieldArray('sample_dependency_table', sample_count, 'uint', 8);
	};

	// ISO/IEC 14496-12:2012 - 8.16.3 Segment Index Box
	ISOBox.prototype._boxProcessors['sidx'] = function() {
	  this._procFullBox();
	  this._procField('reference_ID', 'uint', 32);
	  this._procField('timescale', 'uint', 32);
	  this._procField('earliest_presentation_time', 'uint', (this.version == 1) ? 64 : 32);
	  this._procField('first_offset', 'uint', (this.version == 1) ? 64 : 32);
	  this._procField('reserved', 'uint', 16);
	  this._procField('reference_count', 'uint', 16);
	  this._procEntries('references', this.reference_count, function(entry) {
	    if (!this._parsing) {
	      entry.reference  = (entry.reference_type  & 0x00000001) << 31;
	      entry.reference |= (entry.referenced_size & 0x7FFFFFFF);
	      entry.sap  = (entry.starts_with_SAP & 0x00000001) << 31;
	      entry.sap |= (entry.SAP_type        & 0x00000003) << 28;
	      entry.sap |= (entry.SAP_delta_time  & 0x0FFFFFFF);
	    }
	    this._procEntryField(entry, 'reference', 'uint', 32);
	    this._procEntryField(entry, 'subsegment_duration', 'uint', 32);
	    this._procEntryField(entry, 'sap', 'uint', 32);
	    if (this._parsing) {
	      entry.reference_type = (entry.reference >> 31) & 0x00000001;
	      entry.referenced_size = entry.reference & 0x7FFFFFFF;
	      entry.starts_with_SAP  = (entry.sap >> 31) & 0x00000001;
	      entry.SAP_type = (entry.sap >> 28) & 0x00000007;
	      entry.SAP_delta_time = (entry.sap  & 0x0FFFFFFF);
	    }
	  });
	};

	// ISO/IEC 14496-12:2012 - 8.4.5.3 Sound Media Header Box
	ISOBox.prototype._boxProcessors['smhd'] = function() {
	  this._procFullBox();
	  this._procField('balance',  'uint', 16);
	  this._procField('reserved', 'uint', 16);
	};

	// ISO/IEC 14496-12:2012 - 8.16.4 Subsegment Index Box
	ISOBox.prototype._boxProcessors['ssix'] = function() {
	  this._procFullBox();
	  this._procField('subsegment_count', 'uint', 32);
	  this._procEntries('subsegments', this.subsegment_count, function(subsegment) {
	    this._procEntryField(subsegment, 'ranges_count', 'uint', 32);
	    this._procSubEntries(subsegment, 'ranges', subsegment.ranges_count, function(range) {
	      this._procEntryField(range, 'level', 'uint', 8);
	      this._procEntryField(range, 'range_size', 'uint', 24);
	    });
	  });
	};

	// ISO/IEC 14496-12:2012 - 8.5.2 Sample Description Box
	ISOBox.prototype._boxProcessors['stsd'] = function() {
	  this._procFullBox();
	  this._procField('entry_count', 'uint', 32);
	  this._procSubBoxes('entries', this.entry_count);
	};

	// ISO/IEC 14496-12:2015 - 8.7.7 Sub-Sample Information Box
	ISOBox.prototype._boxProcessors['subs'] = function () {
	  this._procFullBox();
	  this._procField('entry_count', 'uint', 32);
	  this._procEntries('entries', this.entry_count, function(entry) {
	    this._procEntryField(entry, 'sample_delta', 'uint', 32);
	    this._procEntryField(entry, 'subsample_count', 'uint', 16);
	    this._procSubEntries(entry, 'subsamples', entry.subsample_count, function(subsample) {
	      this._procEntryField(subsample, 'subsample_size', 'uint', (this.version === 1) ? 32 : 16);
	      this._procEntryField(subsample, 'subsample_priority', 'uint', 8);
	      this._procEntryField(subsample, 'discardable', 'uint', 8);
	      this._procEntryField(subsample, 'codec_specific_parameters', 'uint', 32);
	    });
	  });
	};

	//ISO/IEC 23001-7:2011 - 8.2 Track Encryption Box
	ISOBox.prototype._boxProcessors['tenc'] = function() {
	    this._procFullBox();

	    this._procField('default_IsEncrypted', 'uint', 24);
	    this._procField('default_IV_size', 'uint', 8);
	    this._procFieldArray('default_KID', 16,    'uint', 8);
	 };

	// ISO/IEC 14496-12:2012 - 8.8.12 Track Fragmnent Decode Time
	ISOBox.prototype._boxProcessors['tfdt'] = function() {
	  this._procFullBox();
	  this._procField('baseMediaDecodeTime', 'uint', (this.version == 1) ? 64 : 32);
	};

	// ISO/IEC 14496-12:2012 - 8.8.7 Track Fragment Header Box
	ISOBox.prototype._boxProcessors['tfhd'] = function() {
	  this._procFullBox();
	  this._procField('track_ID', 'uint', 32);
	  if (this.flags & 0x01) this._procField('base_data_offset',          'uint', 64);
	  if (this.flags & 0x02) this._procField('sample_description_offset', 'uint', 32);
	  if (this.flags & 0x08) this._procField('default_sample_duration',   'uint', 32);
	  if (this.flags & 0x10) this._procField('default_sample_size',       'uint', 32);
	  if (this.flags & 0x20) this._procField('default_sample_flags',      'uint', 32);
	};

	// ISO/IEC 14496-12:2012 - 8.8.10 Track Fragment Random Access Box
	ISOBox.prototype._boxProcessors['tfra'] = function() {
	  this._procFullBox();
	  this._procField('track_ID', 'uint', 32);
	  if (!this._parsing) {
	    this.reserved = 0;
	    this.reserved |= (this.length_size_of_traf_num  & 0x00000030) << 4;
	    this.reserved |= (this.length_size_of_trun_num  & 0x0000000C) << 2;
	    this.reserved |= (this.length_size_of_sample_num  & 0x00000003);
	  }
	  this._procField('reserved', 'uint', 32);
	  if (this._parsing) {
	    this.length_size_of_traf_num = (this.reserved & 0x00000030) >> 4;
	    this.length_size_of_trun_num = (this.reserved & 0x0000000C) >> 2;
	    this.length_size_of_sample_num = (this.reserved & 0x00000003);
	  }
	  this._procField('number_of_entry', 'uint', 32);
	  this._procEntries('entries', this.number_of_entry, function(entry) {
	    this._procEntryField(entry, 'time', 'uint', (this.version === 1) ? 64 : 32);
	    this._procEntryField(entry, 'moof_offset', 'uint', (this.version === 1) ? 64 : 32);
	    this._procEntryField(entry, 'traf_number', 'uint', (this.length_size_of_traf_num + 1) * 8);
	    this._procEntryField(entry, 'trun_number', 'uint', (this.length_size_of_trun_num + 1) * 8);
	    this._procEntryField(entry, 'sample_number', 'uint', (this.length_size_of_sample_num + 1) * 8);
	  });
	};

	// ISO/IEC 14496-12:2012 - 8.3.2 Track Header Box
	ISOBox.prototype._boxProcessors['tkhd'] = function() {
	  this._procFullBox();
	  this._procField('creation_time',      'uint',     (this.version == 1) ? 64 : 32);
	  this._procField('modification_time',  'uint',     (this.version == 1) ? 64 : 32);
	  this._procField('track_ID',           'uint',     32);
	  this._procField('reserved1',          'uint',     32);
	  this._procField('duration',           'uint',     (this.version == 1) ? 64 : 32);
	  this._procFieldArray('reserved2', 2,  'uint',     32);
	  this._procField('layer',              'uint',     16);
	  this._procField('alternate_group',    'uint',     16);
	  this._procField('volume',             'template', 16);
	  this._procField('reserved3',          'uint',     16);
	  this._procFieldArray('matrix', 9,     'template', 32);
	  this._procField('width',              'template', 32);
	  this._procField('height',             'template', 32);
	};

	// ISO/IEC 14496-12:2012 - 8.8.3 Track Extends Box
	ISOBox.prototype._boxProcessors['trex'] = function() {
	  this._procFullBox();
	  this._procField('track_ID',                         'uint', 32);
	  this._procField('default_sample_description_index', 'uint', 32);
	  this._procField('default_sample_duration',          'uint', 32);
	  this._procField('default_sample_size',              'uint', 32);
	  this._procField('default_sample_flags',             'uint', 32);
	};

	// ISO/IEC 14496-12:2012 - 8.8.8 Track Run Box
	// Note: the 'trun' box has a direct relation to the 'tfhd' box for defaults.
	// These defaults are not set explicitly here, but are left to resolve for the user.
	ISOBox.prototype._boxProcessors['trun'] = function() {
	  this._procFullBox();
	  this._procField('sample_count', 'uint', 32);
	  if (this.flags & 0x1) this._procField('data_offset', 'int', 32);
	  if (this.flags & 0x4) this._procField('first_sample_flags', 'uint', 32);
	  this._procEntries('samples', this.sample_count, function(sample) {
	    if (this.flags & 0x100) this._procEntryField(sample, 'sample_duration', 'uint', 32);
	    if (this.flags & 0x200) this._procEntryField(sample, 'sample_size', 'uint', 32);
	    if (this.flags & 0x400) this._procEntryField(sample, 'sample_flags', 'uint', 32);
	    if (this.flags & 0x800) this._procEntryField(sample, 'sample_composition_time_offset', (this.version === 1) ? 'int' : 'uint',  32);
	  });
	};

	// ISO/IEC 14496-12:2012 - 8.7.2 Data Reference Box
	ISOBox.prototype._boxProcessors['url '] = ISOBox.prototype._boxProcessors['urn '] = function() {
	  this._procFullBox();
	  if (this.type === 'urn ') {
	    this._procField('name', 'string', -1);
	  }
	  this._procField('location', 'string', -1);
	};

	// ISO/IEC 14496-30:2014 - WebVTT Source Label Box
	ISOBox.prototype._boxProcessors['vlab'] = function() {
	  this._procField('source_label', 'utf8');
	};

	// ISO/IEC 14496-12:2012 - 8.4.5.2 Video Media Header Box
	ISOBox.prototype._boxProcessors['vmhd'] = function() {
	  this._procFullBox();
	  this._procField('graphicsmode', 'uint', 16);
	  this._procFieldArray('opcolor', 3, 'uint', 16);
	};

	// ISO/IEC 14496-30:2014 - WebVTT Configuration Box
	ISOBox.prototype._boxProcessors['vttC'] = function() {
	  this._procField('config', 'utf8');
	};

	// ISO/IEC 14496-30:2014 - WebVTT Empty Sample Box
	ISOBox.prototype._boxProcessors['vtte'] = function() {
	  // Nothing should happen here.
	};


/***/ }),
/* 71 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var IsoBoxSearchInfo=function IsoBoxSearchInfo(lastCompletedOffset,found,size){_classCallCheck(this,IsoBoxSearchInfo);this.lastCompletedOffset = lastCompletedOffset;this.found = found;this.size = size;};exports["default"] = IsoBoxSearchInfo;module.exports = exports["default"];
	//# sourceMappingURL=IsoBoxSearchInfo.js.map


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	* The copyright in this software is being made available under the BSD License,
	* included below. This software may be subject to other third party and contributor
	* rights, including patent rights, and no such rights are granted under this license.
	*
	* Copyright (c) 2013, Dash Industry Forum.
	* All rights reserved.
	*
	* Redistribution and use in source and binary forms, with or without modification,
	* are permitted provided that the following conditions are met:
	*  * Redistributions of source code must retain the above copyright notice, this
	*  list of conditions and the following disclaimer.
	*  * Redistributions in binary form must reproduce the above copyright notice,
	*  this list of conditions and the following disclaimer in the documentation and/or
	*  other materials provided with the distribution.
	*  * Neither the name of Dash Industry Forum nor the names of its
	*  contributors may be used to endorse or promote products derived from this software
	*  without specific prior written permission.
	*
	*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	*  POSSIBILITY OF SUCH DAMAGE.
	*/'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _utilsSupervisorTools=__webpack_require__(73);function CustomTimeRanges() /*config*/{var customTimeRangeArray=[];var length=0;function add(start,end){var i=0;for(i = 0;i < this.customTimeRangeArray.length && start > this.customTimeRangeArray[i].start;i++);this.customTimeRangeArray.splice(i,0,{start:start,end:end});for(i = 0;i < this.customTimeRangeArray.length - 1;i++) {if(this.mergeRanges(i,i + 1)){i--;}}this.length = this.customTimeRangeArray.length;}function clear(){this.customTimeRangeArray = [];this.length = 0;}function remove(start,end){for(var i=0;i < this.customTimeRangeArray.length;i++) {if(start <= this.customTimeRangeArray[i].start && end >= this.customTimeRangeArray[i].end){ //      |--------------Range i-------|
	//|---------------Range to remove ---------------|
	//    or
	//|--------------Range i-------|
	//|--------------Range to remove ---------------|
	//    or
	//                 |--------------Range i-------|
	//|--------------Range to remove ---------------|
	this.customTimeRangeArray.splice(i,1);i--;}else if(start > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end){ //|-----------------Range i----------------|
	//        |-------Range to remove -----|
	this.customTimeRangeArray.splice(i + 1,0,{start:end,end:this.customTimeRangeArray[i].end});this.customTimeRangeArray[i].end = start;break;}else if(start > this.customTimeRangeArray[i].start && start < this.customTimeRangeArray[i].end){ //|-----------Range i----------|
	//                    |---------Range to remove --------|
	//    or
	//|-----------------Range i----------------|
	//            |-------Range to remove -----|
	this.customTimeRangeArray[i].end = start;}else if(end > this.customTimeRangeArray[i].start && end < this.customTimeRangeArray[i].end){ //                     |-----------Range i----------|
	//|---------Range to remove --------|
	//            or
	//|-----------------Range i----------------|
	//|-------Range to remove -----|
	this.customTimeRangeArray[i].start = end;}}this.length = this.customTimeRangeArray.length;}function mergeRanges(rangeIndex1,rangeIndex2){var range1=this.customTimeRangeArray[rangeIndex1];var range2=this.customTimeRangeArray[rangeIndex2];if(range1.start <= range2.start && range2.start <= range1.end && range1.end <= range2.end){ //|-----------Range1----------|
	//                    |-----------Range2----------|
	range1.end = range2.end;this.customTimeRangeArray.splice(rangeIndex2,1);return true;}else if(range2.start <= range1.start && range1.start <= range2.end && range2.end <= range1.end){ //                |-----------Range1----------|
	//|-----------Range2----------|
	range1.start = range2.start;this.customTimeRangeArray.splice(rangeIndex2,1);return true;}else if(range2.start <= range1.start && range1.start <= range2.end && range1.end <= range2.end){ //      |--------Range1-------|
	//|---------------Range2--------------|
	this.customTimeRangeArray.splice(rangeIndex1,1);return true;}else if(range1.start <= range2.start && range2.start <= range1.end && range2.end <= range1.end){ //|-----------------Range1--------------|
	//        |-----------Range2----------|
	this.customTimeRangeArray.splice(rangeIndex2,1);return true;}return false;}function start(index){(0,_utilsSupervisorTools.checkInteger)(index);if(index >= this.customTimeRangeArray.length || index < 0){return NaN;}return this.customTimeRangeArray[index].start;}function end(index){(0,_utilsSupervisorTools.checkInteger)(index);if(index >= this.customTimeRangeArray.length || index < 0){return NaN;}return this.customTimeRangeArray[index].end;}return {customTimeRangeArray:customTimeRangeArray,length:length,add:add,clear:clear,remove:remove,mergeRanges:mergeRanges,start:start,end:end};}CustomTimeRanges.__dashjs_factory_name = 'CustomTimeRanges';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(CustomTimeRanges);module.exports = exports['default'];
	//# sourceMappingURL=CustomTimeRanges.js.map


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.checkParameterType = checkParameterType;exports.checkInteger = checkInteger;exports.checkRange = checkRange;exports.checkIsVideoOrAudioType = checkIsVideoOrAudioType;function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);function checkParameterType(parameter,type){if(typeof parameter !== type){throw _constantsConstants2['default'].BAD_ARGUMENT_ERROR;}}function checkInteger(parameter){var isInt=parameter !== null && !isNaN(parameter) && parameter % 1 === 0;if(!isInt){throw _constantsConstants2['default'].BAD_ARGUMENT_ERROR + ' : argument is not an integer';}}function checkRange(parameter,min,max){if(parameter < min || parameter > max){throw _constantsConstants2['default'].BAD_ARGUMENT_ERROR + ' : argument out of range';}}function checkIsVideoOrAudioType(type){if(typeof type !== 'string' || type !== _constantsConstants2['default'].AUDIO && type !== _constantsConstants2['default'].VIDEO){throw _constantsConstants2['default'].BAD_ARGUMENT_ERROR;}}
	//# sourceMappingURL=SupervisorTools.js.map


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _imsc=__webpack_require__(75);function TextTracks(){var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var instance=undefined,logger=undefined,Cue=undefined,videoModel=undefined,textTrackQueue=undefined,trackElementArr=undefined,currentTrackIdx=undefined,actualVideoLeft=undefined,actualVideoTop=undefined,actualVideoWidth=undefined,actualVideoHeight=undefined,captionContainer=undefined,videoSizeCheckInterval=undefined,fullscreenAttribute=undefined,displayCCOnTop=undefined,previousISDState=undefined,topZIndex=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);}function initialize(){if(typeof window === 'undefined' || typeof navigator === 'undefined'){return;}Cue = window.VTTCue || window.TextTrackCue;textTrackQueue = [];trackElementArr = [];currentTrackIdx = -1;actualVideoLeft = 0;actualVideoTop = 0;actualVideoWidth = 0;actualVideoHeight = 0;captionContainer = null;videoSizeCheckInterval = null;displayCCOnTop = false;topZIndex = 2147483647;previousISDState = null;if(document.fullscreenElement !== undefined){fullscreenAttribute = 'fullscreenElement'; // Standard and Edge
	}else if(document.webkitIsFullScreen !== undefined){fullscreenAttribute = 'webkitIsFullScreen'; // Chrome and Safari (and Edge)
	}else if(document.msFullscreenElement){ // IE11
	fullscreenAttribute = 'msFullscreenElement';}else if(document.mozFullScreen){ // Firefox
	fullscreenAttribute = 'mozFullScreen';}}function createTrackForUserAgent(i){var kind=textTrackQueue[i].kind;var label=textTrackQueue[i].label !== undefined?textTrackQueue[i].label:textTrackQueue[i].lang;var lang=textTrackQueue[i].lang;var isTTML=textTrackQueue[i].isTTML;var isEmbedded=textTrackQueue[i].isEmbedded;var track=videoModel.addTextTrack(kind,label,lang);track.isEmbedded = isEmbedded;track.isTTML = isTTML;return track;}function displayCConTop(value){displayCCOnTop = value;if(!captionContainer || document[fullscreenAttribute]){return;}captionContainer.style.zIndex = value?topZIndex:null;}function addTextTrack(textTrackInfoVO,totalTextTracks){if(textTrackQueue.length === totalTextTracks){logger.error('Trying to add too many tracks.');return;}textTrackQueue.push(textTrackInfoVO);if(textTrackQueue.length === totalTextTracks){textTrackQueue.sort(function(a,b){ //Sort in same order as in manifest
	return a.index - b.index;});captionContainer = videoModel.getTTMLRenderingDiv();var defaultIndex=-1;for(var i=0;i < textTrackQueue.length;i++) {var track=createTrackForUserAgent.call(this,i);trackElementArr.push(track); //used to remove tracks from video element when added manually
	if(textTrackQueue[i].defaultTrack){ // track.default is an object property identifier that is a reserved word
	// The following jshint directive is used to suppressed the warning "Expected an identifier and instead saw 'default' (a reserved word)"
	/*jshint -W024 */track['default'] = true;defaultIndex = i;}var textTrack=getTrackByIdx(i);if(textTrack){ //each time a track is created, its mode should be showing by default
	//sometime, it's not on Chrome
	textTrack.mode = _constantsConstants2['default'].TEXT_SHOWING;if(captionContainer && (textTrackQueue[i].isTTML || textTrackQueue[i].isEmbedded)){textTrack.renderingType = 'html';}else {textTrack.renderingType = 'default';}}this.addCaptions(i,0,textTrackQueue[i].captionData);eventBus.trigger(_coreEventsEvents2['default'].TEXT_TRACK_ADDED);} //set current track index in textTrackQueue array
	setCurrentTrackIdx.call(this,defaultIndex);if(defaultIndex >= 0){for(var idx=0;idx < textTrackQueue.length;idx++) {var videoTextTrack=getTrackByIdx(idx);if(videoTextTrack){videoTextTrack.mode = idx === defaultIndex?_constantsConstants2['default'].TEXT_SHOWING:_constantsConstants2['default'].TEXT_HIDDEN;}}}eventBus.trigger(_coreEventsEvents2['default'].TEXT_TRACKS_QUEUE_INITIALIZED,{index:currentTrackIdx,tracks:textTrackQueue}); //send default idx.
	}}function getVideoVisibleVideoSize(viewWidth,viewHeight,videoWidth,videoHeight,aspectRatio,use80Percent){var viewAspectRatio=viewWidth / viewHeight;var videoAspectRatio=videoWidth / videoHeight;var videoPictureWidth=0;var videoPictureHeight=0;if(viewAspectRatio > videoAspectRatio){videoPictureHeight = viewHeight;videoPictureWidth = videoPictureHeight / videoHeight * videoWidth;}else {videoPictureWidth = viewWidth;videoPictureHeight = videoPictureWidth / videoWidth * videoHeight;}var videoPictureXAspect=0;var videoPictureYAspect=0;var videoPictureWidthAspect=0;var videoPictureHeightAspect=0;var videoPictureAspect=videoPictureWidth / videoPictureHeight;if(videoPictureAspect > aspectRatio){videoPictureHeightAspect = videoPictureHeight;videoPictureWidthAspect = videoPictureHeight * aspectRatio;}else {videoPictureWidthAspect = videoPictureWidth;videoPictureHeightAspect = videoPictureWidth / aspectRatio;}videoPictureXAspect = (viewWidth - videoPictureWidthAspect) / 2;videoPictureYAspect = (viewHeight - videoPictureHeightAspect) / 2;if(use80Percent){return {x:videoPictureXAspect + videoPictureWidthAspect * 0.1,y:videoPictureYAspect + videoPictureHeightAspect * 0.1,w:videoPictureWidthAspect * 0.8,h:videoPictureHeightAspect * 0.8}; /* Maximal picture size in videos aspect ratio */}else {return {x:videoPictureXAspect,y:videoPictureYAspect,w:videoPictureWidthAspect,h:videoPictureHeightAspect}; /* Maximal picture size in videos aspect ratio */}}function checkVideoSize(track,forceDrawing){var clientWidth=videoModel.getClientWidth();var clientHeight=videoModel.getClientHeight();var videoWidth=videoModel.getVideoWidth();var videoHeight=videoModel.getVideoHeight();var videoOffsetTop=videoModel.getVideoRelativeOffsetTop();var videoOffsetLeft=videoModel.getVideoRelativeOffsetLeft();var aspectRatio=videoWidth / videoHeight;var use80Percent=false;if(track.isFromCEA608){ // If this is CEA608 then use predefined aspect ratio
	aspectRatio = 3.5 / 3.0;use80Percent = true;}var realVideoSize=getVideoVisibleVideoSize.call(this,clientWidth,clientHeight,videoWidth,videoHeight,aspectRatio,use80Percent);var newVideoWidth=realVideoSize.w;var newVideoHeight=realVideoSize.h;var newVideoLeft=realVideoSize.x;var newVideoTop=realVideoSize.y;if(newVideoWidth != actualVideoWidth || newVideoHeight != actualVideoHeight || newVideoLeft != actualVideoLeft || newVideoTop != actualVideoTop || forceDrawing){actualVideoLeft = newVideoLeft + videoOffsetLeft;actualVideoTop = newVideoTop + videoOffsetTop;actualVideoWidth = newVideoWidth;actualVideoHeight = newVideoHeight;if(captionContainer){var containerStyle=captionContainer.style;containerStyle.left = actualVideoLeft + 'px';containerStyle.top = actualVideoTop + 'px';containerStyle.width = actualVideoWidth + 'px';containerStyle.height = actualVideoHeight + 'px';containerStyle.zIndex = fullscreenAttribute && document[fullscreenAttribute] || displayCCOnTop?topZIndex:null;eventBus.trigger(_coreEventsEvents2['default'].CAPTION_CONTAINER_RESIZE,{});} // Video view has changed size, so resize any active cues
	var activeCues=track.activeCues;if(activeCues){var len=activeCues.length;for(var i=0;i < len;++i) {var cue=activeCues[i];cue.scaleCue(cue);}}}}function scaleCue(activeCue){var videoWidth=actualVideoWidth;var videoHeight=actualVideoHeight;var key=undefined,replaceValue=undefined,valueFontSize=undefined,valueLineHeight=undefined,elements=undefined;if(activeCue.cellResolution){var cellUnit=[videoWidth / activeCue.cellResolution[0],videoHeight / activeCue.cellResolution[1]];if(activeCue.linePadding){for(key in activeCue.linePadding) {if(activeCue.linePadding.hasOwnProperty(key)){var valueLinePadding=activeCue.linePadding[key];replaceValue = (valueLinePadding * cellUnit[0]).toString(); // Compute the CellResolution unit in order to process properties using sizing (fontSize, linePadding, etc).
	var elementsSpan=document.getElementsByClassName('spanPadding');for(var i=0;i < elementsSpan.length;i++) {elementsSpan[i].style.cssText = elementsSpan[i].style.cssText.replace(/(padding-left\s*:\s*)[\d.,]+(?=\s*px)/gi,'$1' + replaceValue);elementsSpan[i].style.cssText = elementsSpan[i].style.cssText.replace(/(padding-right\s*:\s*)[\d.,]+(?=\s*px)/gi,'$1' + replaceValue);}}}}if(activeCue.fontSize){for(key in activeCue.fontSize) {if(activeCue.fontSize.hasOwnProperty(key)){if(activeCue.fontSize[key][0] === '%'){valueFontSize = activeCue.fontSize[key][1] / 100;}else if(activeCue.fontSize[key][0] === 'c'){valueFontSize = activeCue.fontSize[key][1];}replaceValue = (valueFontSize * cellUnit[1]).toString();if(key !== 'defaultFontSize'){elements = document.getElementsByClassName(key);}else {elements = document.getElementsByClassName('paragraph');}for(var j=0;j < elements.length;j++) {elements[j].style.cssText = elements[j].style.cssText.replace(/(font-size\s*:\s*)[\d.,]+(?=\s*px)/gi,'$1' + replaceValue);}}}if(activeCue.lineHeight){for(key in activeCue.lineHeight) {if(activeCue.lineHeight.hasOwnProperty(key)){if(activeCue.lineHeight[key][0] === '%'){valueLineHeight = activeCue.lineHeight[key][1] / 100;}else if(activeCue.fontSize[key][0] === 'c'){valueLineHeight = activeCue.lineHeight[key][1];}replaceValue = (valueLineHeight * cellUnit[1]).toString();elements = document.getElementsByClassName(key);for(var k=0;k < elements.length;k++) {elements[k].style.cssText = elements[k].style.cssText.replace(/(line-height\s*:\s*)[\d.,]+(?=\s*px)/gi,'$1' + replaceValue);}}}}}}if(activeCue.isd){var htmlCaptionDiv=document.getElementById(activeCue.cueID);if(htmlCaptionDiv){captionContainer.removeChild(htmlCaptionDiv);}renderCaption(activeCue);}}function renderCaption(cue){if(captionContainer){var finalCue=document.createElement('div');captionContainer.appendChild(finalCue);previousISDState = (0,_imsc.renderHTML)(cue.isd,finalCue,function(uri){var imsc1ImgUrnTester=/^(urn:)(mpeg:[a-z0-9][a-z0-9-]{0,31}:)(subs:)([0-9]+)$/;var smpteImgUrnTester=/^#(.*)$/;if(imsc1ImgUrnTester.test(uri)){var match=imsc1ImgUrnTester.exec(uri);var imageId=parseInt(match[4],10) - 1;var imageData=btoa(cue.images[imageId]);var dataUrl='data:image/png;base64,' + imageData;return dataUrl;}else if(smpteImgUrnTester.test(uri)){var match=smpteImgUrnTester.exec(uri);var imageId=match[1];var dataUrl='data:image/png;base64,' + cue.embeddedImages[imageId];return dataUrl;}else {return null;}},captionContainer.clientHeight,captionContainer.clientWidth,false, /*displayForcedOnlyMode*/function(err){logger.info('renderCaption :',err); //TODO add ErrorHandler management
	},previousISDState,true /*enableRollUp*/);finalCue.id = cue.cueID;eventBus.trigger(_coreEventsEvents2['default'].CAPTION_RENDERED,{captionDiv:finalCue,currentTrackIdx:currentTrackIdx});}} /*
	     * Add captions to track, store for later adding, or add captions added before
	     */function addCaptions(trackIdx,timeOffset,captionData){var track=getTrackByIdx(trackIdx);var self=this;if(!track){return;}if(!captionData || captionData.length === 0){return;}for(var item=0;item < captionData.length;item++) {var cue=undefined;var currentItem=captionData[item];track.cellResolution = currentItem.cellResolution;track.isFromCEA608 = currentItem.isFromCEA608;if(currentItem.type === 'html' && captionContainer){cue = new Cue(currentItem.start - timeOffset,currentItem.end - timeOffset,'');cue.cueHTMLElement = currentItem.cueHTMLElement;cue.isd = currentItem.isd;cue.images = currentItem.images;cue.embeddedImages = currentItem.embeddedImages;cue.cueID = currentItem.cueID;cue.scaleCue = scaleCue.bind(self); //useful parameters for cea608 subtitles, not for TTML one.
	cue.cellResolution = currentItem.cellResolution;cue.lineHeight = currentItem.lineHeight;cue.linePadding = currentItem.linePadding;cue.fontSize = currentItem.fontSize;captionContainer.style.left = actualVideoLeft + 'px';captionContainer.style.top = actualVideoTop + 'px';captionContainer.style.width = actualVideoWidth + 'px';captionContainer.style.height = actualVideoHeight + 'px';cue.onenter = function(){if(track.mode === _constantsConstants2['default'].TEXT_SHOWING){if(this.isd){renderCaption(this);logger.debug('Cue enter id:' + this.cueID);}else {captionContainer.appendChild(this.cueHTMLElement);scaleCue.call(self,this);}}};cue.onexit = function(){if(captionContainer){var divs=captionContainer.childNodes;for(var i=0;i < divs.length;++i) {if(divs[i].id === this.cueID){logger.debug('Cue exit id:' + divs[i].id);captionContainer.removeChild(divs[i]);}}}};}else {if(currentItem.data){cue = new Cue(currentItem.start - timeOffset,currentItem.end - timeOffset,currentItem.data);if(currentItem.styles){if(currentItem.styles.align !== undefined && 'align' in cue){cue.align = currentItem.styles.align;}if(currentItem.styles.line !== undefined && 'line' in cue){cue.line = currentItem.styles.line;}if(currentItem.styles.position !== undefined && 'position' in cue){cue.position = currentItem.styles.position;}if(currentItem.styles.size !== undefined && 'size' in cue){cue.size = currentItem.styles.size;}}}}try{if(cue){track.addCue(cue);}else {logger.error('impossible to display subtitles.');}}catch(e) { // Edge crash, delete everything and start adding again
	// @see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/11979877/
	deleteTrackCues(track);track.addCue(cue);throw e;}}}function getTrackByIdx(idx){return idx >= 0 && textTrackQueue[idx]?videoModel.getTextTrack(textTrackQueue[idx].kind,textTrackQueue[idx].label,textTrackQueue[idx].lang,textTrackQueue[idx].isTTML,textTrackQueue[idx].isEmbedded):null;}function getCurrentTrackIdx(){return currentTrackIdx;}function getTrackIdxForId(trackId){var idx=-1;for(var i=0;i < textTrackQueue.length;i++) {if(textTrackQueue[i].label === trackId){idx = i;break;}}return idx;}function setCurrentTrackIdx(idx){if(idx === currentTrackIdx){return;}currentTrackIdx = idx;var track=getTrackByIdx(currentTrackIdx);setCueStyleOnTrack.call(this,track);if(videoSizeCheckInterval){clearInterval(videoSizeCheckInterval);videoSizeCheckInterval = null;}if(track && track.renderingType === 'html'){checkVideoSize.call(this,track,true);videoSizeCheckInterval = setInterval(checkVideoSize.bind(this,track),500);}}function setCueStyleOnTrack(track){clearCaptionContainer.call(this);if(track){if(track.renderingType === 'html'){setNativeCueStyle.call(this);}else {removeNativeCueStyle.call(this);}}else {removeNativeCueStyle.call(this);}}function deleteTrackCues(track){if(track.cues){var cues=track.cues;var lastIdx=cues.length - 1;for(var r=lastIdx;r >= 0;r--) {track.removeCue(cues[r]);}}}function deleteCuesFromTrackIdx(trackIdx){var track=getTrackByIdx(trackIdx);if(track){deleteTrackCues(track);}}function deleteAllTextTracks(){var ln=trackElementArr?trackElementArr.length:0;for(var i=0;i < ln;i++) {var track=getTrackByIdx(i);if(track){deleteTrackCues.call(this,track);track.mode = 'disabled';}}trackElementArr = [];textTrackQueue = [];if(videoSizeCheckInterval){clearInterval(videoSizeCheckInterval);videoSizeCheckInterval = null;}currentTrackIdx = -1;clearCaptionContainer.call(this);}function deleteTextTrack(idx){videoModel.removeChild(trackElementArr[idx]);trackElementArr.splice(idx,1);} /* Set native cue style to transparent background to avoid it being displayed. */function setNativeCueStyle(){var styleElement=document.getElementById('native-cue-style');if(styleElement){return; //Already set
	}styleElement = document.createElement('style');styleElement.id = 'native-cue-style';document.head.appendChild(styleElement);var stylesheet=styleElement.sheet;var video=videoModel.getElement();try{if(video){if(video.id){stylesheet.insertRule('#' + video.id + '::cue {background: transparent}',0);}else if(video.classList.length !== 0){stylesheet.insertRule('.' + video.className + '::cue {background: transparent}',0);}else {stylesheet.insertRule('video::cue {background: transparent}',0);}}}catch(e) {logger.info('' + e.message);}} /* Remove the extra cue style with transparent background for native cues. */function removeNativeCueStyle(){var styleElement=document.getElementById('native-cue-style');if(styleElement){document.head.removeChild(styleElement);}}function clearCaptionContainer(){if(captionContainer){while(captionContainer.firstChild) {captionContainer.removeChild(captionContainer.firstChild);}}}function setConfig(config){if(!config){return;}if(config.videoModel){videoModel = config.videoModel;}}function setModeForTrackIdx(idx,mode){var track=getTrackByIdx(idx);if(track && track.mode !== mode){track.mode = mode;}}function getCurrentTrackInfo(){return textTrackQueue[currentTrackIdx];}instance = {initialize:initialize,displayCConTop:displayCConTop,addTextTrack:addTextTrack,addCaptions:addCaptions,getCurrentTrackIdx:getCurrentTrackIdx,setCurrentTrackIdx:setCurrentTrackIdx,getTrackIdxForId:getTrackIdxForId,getCurrentTrackInfo:getCurrentTrackInfo,setModeForTrackIdx:setModeForTrackIdx,deleteCuesFromTrackIdx:deleteCuesFromTrackIdx,deleteAllTextTracks:deleteAllTextTracks,deleteTextTrack:deleteTextTrack,setConfig:setConfig};setup();return instance;}TextTracks.__dashjs_factory_name = 'TextTracks';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(TextTracks);module.exports = exports['default'];
	//# sourceMappingURL=TextTracks.js.map


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	/* 
	 * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * * Redistributions of source code must retain the above copyright notice, this
	 *   list of conditions and the following disclaimer.
	 * * Redistributions in binary form must reproduce the above copyright notice,
	 *   this list of conditions and the following disclaimer in the documentation
	 *   and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */

	exports.generateISD = __webpack_require__(76).generateISD;
	exports.fromXML = __webpack_require__(80).fromXML;
	exports.renderHTML = __webpack_require__(114).render;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	/* 
	 * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * * Redistributions of source code must retain the above copyright notice, this
	 *   list of conditions and the following disclaimer.
	 * * Redistributions in binary form must reproduce the above copyright notice,
	 *   this list of conditions and the following disclaimer in the documentation
	 *   and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */

	/**
	 * @module imscISD
	 */


	;
	(function (imscISD, imscNames, imscStyles, imscUtils) { // wrapper for non-node envs

	    /** 
	     * Creates a canonical representation of an IMSC1 document returned by <pre>imscDoc.fromXML()</pre>
	     * at a given absolute offset in seconds. This offset does not have to be one of the values returned
	     * by <pre>getMediaTimeEvents()</pre>.
	     * 
	     * @param {Object} tt IMSC1 document
	     * @param {number} offset Absolute offset (in seconds)
	     * @param {?module:imscUtils.ErrorHandler} errorHandler Error callback
	     * @returns {Object} Opaque in-memory representation of an ISD
	     */

	    imscISD.generateISD = function (tt, offset, errorHandler) {

	        /* TODO check for tt and offset validity */

	        /* create the ISD object from the IMSC1 doc */

	        var isd = new ISD(tt);

	        /* context */

	        var context = {

	            /*rubyfs: []*/ /* font size of the nearest textContainer or container */

	        };

	        /* process regions */

	        for (var r in tt.head.layout.regions) {

	            /* post-order traversal of the body tree per [construct intermediate document] */

	            var c = isdProcessContentElement(tt, offset, tt.head.layout.regions[r], tt.body, null, '', tt.head.layout.regions[r], errorHandler, context);

	            if (c !== null) {

	                /* add the region to the ISD */

	                isd.contents.push(c.element);
	            }


	        }

	        return isd;
	    };

	    /* set of styles not applicable to ruby container spans */

	    var _rcs_na_styles = [
	        imscStyles.byName.color.qname,
	        imscStyles.byName.textCombine.qname,
	        imscStyles.byName.textDecoration.qname,
	        imscStyles.byName.textEmphasis.qname,
	        imscStyles.byName.textOutline.qname,
	        imscStyles.byName.textShadow.qname
	    ];

	    function isdProcessContentElement(doc, offset, region, body, parent, inherited_region_id, elem, errorHandler, context) {

	        /* prune if temporally inactive */

	        if (offset < elem.begin || offset >= elem.end) {
	            return null;
	        }

	        /* 
	         * set the associated region as specified by the regionID attribute, or the 
	         * inherited associated region otherwise
	         */

	        var associated_region_id = 'regionID' in elem && elem.regionID !== '' ? elem.regionID : inherited_region_id;

	        /* prune the element if either:
	         * - the element is not terminal and the associated region is neither the default
	         *   region nor the parent region (this allows children to be associated with a 
	         *   region later on)
	         * - the element is terminal and the associated region is not the parent region
	         */

	        /* TODO: improve detection of terminal elements since <region> has no contents */

	        if (parent !== null /* are we in the region element */ &&
	            associated_region_id !== region.id &&
	            (
	                (!('contents' in elem)) ||
	                ('contents' in elem && elem.contents.length === 0) ||
	                associated_region_id !== ''
	                )
	            )
	            return null;

	        /* create an ISD element, including applying specified styles */

	        var isd_element = new ISDContentElement(elem);

	        /* apply set (animation) styling */

	        for (var i in elem.sets) {

	            if (offset < elem.sets[i].begin || offset >= elem.sets[i].end)
	                continue;

	            isd_element.styleAttrs[elem.sets[i].qname] = elem.sets[i].value;

	        }

	        /* 
	         * keep track of specified styling attributes so that we
	         * can compute them later
	         */

	        var spec_attr = {};

	        for (var qname in isd_element.styleAttrs) {

	            spec_attr[qname] = true;

	            /* special rule for tts:writingMode (section 7.29.1 of XSL)
	             * direction is set consistently with writingMode only
	             * if writingMode sets inline-direction to LTR or RTL  
	             */

	            if (qname === imscStyles.byName.writingMode.qname &&
	                !(imscStyles.byName.direction.qname in isd_element.styleAttrs)) {

	                var wm = isd_element.styleAttrs[qname];

	                if (wm === "lrtb" || wm === "lr") {

	                    isd_element.styleAttrs[imscStyles.byName.direction.qname] = "ltr";

	                } else if (wm === "rltb" || wm === "rl") {

	                    isd_element.styleAttrs[imscStyles.byName.direction.qname] = "rtl";

	                }

	            }
	        }

	        /* inherited styling */

	        if (parent !== null) {

	            for (var j in imscStyles.all) {

	                var sa = imscStyles.all[j];

	                /* textDecoration has special inheritance rules */

	                if (sa.qname === imscStyles.byName.textDecoration.qname) {

	                    /* handle both textDecoration inheritance and specification */

	                    var ps = parent.styleAttrs[sa.qname];
	                    var es = isd_element.styleAttrs[sa.qname];
	                    var outs = [];

	                    if (es === undefined) {

	                        outs = ps;

	                    } else if (es.indexOf("none") === -1) {

	                        if ((es.indexOf("noUnderline") === -1 &&
	                            ps.indexOf("underline") !== -1) ||
	                            es.indexOf("underline") !== -1) {

	                            outs.push("underline");

	                        }

	                        if ((es.indexOf("noLineThrough") === -1 &&
	                            ps.indexOf("lineThrough") !== -1) ||
	                            es.indexOf("lineThrough") !== -1) {

	                            outs.push("lineThrough");

	                        }

	                        if ((es.indexOf("noOverline") === -1 &&
	                            ps.indexOf("overline") !== -1) ||
	                            es.indexOf("overline") !== -1) {

	                            outs.push("overline");

	                        }

	                    } else {

	                        outs.push("none");

	                    }

	                    isd_element.styleAttrs[sa.qname] = outs;

	                } else if (sa.qname === imscStyles.byName.fontSize.qname &&
	                    !(sa.qname in isd_element.styleAttrs) &&
	                    isd_element.kind === 'span' &&
	                    isd_element.styleAttrs[imscStyles.byName.ruby.qname] === "textContainer") {
	                    
	                    /* special inheritance rule for ruby text container font size */
	                    
	                    var ruby_fs = parent.styleAttrs[imscStyles.byName.fontSize.qname];

	                    isd_element.styleAttrs[sa.qname] = new imscUtils.ComputedLength(
	                        0.5 * ruby_fs.rw,
	                        0.5 * ruby_fs.rh);

	                } else if (sa.qname === imscStyles.byName.fontSize.qname &&
	                    !(sa.qname in isd_element.styleAttrs) &&
	                    isd_element.kind === 'span' &&
	                    isd_element.styleAttrs[imscStyles.byName.ruby.qname] === "text") {
	                    
	                    /* special inheritance rule for ruby text font size */
	                    
	                    var parent_fs = parent.styleAttrs[imscStyles.byName.fontSize.qname];
	                    
	                    if (parent.styleAttrs[imscStyles.byName.ruby.qname] === "textContainer") {
	                        
	                        isd_element.styleAttrs[sa.qname] = parent_fs;
	                        
	                    } else {
	                        
	                        isd_element.styleAttrs[sa.qname] = new imscUtils.ComputedLength(
	                            0.5 * parent_fs.rw,
	                            0.5 * parent_fs.rh);
	                    }
	                    
	                } else if (sa.inherit &&
	                    (sa.qname in parent.styleAttrs) &&
	                    !(sa.qname in isd_element.styleAttrs)) {

	                    isd_element.styleAttrs[sa.qname] = parent.styleAttrs[sa.qname];

	                }

	            }

	        }

	        /* initial value styling */

	        for (var k in imscStyles.all) {

	            var ivs = imscStyles.all[k];

	            /* skip if value is already specified */

	            if (ivs.qname in isd_element.styleAttrs) continue;

	            /* skip tts:position if tts:origin is specified */

	            if (ivs.qname === imscStyles.byName.position.qname &&
	                imscStyles.byName.origin.qname in isd_element.styleAttrs)
	                continue;

	            /* skip tts:origin if tts:position is specified */

	            if (ivs.qname === imscStyles.byName.origin.qname &&
	                imscStyles.byName.position.qname in isd_element.styleAttrs)
	                continue;
	            
	            /* determine initial value */
	            
	            var iv = doc.head.styling.initials[ivs.qname] || ivs.initial;

	            /* apply initial value to elements other than region only if non-inherited */

	            if (isd_element.kind === 'region' || (ivs.inherit === false && iv !== null)) {

	                isd_element.styleAttrs[ivs.qname] = ivs.parse(iv);

	                /* keep track of the style as specified */

	                spec_attr[ivs.qname] = true;

	            }

	        }

	        /* compute styles (only for non-inherited styles) */
	        /* TODO: get rid of spec_attr */

	        for (var z in imscStyles.all) {

	            var cs = imscStyles.all[z];

	            if (!(cs.qname in spec_attr)) continue;

	            if (cs.compute !== null) {

	                var cstyle = cs.compute(
	                    /*doc, parent, element, attr, context*/
	                    doc,
	                    parent,
	                    isd_element,
	                    isd_element.styleAttrs[cs.qname],
	                    context
	                    );

	                if (cstyle !== null) {
	                    isd_element.styleAttrs[cs.qname] = cstyle;
	                } else {
	                    reportError(errorHandler, "Style '" + cs.qname + "' on element '" + isd_element.kind + "' cannot be computed");
	                }
	            }

	        }

	        /* tts:fontSize special ineritance for ruby */

	/*        var isrubycontainer = false;

	        if (isd_element.kind === "span") {

	            var rtemp = isd_element.styleAttrs[imscStyles.byName.ruby.qname];

	            if (rtemp === "container" || rtemp === "textContainer") {

	                isrubycontainer = true;

	                context.rubyfs.unshift(isd_element.styleAttrs[imscStyles.byName.fontSize.qname]);

	            }

	        } */

	        /* prune if tts:display is none */

	        if (isd_element.styleAttrs[imscStyles.byName.display.qname] === "none")
	            return null;

	        /* process contents of the element */

	        var contents;

	        if (parent === null) {

	            /* we are processing the region */

	            if (body === null) {

	                /* if there is no body, still process the region but with empty content */

	                contents = [];

	            } else {

	                /*use the body element as contents */

	                contents = [body];

	            }

	        } else if ('contents' in elem) {

	            contents = elem.contents;

	        }

	        for (var x in contents) {

	            var c = isdProcessContentElement(doc, offset, region, body, isd_element, associated_region_id, contents[x], errorHandler, context);

	            /* 
	             * keep child element only if they are non-null and their region match 
	             * the region of this element
	             */

	            if (c !== null) {

	                isd_element.contents.push(c.element);

	            }

	        }

	        /* compute used value of lineHeight="normal" */

	        /*        if (isd_element.styleAttrs[imscStyles.byName.lineHeight.qname] === "normal"  ) {
	         
	         isd_element.styleAttrs[imscStyles.byName.lineHeight.qname] =
	         isd_element.styleAttrs[imscStyles.byName.fontSize.qname] * 1.2;
	         
	         }
	         */

	        /* tts:fontSize special ineritance for ruby */

	        /*if (isrubycontainer) {

	            context.rubyfs.shift();

	        }*/

	        /* remove styles that are not applicable */

	        for (var qnameb in isd_element.styleAttrs) {

	            /* true if not applicable */

	            var na = false;

	            /* special applicability of certain style properties to ruby container spans */
	            /* TODO: in the future ruby elements should be translated to elements instead of kept as spans */

	            if (isd_element.kind === 'span') {

	                var rsp = isd_element.styleAttrs[imscStyles.byName.ruby.qname];

	                na = ( rsp === 'container' || rsp === 'textContainer' || rsp === 'baseContainer' ) && 
	                    _rcs_na_styles.indexOf(qnameb) !== -1;

	                if (! na) {

	                    na = rsp !== 'container' &&
	                        qnameb === imscStyles.byName.rubyAlign.qname;

	                }

	                if (! na) {

	                    na =  (! (rsp === 'textContainer' || rsp === 'text')) &&
	                        qnameb === imscStyles.byName.rubyPosition.qname;

	                }

	            }

	            /* normal applicability */
	            
	            if (! na) {

	                var da = imscStyles.byQName[qnameb];
	                na = da.applies.indexOf(isd_element.kind) === -1;

	            }


	            if (na) {
	                delete isd_element.styleAttrs[qnameb];
	            }

	        }

	        /* collapse white space if space is "default" */

	        if (isd_element.kind === 'span' && isd_element.text && isd_element.space === "default") {

	            var trimmedspan = isd_element.text.replace(/[\t\r\n ]+/g, ' ');

	            isd_element.text = trimmedspan;

	        }

	        /* trim whitespace around explicit line breaks */

	        if (isd_element.kind === 'p') {

	            var elist = [];

	            constructSpanList(isd_element, elist);

	            var l = 0;

	            var state = "after_br";
	            var br_pos = 0;

	            while (true) {

	                if (state === "after_br") {

	                    if (l >= elist.length || elist[l].kind === "br") {

	                        state = "before_br";
	                        br_pos = l;
	                        l--;

	                    } else {

	                        if (elist[l].space !== "preserve") {

	                            elist[l].text = elist[l].text.replace(/^[\t\r\n ]+/g, '');

	                        }

	                        if (elist[l].text.length > 0) {

	                            state = "looking_br";
	                            l++;

	                        } else {

	                            elist.splice(l, 1);

	                        }

	                    }

	                } else if (state === "before_br") {

	                    if (l < 0 || elist[l].kind === "br") {

	                        state = "after_br";
	                        l = br_pos + 1;

	                        if (l >= elist.length) break;

	                    } else {

	                        if (elist[l].space !== "preserve") {

	                            elist[l].text = elist[l].text.replace(/[\t\r\n ]+$/g, '');

	                        }

	                        if (elist[l].text.length > 0) {

	                            state = "after_br";
	                            l = br_pos + 1;

	                            if (l >= elist.length) break;

	                        } else {

	                            elist.splice(l, 1);
	                            l--;

	                        }

	                    }

	                } else {

	                    if (l >= elist.length || elist[l].kind === "br") {

	                        state = "before_br";
	                        br_pos = l;
	                        l--;

	                    } else {

	                        l++;

	                    }

	                }

	            }

	            pruneEmptySpans(isd_element);

	        }

	        /* keep element if:
	         * * contains a background image
	         * * <br/>
	         * * if there are children
	         * * if it is an image
	         * * if <span> and has text
	         * * if region and showBackground = always
	         */

	        if ((isd_element.kind === 'div' && imscStyles.byName.backgroundImage.qname in isd_element.styleAttrs) ||
	            isd_element.kind === 'br' ||
	            isd_element.kind === 'image' ||
	            ('contents' in isd_element && isd_element.contents.length > 0) ||
	            (isd_element.kind === 'span' && isd_element.text !== null) ||
	            (isd_element.kind === 'region' &&
	                isd_element.styleAttrs[imscStyles.byName.showBackground.qname] === 'always')) {

	            return {
	                region_id: associated_region_id,
	                element: isd_element
	            };
	        }

	        return null;
	    }

	    function constructSpanList(element, elist) {

	        if ('contents' in element) {

	            for (var i in element.contents) {
	                constructSpanList(element.contents[i], elist);
	            }

	        } else if (element.kind === 'span' || element.kind === 'br') {

	            elist.push(element);

	        }

	    }

	    function pruneEmptySpans(element) {

	        if (element.kind === 'br') {

	            return false;

	        } else if ('text' in element) {

	            return  element.text.length === 0;

	        } else if ('contents' in element) {

	            var i = element.contents.length;

	            while (i--) {

	                if (pruneEmptySpans(element.contents[i])) {
	                    element.contents.splice(i, 1);
	                }

	            }

	            return element.contents.length === 0;

	        }
	    }

	    function ISD(tt) {
	        this.contents = [];
	        this.aspectRatio = tt.aspectRatio;
	    }

	    function ISDContentElement(ttelem) {

	        /* assume the element is a region if it does not have a kind */

	        this.kind = ttelem.kind || 'region';

	        /* copy id */

	        if (ttelem.id) {
	            this.id = ttelem.id;
	        }

	        /* deep copy of style attributes */
	        this.styleAttrs = {};

	        for (var sname in ttelem.styleAttrs) {

	            this.styleAttrs[sname] =
	                ttelem.styleAttrs[sname];
	        }
	        
	        /* copy src and type if image */
	        
	        if ('src' in ttelem) {
	            
	            this.src = ttelem.src;
	            
	        }
	        
	         if ('type' in ttelem) {
	            
	            this.type = ttelem.type;
	            
	        }

	        /* TODO: clean this! 
	         * TODO: ISDElement and document element should be better tied together */

	        if ('text' in ttelem) {

	            this.text = ttelem.text;

	        } else if (this.kind === 'region' || 'contents' in ttelem) {

	            this.contents = [];
	        }

	        if ('space' in ttelem) {

	            this.space = ttelem.space;
	        }
	    }


	    /*
	     * ERROR HANDLING UTILITY FUNCTIONS
	     * 
	     */

	    function reportInfo(errorHandler, msg) {

	        if (errorHandler && errorHandler.info && errorHandler.info(msg))
	            throw msg;

	    }

	    function reportWarning(errorHandler, msg) {

	        if (errorHandler && errorHandler.warn && errorHandler.warn(msg))
	            throw msg;

	    }

	    function reportError(errorHandler, msg) {

	        if (errorHandler && errorHandler.error && errorHandler.error(msg))
	            throw msg;

	    }

	    function reportFatal(errorHandler, msg) {

	        if (errorHandler && errorHandler.fatal)
	            errorHandler.fatal(msg);

	        throw msg;

	    }


	})( false ? this.imscISD = {} : exports,
	    typeof imscNames === 'undefined' ? __webpack_require__(77) : imscNames,
	    typeof imscStyles === 'undefined' ? __webpack_require__(78) : imscStyles,
	    typeof imscUtils === 'undefined' ? __webpack_require__(79) : imscUtils
	    );


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	/* 
	 * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * * Redistributions of source code must retain the above copyright notice, this
	 *   list of conditions and the following disclaimer.
	 * * Redistributions in binary form must reproduce the above copyright notice,
	 *   this list of conditions and the following disclaimer in the documentation
	 *   and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */

	/**
	 * @module imscNames
	 */

	;
	(function (imscNames) { // wrapper for non-node envs

	    imscNames.ns_tt = "http://www.w3.org/ns/ttml";
	    imscNames.ns_tts = "http://www.w3.org/ns/ttml#styling";
	    imscNames.ns_ttp = "http://www.w3.org/ns/ttml#parameter";
	    imscNames.ns_xml = "http://www.w3.org/XML/1998/namespace";
	    imscNames.ns_itts = "http://www.w3.org/ns/ttml/profile/imsc1#styling";
	    imscNames.ns_ittp = "http://www.w3.org/ns/ttml/profile/imsc1#parameter";
	    imscNames.ns_smpte = "http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt";
	    imscNames.ns_ebutts = "urn:ebu:tt:style";
	    
	})( false ? this.imscNames = {} : exports);






/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	/* 
	 * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * * Redistributions of source code must retain the above copyright notice, this
	 *   list of conditions and the following disclaimer.
	 * * Redistributions in binary form must reproduce the above copyright notice,
	 *   this list of conditions and the following disclaimer in the documentation
	 *   and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */

	/**
	 * @module imscStyles
	 */

	;
	(function (imscStyles, imscNames, imscUtils) { // wrapper for non-node envs

	    function StylingAttributeDefinition(ns, name, initialValue, appliesTo, isInherit, isAnimatable, parseFunc, computeFunc) {
	        this.name = name;
	        this.ns = ns;
	        this.qname = ns + " " + name;
	        this.inherit = isInherit;
	        this.animatable = isAnimatable;
	        this.initial = initialValue;
	        this.applies = appliesTo;
	        this.parse = parseFunc;
	        this.compute = computeFunc;
	    }

	    imscStyles.all = [

	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "backgroundColor",
	            "transparent",
	            ['body', 'div', 'p', 'region', 'span'],
	            false,
	            true,
	            imscUtils.parseColor,
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "color",
	            "white",
	            ['span'],
	            true,
	            true,
	            imscUtils.parseColor,
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "direction",
	            "ltr",
	            ['p', 'span'],
	            true,
	            true,
	            function (str) {
	                return str;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "display",
	            "auto",
	            ['body', 'div', 'p', 'region', 'span'],
	            false,
	            true,
	            function (str) {
	                return str;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "displayAlign",
	            "before",
	            ['region'],
	            false,
	            true,
	            function (str) {
	                return str;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "extent",
	            "auto",
	            ['tt', 'region'],
	            false,
	            true,
	            function (str) {

	                if (str === "auto") {

	                    return str;

	                } else {

	                    var s = str.split(" ");
	                    if (s.length !== 2)
	                        return null;
	                    var w = imscUtils.parseLength(s[0]);
	                    var h = imscUtils.parseLength(s[1]);
	                    if (!h || !w)
	                        return null;
	                    return {'h': h, 'w': w};
	                }

	            },
	            function (doc, parent, element, attr, context) {

	                var h;
	                var w;

	                if (attr === "auto") {

	                    h = new imscUtils.ComputedLength(0, 1);

	                } else {

	                    h = imscUtils.toComputedLength(
	                        attr.h.value,
	                        attr.h.unit,
	                        null,
	                        doc.dimensions.h,
	                        null,
	                        doc.pxLength.h
	                        );


	                    if (h === null) {

	                        return null;

	                    }
	                }

	                if (attr === "auto") {

	                    w = new imscUtils.ComputedLength(1, 0);

	                } else {

	                    w = imscUtils.toComputedLength(
	                        attr.w.value,
	                        attr.w.unit,
	                        null,
	                        doc.dimensions.w,
	                        null,
	                        doc.pxLength.w
	                        );

	                    if (w === null) {

	                        return null;

	                    }

	                }

	                return {'h': h, 'w': w};
	            }
	        ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "fontFamily",
	            "default",
	            ['span'],
	            true,
	            true,
	            function (str) {
	                var ffs = str.split(",");
	                var rslt = [];

	                for (var i in ffs) {

	                    if (ffs[i].charAt(0) !== "'" && ffs[i].charAt(0) !== '"') {

	                        if (ffs[i] === "default") {

	                            /* per IMSC1 */

	                            rslt.push("monospaceSerif");

	                        } else {

	                            rslt.push(ffs[i]);

	                        }

	                    } else {

	                        rslt.push(ffs[i]);

	                    }

	                }

	                return rslt;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "shear",
	            "0%",
	            ['p'],
	            true,
	            true,
	            imscUtils.parseLength,
	            function (doc, parent, element, attr) {

	                var fs;

	                if (attr.unit === "%") {

	                    fs = Math.abs(attr.value) > 100 ? Math.sign(attr.value) * 100 : attr.value;

	                } else {

	                    return null;

	                }

	                return fs;
	            }
	        ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "fontSize",
	            "1c",
	            ['span'],
	            true,
	            true,
	            imscUtils.parseLength,
	            function (doc, parent, element, attr, context) {

	                var fs;

	                fs = imscUtils.toComputedLength(
	                    attr.value,
	                    attr.unit,
	                    parent !== null ? parent.styleAttrs[imscStyles.byName.fontSize.qname] : doc.cellLength.h,
	                    parent !== null ? parent.styleAttrs[imscStyles.byName.fontSize.qname] : doc.cellLength.h,
	                    doc.cellLength.h,
	                    doc.pxLength.h
	                    );

	                return fs;
	            }
	        ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "fontStyle",
	            "normal",
	            ['span'],
	            true,
	            true,
	            function (str) {
	                /* TODO: handle font style */

	                return str;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "fontWeight",
	            "normal",
	            ['span'],
	            true,
	            true,
	            function (str) {
	                /* TODO: handle font weight */

	                return str;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "lineHeight",
	            "normal",
	            ['p'],
	            true,
	            true,
	            function (str) {
	                if (str === "normal") {
	                    return str;
	                } else {
	                    return imscUtils.parseLength(str);
	                }
	            },
	            function (doc, parent, element, attr, context) {

	                var lh;

	                if (attr === "normal") {

	                    /* inherit normal per https://github.com/w3c/ttml1/issues/220 */

	                    lh = attr;

	                } else {

	                    lh = imscUtils.toComputedLength(
	                        attr.value,
	                        attr.unit,
	                        element.styleAttrs[imscStyles.byName.fontSize.qname],
	                        element.styleAttrs[imscStyles.byName.fontSize.qname],
	                        doc.cellLength.h,
	                        doc.pxLength.h
	                        );

	                    if (lh === null) {

	                        return null;

	                    }

	                }

	                /* TODO: create a Length constructor */

	                return lh;
	            }
	        ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "opacity",
	            1.0,
	            ['region'],
	            false,
	            true,
	            parseFloat,
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "origin",
	            "auto",
	            ['region'],
	            false,
	            true,
	            function (str) {

	                if (str === "auto") {

	                    return str;

	                } else {

	                    var s = str.split(" ");
	                    if (s.length !== 2)
	                        return null;
	                    var w = imscUtils.parseLength(s[0]);
	                    var h = imscUtils.parseLength(s[1]);
	                    if (!h || !w)
	                        return null;
	                    return {'h': h, 'w': w};
	                }

	            },
	            function (doc, parent, element, attr, context) {

	                var h;
	                var w;

	                if (attr === "auto") {

	                    h = new imscUtils.ComputedLength(0,0);

	                } else {

	                    h = imscUtils.toComputedLength(
	                        attr.h.value,
	                        attr.h.unit,
	                        null,
	                        doc.dimensions.h,
	                        null,
	                        doc.pxLength.h
	                        );

	                    if (h === null) {

	                        return null;

	                    }

	                }

	                if (attr === "auto") {

	                    w = new imscUtils.ComputedLength(0,0);

	                } else {

	                    w = imscUtils.toComputedLength(
	                        attr.w.value,
	                        attr.w.unit,
	                        null,
	                        doc.dimensions.w,
	                        null,
	                        doc.pxLength.w
	                        );

	                    if (w === null) {

	                        return null;

	                    }

	                }

	                return {'h': h, 'w': w};
	            }
	        ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "overflow",
	            "hidden",
	            ['region'],
	            false,
	            true,
	            function (str) {
	                return str;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "padding",
	            "0px",
	            ['region'],
	            false,
	            true,
	            function (str) {

	                var s = str.split(" ");
	                if (s.length > 4)
	                    return null;
	                var r = [];
	                for (var i in s) {

	                    var l = imscUtils.parseLength(s[i]);
	                    if (!l)
	                        return null;
	                    r.push(l);
	                }

	                return r;
	            },
	            function (doc, parent, element, attr, context) {

	                var padding;

	                /* TODO: make sure we are in region */

	                /*
	                 * expand padding shortcuts to 
	                 * [before, end, after, start]
	                 * 
	                 */

	                if (attr.length === 1) {

	                    padding = [attr[0], attr[0], attr[0], attr[0]];

	                } else if (attr.length === 2) {

	                    padding = [attr[0], attr[1], attr[0], attr[1]];

	                } else if (attr.length === 3) {

	                    padding = [attr[0], attr[1], attr[2], attr[1]];

	                } else if (attr.length === 4) {

	                    padding = [attr[0], attr[1], attr[2], attr[3]];

	                } else {

	                    return null;

	                }

	                /* TODO: take into account tts:direction */

	                /* 
	                 * transform [before, end, after, start] according to writingMode to 
	                 * [top,left,bottom,right]
	                 * 
	                 */

	                var dir = element.styleAttrs[imscStyles.byName.writingMode.qname];

	                if (dir === "lrtb" || dir === "lr") {

	                    padding = [padding[0], padding[3], padding[2], padding[1]];

	                } else if (dir === "rltb" || dir === "rl") {

	                    padding = [padding[0], padding[1], padding[2], padding[3]];

	                } else if (dir === "tblr") {

	                    padding = [padding[3], padding[0], padding[1], padding[2]];

	                } else if (dir === "tbrl" || dir === "tb") {

	                    padding = [padding[3], padding[2], padding[1], padding[0]];

	                } else {

	                    return null;

	                }

	                var out = [];

	                for (var i in padding) {

	                    if (padding[i].value === 0) {

	                        out[i] = new imscUtils.ComputedLength(0,0);

	                    } else {

	                        out[i] = imscUtils.toComputedLength(
	                            padding[i].value,
	                            padding[i].unit,
	                            element.styleAttrs[imscStyles.byName.fontSize.qname],
	                            i === "0" || i === "2" ? element.styleAttrs[imscStyles.byName.extent.qname].h : element.styleAttrs[imscStyles.byName.extent.qname].w,
	                            i === "0" || i === "2" ? doc.cellLength.h : doc.cellLength.w,
	                            i === "0" || i === "2" ? doc.pxLength.h: doc.pxLength.w
	                            );

	                        if (out[i] === null) return null;

	                    }
	                }


	                return out;
	            }
	        ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "position",
	            "top left",
	            ['region'],
	            false,
	            true,
	            function (str) {

	                return imscUtils.parsePosition(str);

	            },
	            function (doc, parent, element, attr) {
	                var h;
	                var w;
	                
	                h = imscUtils.toComputedLength(
	                    attr.v.offset.value,
	                    attr.v.offset.unit,
	                    null,
	                    new imscUtils.ComputedLength(
	                        - element.styleAttrs[imscStyles.byName.extent.qname].h.rw,
	                        doc.dimensions.h.rh - element.styleAttrs[imscStyles.byName.extent.qname].h.rh 
	                    ),
	                    null,
	                    doc.pxLength.h
	                    );

	                if (h === null) return null;


	                if (attr.v.edge === "bottom") {

	                    h = new imscUtils.ComputedLength(
	                        - h.rw - element.styleAttrs[imscStyles.byName.extent.qname].h.rw,
	                        doc.dimensions.h.rh - h.rh - element.styleAttrs[imscStyles.byName.extent.qname].h.rh
	                    );
	            
	                }

	                w = imscUtils.toComputedLength(
	                    attr.h.offset.value,
	                    attr.h.offset.unit,
	                    null,
	                    new imscUtils.ComputedLength(
	                        doc.dimensions.w.rw - element.styleAttrs[imscStyles.byName.extent.qname].w.rw,
	                        - element.styleAttrs[imscStyles.byName.extent.qname].w.rh
	                    ),
	                    null,
	                    doc.pxLength.w
	                    );

	                if (h === null) return null;

	                if (attr.h.edge === "right") {
	                    
	                    w = new imscUtils.ComputedLength(
	                        doc.dimensions.w.rw - w.rw - element.styleAttrs[imscStyles.byName.extent.qname].w.rw,
	                        - w.rh - element.styleAttrs[imscStyles.byName.extent.qname].w.rh
	                    );

	                }

	                return {'h': h, 'w': w};
	            }
	        ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "ruby",
	            "none",
	            ['span'],
	            false,
	            true,
	            function (str) {
	                return str;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "rubyAlign",
	            "center",
	            ['span'],
	            true,
	            true,
	            function (str) {
	                
	                if (! (str === "center" || str === "spaceAround")) {
	                    return null;
	                }
	                
	                return str;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "rubyPosition",
	            "outside",
	            ['span'],
	            true,
	            true,
	            function (str) {
	                return str;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "rubyReserve",
	            "none",
	            ['p'],
	            true,
	            true,
	            function (str) {
	                var s = str.split(" ");

	                var r = [null, null];

	                if (s.length === 0 || s.length > 2)
	                    return null;

	                if (s[0] === "none" ||
	                    s[0] === "both" ||
	                    s[0] === "after" ||
	                    s[0] === "before" ||
	                    s[0] === "outside") {

	                    r[0] = s[0];

	                } else {

	                    return null;

	                }

	                if (s.length === 2 && s[0] !== "none") {

	                    var l = imscUtils.parseLength(s[1]);

	                    if (l) {

	                        r[1] = l;

	                    } else {

	                        return null;

	                    }

	                }


	                return r;
	            },
	            function (doc, parent, element, attr, context) {

	                if (attr[0] === "none") {

	                    return attr;

	                }

	                var fs = null;

	                if (attr[1] === null) {

	                    fs = new imscUtils.ComputedLength(
	                            element.styleAttrs[imscStyles.byName.fontSize.qname].rw * 0.5,
	                            element.styleAttrs[imscStyles.byName.fontSize.qname].rh * 0.5
	                    );

	                } else {

	                    fs = imscUtils.toComputedLength(attr[1].value,
	                        attr[1].unit,
	                        element.styleAttrs[imscStyles.byName.fontSize.qname],
	                        element.styleAttrs[imscStyles.byName.fontSize.qname],
	                        doc.cellLength.h,
	                        doc.pxLength.h
	                        );
	                
	                }

	                if (fs === null) return null;

	                return [attr[0], fs];
	            }
	        ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "showBackground",
	            "always",
	            ['region'],
	            false,
	            true,
	            function (str) {
	                return str;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "textAlign",
	            "start",
	            ['p'],
	            true,
	            true,
	            function (str) {
	                return str;
	            },
	            function (doc, parent, element, attr, context) {
	                /* Section 7.16.9 of XSL */

	                if (attr === "left") {

	                    return "start";

	                } else if (attr === "right") {

	                    return "end";

	                } else {

	                    return attr;

	                }
	            }
	        ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "textCombine",
	            "none",
	            ['span'],
	            true,
	            true,
	            function (str) {
	                var s = str.split(" ");

	                if (s.length === 1) {

	                    if (s[0] === "none" || s[0] === "all") {

	                        return [s[0]];

	                    }

	                }

	                return null;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "textDecoration",
	            "none",
	            ['span'],
	            true,
	            true,
	            function (str) {
	                return str.split(" ");
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "textEmphasis",
	            "none",
	            ['span'],
	            false,
	            true,
	            function (str) {
	                var e = str.split(" ");

	                var rslt = {style: "filled", symbol: "circle", color: null, position: null};

	                for (var i in e) {

	                    if (e[i] === "none" || e[i] === "auto") {

	                        rslt.style = e[i];

	                    } else if (e[i] === "filled" ||
	                        e[i] === "open") {

	                        rslt.style = e[i];

	                    } else if (e[i] === "circle" ||
	                        e[i] === "dot" ||
	                        e[i] === "sesame") {

	                        rslt.symbol = e[i];

	                    } else if (e[i] === "current") {

	                        rslt.color = e[i];

	                    } else if (e[i] === "outside" || e[i] === "before" || e[i] === "after") {

	                        rslt.position = e[i];

	                    } else {

	                        rslt.color = imscUtils.parseColor(e[i]);

	                        if (rslt.color === null)
	                            return null;

	                    }
	                }

	                return rslt;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "textOutline",
	            "none",
	            ['span'],
	            true,
	            true,
	            function (str) {

	                /*
	                 * returns {c: <color>?, thichness: <length>} | "none"
	                 * 
	                 */

	                if (str === "none") {

	                    return str;

	                } else {

	                    var r = {};
	                    var s = str.split(" ");
	                    if (s.length === 0 || s.length > 2)
	                        return null;
	                    var c = imscUtils.parseColor(s[0]);

	                    r.color = c;

	                    if (c !== null)
	                        s.shift();

	                    if (s.length !== 1)
	                        return null;

	                    var l = imscUtils.parseLength(s[0]);

	                    if (!l)
	                        return null;

	                    r.thickness = l;

	                    return r;
	                }

	            },
	            function (doc, parent, element, attr, context) {

	                /*
	                 * returns {color: <color>, thickness: <norm length>}
	                 * 
	                 */

	                if (attr === "none")
	                    return attr;

	                var rslt = {};

	                if (attr.color === null) {

	                    rslt.color = element.styleAttrs[imscStyles.byName.color.qname];

	                } else {

	                    rslt.color = attr.color;

	                }

	                rslt.thickness = imscUtils.toComputedLength(
	                    attr.thickness.value,
	                    attr.thickness.unit,
	                    element.styleAttrs[imscStyles.byName.fontSize.qname],
	                    element.styleAttrs[imscStyles.byName.fontSize.qname],
	                    doc.cellLength.h,
	                    doc.pxLength.h
	                    );

	                if (rslt.thickness === null)
	                    return null;

	                return rslt;
	            }
	        ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "textShadow",
	            "none",
	            ['span'],
	            true,
	            true,
	            imscUtils.parseTextShadow,
	            function (doc, parent, element, attr) {

	                /*
	                 * returns [{x_off: <length>, y_off: <length>, b_radius: <length>, color: <color>}*] or "none"
	                 * 
	                 */

	                if (attr === "none")
	                    return attr;

	                var r = [];

	                for (var i in attr) {

	                    var shadow = {};

	                    shadow.x_off = imscUtils.toComputedLength(
	                        attr[i][0].value,
	                        attr[i][0].unit,
	                        null,
	                        element.styleAttrs[imscStyles.byName.fontSize.qname],
	                        null,
	                        doc.pxLength.w
	                        );

	                    if (shadow.x_off === null)
	                        return null;

	                    shadow.y_off = imscUtils.toComputedLength(
	                        attr[i][1].value,
	                        attr[i][1].unit,
	                        null,
	                        element.styleAttrs[imscStyles.byName.fontSize.qname],
	                        null,
	                        doc.pxLength.h
	                        );

	                    if (shadow.y_off === null)
	                        return null;

	                    if (attr[i][2] === null) {

	                        shadow.b_radius = 0;

	                    } else {

	                        shadow.b_radius = imscUtils.toComputedLength(
	                            attr[i][2].value,
	                            attr[i][2].unit,
	                            null,
	                            element.styleAttrs[imscStyles.byName.fontSize.qname],
	                            null,
	                            doc.pxLength.h
	                            );

	                        if (shadow.b_radius === null)
	                            return null;

	                    }

	                    if (attr[i][3] === null) {

	                        shadow.color = element.styleAttrs[imscStyles.byName.color.qname];

	                    } else {

	                        shadow.color = attr[i][3];

	                    }

	                    r.push(shadow);

	                }

	                return r;
	            }
	        ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "unicodeBidi",
	            "normal",
	            ['span', 'p'],
	            false,
	            true,
	            function (str) {
	                return str;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "visibility",
	            "visible",
	            ['body', 'div', 'p', 'region', 'span'],
	            true,
	            true,
	            function (str) {
	                return str;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "wrapOption",
	            "wrap",
	            ['span'],
	            true,
	            true,
	            function (str) {
	                return str;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "writingMode",
	            "lrtb",
	            ['region'],
	            false,
	            true,
	            function (str) {
	                return str;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_tts,
	            "zIndex",
	            "auto",
	            ['region'],
	            false,
	            true,
	            function (str) {

	                var rslt;

	                if (str === 'auto') {

	                    rslt = str;

	                } else {

	                    rslt = parseInt(str);

	                    if (isNaN(rslt)) {
	                        rslt = null;
	                    }

	                }

	                return rslt;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_ebutts,
	            "linePadding",
	            "0c",
	            ['p'],
	            true,
	            false,
	            imscUtils.parseLength,
	            function (doc, parent, element, attr, context) {

	                return imscUtils.toComputedLength(attr.value, attr.unit, null, null, doc.cellLength.w, null);

	            }
	        ),
	        new StylingAttributeDefinition(
	            imscNames.ns_ebutts,
	            "multiRowAlign",
	            "auto",
	            ['p'],
	            true,
	            false,
	            function (str) {
	                return str;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_smpte,
	            "backgroundImage",
	            null,
	            ['div'],
	            false,
	            false,
	            function (str) {
	                return str;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_itts,
	            "forcedDisplay",
	            "false",
	            ['body', 'div', 'p', 'region', 'span'],
	            true,
	            true,
	            function (str) {
	                return str === 'true' ? true : false;
	            },
	            null
	            ),
	        new StylingAttributeDefinition(
	            imscNames.ns_itts,
	            "fillLineGap",
	            "false",
	            ['p'],
	            true,
	            true,
	            function (str) {
	                return str === 'true' ? true : false;
	            },
	            null
	            )
	    ];

	    /* TODO: allow null parse function */

	    imscStyles.byQName = {};
	    for (var i in imscStyles.all) {

	        imscStyles.byQName[imscStyles.all[i].qname] = imscStyles.all[i];
	    }

	    imscStyles.byName = {};
	    for (var j in imscStyles.all) {

	        imscStyles.byName[imscStyles.all[j].name] = imscStyles.all[j];
	    }


	})( false ? this.imscStyles = {} : exports,
	    typeof imscNames === 'undefined' ? __webpack_require__(77) : imscNames,
	    typeof imscUtils === 'undefined' ? __webpack_require__(79) : imscUtils);


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	/* 
	 * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * * Redistributions of source code must retain the above copyright notice, this
	 *   list of conditions and the following disclaimer.
	 * * Redistributions in binary form must reproduce the above copyright notice,
	 *   this list of conditions and the following disclaimer in the documentation
	 *   and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */

	/**
	 * @module imscUtils
	 */

	;
	(function (imscUtils) { // wrapper for non-node envs

	    /* Documents the error handler interface */

	    /**
	     * @classdesc Generic interface for handling events. The interface exposes four
	     * methods:
	     * * <pre>info</pre>: unusual event that does not result in an inconsistent state
	     * * <pre>warn</pre>: unexpected event that should not result in an inconsistent state
	     * * <pre>error</pre>: unexpected event that may result in an inconsistent state
	     * * <pre>fatal</pre>: unexpected event that results in an inconsistent state
	     *   and termination of processing
	     * Each method takes a single <pre>string</pre> describing the event as argument,
	     * and returns a single <pre>boolean</pre>, which terminates processing if <pre>true</pre>.
	     *
	     * @name ErrorHandler
	     * @class
	     */


	    /*
	     * Parses a TTML color expression
	     * 
	     */

	    var HEX_COLOR_RE = /#([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})?/;
	    var DEC_COLOR_RE = /rgb\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/;
	    var DEC_COLORA_RE = /rgba\(\s*(\d+),\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/;
	    var NAMED_COLOR = {
	        transparent: [0, 0, 0, 0],
	        black: [0, 0, 0, 255],
	        silver: [192, 192, 192, 255],
	        gray: [128, 128, 128, 255],
	        white: [255, 255, 255, 255],
	        maroon: [128, 0, 0, 255],
	        red: [255, 0, 0, 255],
	        purple: [128, 0, 128, 255],
	        fuchsia: [255, 0, 255, 255],
	        magenta: [255, 0, 255, 255],
	        green: [0, 128, 0, 255],
	        lime: [0, 255, 0, 255],
	        olive: [128, 128, 0, 255],
	        yellow: [255, 255, 0, 255],
	        navy: [0, 0, 128, 255],
	        blue: [0, 0, 255, 255],
	        teal: [0, 128, 128, 255],
	        aqua: [0, 255, 255, 255],
	        cyan: [0, 255, 255, 255]
	    };

	    imscUtils.parseColor = function (str) {

	        var m;
	        
	        var r = null;
	        
	        var nc = NAMED_COLOR[str.toLowerCase()];
	        
	        if (nc !== undefined) {

	            r = nc;

	        } else if ((m = HEX_COLOR_RE.exec(str)) !== null) {

	            r = [parseInt(m[1], 16),
	                parseInt(m[2], 16),
	                parseInt(m[3], 16),
	                (m[4] !== undefined ? parseInt(m[4], 16) : 255)];
	            
	        } else if ((m = DEC_COLOR_RE.exec(str)) !== null) {

	            r = [parseInt(m[1]),
	                parseInt(m[2]),
	                parseInt(m[3]),
	                255];
	            
	        } else if ((m = DEC_COLORA_RE.exec(str)) !== null) {

	            r = [parseInt(m[1]),
	                parseInt(m[2]),
	                parseInt(m[3]),
	                parseInt(m[4])];
	            
	        }

	        return r;
	    };

	    var LENGTH_RE = /^((?:\+|\-)?\d*(?:\.\d+)?)(px|em|c|%|rh|rw)$/;

	    imscUtils.parseLength = function (str) {

	        var m;

	        var r = null;

	        if ((m = LENGTH_RE.exec(str)) !== null) {

	            r = {value: parseFloat(m[1]), unit: m[2]};
	        }

	        return r;
	    };

	    imscUtils.parseTextShadow = function (str) {

	        var shadows = str.split(",");

	        var r = [];

	        for (var i in shadows) {

	            var shadow = shadows[i].split(" ");

	            if (shadow.length === 1 && shadow[0] === "none") {

	                return "none";

	            } else if (shadow.length > 1 && shadow.length < 5) {

	                var out_shadow = [null, null, null, null];

	                /* x offset */

	                var l = imscUtils.parseLength(shadow.shift());

	                if (l === null)
	                    return null;

	                out_shadow[0] = l;

	                /* y offset */

	                l = imscUtils.parseLength(shadow.shift());

	                if (l === null)
	                    return null;

	                out_shadow[1] = l;

	                /* is there a third component */

	                if (shadow.length === 0) {
	                    r.push(out_shadow);
	                    continue;
	                }

	                l = imscUtils.parseLength(shadow[0]);

	                if (l !== null) {

	                    out_shadow[2] = l;

	                    shadow.shift();

	                }

	                if (shadow.length === 0) {
	                    r.push(out_shadow);
	                    continue;
	                }

	                var c = imscUtils.parseColor(shadow[0]);

	                if (c === null)
	                    return null;

	                out_shadow[3] = c;

	                r.push(out_shadow);
	            }

	        }

	        return r;
	    };


	    imscUtils.parsePosition = function (str) {

	        /* see https://www.w3.org/TR/ttml2/#style-value-position */

	        var s = str.split(" ");

	        var isKeyword = function (str) {

	            return str === "center" ||
	                    str === "left" ||
	                    str === "top" ||
	                    str === "bottom" ||
	                    str === "right";

	        };

	        if (s.length > 4) {

	            return null;

	        }

	        /* initial clean-up pass */

	        for (var j in s) {

	            if (!isKeyword(s[j])) {

	                var l = imscUtils.parseLength(s[j]);

	                if (l === null)
	                    return null;

	                s[j] = l;
	            }

	        }

	        /* position default */

	        var pos = {
	            h: {edge: "left", offset: {value: 50, unit: "%"}},
	            v: {edge: "top", offset: {value: 50, unit: "%"}}
	        };

	        /* update position */

	        for (var i = 0; i < s.length; ) {

	            /* extract the current component */

	            var comp = s[i++];

	            if (isKeyword(comp)) {

	                /* we have a keyword */

	                var offset = {value: 0, unit: "%"};

	                /* peek at the next component */

	                if (s.length !== 2 && i < s.length && (!isKeyword(s[i]))) {

	                    /* followed by an offset */

	                    offset = s[i++];

	                }

	                /* skip if center */

	                if (comp === "right") {

	                    pos.h.edge = comp;

	                    pos.h.offset = offset;

	                } else if (comp === "bottom") {

	                    pos.v.edge = comp;


	                    pos.v.offset = offset;


	                } else if (comp === "left") {

	                    pos.h.offset = offset;


	                } else if (comp === "top") {

	                    pos.v.offset = offset;


	                }

	            } else if (s.length === 1 || s.length === 2) {

	                /* we have a bare value */

	                if (i === 1) {

	                    /* assign it to left edge if first bare value */

	                    pos.h.offset = comp;

	                } else {

	                    /* assign it to top edge if second bare value */

	                    pos.v.offset = comp;

	                }

	            } else {

	                /* error condition */

	                return null;

	            }

	        }

	        return pos;
	    };


	    imscUtils.ComputedLength = function (rw, rh) {
	        this.rw = rw;
	        this.rh = rh;
	    };

	    imscUtils.ComputedLength.prototype.toUsedLength = function (width, height) {
	        return width * this.rw + height * this.rh;
	    };

	    imscUtils.ComputedLength.prototype.isZero = function () {
	        return this.rw === 0 && this.rh === 0;
	    };

	    /**
	     * Computes a specified length to a root container relative length
	     * 
	     * @param {number} lengthVal Length value to be computed
	     * @param {string} lengthUnit Units of the length value
	     * @param {number} emScale length of 1em, or null if em is not allowed
	     * @param {number} percentScale length to which , or null if perecentage is not allowed
	     * @param {number} cellScale length of 1c, or null if c is not allowed
	     * @param {number} pxScale length of 1px, or null if px is not allowed
	     * @param {number} direction 0 if the length is computed in the horizontal direction, 1 if the length is computed in the vertical direction
	     * @return {number} Computed length
	     */
	    imscUtils.toComputedLength = function(lengthVal, lengthUnit, emLength, percentLength, cellLength, pxLength) {

	        if (lengthUnit === "%" && percentLength) {

	            return new imscUtils.ComputedLength(
	                    percentLength.rw * lengthVal / 100,
	                    percentLength.rh * lengthVal / 100
	                    );

	        } else if (lengthUnit === "em" && emLength) {

	            return new imscUtils.ComputedLength(
	                    emLength.rw * lengthVal,
	                    emLength.rh * lengthVal
	                    );

	        } else if (lengthUnit === "c" && cellLength) {

	            return new imscUtils.ComputedLength(
	                    lengthVal * cellLength.rw,
	                    lengthVal * cellLength.rh
	                    );

	        } else if (lengthUnit === "px" && pxLength) {

	            return new imscUtils.ComputedLength(
	                    lengthVal * pxLength.rw,
	                    lengthVal * pxLength.rh
	                    );

	        } else if (lengthUnit === "rh") {

	            return new imscUtils.ComputedLength(
	                    0,
	                    lengthVal / 100
	                    );

	        } else if (lengthUnit === "rw") {

	            return new imscUtils.ComputedLength(
	                    lengthVal / 100,
	                    0                    
	                    );

	        } else {

	            return null;

	        }

	    };



	})( false ? this.imscUtils = {} : exports);


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

	/* 
	 * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * * Redistributions of source code must retain the above copyright notice, this
	 *   list of conditions and the following disclaimer.
	 * * Redistributions in binary form must reproduce the above copyright notice,
	 *   this list of conditions and the following disclaimer in the documentation
	 *   and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */

	/**
	 * @module imscDoc
	 */

	;
	(function (imscDoc, sax, imscNames, imscStyles, imscUtils) {


	    /**
	     * Allows a client to provide callbacks to handle children of the <metadata> element
	     * @typedef {Object} MetadataHandler
	     * @property {?OpenTagCallBack} onOpenTag
	     * @property {?CloseTagCallBack} onCloseTag
	     * @property {?TextCallBack} onText
	     */

	    /**
	     * Called when the opening tag of an element node is encountered.
	     * @callback OpenTagCallBack
	     * @param {string} ns Namespace URI of the element
	     * @param {string} name Local name of the element
	     * @param {Object[]} attributes List of attributes, each consisting of a
	     *                              `uri`, `name` and `value`
	     */

	    /**
	     * Called when the closing tag of an element node is encountered.
	     * @callback CloseTagCallBack
	     */

	    /**
	     * Called when a text node is encountered.
	     * @callback TextCallBack
	     * @param {string} contents Contents of the text node
	     */

	    /**
	     * Parses an IMSC1 document into an opaque in-memory representation that exposes
	     * a single method <pre>getMediaTimeEvents()</pre> that returns a list of time
	     * offsets (in seconds) of the ISD, i.e. the points in time where the visual
	     * representation of the document change. `metadataHandler` allows the caller to
	     * be called back when nodes are present in <metadata> elements. 
	     * 
	     * @param {string} xmlstring XML document
	     * @param {?module:imscUtils.ErrorHandler} errorHandler Error callback
	     * @param {?MetadataHandler} metadataHandler Callback for <Metadata> elements
	     * @returns {Object} Opaque in-memory representation of an IMSC1 document
	     */

	    imscDoc.fromXML = function (xmlstring, errorHandler, metadataHandler) {
	        var p = sax.parser(true, {xmlns: true});
	        var estack = [];
	        var xmllangstack = [];
	        var xmlspacestack = [];
	        var metadata_depth = 0;
	        var doc = null;

	        p.onclosetag = function (node) {

	            if (estack[0] instanceof Styling) {

	                /* flatten chained referential styling */

	                for (var sid in estack[0].styles) {

	                    mergeChainedStyles(estack[0], estack[0].styles[sid], errorHandler);

	                }

	            } else if (estack[0] instanceof P || estack[0] instanceof Span) {

	                /* merge anonymous spans */

	                if (estack[0].contents.length > 1) {

	                    var cs = [estack[0].contents[0]];

	                    var c;

	                    for (c = 1; c < estack[0].contents.length; c++) {

	                        if (estack[0].contents[c] instanceof AnonymousSpan &&
	                                cs[cs.length - 1] instanceof AnonymousSpan) {

	                            cs[cs.length - 1].text += estack[0].contents[c].text;

	                        } else {

	                            cs.push(estack[0].contents[c]);

	                        }

	                    }

	                    estack[0].contents = cs;

	                }

	                // remove redundant nested anonymous spans (9.3.3(1)(c))

	                if (estack[0] instanceof Span &&
	                        estack[0].contents.length === 1 &&
	                        estack[0].contents[0] instanceof AnonymousSpan) {

	                    estack[0].text = estack[0].contents[0].text;
	                    delete estack[0].contents;

	                }

	            } else if (estack[0] instanceof ForeignElement) {

	                if (estack[0].node.uri === imscNames.ns_tt &&
	                        estack[0].node.local === 'metadata') {

	                    /* leave the metadata element */

	                    metadata_depth--;

	                } else if (metadata_depth > 0 &&
	                        metadataHandler &&
	                        'onCloseTag' in metadataHandler) {

	                    /* end of child of metadata element */

	                    metadataHandler.onCloseTag();

	                }

	            }

	            // TODO: delete stylerefs?

	            // maintain the xml:space stack

	            xmlspacestack.shift();

	            // maintain the xml:lang stack

	            xmllangstack.shift();

	            // prepare for the next element

	            estack.shift();
	        };

	        p.ontext = function (str) {

	            if (estack[0] === undefined) {

	                /* ignoring text outside of elements */

	            } else if (estack[0] instanceof Span || estack[0] instanceof P) {

	                /* ignore children text nodes in ruby container spans */

	                if (estack[0] instanceof Span) {

	                    var ruby = estack[0].styleAttrs[imscStyles.byName.ruby.qname];

	                    if (ruby === 'container' || ruby === 'textContainer' || ruby === 'baseContainer') {

	                        return;

	                    }

	                }

	                /* create an anonymous span */

	                var s = new AnonymousSpan();

	                s.initFromText(doc, estack[0], str, xmlspacestack[0], errorHandler);

	                estack[0].contents.push(s);

	            } else if (estack[0] instanceof ForeignElement &&
	                    metadata_depth > 0 &&
	                    metadataHandler &&
	                    'onText' in metadataHandler) {

	                /* text node within a child of metadata element */

	                metadataHandler.onText(str);

	            }

	        };


	        p.onopentag = function (node) {

	            // maintain the xml:space stack

	            var xmlspace = node.attributes["xml:space"];

	            if (xmlspace) {

	                xmlspacestack.unshift(xmlspace.value);

	            } else {

	                if (xmlspacestack.length === 0) {

	                    xmlspacestack.unshift("default");

	                } else {

	                    xmlspacestack.unshift(xmlspacestack[0]);

	                }

	            }

	            /* maintain the xml:lang stack */


	            var xmllang = node.attributes["xml:lang"];

	            if (xmllang) {

	                xmllangstack.unshift(xmllang.value);

	            } else {

	                if (xmllangstack.length === 0) {

	                    xmllangstack.unshift("");

	                } else {

	                    xmllangstack.unshift(xmllangstack[0]);

	                }

	            }


	            /* process the element */

	            if (node.uri === imscNames.ns_tt) {

	                if (node.local === 'tt') {

	                    if (doc !== null) {

	                        reportFatal(errorHandler, "Two <tt> elements at (" + this.line + "," + this.column + ")");

	                    }

	                    doc = new TT();

	                    doc.initFromNode(node, errorHandler);

	                    estack.unshift(doc);

	                } else if (node.local === 'head') {

	                    if (!(estack[0] instanceof TT)) {
	                        reportFatal(errorHandler, "Parent of <head> element is not <tt> at (" + this.line + "," + this.column + ")");
	                    }

	                    estack.unshift(doc.head);

	                } else if (node.local === 'styling') {

	                    if (!(estack[0] instanceof Head)) {
	                        reportFatal(errorHandler, "Parent of <styling> element is not <head> at (" + this.line + "," + this.column + ")");
	                    }

	                    estack.unshift(doc.head.styling);

	                } else if (node.local === 'style') {

	                    var s;

	                    if (estack[0] instanceof Styling) {

	                        s = new Style();

	                        s.initFromNode(node, errorHandler);

	                        /* ignore <style> element missing @id */

	                        if (!s.id) {

	                            reportError(errorHandler, "<style> element missing @id attribute");

	                        } else {

	                            doc.head.styling.styles[s.id] = s;

	                        }

	                        estack.unshift(s);

	                    } else if (estack[0] instanceof Region) {

	                        /* nested styles can be merged with specified styles
	                         * immediately, with lower priority
	                         * (see 8.4.4.2(3) at TTML1 )
	                         */

	                        s = new Style();

	                        s.initFromNode(node, errorHandler);

	                        mergeStylesIfNotPresent(s.styleAttrs, estack[0].styleAttrs);

	                        estack.unshift(s);

	                    } else {

	                        reportFatal(errorHandler, "Parent of <style> element is not <styling> or <region> at (" + this.line + "," + this.column + ")");

	                    }

	                }  else if (node.local === 'initial') {

	                    var ini;

	                    if (estack[0] instanceof Styling) {

	                        ini = new Initial();

	                        ini.initFromNode(node, errorHandler);
	                        
	                        for (var qn in ini.styleAttrs) {
	                            
	                            doc.head.styling.initials[qn] = ini.styleAttrs[qn];
	                            
	                        }
	                        
	                        estack.unshift(ini);

	                    } else {

	                        reportFatal(errorHandler, "Parent of <initial> element is not <styling> at (" + this.line + "," + this.column + ")");

	                    }

	                } else if (node.local === 'layout') {

	                    if (!(estack[0] instanceof Head)) {

	                        reportFatal(errorHandler, "Parent of <layout> element is not <head> at " + this.line + "," + this.column + ")");

	                    }

	                    estack.unshift(doc.head.layout);

	                } else if (node.local === 'region') {

	                    if (!(estack[0] instanceof Layout)) {
	                        reportFatal(errorHandler, "Parent of <region> element is not <layout> at " + this.line + "," + this.column + ")");
	                    }

	                    var r = new Region();

	                    r.initFromNode(doc, node, errorHandler);

	                    if (!r.id || r.id in doc.head.layout.regions) {

	                        reportError(errorHandler, "Ignoring <region> with duplicate or missing @id at " + this.line + "," + this.column + ")");

	                    } else {

	                        doc.head.layout.regions[r.id] = r;

	                    }

	                    estack.unshift(r);

	                } else if (node.local === 'body') {

	                    if (!(estack[0] instanceof TT)) {

	                        reportFatal(errorHandler, "Parent of <body> element is not <tt> at " + this.line + "," + this.column + ")");

	                    }

	                    if (doc.body !== null) {

	                        reportFatal(errorHandler, "Second <body> element at " + this.line + "," + this.column + ")");

	                    }

	                    var b = new Body();

	                    b.initFromNode(doc, node, errorHandler);

	                    doc.body = b;

	                    estack.unshift(b);

	                } else if (node.local === 'div') {

	                    if (!(estack[0] instanceof Div || estack[0] instanceof Body)) {

	                        reportFatal(errorHandler, "Parent of <div> element is not <body> or <div> at " + this.line + "," + this.column + ")");

	                    }

	                    var d = new Div();

	                    d.initFromNode(doc, estack[0], node, errorHandler);
	                    
	                    /* transform smpte:backgroundImage to TTML2 image element */
	                    
	                    var bi = d.styleAttrs[imscStyles.byName.backgroundImage.qname];
	                    
	                    if (bi) {
	                        d.contents.push(new Image(bi));
	                        delete d.styleAttrs[imscStyles.byName.backgroundImage.qname];                  
	                    }

	                    estack[0].contents.push(d);

	                    estack.unshift(d);

	                } else if (node.local === 'image') {

	                    if (!(estack[0] instanceof Div)) {

	                        reportFatal(errorHandler, "Parent of <image> element is not <div> at " + this.line + "," + this.column + ")");

	                    }

	                    var img = new Image();
	                    
	                    img.initFromNode(doc, estack[0], node, errorHandler);
	                    
	                    estack[0].contents.push(img);

	                    estack.unshift(img);

	                } else if (node.local === 'p') {

	                    if (!(estack[0] instanceof Div)) {

	                        reportFatal(errorHandler, "Parent of <p> element is not <div> at " + this.line + "," + this.column + ")");

	                    }

	                    var p = new P();

	                    p.initFromNode(doc, estack[0], node, errorHandler);

	                    estack[0].contents.push(p);

	                    estack.unshift(p);

	                } else if (node.local === 'span') {

	                    if (!(estack[0] instanceof Span || estack[0] instanceof P)) {

	                        reportFatal(errorHandler, "Parent of <span> element is not <span> or <p> at " + this.line + "," + this.column + ")");

	                    }

	                    var ns = new Span();

	                    ns.initFromNode(doc, estack[0], node, xmlspacestack[0], errorHandler);

	                    estack[0].contents.push(ns);

	                    estack.unshift(ns);

	                } else if (node.local === 'br') {

	                    if (!(estack[0] instanceof Span || estack[0] instanceof P)) {

	                        reportFatal(errorHandler, "Parent of <br> element is not <span> or <p> at " + this.line + "," + this.column + ")");

	                    }

	                    var nb = new Br();

	                    nb.initFromNode(doc, estack[0], node, errorHandler);

	                    estack[0].contents.push(nb);

	                    estack.unshift(nb);

	                } else if (node.local === 'set') {

	                    if (!(estack[0] instanceof Span ||
	                            estack[0] instanceof P ||
	                            estack[0] instanceof Div ||
	                            estack[0] instanceof Body ||
	                            estack[0] instanceof Region ||
	                            estack[0] instanceof Br)) {

	                        reportFatal(errorHandler, "Parent of <set> element is not a content element or a region at " + this.line + "," + this.column + ")");

	                    }

	                    var st = new Set();

	                    st.initFromNode(doc, estack[0], node, errorHandler);

	                    estack[0].sets.push(st);

	                    estack.unshift(st);

	                } else {

	                    /* element in the TT namespace, but not a content element */

	                    estack.unshift(new ForeignElement(node));
	                }

	            } else {

	                /* ignore elements not in the TTML namespace unless in metadata element */

	                estack.unshift(new ForeignElement(node));

	            }

	            /* handle metadata callbacks */

	            if (estack[0] instanceof ForeignElement) {

	                if (node.uri === imscNames.ns_tt &&
	                        node.local === 'metadata') {

	                    /* enter the metadata element */

	                    metadata_depth++;

	                } else if (
	                        metadata_depth > 0 &&
	                        metadataHandler &&
	                        'onOpenTag' in metadataHandler
	                        ) {

	                    /* start of child of metadata element */

	                    var attrs = [];

	                    for (var a in node.attributes) {
	                        attrs[node.attributes[a].uri + " " + node.attributes[a].local] =
	                                {
	                                    uri: node.attributes[a].uri,
	                                    local: node.attributes[a].local,
	                                    value: node.attributes[a].value
	                                };
	                    }

	                    metadataHandler.onOpenTag(node.uri, node.local, attrs);

	                }

	            }

	        };

	        // parse the document

	        p.write(xmlstring).close();

	        // all referential styling has been flatten, so delete styles

	        delete doc.head.styling.styles;
	       
	        // create default region if no regions specified

	        var hasRegions = false;

	        /* AFAIK the only way to determine whether an object has members */

	        for (var i in doc.head.layout.regions) {

	            hasRegions = true;

	            break;

	        }

	        if (!hasRegions) {

	            /* create default region */

	            var dr = Region.prototype.createDefaultRegion();

	            doc.head.layout.regions[dr.id] = dr;

	        }

	        /* resolve desired timing for regions */

	        for (var region_i in doc.head.layout.regions) {

	            resolveTiming(doc, doc.head.layout.regions[region_i], null, null);

	        }

	        /* resolve desired timing for content elements */

	        if (doc.body) {
	            resolveTiming(doc, doc.body, null, null);
	        }

	        /* remove undefined spans in ruby containers */

	        if (doc.body) {
	            cleanRubyContainers(doc.body);
	        }

	        return doc;
	    };

	    function cleanRubyContainers(element) {
	        
	        if (! ('contents' in element)) return;

	        var rubyval = 'styleAttrs' in element ? element.styleAttrs[imscStyles.byName.ruby.qname] : null;

	        var isrubycontainer = (element.kind === 'span' && (rubyval === "container" || rubyval === "textContainer" || rubyval === "textContainer"));

	        for (var i = element.contents.length - 1; i >= 0; i--) {

	            if (isrubycontainer && !('styleAttrs' in element.contents[i] && imscStyles.byName.ruby.qname in element.contents[i].styleAttrs)) {

	                /* prune undefined <span> in ruby containers */

	                delete element.contents[i];

	            } else {

	                cleanRubyContainers(element.contents[i]);

	            }

	        }

	    }

	    function resolveTiming(doc, element, prev_sibling, parent) {

	        /* are we in a seq container? */

	        var isinseq = parent && parent.timeContainer === "seq";

	        /* determine implicit begin */

	        var implicit_begin = 0; /* default */

	        if (parent) {

	            if (isinseq && prev_sibling) {

	                /*
	                 * if seq time container, offset from the previous sibling end
	                 */

	                implicit_begin = prev_sibling.end;


	            } else {

	                implicit_begin = parent.begin;

	            }

	        }

	        /* compute desired begin */

	        element.begin = element.explicit_begin ? element.explicit_begin + implicit_begin : implicit_begin;


	        /* determine implicit end */

	        var implicit_end = element.begin;

	        var s = null;

	        for (var set_i in element.sets) {

	            resolveTiming(doc, element.sets[set_i], s, element);

	            if (element.timeContainer === "seq") {

	                implicit_end = element.sets[set_i].end;

	            } else {

	                implicit_end = Math.max(implicit_end, element.sets[set_i].end);

	            }

	            s = element.sets[set_i];

	        }

	        if (!('contents' in element)) {

	            /* anonymous spans and regions and <set> and <br>s and spans with only children text nodes */

	            if (isinseq) {

	                /* in seq container, implicit duration is zero */

	                implicit_end = element.begin;

	            } else {

	                /* in par container, implicit duration is indefinite */

	                implicit_end = Number.POSITIVE_INFINITY;

	            }

	        } else {

	            for (var content_i in element.contents) {

	                resolveTiming(doc, element.contents[content_i], s, element);

	                if (element.timeContainer === "seq") {

	                    implicit_end = element.contents[content_i].end;

	                } else {

	                    implicit_end = Math.max(implicit_end, element.contents[content_i].end);

	                }

	                s = element.contents[content_i];

	            }

	        }

	        /* determine desired end */
	        /* it is never made really clear in SMIL that the explicit end is offset by the implicit begin */

	        if (element.explicit_end !== null && element.explicit_dur !== null) {

	            element.end = Math.min(element.begin + element.explicit_dur, implicit_begin + element.explicit_end);

	        } else if (element.explicit_end === null && element.explicit_dur !== null) {

	            element.end = element.begin + element.explicit_dur;

	        } else if (element.explicit_end !== null && element.explicit_dur === null) {

	            element.end = implicit_begin + element.explicit_end;

	        } else {

	            element.end = implicit_end;
	        }

	        delete element.explicit_begin;
	        delete element.explicit_dur;
	        delete element.explicit_end;

	        doc._registerEvent(element);

	    }

	    function ForeignElement(node) {
	        this.node = node;
	    }

	    function TT() {
	        this.events = [];
	        this.head = new Head();
	        this.body = null;
	    }

	    TT.prototype.initFromNode = function (node, errorHandler) {

	        /* compute cell resolution */

	        var cr = extractCellResolution(node, errorHandler);
	        
	        this.cellLength = {
	                'h': new imscUtils.ComputedLength(0, 1/cr.h),
	                'w': new imscUtils.ComputedLength(1/cr.w, 0)
	            };

	        /* extract frame rate and tick rate */

	        var frtr = extractFrameAndTickRate(node, errorHandler);

	        this.effectiveFrameRate = frtr.effectiveFrameRate;

	        this.tickRate = frtr.tickRate;

	        /* extract aspect ratio */

	        this.aspectRatio = extractAspectRatio(node, errorHandler);

	        /* check timebase */

	        var attr = findAttribute(node, imscNames.ns_ttp, "timeBase");

	        if (attr !== null && attr !== "media") {

	            reportFatal(errorHandler, "Unsupported time base");

	        }

	        /* retrieve extent */

	        var e = extractExtent(node, errorHandler);

	        if (e === null) {

	            this.pxLength = {
	                'h': null,
	                'w': null
	            };

	        } else {

	            if (e.h.unit !== "px" || e.w.unit !== "px") {
	                reportFatal(errorHandler, "Extent on TT must be in px or absent");
	            }

	            this.pxLength = {
	                'h': new imscUtils.ComputedLength(0, 1 / e.h.value),
	                'w': new imscUtils.ComputedLength(1 / e.w.value, 0)
	            };
	        }
	        
	        /** set root container dimensions to (1, 1) arbitrarily
	          * the root container is mapped to actual dimensions at rendering
	        **/
	        
	        this.dimensions = {
	                'h': new imscUtils.ComputedLength(0, 1),
	                'w': new imscUtils.ComputedLength(1, 0)
	    };

	    };

	    /* register a temporal events */
	    TT.prototype._registerEvent = function (elem) {

	        /* skip if begin is not < then end */

	        if (elem.end <= elem.begin)
	            return;

	        /* index the begin time of the event */

	        var b_i = indexOf(this.events, elem.begin);

	        if (!b_i.found) {
	            this.events.splice(b_i.index, 0, elem.begin);
	        }

	        /* index the end time of the event */

	        if (elem.end !== Number.POSITIVE_INFINITY) {

	            var e_i = indexOf(this.events, elem.end);

	            if (!e_i.found) {
	                this.events.splice(e_i.index, 0, elem.end);
	            }

	        }

	    };


	    /*
	     * Retrieves the range of ISD times covered by the document
	     * 
	     * @returns {Array} Array of two elements: min_begin_time and max_begin_time
	     * 
	     */
	    TT.prototype.getMediaTimeRange = function () {

	        return [this.events[0], this.events[this.events.length - 1]];
	    };

	    /*
	     * Returns list of ISD begin times  
	     * 
	     * @returns {Array}
	     */
	    TT.prototype.getMediaTimeEvents = function () {

	        return this.events;
	    };

	    /*
	     * Represents a TTML Head element
	     */

	    function Head() {
	        this.styling = new Styling();
	        this.layout = new Layout();
	    }

	    /*
	     * Represents a TTML Styling element
	     */

	    function Styling() {
	        this.styles = {};
	        this.initials = {};
	    }

	    /*
	     * Represents a TTML Style element
	     */

	    function Style() {
	        this.id = null;
	        this.styleAttrs = null;
	        this.styleRefs = null;
	    }

	    Style.prototype.initFromNode = function (node, errorHandler) {
	        this.id = elementGetXMLID(node);
	        this.styleAttrs = elementGetStyles(node, errorHandler);
	        this.styleRefs = elementGetStyleRefs(node);
	    };
	    
	    /*
	     * Represents a TTML initial element
	     */

	    function Initial() {
	        this.styleAttrs = null;
	    }

	    Initial.prototype.initFromNode = function (node, errorHandler) {
	        
	        this.styleAttrs = {};
	        
	        for (var i in node.attributes) {

	            if (node.attributes[i].uri === imscNames.ns_itts ||
	                node.attributes[i].uri === imscNames.ns_ebutts ||
	                node.attributes[i].uri === imscNames.ns_tts) {
	                
	                var qname = node.attributes[i].uri + " " + node.attributes[i].local;
	                
	                this.styleAttrs[qname] = node.attributes[i].value;

	            }
	        }
	        
	    };

	    /*
	     * Represents a TTML Layout element
	     * 
	     */

	    function Layout() {
	        this.regions = {};
	    }
	    
	    /*
	     * Represents a TTML image element
	     */

	    function Image(src, type) {
	        ContentElement.call(this, 'image');
	        this.src = src;
	        this.type = type;
	    }

	    Image.prototype.initFromNode = function (doc, parent, node, errorHandler) {
	        this.src = 'src' in node.attributes ? node.attributes.src.value : null;
	        
	        if (! this.src) {
	            reportError(errorHandler, "Invalid image@src attribute");
	        }
	        
	        this.type = 'type' in node.attributes ? node.attributes.type.value : null;
	        
	        if (! this.type) {
	            reportError(errorHandler, "Invalid image@type attribute");
	        }
	        
	        StyledElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	        TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	        AnimatedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	        LayoutElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	    };

	    /*
	     * TTML element utility functions
	     * 
	     */

	    function ContentElement(kind) {
	        this.kind = kind;
	    }

	    function IdentifiedElement(id) {
	        this.id = id;
	    }

	    IdentifiedElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {
	        this.id = elementGetXMLID(node);
	    };

	    function LayoutElement(id) {
	        this.regionID = id;
	    }

	    LayoutElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {
	        this.regionID = elementGetRegionID(node);
	    };

	    function StyledElement(styleAttrs) {
	        this.styleAttrs = styleAttrs;
	    }

	    StyledElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {

	        this.styleAttrs = elementGetStyles(node, errorHandler);

	        if (doc.head !== null && doc.head.styling !== null) {
	            mergeReferencedStyles(doc.head.styling, elementGetStyleRefs(node), this.styleAttrs, errorHandler);
	        }

	    };

	    function AnimatedElement(sets) {
	        this.sets = sets;
	    }

	    AnimatedElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {
	        this.sets = [];
	    };

	    function ContainerElement(contents) {
	        this.contents = contents;
	    }

	    ContainerElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {
	        this.contents = [];
	    };

	    function TimedElement(explicit_begin, explicit_end, explicit_dur) {
	        this.explicit_begin = explicit_begin;
	        this.explicit_end = explicit_end;
	        this.explicit_dur = explicit_dur;
	    }

	    TimedElement.prototype.initFromNode = function (doc, parent, node, errorHandler) {
	        var t = processTiming(doc, parent, node, errorHandler);
	        this.explicit_begin = t.explicit_begin;
	        this.explicit_end = t.explicit_end;
	        this.explicit_dur = t.explicit_dur;

	        this.timeContainer = elementGetTimeContainer(node, errorHandler);
	    };


	    /*
	     * Represents a TTML body element
	     */



	    function Body() {
	        ContentElement.call(this, 'body');
	    }


	    Body.prototype.initFromNode = function (doc, node, errorHandler) {
	        StyledElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
	        TimedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
	        AnimatedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
	        LayoutElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
	        ContainerElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
	    };

	    /*
	     * Represents a TTML div element
	     */

	    function Div() {
	        ContentElement.call(this, 'div');
	    }

	    Div.prototype.initFromNode = function (doc, parent, node, errorHandler) {
	        StyledElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	        TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	        AnimatedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	        LayoutElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	        ContainerElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	    };

	    /*
	     * Represents a TTML p element
	     */

	    function P() {
	        ContentElement.call(this, 'p');
	    }

	    P.prototype.initFromNode = function (doc, parent, node, errorHandler) {
	        StyledElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	        TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	        AnimatedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	        LayoutElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	        ContainerElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	    };

	    /*
	     * Represents a TTML span element
	     */

	    function Span() {
	        ContentElement.call(this, 'span');
	    }

	    Span.prototype.initFromNode = function (doc, parent, node, xmlspace, errorHandler) {
	        StyledElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	        TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	        AnimatedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	        LayoutElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	        ContainerElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);

	        this.space = xmlspace;
	    };

	    /*
	     * Represents a TTML anonymous span element
	     */

	    function AnonymousSpan() {
	        ContentElement.call(this, 'span');
	    }

	    AnonymousSpan.prototype.initFromText = function (doc, parent, text, xmlspace, errorHandler) {
	        TimedElement.prototype.initFromNode.call(this, doc, parent, null, errorHandler);

	        this.text = text;
	        this.space = xmlspace;
	    };

	    /*
	     * Represents a TTML br element
	     */

	    function Br() {
	        ContentElement.call(this, 'br');
	    }

	    Br.prototype.initFromNode = function (doc, parent, node, errorHandler) {
	        LayoutElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	        TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);
	    };

	    /*
	     * Represents a TTML Region element
	     * 
	     */

	    function Region() {
	    }

	    Region.prototype.createDefaultRegion = function () {
	        var r = new Region();

	        IdentifiedElement.call(r, '');
	        StyledElement.call(r, {});
	        AnimatedElement.call(r, []);
	        TimedElement.call(r, 0, Number.POSITIVE_INFINITY, null);

	        return r;
	    };

	    Region.prototype.initFromNode = function (doc, node, errorHandler) {
	        IdentifiedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
	        StyledElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
	        TimedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);
	        AnimatedElement.prototype.initFromNode.call(this, doc, null, node, errorHandler);

	        /* immediately merge referenced styles */

	        if (doc.head !== null && doc.head.styling !== null) {
	            mergeReferencedStyles(doc.head.styling, elementGetStyleRefs(node), this.styleAttrs, errorHandler);
	        }

	    };

	    /*
	     * Represents a TTML Set element
	     * 
	     */

	    function Set() {
	    }

	    Set.prototype.initFromNode = function (doc, parent, node, errorHandler) {

	        TimedElement.prototype.initFromNode.call(this, doc, parent, node, errorHandler);

	        var styles = elementGetStyles(node, errorHandler);

	        this.qname = null;
	        this.value = null;

	        for (var qname in styles) {

	            if (this.qname) {

	                reportError(errorHandler, "More than one style specified on set");
	                break;

	            }

	            this.qname = qname;
	            this.value = styles[qname];

	        }

	    };

	    /*
	     * Utility functions
	     * 
	     */


	    function elementGetXMLID(node) {
	        return node && 'xml:id' in node.attributes ? node.attributes['xml:id'].value || null : null;
	    }

	    function elementGetRegionID(node) {
	        return node && 'region' in node.attributes ? node.attributes.region.value : '';
	    }

	    function elementGetTimeContainer(node, errorHandler) {

	        var tc = node && 'timeContainer' in node.attributes ? node.attributes.timeContainer.value : null;

	        if ((!tc) || tc === "par") {

	            return "par";

	        } else if (tc === "seq") {

	            return "seq";

	        } else {

	            reportError(errorHandler, "Illegal value of timeContainer (assuming 'par')");

	            return "par";

	        }

	    }

	    function elementGetStyleRefs(node) {

	        return node && 'style' in node.attributes ? node.attributes.style.value.split(" ") : [];

	    }

	    function elementGetStyles(node, errorHandler) {

	        var s = {};

	        if (node !== null) {

	            for (var i in node.attributes) {

	                var qname = node.attributes[i].uri + " " + node.attributes[i].local;

	                var sa = imscStyles.byQName[qname];

	                if (sa !== undefined) {

	                    var val = sa.parse(node.attributes[i].value);

	                    if (val !== null) {

	                        s[qname] = val;

	                        /* TODO: consider refactoring errorHandler into parse and compute routines */

	                        if (sa === imscStyles.byName.zIndex) {
	                            reportWarning(errorHandler, "zIndex attribute present but not used by IMSC1 since regions do not overlap");
	                        }

	                    } else {

	                        reportError(errorHandler, "Cannot parse styling attribute " + qname + " --> " + node.attributes[i].value);

	                    }

	                }

	            }

	        }

	        return s;
	    }

	    function findAttribute(node, ns, name) {
	        for (var i in node.attributes) {

	            if (node.attributes[i].uri === ns &&
	                    node.attributes[i].local === name) {

	                return node.attributes[i].value;
	            }
	        }

	        return null;
	    }

	    function extractAspectRatio(node, errorHandler) {

	        var ar = findAttribute(node, imscNames.ns_ittp, "aspectRatio");

	        if (ar === null) {
	            
	            ar = findAttribute(node, imscNames.ns_ttp, "displayAspectRatio");
	            
	        }

	        var rslt = null;

	        if (ar !== null) {

	            var ASPECT_RATIO_RE = /(\d+)\s+(\d+)/;

	            var m = ASPECT_RATIO_RE.exec(ar);

	            if (m !== null) {

	                var w = parseInt(m[1]);

	                var h = parseInt(m[2]);

	                if (w !== 0 && h !== 0) {

	                    rslt = w / h;

	                } else {

	                    reportError(errorHandler, "Illegal aspectRatio values (ignoring)");
	                }

	            } else {

	                reportError(errorHandler, "Malformed aspectRatio attribute (ignoring)");
	            }

	        }

	        return rslt;

	    }

	    /*
	     * Returns the cellResolution attribute from a node
	     * 
	     */
	    function extractCellResolution(node, errorHandler) {

	        var cr = findAttribute(node, imscNames.ns_ttp, "cellResolution");

	        // initial value

	        var h = 15;
	        var w = 32;

	        if (cr !== null) {

	            var CELL_RESOLUTION_RE = /(\d+) (\d+)/;

	            var m = CELL_RESOLUTION_RE.exec(cr);

	            if (m !== null) {

	                w = parseInt(m[1]);

	                h = parseInt(m[2]);

	            } else {

	                reportWarning(errorHandler, "Malformed cellResolution value (using initial value instead)");

	            }

	        }

	        return {'w': w, 'h': h};

	    }


	    function extractFrameAndTickRate(node, errorHandler) {

	        // subFrameRate is ignored per IMSC1 specification

	        // extract frame rate

	        var fps_attr = findAttribute(node, imscNames.ns_ttp, "frameRate");

	        // initial value

	        var fps = 30;

	        // match variable

	        var m;

	        if (fps_attr !== null) {

	            var FRAME_RATE_RE = /(\d+)/;

	            m = FRAME_RATE_RE.exec(fps_attr);

	            if (m !== null) {

	                fps = parseInt(m[1]);

	            } else {

	                reportWarning(errorHandler, "Malformed frame rate attribute (using initial value instead)");
	            }

	        }

	        // extract frame rate multiplier

	        var frm_attr = findAttribute(node, imscNames.ns_ttp, "frameRateMultiplier");

	        // initial value

	        var frm = 1;

	        if (frm_attr !== null) {

	            var FRAME_RATE_MULT_RE = /(\d+) (\d+)/;

	            m = FRAME_RATE_MULT_RE.exec(frm_attr);

	            if (m !== null) {

	                frm = parseInt(m[1]) / parseInt(m[2]);

	            } else {

	                reportWarning(errorHandler, "Malformed frame rate multiplier attribute (using initial value instead)");
	            }

	        }

	        var efps = frm * fps;

	        // extract tick rate

	        var tr = 1;

	        var trattr = findAttribute(node, imscNames.ns_ttp, "tickRate");

	        if (trattr === null) {

	            if (fps_attr !== null)
	                tr = efps;

	        } else {

	            var TICK_RATE_RE = /(\d+)/;

	            m = TICK_RATE_RE.exec(trattr);

	            if (m !== null) {

	                tr = parseInt(m[1]);

	            } else {

	                reportWarning(errorHandler, "Malformed tick rate attribute (using initial value instead)");
	            }

	        }

	        return {effectiveFrameRate: efps, tickRate: tr};

	    }

	    function extractExtent(node, errorHandler) {

	        var attr = findAttribute(node, imscNames.ns_tts, "extent");

	        if (attr === null)
	            return null;

	        var s = attr.split(" ");

	        if (s.length !== 2) {

	            reportWarning(errorHandler, "Malformed extent (ignoring)");

	            return null;
	        }

	        var w = imscUtils.parseLength(s[0]);

	        var h = imscUtils.parseLength(s[1]);

	        if (!h || !w) {

	            reportWarning(errorHandler, "Malformed extent values (ignoring)");

	            return null;
	        }

	        return {'h': h, 'w': w};

	    }

	    function parseTimeExpression(tickRate, effectiveFrameRate, str) {

	        var CLOCK_TIME_FRACTION_RE = /^(\d{2,}):(\d\d):(\d\d(?:\.\d+)?)$/;
	        var CLOCK_TIME_FRAMES_RE = /^(\d{2,}):(\d\d):(\d\d)\:(\d{2,})$/;
	        var OFFSET_FRAME_RE = /^(\d+(?:\.\d+)?)f$/;
	        var OFFSET_TICK_RE = /^(\d+(?:\.\d+)?)t$/;
	        var OFFSET_MS_RE = /^(\d+(?:\.\d+)?)ms$/;
	        var OFFSET_S_RE = /^(\d+(?:\.\d+)?)s$/;
	        var OFFSET_H_RE = /^(\d+(?:\.\d+)?)h$/;
	        var OFFSET_M_RE = /^(\d+(?:\.\d+)?)m$/;
	        var m;
	        var r = null;
	        if ((m = OFFSET_FRAME_RE.exec(str)) !== null) {

	            if (effectiveFrameRate !== null) {

	                r = parseFloat(m[1]) / effectiveFrameRate;
	            }

	        } else if ((m = OFFSET_TICK_RE.exec(str)) !== null) {

	            if (tickRate !== null) {

	                r = parseFloat(m[1]) / tickRate;
	            }

	        } else if ((m = OFFSET_MS_RE.exec(str)) !== null) {

	            r = parseFloat(m[1]) / 1000.0;

	        } else if ((m = OFFSET_S_RE.exec(str)) !== null) {

	            r = parseFloat(m[1]);

	        } else if ((m = OFFSET_H_RE.exec(str)) !== null) {

	            r = parseFloat(m[1]) * 3600.0;

	        } else if ((m = OFFSET_M_RE.exec(str)) !== null) {

	            r = parseFloat(m[1]) * 60.0;

	        } else if ((m = CLOCK_TIME_FRACTION_RE.exec(str)) !== null) {

	            r = parseInt(m[1]) * 3600 +
	                    parseInt(m[2]) * 60 +
	                    parseFloat(m[3]);

	        } else if ((m = CLOCK_TIME_FRAMES_RE.exec(str)) !== null) {

	            /* this assumes that HH:MM:SS is a clock-time-with-fraction */

	            if (effectiveFrameRate !== null) {

	                r = parseInt(m[1]) * 3600 +
	                        parseInt(m[2]) * 60 +
	                        parseInt(m[3]) +
	                        (m[4] === null ? 0 : parseInt(m[4]) / effectiveFrameRate);
	            }

	        }

	        return r;
	    }

	    function processTiming(doc, parent, node, errorHandler) {

	        /* determine explicit begin */

	        var explicit_begin = null;

	        if (node && 'begin' in node.attributes) {

	            explicit_begin = parseTimeExpression(doc.tickRate, doc.effectiveFrameRate, node.attributes.begin.value);

	            if (explicit_begin === null) {

	                reportWarning(errorHandler, "Malformed begin value " + node.attributes.begin.value + " (using 0)");

	            }

	        }

	        /* determine explicit duration */

	        var explicit_dur = null;

	        if (node && 'dur' in node.attributes) {

	            explicit_dur = parseTimeExpression(doc.tickRate, doc.effectiveFrameRate, node.attributes.dur.value);

	            if (explicit_dur === null) {

	                reportWarning(errorHandler, "Malformed dur value " + node.attributes.dur.value + " (ignoring)");

	            }

	        }

	        /* determine explicit end */

	        var explicit_end = null;

	        if (node && 'end' in node.attributes) {

	            explicit_end = parseTimeExpression(doc.tickRate, doc.effectiveFrameRate, node.attributes.end.value);

	            if (explicit_end === null) {

	                reportWarning(errorHandler, "Malformed end value (ignoring)");

	            }

	        }

	        return {explicit_begin: explicit_begin,
	            explicit_end: explicit_end,
	            explicit_dur: explicit_dur};

	    }



	    function mergeChainedStyles(styling, style, errorHandler) {

	        while (style.styleRefs.length > 0) {

	            var sref = style.styleRefs.pop();

	            if (!(sref in styling.styles)) {
	                reportError(errorHandler, "Non-existant style id referenced");
	                continue;
	            }

	            mergeChainedStyles(styling, styling.styles[sref], errorHandler);

	            mergeStylesIfNotPresent(styling.styles[sref].styleAttrs, style.styleAttrs);

	        }

	    }

	    function mergeReferencedStyles(styling, stylerefs, styleattrs, errorHandler) {

	        for (var i = stylerefs.length - 1; i >= 0; i--) {

	            var sref = stylerefs[i];

	            if (!(sref in styling.styles)) {
	                reportError(errorHandler, "Non-existant style id referenced");
	                continue;
	            }

	            mergeStylesIfNotPresent(styling.styles[sref].styleAttrs, styleattrs);

	        }

	    }

	    function mergeStylesIfNotPresent(from_styles, into_styles) {

	        for (var sname in from_styles) {

	            if (sname in into_styles)
	                continue;

	            into_styles[sname] = from_styles[sname];

	        }

	    }

	    /* TODO: validate style format at parsing */


	    /*
	     * ERROR HANDLING UTILITY FUNCTIONS
	     * 
	     */

	    function reportInfo(errorHandler, msg) {

	        if (errorHandler && errorHandler.info && errorHandler.info(msg))
	            throw msg;

	    }

	    function reportWarning(errorHandler, msg) {

	        if (errorHandler && errorHandler.warn && errorHandler.warn(msg))
	            throw msg;

	    }

	    function reportError(errorHandler, msg) {

	        if (errorHandler && errorHandler.error && errorHandler.error(msg))
	            throw msg;

	    }

	    function reportFatal(errorHandler, msg) {

	        if (errorHandler && errorHandler.fatal)
	            errorHandler.fatal(msg);

	        throw msg;

	    }

	    /*
	     * Binary search utility function
	     * 
	     * @typedef {Object} BinarySearchResult
	     * @property {boolean} found Was an exact match found?
	     * @property {number} index Position of the exact match or insert position
	     * 
	     * @returns {BinarySearchResult}
	     */

	    function indexOf(arr, searchval) {

	        var min = 0;
	        var max = arr.length - 1;
	        var cur;

	        while (min <= max) {

	            cur = Math.floor((min + max) / 2);

	            var curval = arr[cur];

	            if (curval < searchval) {

	                min = cur + 1;

	            } else if (curval > searchval) {

	                max = cur - 1;

	            } else {

	                return {found: true, index: cur};

	            }

	        }

	        return {found: false, index: min};
	    }


	})( false ? this.imscDoc = {} : exports,
	        typeof sax === 'undefined' ? __webpack_require__(81) : sax,
	        typeof imscNames === 'undefined' ? __webpack_require__(77) : imscNames,
	        typeof imscStyles === 'undefined' ? __webpack_require__(78) : imscStyles,
	        typeof imscUtils === 'undefined' ? __webpack_require__(79) : imscUtils);


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {;(function (sax) { // wrapper for non-node envs
	  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }
	  sax.SAXParser = SAXParser
	  sax.SAXStream = SAXStream
	  sax.createStream = createStream

	  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
	  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
	  // since that's the earliest that a buffer overrun could occur.  This way, checks are
	  // as rare as required, but as often as necessary to ensure never crossing this bound.
	  // Furthermore, buffers are only tested at most once per write(), so passing a very
	  // large string into write() might have undesirable effects, but this is manageable by
	  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
	  // edge case, result in creating at most one complete copy of the string passed in.
	  // Set to Infinity to have unlimited buffers.
	  sax.MAX_BUFFER_LENGTH = 64 * 1024

	  var buffers = [
	    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',
	    'procInstName', 'procInstBody', 'entity', 'attribName',
	    'attribValue', 'cdata', 'script'
	  ]

	  sax.EVENTS = [
	    'text',
	    'processinginstruction',
	    'sgmldeclaration',
	    'doctype',
	    'comment',
	    'opentagstart',
	    'attribute',
	    'opentag',
	    'closetag',
	    'opencdata',
	    'cdata',
	    'closecdata',
	    'error',
	    'end',
	    'ready',
	    'script',
	    'opennamespace',
	    'closenamespace'
	  ]

	  function SAXParser (strict, opt) {
	    if (!(this instanceof SAXParser)) {
	      return new SAXParser(strict, opt)
	    }

	    var parser = this
	    clearBuffers(parser)
	    parser.q = parser.c = ''
	    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH
	    parser.opt = opt || {}
	    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags
	    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'
	    parser.tags = []
	    parser.closed = parser.closedRoot = parser.sawRoot = false
	    parser.tag = parser.error = null
	    parser.strict = !!strict
	    parser.noscript = !!(strict || parser.opt.noscript)
	    parser.state = S.BEGIN
	    parser.strictEntities = parser.opt.strictEntities
	    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)
	    parser.attribList = []

	    // namespaces form a prototype chain.
	    // it always points at the current tag,
	    // which protos to its parent tag.
	    if (parser.opt.xmlns) {
	      parser.ns = Object.create(rootNS)
	    }

	    // mostly just for error reporting
	    parser.trackPosition = parser.opt.position !== false
	    if (parser.trackPosition) {
	      parser.position = parser.line = parser.column = 0
	    }
	    emit(parser, 'onready')
	  }

	  if (!Object.create) {
	    Object.create = function (o) {
	      function F () {}
	      F.prototype = o
	      var newf = new F()
	      return newf
	    }
	  }

	  if (!Object.keys) {
	    Object.keys = function (o) {
	      var a = []
	      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)
	      return a
	    }
	  }

	  function checkBufferLength (parser) {
	    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)
	    var maxActual = 0
	    for (var i = 0, l = buffers.length; i < l; i++) {
	      var len = parser[buffers[i]].length
	      if (len > maxAllowed) {
	        // Text/cdata nodes can get big, and since they're buffered,
	        // we can get here under normal conditions.
	        // Avoid issues by emitting the text node now,
	        // so at least it won't get any bigger.
	        switch (buffers[i]) {
	          case 'textNode':
	            closeText(parser)
	            break

	          case 'cdata':
	            emitNode(parser, 'oncdata', parser.cdata)
	            parser.cdata = ''
	            break

	          case 'script':
	            emitNode(parser, 'onscript', parser.script)
	            parser.script = ''
	            break

	          default:
	            error(parser, 'Max buffer length exceeded: ' + buffers[i])
	        }
	      }
	      maxActual = Math.max(maxActual, len)
	    }
	    // schedule the next check for the earliest possible buffer overrun.
	    var m = sax.MAX_BUFFER_LENGTH - maxActual
	    parser.bufferCheckPosition = m + parser.position
	  }

	  function clearBuffers (parser) {
	    for (var i = 0, l = buffers.length; i < l; i++) {
	      parser[buffers[i]] = ''
	    }
	  }

	  function flushBuffers (parser) {
	    closeText(parser)
	    if (parser.cdata !== '') {
	      emitNode(parser, 'oncdata', parser.cdata)
	      parser.cdata = ''
	    }
	    if (parser.script !== '') {
	      emitNode(parser, 'onscript', parser.script)
	      parser.script = ''
	    }
	  }

	  SAXParser.prototype = {
	    end: function () { end(this) },
	    write: write,
	    resume: function () { this.error = null; return this },
	    close: function () { return this.write(null) },
	    flush: function () { flushBuffers(this) }
	  }

	  var Stream
	  try {
	    Stream = __webpack_require__(86).Stream
	  } catch (ex) {
	    Stream = function () {}
	  }

	  var streamWraps = sax.EVENTS.filter(function (ev) {
	    return ev !== 'error' && ev !== 'end'
	  })

	  function createStream (strict, opt) {
	    return new SAXStream(strict, opt)
	  }

	  function SAXStream (strict, opt) {
	    if (!(this instanceof SAXStream)) {
	      return new SAXStream(strict, opt)
	    }

	    Stream.apply(this)

	    this._parser = new SAXParser(strict, opt)
	    this.writable = true
	    this.readable = true

	    var me = this

	    this._parser.onend = function () {
	      me.emit('end')
	    }

	    this._parser.onerror = function (er) {
	      me.emit('error', er)

	      // if didn't throw, then means error was handled.
	      // go ahead and clear error, so we can write again.
	      me._parser.error = null
	    }

	    this._decoder = null

	    streamWraps.forEach(function (ev) {
	      Object.defineProperty(me, 'on' + ev, {
	        get: function () {
	          return me._parser['on' + ev]
	        },
	        set: function (h) {
	          if (!h) {
	            me.removeAllListeners(ev)
	            me._parser['on' + ev] = h
	            return h
	          }
	          me.on(ev, h)
	        },
	        enumerable: true,
	        configurable: false
	      })
	    })
	  }

	  SAXStream.prototype = Object.create(Stream.prototype, {
	    constructor: {
	      value: SAXStream
	    }
	  })

	  SAXStream.prototype.write = function (data) {
	    if (typeof Buffer === 'function' &&
	      typeof Buffer.isBuffer === 'function' &&
	      Buffer.isBuffer(data)) {
	      if (!this._decoder) {
	        var SD = __webpack_require__(107).StringDecoder
	        this._decoder = new SD('utf8')
	      }
	      data = this._decoder.write(data)
	    }

	    this._parser.write(data.toString())
	    this.emit('data', data)
	    return true
	  }

	  SAXStream.prototype.end = function (chunk) {
	    if (chunk && chunk.length) {
	      this.write(chunk)
	    }
	    this._parser.end()
	    return true
	  }

	  SAXStream.prototype.on = function (ev, handler) {
	    var me = this
	    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {
	      me._parser['on' + ev] = function () {
	        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)
	        args.splice(0, 0, ev)
	        me.emit.apply(me, args)
	      }
	    }

	    return Stream.prototype.on.call(me, ev, handler)
	  }

	  // character classes and tokens
	  var whitespace = '\r\n\t '

	  // this really needs to be replaced with character classes.
	  // XML allows all manner of ridiculous numbers and digits.
	  var number = '0124356789'
	  var letter = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'

	  // (Letter | "_" | ":")
	  var quote = '\'"'
	  var attribEnd = whitespace + '>'
	  var CDATA = '[CDATA['
	  var DOCTYPE = 'DOCTYPE'
	  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'
	  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'
	  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }

	  // turn all the string character sets into character class objects.
	  whitespace = charClass(whitespace)
	  number = charClass(number)
	  letter = charClass(letter)

	  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
	  // This implementation works on strings, a single character at a time
	  // as such, it cannot ever support astral-plane characters (10000-EFFFF)
	  // without a significant breaking change to either this  parser, or the
	  // JavaScript language.  Implementation of an emoji-capable xml parser
	  // is left as an exercise for the reader.
	  var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/

	  var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

	  var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/
	  var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

	  quote = charClass(quote)
	  attribEnd = charClass(attribEnd)

	  function charClass (str) {
	    return str.split('').reduce(function (s, c) {
	      s[c] = true
	      return s
	    }, {})
	  }

	  function isRegExp (c) {
	    return Object.prototype.toString.call(c) === '[object RegExp]'
	  }

	  function is (charclass, c) {
	    return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]
	  }

	  function not (charclass, c) {
	    return !is(charclass, c)
	  }

	  var S = 0
	  sax.STATE = {
	    BEGIN: S++, // leading byte order mark or whitespace
	    BEGIN_WHITESPACE: S++, // leading whitespace
	    TEXT: S++, // general stuff
	    TEXT_ENTITY: S++, // &amp and such.
	    OPEN_WAKA: S++, // <
	    SGML_DECL: S++, // <!BLARG
	    SGML_DECL_QUOTED: S++, // <!BLARG foo "bar
	    DOCTYPE: S++, // <!DOCTYPE
	    DOCTYPE_QUOTED: S++, // <!DOCTYPE "//blah
	    DOCTYPE_DTD: S++, // <!DOCTYPE "//blah" [ ...
	    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE "//blah" [ "foo
	    COMMENT_STARTING: S++, // <!-
	    COMMENT: S++, // <!--
	    COMMENT_ENDING: S++, // <!-- blah -
	    COMMENT_ENDED: S++, // <!-- blah --
	    CDATA: S++, // <![CDATA[ something
	    CDATA_ENDING: S++, // ]
	    CDATA_ENDING_2: S++, // ]]
	    PROC_INST: S++, // <?hi
	    PROC_INST_BODY: S++, // <?hi there
	    PROC_INST_ENDING: S++, // <?hi "there" ?
	    OPEN_TAG: S++, // <strong
	    OPEN_TAG_SLASH: S++, // <strong /
	    ATTRIB: S++, // <a
	    ATTRIB_NAME: S++, // <a foo
	    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _
	    ATTRIB_VALUE: S++, // <a foo=
	    ATTRIB_VALUE_QUOTED: S++, // <a foo="bar
	    ATTRIB_VALUE_CLOSED: S++, // <a foo="bar"
	    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar
	    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar="&quot;"
	    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot
	    CLOSE_TAG: S++, // </a
	    CLOSE_TAG_SAW_WHITE: S++, // </a   >
	    SCRIPT: S++, // <script> ...
	    SCRIPT_ENDING: S++ // <script> ... <
	  }

	  sax.XML_ENTITIES = {
	    'amp': '&',
	    'gt': '>',
	    'lt': '<',
	    'quot': '"',
	    'apos': "'"
	  }

	  sax.ENTITIES = {
	    'amp': '&',
	    'gt': '>',
	    'lt': '<',
	    'quot': '"',
	    'apos': "'",
	    'AElig': 198,
	    'Aacute': 193,
	    'Acirc': 194,
	    'Agrave': 192,
	    'Aring': 197,
	    'Atilde': 195,
	    'Auml': 196,
	    'Ccedil': 199,
	    'ETH': 208,
	    'Eacute': 201,
	    'Ecirc': 202,
	    'Egrave': 200,
	    'Euml': 203,
	    'Iacute': 205,
	    'Icirc': 206,
	    'Igrave': 204,
	    'Iuml': 207,
	    'Ntilde': 209,
	    'Oacute': 211,
	    'Ocirc': 212,
	    'Ograve': 210,
	    'Oslash': 216,
	    'Otilde': 213,
	    'Ouml': 214,
	    'THORN': 222,
	    'Uacute': 218,
	    'Ucirc': 219,
	    'Ugrave': 217,
	    'Uuml': 220,
	    'Yacute': 221,
	    'aacute': 225,
	    'acirc': 226,
	    'aelig': 230,
	    'agrave': 224,
	    'aring': 229,
	    'atilde': 227,
	    'auml': 228,
	    'ccedil': 231,
	    'eacute': 233,
	    'ecirc': 234,
	    'egrave': 232,
	    'eth': 240,
	    'euml': 235,
	    'iacute': 237,
	    'icirc': 238,
	    'igrave': 236,
	    'iuml': 239,
	    'ntilde': 241,
	    'oacute': 243,
	    'ocirc': 244,
	    'ograve': 242,
	    'oslash': 248,
	    'otilde': 245,
	    'ouml': 246,
	    'szlig': 223,
	    'thorn': 254,
	    'uacute': 250,
	    'ucirc': 251,
	    'ugrave': 249,
	    'uuml': 252,
	    'yacute': 253,
	    'yuml': 255,
	    'copy': 169,
	    'reg': 174,
	    'nbsp': 160,
	    'iexcl': 161,
	    'cent': 162,
	    'pound': 163,
	    'curren': 164,
	    'yen': 165,
	    'brvbar': 166,
	    'sect': 167,
	    'uml': 168,
	    'ordf': 170,
	    'laquo': 171,
	    'not': 172,
	    'shy': 173,
	    'macr': 175,
	    'deg': 176,
	    'plusmn': 177,
	    'sup1': 185,
	    'sup2': 178,
	    'sup3': 179,
	    'acute': 180,
	    'micro': 181,
	    'para': 182,
	    'middot': 183,
	    'cedil': 184,
	    'ordm': 186,
	    'raquo': 187,
	    'frac14': 188,
	    'frac12': 189,
	    'frac34': 190,
	    'iquest': 191,
	    'times': 215,
	    'divide': 247,
	    'OElig': 338,
	    'oelig': 339,
	    'Scaron': 352,
	    'scaron': 353,
	    'Yuml': 376,
	    'fnof': 402,
	    'circ': 710,
	    'tilde': 732,
	    'Alpha': 913,
	    'Beta': 914,
	    'Gamma': 915,
	    'Delta': 916,
	    'Epsilon': 917,
	    'Zeta': 918,
	    'Eta': 919,
	    'Theta': 920,
	    'Iota': 921,
	    'Kappa': 922,
	    'Lambda': 923,
	    'Mu': 924,
	    'Nu': 925,
	    'Xi': 926,
	    'Omicron': 927,
	    'Pi': 928,
	    'Rho': 929,
	    'Sigma': 931,
	    'Tau': 932,
	    'Upsilon': 933,
	    'Phi': 934,
	    'Chi': 935,
	    'Psi': 936,
	    'Omega': 937,
	    'alpha': 945,
	    'beta': 946,
	    'gamma': 947,
	    'delta': 948,
	    'epsilon': 949,
	    'zeta': 950,
	    'eta': 951,
	    'theta': 952,
	    'iota': 953,
	    'kappa': 954,
	    'lambda': 955,
	    'mu': 956,
	    'nu': 957,
	    'xi': 958,
	    'omicron': 959,
	    'pi': 960,
	    'rho': 961,
	    'sigmaf': 962,
	    'sigma': 963,
	    'tau': 964,
	    'upsilon': 965,
	    'phi': 966,
	    'chi': 967,
	    'psi': 968,
	    'omega': 969,
	    'thetasym': 977,
	    'upsih': 978,
	    'piv': 982,
	    'ensp': 8194,
	    'emsp': 8195,
	    'thinsp': 8201,
	    'zwnj': 8204,
	    'zwj': 8205,
	    'lrm': 8206,
	    'rlm': 8207,
	    'ndash': 8211,
	    'mdash': 8212,
	    'lsquo': 8216,
	    'rsquo': 8217,
	    'sbquo': 8218,
	    'ldquo': 8220,
	    'rdquo': 8221,
	    'bdquo': 8222,
	    'dagger': 8224,
	    'Dagger': 8225,
	    'bull': 8226,
	    'hellip': 8230,
	    'permil': 8240,
	    'prime': 8242,
	    'Prime': 8243,
	    'lsaquo': 8249,
	    'rsaquo': 8250,
	    'oline': 8254,
	    'frasl': 8260,
	    'euro': 8364,
	    'image': 8465,
	    'weierp': 8472,
	    'real': 8476,
	    'trade': 8482,
	    'alefsym': 8501,
	    'larr': 8592,
	    'uarr': 8593,
	    'rarr': 8594,
	    'darr': 8595,
	    'harr': 8596,
	    'crarr': 8629,
	    'lArr': 8656,
	    'uArr': 8657,
	    'rArr': 8658,
	    'dArr': 8659,
	    'hArr': 8660,
	    'forall': 8704,
	    'part': 8706,
	    'exist': 8707,
	    'empty': 8709,
	    'nabla': 8711,
	    'isin': 8712,
	    'notin': 8713,
	    'ni': 8715,
	    'prod': 8719,
	    'sum': 8721,
	    'minus': 8722,
	    'lowast': 8727,
	    'radic': 8730,
	    'prop': 8733,
	    'infin': 8734,
	    'ang': 8736,
	    'and': 8743,
	    'or': 8744,
	    'cap': 8745,
	    'cup': 8746,
	    'int': 8747,
	    'there4': 8756,
	    'sim': 8764,
	    'cong': 8773,
	    'asymp': 8776,
	    'ne': 8800,
	    'equiv': 8801,
	    'le': 8804,
	    'ge': 8805,
	    'sub': 8834,
	    'sup': 8835,
	    'nsub': 8836,
	    'sube': 8838,
	    'supe': 8839,
	    'oplus': 8853,
	    'otimes': 8855,
	    'perp': 8869,
	    'sdot': 8901,
	    'lceil': 8968,
	    'rceil': 8969,
	    'lfloor': 8970,
	    'rfloor': 8971,
	    'lang': 9001,
	    'rang': 9002,
	    'loz': 9674,
	    'spades': 9824,
	    'clubs': 9827,
	    'hearts': 9829,
	    'diams': 9830
	  }

	  Object.keys(sax.ENTITIES).forEach(function (key) {
	    var e = sax.ENTITIES[key]
	    var s = typeof e === 'number' ? String.fromCharCode(e) : e
	    sax.ENTITIES[key] = s
	  })

	  for (var s in sax.STATE) {
	    sax.STATE[sax.STATE[s]] = s
	  }

	  // shorthand
	  S = sax.STATE

	  function emit (parser, event, data) {
	    parser[event] && parser[event](data)
	  }

	  function emitNode (parser, nodeType, data) {
	    if (parser.textNode) closeText(parser)
	    emit(parser, nodeType, data)
	  }

	  function closeText (parser) {
	    parser.textNode = textopts(parser.opt, parser.textNode)
	    if (parser.textNode) emit(parser, 'ontext', parser.textNode)
	    parser.textNode = ''
	  }

	  function textopts (opt, text) {
	    if (opt.trim) text = text.trim()
	    if (opt.normalize) text = text.replace(/\s+/g, ' ')
	    return text
	  }

	  function error (parser, er) {
	    closeText(parser)
	    if (parser.trackPosition) {
	      er += '\nLine: ' + parser.line +
	        '\nColumn: ' + parser.column +
	        '\nChar: ' + parser.c
	    }
	    er = new Error(er)
	    parser.error = er
	    emit(parser, 'onerror', er)
	    return parser
	  }

	  function end (parser) {
	    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')
	    if ((parser.state !== S.BEGIN) &&
	      (parser.state !== S.BEGIN_WHITESPACE) &&
	      (parser.state !== S.TEXT)) {
	      error(parser, 'Unexpected end')
	    }
	    closeText(parser)
	    parser.c = ''
	    parser.closed = true
	    emit(parser, 'onend')
	    SAXParser.call(parser, parser.strict, parser.opt)
	    return parser
	  }

	  function strictFail (parser, message) {
	    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {
	      throw new Error('bad call to strictFail')
	    }
	    if (parser.strict) {
	      error(parser, message)
	    }
	  }

	  function newTag (parser) {
	    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()
	    var parent = parser.tags[parser.tags.length - 1] || parser
	    var tag = parser.tag = { name: parser.tagName, attributes: {} }

	    // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
	    if (parser.opt.xmlns) {
	      tag.ns = parent.ns
	    }
	    parser.attribList.length = 0
	    emitNode(parser, 'onopentagstart', tag)
	  }

	  function qname (name, attribute) {
	    var i = name.indexOf(':')
	    var qualName = i < 0 ? [ '', name ] : name.split(':')
	    var prefix = qualName[0]
	    var local = qualName[1]

	    // <x "xmlns"="http://foo">
	    if (attribute && name === 'xmlns') {
	      prefix = 'xmlns'
	      local = ''
	    }

	    return { prefix: prefix, local: local }
	  }

	  function attrib (parser) {
	    if (!parser.strict) {
	      parser.attribName = parser.attribName[parser.looseCase]()
	    }

	    if (parser.attribList.indexOf(parser.attribName) !== -1 ||
	      parser.tag.attributes.hasOwnProperty(parser.attribName)) {
	      parser.attribName = parser.attribValue = ''
	      return
	    }

	    if (parser.opt.xmlns) {
	      var qn = qname(parser.attribName, true)
	      var prefix = qn.prefix
	      var local = qn.local

	      if (prefix === 'xmlns') {
	        // namespace binding attribute. push the binding into scope
	        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
	          strictFail(parser,
	            'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' +
	            'Actual: ' + parser.attribValue)
	        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
	          strictFail(parser,
	            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' +
	            'Actual: ' + parser.attribValue)
	        } else {
	          var tag = parser.tag
	          var parent = parser.tags[parser.tags.length - 1] || parser
	          if (tag.ns === parent.ns) {
	            tag.ns = Object.create(parent.ns)
	          }
	          tag.ns[local] = parser.attribValue
	        }
	      }

	      // defer onattribute events until all attributes have been seen
	      // so any new bindings can take effect. preserve attribute order
	      // so deferred events can be emitted in document order
	      parser.attribList.push([parser.attribName, parser.attribValue])
	    } else {
	      // in non-xmlns mode, we can emit the event right away
	      parser.tag.attributes[parser.attribName] = parser.attribValue
	      emitNode(parser, 'onattribute', {
	        name: parser.attribName,
	        value: parser.attribValue
	      })
	    }

	    parser.attribName = parser.attribValue = ''
	  }

	  function openTag (parser, selfClosing) {
	    if (parser.opt.xmlns) {
	      // emit namespace binding events
	      var tag = parser.tag

	      // add namespace info to tag
	      var qn = qname(parser.tagName)
	      tag.prefix = qn.prefix
	      tag.local = qn.local
	      tag.uri = tag.ns[qn.prefix] || ''

	      if (tag.prefix && !tag.uri) {
	        strictFail(parser, 'Unbound namespace prefix: ' +
	          JSON.stringify(parser.tagName))
	        tag.uri = qn.prefix
	      }

	      var parent = parser.tags[parser.tags.length - 1] || parser
	      if (tag.ns && parent.ns !== tag.ns) {
	        Object.keys(tag.ns).forEach(function (p) {
	          emitNode(parser, 'onopennamespace', {
	            prefix: p,
	            uri: tag.ns[p]
	          })
	        })
	      }

	      // handle deferred onattribute events
	      // Note: do not apply default ns to attributes:
	      //   http://www.w3.org/TR/REC-xml-names/#defaulting
	      for (var i = 0, l = parser.attribList.length; i < l; i++) {
	        var nv = parser.attribList[i]
	        var name = nv[0]
	        var value = nv[1]
	        var qualName = qname(name, true)
	        var prefix = qualName.prefix
	        var local = qualName.local
	        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')
	        var a = {
	          name: name,
	          value: value,
	          prefix: prefix,
	          local: local,
	          uri: uri
	        }

	        // if there's any attributes with an undefined namespace,
	        // then fail on them now.
	        if (prefix && prefix !== 'xmlns' && !uri) {
	          strictFail(parser, 'Unbound namespace prefix: ' +
	            JSON.stringify(prefix))
	          a.uri = prefix
	        }
	        parser.tag.attributes[name] = a
	        emitNode(parser, 'onattribute', a)
	      }
	      parser.attribList.length = 0
	    }

	    parser.tag.isSelfClosing = !!selfClosing

	    // process the tag
	    parser.sawRoot = true
	    parser.tags.push(parser.tag)
	    emitNode(parser, 'onopentag', parser.tag)
	    if (!selfClosing) {
	      // special case for <script> in non-strict mode.
	      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
	        parser.state = S.SCRIPT
	      } else {
	        parser.state = S.TEXT
	      }
	      parser.tag = null
	      parser.tagName = ''
	    }
	    parser.attribName = parser.attribValue = ''
	    parser.attribList.length = 0
	  }

	  function closeTag (parser) {
	    if (!parser.tagName) {
	      strictFail(parser, 'Weird empty close tag.')
	      parser.textNode += '</>'
	      parser.state = S.TEXT
	      return
	    }

	    if (parser.script) {
	      if (parser.tagName !== 'script') {
	        parser.script += '</' + parser.tagName + '>'
	        parser.tagName = ''
	        parser.state = S.SCRIPT
	        return
	      }
	      emitNode(parser, 'onscript', parser.script)
	      parser.script = ''
	    }

	    // first make sure that the closing tag actually exists.
	    // <a><b></c></b></a> will close everything, otherwise.
	    var t = parser.tags.length
	    var tagName = parser.tagName
	    if (!parser.strict) {
	      tagName = tagName[parser.looseCase]()
	    }
	    var closeTo = tagName
	    while (t--) {
	      var close = parser.tags[t]
	      if (close.name !== closeTo) {
	        // fail the first time in strict mode
	        strictFail(parser, 'Unexpected close tag')
	      } else {
	        break
	      }
	    }

	    // didn't find it.  we already failed for strict, so just abort.
	    if (t < 0) {
	      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)
	      parser.textNode += '</' + parser.tagName + '>'
	      parser.state = S.TEXT
	      return
	    }
	    parser.tagName = tagName
	    var s = parser.tags.length
	    while (s-- > t) {
	      var tag = parser.tag = parser.tags.pop()
	      parser.tagName = parser.tag.name
	      emitNode(parser, 'onclosetag', parser.tagName)

	      var x = {}
	      for (var i in tag.ns) {
	        x[i] = tag.ns[i]
	      }

	      var parent = parser.tags[parser.tags.length - 1] || parser
	      if (parser.opt.xmlns && tag.ns !== parent.ns) {
	        // remove namespace bindings introduced by tag
	        Object.keys(tag.ns).forEach(function (p) {
	          var n = tag.ns[p]
	          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })
	        })
	      }
	    }
	    if (t === 0) parser.closedRoot = true
	    parser.tagName = parser.attribValue = parser.attribName = ''
	    parser.attribList.length = 0
	    parser.state = S.TEXT
	  }

	  function parseEntity (parser) {
	    var entity = parser.entity
	    var entityLC = entity.toLowerCase()
	    var num
	    var numStr = ''

	    if (parser.ENTITIES[entity]) {
	      return parser.ENTITIES[entity]
	    }
	    if (parser.ENTITIES[entityLC]) {
	      return parser.ENTITIES[entityLC]
	    }
	    entity = entityLC
	    if (entity.charAt(0) === '#') {
	      if (entity.charAt(1) === 'x') {
	        entity = entity.slice(2)
	        num = parseInt(entity, 16)
	        numStr = num.toString(16)
	      } else {
	        entity = entity.slice(1)
	        num = parseInt(entity, 10)
	        numStr = num.toString(10)
	      }
	    }
	    entity = entity.replace(/^0+/, '')
	    if (numStr.toLowerCase() !== entity) {
	      strictFail(parser, 'Invalid character entity')
	      return '&' + parser.entity + ';'
	    }

	    return String.fromCodePoint(num)
	  }

	  function beginWhiteSpace (parser, c) {
	    if (c === '<') {
	      parser.state = S.OPEN_WAKA
	      parser.startTagPosition = parser.position
	    } else if (not(whitespace, c)) {
	      // have to process this as a text node.
	      // weird, but happens.
	      strictFail(parser, 'Non-whitespace before first tag.')
	      parser.textNode = c
	      parser.state = S.TEXT
	    }
	  }

	  function charAt (chunk, i) {
	    var result = ''
	    if (i < chunk.length) {
	      result = chunk.charAt(i)
	    }
	    return result
	  }

	  function write (chunk) {
	    var parser = this
	    if (this.error) {
	      throw this.error
	    }
	    if (parser.closed) {
	      return error(parser,
	        'Cannot write after close. Assign an onready handler.')
	    }
	    if (chunk === null) {
	      return end(parser)
	    }
	    if (typeof chunk === 'object') {
	      chunk = chunk.toString()
	    }
	    var i = 0
	    var c = ''
	    while (true) {
	      c = charAt(chunk, i++)
	      parser.c = c
	      if (!c) {
	        break
	      }
	      if (parser.trackPosition) {
	        parser.position++
	        if (c === '\n') {
	          parser.line++
	          parser.column = 0
	        } else {
	          parser.column++
	        }
	      }
	      switch (parser.state) {
	        case S.BEGIN:
	          parser.state = S.BEGIN_WHITESPACE
	          if (c === '\uFEFF') {
	            continue
	          }
	          beginWhiteSpace(parser, c)
	          continue

	        case S.BEGIN_WHITESPACE:
	          beginWhiteSpace(parser, c)
	          continue

	        case S.TEXT:
	          if (parser.sawRoot && !parser.closedRoot) {
	            var starti = i - 1
	            while (c && c !== '<' && c !== '&') {
	              c = charAt(chunk, i++)
	              if (c && parser.trackPosition) {
	                parser.position++
	                if (c === '\n') {
	                  parser.line++
	                  parser.column = 0
	                } else {
	                  parser.column++
	                }
	              }
	            }
	            parser.textNode += chunk.substring(starti, i - 1)
	          }
	          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
	            parser.state = S.OPEN_WAKA
	            parser.startTagPosition = parser.position
	          } else {
	            if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot)) {
	              strictFail(parser, 'Text data outside of root node.')
	            }
	            if (c === '&') {
	              parser.state = S.TEXT_ENTITY
	            } else {
	              parser.textNode += c
	            }
	          }
	          continue

	        case S.SCRIPT:
	          // only non-strict
	          if (c === '<') {
	            parser.state = S.SCRIPT_ENDING
	          } else {
	            parser.script += c
	          }
	          continue

	        case S.SCRIPT_ENDING:
	          if (c === '/') {
	            parser.state = S.CLOSE_TAG
	          } else {
	            parser.script += '<' + c
	            parser.state = S.SCRIPT
	          }
	          continue

	        case S.OPEN_WAKA:
	          // either a /, ?, !, or text is coming next.
	          if (c === '!') {
	            parser.state = S.SGML_DECL
	            parser.sgmlDecl = ''
	          } else if (is(whitespace, c)) {
	            // wait for it...
	          } else if (is(nameStart, c)) {
	            parser.state = S.OPEN_TAG
	            parser.tagName = c
	          } else if (c === '/') {
	            parser.state = S.CLOSE_TAG
	            parser.tagName = ''
	          } else if (c === '?') {
	            parser.state = S.PROC_INST
	            parser.procInstName = parser.procInstBody = ''
	          } else {
	            strictFail(parser, 'Unencoded <')
	            // if there was some whitespace, then add that in.
	            if (parser.startTagPosition + 1 < parser.position) {
	              var pad = parser.position - parser.startTagPosition
	              c = new Array(pad).join(' ') + c
	            }
	            parser.textNode += '<' + c
	            parser.state = S.TEXT
	          }
	          continue

	        case S.SGML_DECL:
	          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
	            emitNode(parser, 'onopencdata')
	            parser.state = S.CDATA
	            parser.sgmlDecl = ''
	            parser.cdata = ''
	          } else if (parser.sgmlDecl + c === '--') {
	            parser.state = S.COMMENT
	            parser.comment = ''
	            parser.sgmlDecl = ''
	          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
	            parser.state = S.DOCTYPE
	            if (parser.doctype || parser.sawRoot) {
	              strictFail(parser,
	                'Inappropriately located doctype declaration')
	            }
	            parser.doctype = ''
	            parser.sgmlDecl = ''
	          } else if (c === '>') {
	            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)
	            parser.sgmlDecl = ''
	            parser.state = S.TEXT
	          } else if (is(quote, c)) {
	            parser.state = S.SGML_DECL_QUOTED
	            parser.sgmlDecl += c
	          } else {
	            parser.sgmlDecl += c
	          }
	          continue

	        case S.SGML_DECL_QUOTED:
	          if (c === parser.q) {
	            parser.state = S.SGML_DECL
	            parser.q = ''
	          }
	          parser.sgmlDecl += c
	          continue

	        case S.DOCTYPE:
	          if (c === '>') {
	            parser.state = S.TEXT
	            emitNode(parser, 'ondoctype', parser.doctype)
	            parser.doctype = true // just remember that we saw it.
	          } else {
	            parser.doctype += c
	            if (c === '[') {
	              parser.state = S.DOCTYPE_DTD
	            } else if (is(quote, c)) {
	              parser.state = S.DOCTYPE_QUOTED
	              parser.q = c
	            }
	          }
	          continue

	        case S.DOCTYPE_QUOTED:
	          parser.doctype += c
	          if (c === parser.q) {
	            parser.q = ''
	            parser.state = S.DOCTYPE
	          }
	          continue

	        case S.DOCTYPE_DTD:
	          parser.doctype += c
	          if (c === ']') {
	            parser.state = S.DOCTYPE
	          } else if (is(quote, c)) {
	            parser.state = S.DOCTYPE_DTD_QUOTED
	            parser.q = c
	          }
	          continue

	        case S.DOCTYPE_DTD_QUOTED:
	          parser.doctype += c
	          if (c === parser.q) {
	            parser.state = S.DOCTYPE_DTD
	            parser.q = ''
	          }
	          continue

	        case S.COMMENT:
	          if (c === '-') {
	            parser.state = S.COMMENT_ENDING
	          } else {
	            parser.comment += c
	          }
	          continue

	        case S.COMMENT_ENDING:
	          if (c === '-') {
	            parser.state = S.COMMENT_ENDED
	            parser.comment = textopts(parser.opt, parser.comment)
	            if (parser.comment) {
	              emitNode(parser, 'oncomment', parser.comment)
	            }
	            parser.comment = ''
	          } else {
	            parser.comment += '-' + c
	            parser.state = S.COMMENT
	          }
	          continue

	        case S.COMMENT_ENDED:
	          if (c !== '>') {
	            strictFail(parser, 'Malformed comment')
	            // allow <!-- blah -- bloo --> in non-strict mode,
	            // which is a comment of " blah -- bloo "
	            parser.comment += '--' + c
	            parser.state = S.COMMENT
	          } else {
	            parser.state = S.TEXT
	          }
	          continue

	        case S.CDATA:
	          if (c === ']') {
	            parser.state = S.CDATA_ENDING
	          } else {
	            parser.cdata += c
	          }
	          continue

	        case S.CDATA_ENDING:
	          if (c === ']') {
	            parser.state = S.CDATA_ENDING_2
	          } else {
	            parser.cdata += ']' + c
	            parser.state = S.CDATA
	          }
	          continue

	        case S.CDATA_ENDING_2:
	          if (c === '>') {
	            if (parser.cdata) {
	              emitNode(parser, 'oncdata', parser.cdata)
	            }
	            emitNode(parser, 'onclosecdata')
	            parser.cdata = ''
	            parser.state = S.TEXT
	          } else if (c === ']') {
	            parser.cdata += ']'
	          } else {
	            parser.cdata += ']]' + c
	            parser.state = S.CDATA
	          }
	          continue

	        case S.PROC_INST:
	          if (c === '?') {
	            parser.state = S.PROC_INST_ENDING
	          } else if (is(whitespace, c)) {
	            parser.state = S.PROC_INST_BODY
	          } else {
	            parser.procInstName += c
	          }
	          continue

	        case S.PROC_INST_BODY:
	          if (!parser.procInstBody && is(whitespace, c)) {
	            continue
	          } else if (c === '?') {
	            parser.state = S.PROC_INST_ENDING
	          } else {
	            parser.procInstBody += c
	          }
	          continue

	        case S.PROC_INST_ENDING:
	          if (c === '>') {
	            emitNode(parser, 'onprocessinginstruction', {
	              name: parser.procInstName,
	              body: parser.procInstBody
	            })
	            parser.procInstName = parser.procInstBody = ''
	            parser.state = S.TEXT
	          } else {
	            parser.procInstBody += '?' + c
	            parser.state = S.PROC_INST_BODY
	          }
	          continue

	        case S.OPEN_TAG:
	          if (is(nameBody, c)) {
	            parser.tagName += c
	          } else {
	            newTag(parser)
	            if (c === '>') {
	              openTag(parser)
	            } else if (c === '/') {
	              parser.state = S.OPEN_TAG_SLASH
	            } else {
	              if (not(whitespace, c)) {
	                strictFail(parser, 'Invalid character in tag name')
	              }
	              parser.state = S.ATTRIB
	            }
	          }
	          continue

	        case S.OPEN_TAG_SLASH:
	          if (c === '>') {
	            openTag(parser, true)
	            closeTag(parser)
	          } else {
	            strictFail(parser, 'Forward-slash in opening tag not followed by >')
	            parser.state = S.ATTRIB
	          }
	          continue

	        case S.ATTRIB:
	          // haven't read the attribute name yet.
	          if (is(whitespace, c)) {
	            continue
	          } else if (c === '>') {
	            openTag(parser)
	          } else if (c === '/') {
	            parser.state = S.OPEN_TAG_SLASH
	          } else if (is(nameStart, c)) {
	            parser.attribName = c
	            parser.attribValue = ''
	            parser.state = S.ATTRIB_NAME
	          } else {
	            strictFail(parser, 'Invalid attribute name')
	          }
	          continue

	        case S.ATTRIB_NAME:
	          if (c === '=') {
	            parser.state = S.ATTRIB_VALUE
	          } else if (c === '>') {
	            strictFail(parser, 'Attribute without value')
	            parser.attribValue = parser.attribName
	            attrib(parser)
	            openTag(parser)
	          } else if (is(whitespace, c)) {
	            parser.state = S.ATTRIB_NAME_SAW_WHITE
	          } else if (is(nameBody, c)) {
	            parser.attribName += c
	          } else {
	            strictFail(parser, 'Invalid attribute name')
	          }
	          continue

	        case S.ATTRIB_NAME_SAW_WHITE:
	          if (c === '=') {
	            parser.state = S.ATTRIB_VALUE
	          } else if (is(whitespace, c)) {
	            continue
	          } else {
	            strictFail(parser, 'Attribute without value')
	            parser.tag.attributes[parser.attribName] = ''
	            parser.attribValue = ''
	            emitNode(parser, 'onattribute', {
	              name: parser.attribName,
	              value: ''
	            })
	            parser.attribName = ''
	            if (c === '>') {
	              openTag(parser)
	            } else if (is(nameStart, c)) {
	              parser.attribName = c
	              parser.state = S.ATTRIB_NAME
	            } else {
	              strictFail(parser, 'Invalid attribute name')
	              parser.state = S.ATTRIB
	            }
	          }
	          continue

	        case S.ATTRIB_VALUE:
	          if (is(whitespace, c)) {
	            continue
	          } else if (is(quote, c)) {
	            parser.q = c
	            parser.state = S.ATTRIB_VALUE_QUOTED
	          } else {
	            strictFail(parser, 'Unquoted attribute value')
	            parser.state = S.ATTRIB_VALUE_UNQUOTED
	            parser.attribValue = c
	          }
	          continue

	        case S.ATTRIB_VALUE_QUOTED:
	          if (c !== parser.q) {
	            if (c === '&') {
	              parser.state = S.ATTRIB_VALUE_ENTITY_Q
	            } else {
	              parser.attribValue += c
	            }
	            continue
	          }
	          attrib(parser)
	          parser.q = ''
	          parser.state = S.ATTRIB_VALUE_CLOSED
	          continue

	        case S.ATTRIB_VALUE_CLOSED:
	          if (is(whitespace, c)) {
	            parser.state = S.ATTRIB
	          } else if (c === '>') {
	            openTag(parser)
	          } else if (c === '/') {
	            parser.state = S.OPEN_TAG_SLASH
	          } else if (is(nameStart, c)) {
	            strictFail(parser, 'No whitespace between attributes')
	            parser.attribName = c
	            parser.attribValue = ''
	            parser.state = S.ATTRIB_NAME
	          } else {
	            strictFail(parser, 'Invalid attribute name')
	          }
	          continue

	        case S.ATTRIB_VALUE_UNQUOTED:
	          if (not(attribEnd, c)) {
	            if (c === '&') {
	              parser.state = S.ATTRIB_VALUE_ENTITY_U
	            } else {
	              parser.attribValue += c
	            }
	            continue
	          }
	          attrib(parser)
	          if (c === '>') {
	            openTag(parser)
	          } else {
	            parser.state = S.ATTRIB
	          }
	          continue

	        case S.CLOSE_TAG:
	          if (!parser.tagName) {
	            if (is(whitespace, c)) {
	              continue
	            } else if (not(nameStart, c)) {
	              if (parser.script) {
	                parser.script += '</' + c
	                parser.state = S.SCRIPT
	              } else {
	                strictFail(parser, 'Invalid tagname in closing tag.')
	              }
	            } else {
	              parser.tagName = c
	            }
	          } else if (c === '>') {
	            closeTag(parser)
	          } else if (is(nameBody, c)) {
	            parser.tagName += c
	          } else if (parser.script) {
	            parser.script += '</' + parser.tagName
	            parser.tagName = ''
	            parser.state = S.SCRIPT
	          } else {
	            if (not(whitespace, c)) {
	              strictFail(parser, 'Invalid tagname in closing tag')
	            }
	            parser.state = S.CLOSE_TAG_SAW_WHITE
	          }
	          continue

	        case S.CLOSE_TAG_SAW_WHITE:
	          if (is(whitespace, c)) {
	            continue
	          }
	          if (c === '>') {
	            closeTag(parser)
	          } else {
	            strictFail(parser, 'Invalid characters in closing tag')
	          }
	          continue

	        case S.TEXT_ENTITY:
	        case S.ATTRIB_VALUE_ENTITY_Q:
	        case S.ATTRIB_VALUE_ENTITY_U:
	          var returnState
	          var buffer
	          switch (parser.state) {
	            case S.TEXT_ENTITY:
	              returnState = S.TEXT
	              buffer = 'textNode'
	              break

	            case S.ATTRIB_VALUE_ENTITY_Q:
	              returnState = S.ATTRIB_VALUE_QUOTED
	              buffer = 'attribValue'
	              break

	            case S.ATTRIB_VALUE_ENTITY_U:
	              returnState = S.ATTRIB_VALUE_UNQUOTED
	              buffer = 'attribValue'
	              break
	          }

	          if (c === ';') {
	            parser[buffer] += parseEntity(parser)
	            parser.entity = ''
	            parser.state = returnState
	          } else if (is(parser.entity.length ? entityBody : entityStart, c)) {
	            parser.entity += c
	          } else {
	            strictFail(parser, 'Invalid character in entity name')
	            parser[buffer] += '&' + parser.entity + c
	            parser.entity = ''
	            parser.state = returnState
	          }

	          continue

	        default:
	          throw new Error(parser, 'Unknown state: ' + parser.state)
	      }
	    } // while

	    if (parser.position >= parser.bufferCheckPosition) {
	      checkBufferLength(parser)
	    }
	    return parser
	  }

	  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
	  if (!String.fromCodePoint) {
	    (function () {
	      var stringFromCharCode = String.fromCharCode
	      var floor = Math.floor
	      var fromCodePoint = function () {
	        var MAX_SIZE = 0x4000
	        var codeUnits = []
	        var highSurrogate
	        var lowSurrogate
	        var index = -1
	        var length = arguments.length
	        if (!length) {
	          return ''
	        }
	        var result = ''
	        while (++index < length) {
	          var codePoint = Number(arguments[index])
	          if (
	            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
	            codePoint < 0 || // not a valid Unicode code point
	            codePoint > 0x10FFFF || // not a valid Unicode code point
	            floor(codePoint) !== codePoint // not an integer
	          ) {
	            throw RangeError('Invalid code point: ' + codePoint)
	          }
	          if (codePoint <= 0xFFFF) { // BMP code point
	            codeUnits.push(codePoint)
	          } else { // Astral code point; split in surrogate halves
	            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	            codePoint -= 0x10000
	            highSurrogate = (codePoint >> 10) + 0xD800
	            lowSurrogate = (codePoint % 0x400) + 0xDC00
	            codeUnits.push(highSurrogate, lowSurrogate)
	          }
	          if (index + 1 === length || codeUnits.length > MAX_SIZE) {
	            result += stringFromCharCode.apply(null, codeUnits)
	            codeUnits.length = 0
	          }
	        }
	        return result
	      }
	      if (Object.defineProperty) {
	        Object.defineProperty(String, 'fromCodePoint', {
	          value: fromCodePoint,
	          configurable: true,
	          writable: true
	        })
	      } else {
	        String.fromCodePoint = fromCodePoint
	      }
	    }())
	  }
	})( false ? this.sax = {} : exports)

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82).Buffer))

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(83)
	var ieee754 = __webpack_require__(84)
	var isArray = __webpack_require__(85)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 83 */
/***/ (function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	// Support decoding URL-safe base64 strings, as Node.js does.
	// See: https://en.wikipedia.org/wiki/Base64#URL_applications
	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function getLens (b64) {
	  var len = b64.length

	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // Trim off extra bytes after placeholder bytes are found
	  // See: https://github.com/beatgammit/base64-js/issues/42
	  var validLen = b64.indexOf('=')
	  if (validLen === -1) validLen = len

	  var placeHoldersLen = validLen === len
	    ? 0
	    : 4 - (validLen % 4)

	  return [validLen, placeHoldersLen]
	}

	// base64 is 4/3 + up to two characters of the original data
	function byteLength (b64) {
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function _byteLength (b64, validLen, placeHoldersLen) {
	  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
	}

	function toByteArray (b64) {
	  var tmp
	  var lens = getLens(b64)
	  var validLen = lens[0]
	  var placeHoldersLen = lens[1]

	  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

	  var curByte = 0

	  // if there are placeholders, only get up to the last complete 4 chars
	  var len = placeHoldersLen > 0
	    ? validLen - 4
	    : validLen

	  var i
	  for (i = 0; i < len; i += 4) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 18) |
	      (revLookup[b64.charCodeAt(i + 1)] << 12) |
	      (revLookup[b64.charCodeAt(i + 2)] << 6) |
	      revLookup[b64.charCodeAt(i + 3)]
	    arr[curByte++] = (tmp >> 16) & 0xFF
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }

	  if (placeHoldersLen === 2) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 2) |
	      (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[curByte++] = tmp & 0xFF
	  }

	  if (placeHoldersLen === 1) {
	    tmp =
	      (revLookup[b64.charCodeAt(i)] << 10) |
	      (revLookup[b64.charCodeAt(i + 1)] << 4) |
	      (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[curByte++] = (tmp >> 8) & 0xFF
	    arr[curByte++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] +
	    lookup[num >> 12 & 0x3F] +
	    lookup[num >> 6 & 0x3F] +
	    lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp =
	      ((uint8[i] << 16) & 0xFF0000) +
	      ((uint8[i + 1] << 8) & 0xFF00) +
	      (uint8[i + 2] & 0xFF)
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(
	      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
	    ))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 2] +
	      lookup[(tmp << 4) & 0x3F] +
	      '=='
	    )
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
	    parts.push(
	      lookup[tmp >> 10] +
	      lookup[(tmp >> 4) & 0x3F] +
	      lookup[(tmp << 2) & 0x3F] +
	      '='
	    )
	  }

	  return parts.join('')
	}


/***/ }),
/* 84 */
/***/ (function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = (nBytes * 8) - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = ((value * c) - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ }),
/* 85 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(87).EventEmitter;
	var inherits = __webpack_require__(88);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(89);
	Stream.Writable = __webpack_require__(110);
	Stream.Duplex = __webpack_require__(111);
	Stream.Transform = __webpack_require__(112);
	Stream.PassThrough = __webpack_require__(113);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ }),
/* 87 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        len = arguments.length;
	        args = new Array(len - 1);
	        for (i = 1; i < len; i++)
	          args[i - 1] = arguments[i];
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    len = arguments.length;
	    args = new Array(len - 1);
	    for (i = 1; i < len; i++)
	      args[i - 1] = arguments[i];

	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    var m;
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  var ret;
	  if (!emitter._events || !emitter._events[type])
	    ret = 0;
	  else if (isFunction(emitter._events[type]))
	    ret = 1;
	  else
	    ret = emitter._events[type].length;
	  return ret;
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ }),
/* 88 */
/***/ (function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor
	      ctor.prototype = Object.create(superCtor.prototype, {
	        constructor: {
	          value: ctor,
	          enumerable: false,
	          writable: true,
	          configurable: true
	        }
	      })
	    }
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    if (superCtor) {
	      ctor.super_ = superCtor
	      var TempCtor = function () {}
	      TempCtor.prototype = superCtor.prototype
	      ctor.prototype = new TempCtor()
	      ctor.prototype.constructor = ctor
	    }
	  }
	}


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(90);
	exports.Stream = exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(103);
	exports.Duplex = __webpack_require__(102);
	exports.Transform = __webpack_require__(108);
	exports.PassThrough = __webpack_require__(109);


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	/*<replacement>*/

	var pna = __webpack_require__(92);
	/*</replacement>*/

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(85);
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	/*<replacement>*/
	var EE = __webpack_require__(87).EventEmitter;

	var EElistenerCount = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream = __webpack_require__(93);
	/*</replacement>*/

	/*<replacement>*/

	var Buffer = __webpack_require__(94).Buffer;
	var OurUint8Array = global.Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}

	/*</replacement>*/

	/*<replacement>*/
	var util = __webpack_require__(97);
	util.inherits = __webpack_require__(88);
	/*</replacement>*/

	/*<replacement>*/
	var debugUtil = __webpack_require__(98);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/

	var BufferList = __webpack_require__(99);
	var destroyImpl = __webpack_require__(101);
	var StringDecoder;

	util.inherits(Readable, Stream);

	var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

	  // This is a hack to make sure that our error handler is attached before any
	  // userland ones.  NEVER DO THIS. This is here only because this code needs
	  // to continue to work with older versions of Node.js that do not include
	  // the prependListener() method. The goal is to eventually remove this hack.
	  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	}

	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(102);

	  options = options || {};

	  // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream.
	  // These options can be provided separately as readableXXX and writableXXX.
	  var isDuplex = stream instanceof Duplex;

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var readableHwm = options.readableHighWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

	  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

	  // cast to ints.
	  this.highWaterMark = Math.floor(this.highWaterMark);

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the event 'readable'/'data' is emitted
	  // immediately, or on a later tick.  We set this to true at first, because
	  // any actions that shouldn't happen until "later" should generally also
	  // not happen before the first read call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // has it been destroyed
	  this.destroyed = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(107).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(102);

	  if (!(this instanceof Readable)) return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options) {
	    if (typeof options.read === 'function') this._read = options.read;

	    if (typeof options.destroy === 'function') this._destroy = options.destroy;
	  }

	  Stream.call(this);
	}

	Object.defineProperty(Readable.prototype, 'destroyed', {
	  get: function () {
	    if (this._readableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed;
	  },
	  set: function (value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._readableState) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._readableState.destroyed = value;
	  }
	});

	Readable.prototype.destroy = destroyImpl.destroy;
	Readable.prototype._undestroy = destroyImpl.undestroy;
	Readable.prototype._destroy = function (err, cb) {
	  this.push(null);
	  cb(err);
	};

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	  var skipChunkCheck;

	  if (!state.objectMode) {
	    if (typeof chunk === 'string') {
	      encoding = encoding || state.defaultEncoding;
	      if (encoding !== state.encoding) {
	        chunk = Buffer.from(chunk, encoding);
	        encoding = '';
	      }
	      skipChunkCheck = true;
	    }
	  } else {
	    skipChunkCheck = true;
	  }

	  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  return readableAddChunk(this, chunk, null, true, false);
	};

	function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
	  var state = stream._readableState;
	  if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else {
	    var er;
	    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
	    if (er) {
	      stream.emit('error', er);
	    } else if (state.objectMode || chunk && chunk.length > 0) {
	      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
	        chunk = _uint8ArrayToBuffer(chunk);
	      }

	      if (addToFront) {
	        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
	      } else if (state.ended) {
	        stream.emit('error', new Error('stream.push() after EOF'));
	      } else {
	        state.reading = false;
	        if (state.decoder && !encoding) {
	          chunk = state.decoder.write(chunk);
	          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
	        } else {
	          addChunk(stream, state, chunk, false);
	        }
	      }
	    } else if (!addToFront) {
	      state.reading = false;
	    }
	  }

	  return needMoreData(state);
	}

	function addChunk(stream, state, chunk, addToFront) {
	  if (state.flowing && state.length === 0 && !state.sync) {
	    stream.emit('data', chunk);
	    stream.read(0);
	  } else {
	    // update the buffer info.
	    state.length += state.objectMode ? 1 : chunk.length;
	    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	    if (state.needReadable) emitReadable(stream);
	  }
	  maybeReadMore(stream, state);
	}

	function chunkInvalid(state, chunk) {
	  var er;
	  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(107).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    pna.nextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('_read() is not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

	  var endFn = doEnd ? onend : unpipe;
	  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable, unpipeInfo) {
	    debug('onunpipe');
	    if (readable === src) {
	      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
	        unpipeInfo.hasUnpiped = true;
	        cleanup();
	      }
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', unpipe);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	  var unpipeInfo = { hasUnpiped: false };

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this, unpipeInfo);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this, unpipeInfo);
	    }return this;
	  }

	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;

	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this, unpipeInfo);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        pna.nextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    pna.nextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var _this = this;

	  var state = this._readableState;
	  var paused = false;

	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) _this.push(chunk);
	    }

	    _this.push(null);
	  });

	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = _this.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  for (var n = 0; n < kProxyEvents.length; n++) {
	    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
	  }

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  this._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return this;
	};

	Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function () {
	    return this._readableState.highWaterMark;
	  }
	});

	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = Buffer.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    pna.nextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(91)))

/***/ }),
/* 91 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	if (typeof process === 'undefined' ||
	    !process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = { nextTick: nextTick };
	} else {
	  module.exports = process
	}

	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(91)))

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(87).EventEmitter;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

	/* eslint-disable node/no-deprecated-api */
	var buffer = __webpack_require__(95)
	var Buffer = buffer.Buffer

	// alternative to using Object.keys for old browsers
	function copyProps (src, dst) {
	  for (var key in src) {
	    dst[key] = src[key]
	  }
	}
	if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
	  module.exports = buffer
	} else {
	  // Copy properties from require('buffer')
	  copyProps(buffer, exports)
	  exports.Buffer = SafeBuffer
	}

	function SafeBuffer (arg, encodingOrOffset, length) {
	  return Buffer(arg, encodingOrOffset, length)
	}

	// Copy static methods from Buffer
	copyProps(Buffer, SafeBuffer)

	SafeBuffer.from = function (arg, encodingOrOffset, length) {
	  if (typeof arg === 'number') {
	    throw new TypeError('Argument must not be a number')
	  }
	  return Buffer(arg, encodingOrOffset, length)
	}

	SafeBuffer.alloc = function (size, fill, encoding) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  var buf = Buffer(size)
	  if (fill !== undefined) {
	    if (typeof encoding === 'string') {
	      buf.fill(fill, encoding)
	    } else {
	      buf.fill(fill)
	    }
	  } else {
	    buf.fill(0)
	  }
	  return buf
	}

	SafeBuffer.allocUnsafe = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return Buffer(size)
	}

	SafeBuffer.allocUnsafeSlow = function (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('Argument must be a number')
	  }
	  return buffer.SlowBuffer(size)
	}


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(96)
	var ieee754 = __webpack_require__(84)
	var isArray = __webpack_require__(85)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
	 *     on objects.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	function typedArraySupport () {
	  function Bar () {}
	  try {
	    var arr = new Uint8Array(1)
	    arr.foo = function () { return 42 }
	    arr.constructor = Bar
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Bar && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    this.length = 0
	    this.parent = undefined
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined') {
	    if (object.buffer instanceof ArrayBuffer) {
	      return fromTypedArray(that, object)
	    }
	    if (object instanceof ArrayBuffer) {
	      return fromArrayBuffer(that, object)
	    }
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    array.byteLength
	    that = Buffer._augment(new Uint8Array(array))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromTypedArray(that, new Uint8Array(array))
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	} else {
	  // pre-set for values that may exist in the future
	  Buffer.prototype.length = undefined
	  Buffer.prototype.parent = undefined
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` is deprecated
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` is deprecated
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82).Buffer, (function() { return this; }())))

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = Buffer.isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(82).Buffer))

/***/ }),
/* 98 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Buffer = __webpack_require__(94).Buffer;
	var util = __webpack_require__(100);

	function copyBuffer(src, target, offset) {
	  src.copy(target, offset);
	}

	module.exports = function () {
	  function BufferList() {
	    _classCallCheck(this, BufferList);

	    this.head = null;
	    this.tail = null;
	    this.length = 0;
	  }

	  BufferList.prototype.push = function push(v) {
	    var entry = { data: v, next: null };
	    if (this.length > 0) this.tail.next = entry;else this.head = entry;
	    this.tail = entry;
	    ++this.length;
	  };

	  BufferList.prototype.unshift = function unshift(v) {
	    var entry = { data: v, next: this.head };
	    if (this.length === 0) this.tail = entry;
	    this.head = entry;
	    ++this.length;
	  };

	  BufferList.prototype.shift = function shift() {
	    if (this.length === 0) return;
	    var ret = this.head.data;
	    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	    --this.length;
	    return ret;
	  };

	  BufferList.prototype.clear = function clear() {
	    this.head = this.tail = null;
	    this.length = 0;
	  };

	  BufferList.prototype.join = function join(s) {
	    if (this.length === 0) return '';
	    var p = this.head;
	    var ret = '' + p.data;
	    while (p = p.next) {
	      ret += s + p.data;
	    }return ret;
	  };

	  BufferList.prototype.concat = function concat(n) {
	    if (this.length === 0) return Buffer.alloc(0);
	    if (this.length === 1) return this.head.data;
	    var ret = Buffer.allocUnsafe(n >>> 0);
	    var p = this.head;
	    var i = 0;
	    while (p) {
	      copyBuffer(p.data, ret, i);
	      i += p.data.length;
	      p = p.next;
	    }
	    return ret;
	  };

	  return BufferList;
	}();

	if (util && util.inspect && util.inspect.custom) {
	  module.exports.prototype[util.inspect.custom] = function () {
	    var obj = util.inspect({ length: this.length });
	    return this.constructor.name + ' ' + obj;
	  };
	}

/***/ }),
/* 100 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	/*<replacement>*/

	var pna = __webpack_require__(92);
	/*</replacement>*/

	// undocumented cb() API, needed for core, not for public API
	function destroy(err, cb) {
	  var _this = this;

	  var readableDestroyed = this._readableState && this._readableState.destroyed;
	  var writableDestroyed = this._writableState && this._writableState.destroyed;

	  if (readableDestroyed || writableDestroyed) {
	    if (cb) {
	      cb(err);
	    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
	      pna.nextTick(emitErrorNT, this, err);
	    }
	    return this;
	  }

	  // we set destroyed to true before firing error callbacks in order
	  // to make it re-entrance safe in case destroy() is called within callbacks

	  if (this._readableState) {
	    this._readableState.destroyed = true;
	  }

	  // if this is a duplex stream mark the writable part as destroyed as well
	  if (this._writableState) {
	    this._writableState.destroyed = true;
	  }

	  this._destroy(err || null, function (err) {
	    if (!cb && err) {
	      pna.nextTick(emitErrorNT, _this, err);
	      if (_this._writableState) {
	        _this._writableState.errorEmitted = true;
	      }
	    } else if (cb) {
	      cb(err);
	    }
	  });

	  return this;
	}

	function undestroy() {
	  if (this._readableState) {
	    this._readableState.destroyed = false;
	    this._readableState.reading = false;
	    this._readableState.ended = false;
	    this._readableState.endEmitted = false;
	  }

	  if (this._writableState) {
	    this._writableState.destroyed = false;
	    this._writableState.ended = false;
	    this._writableState.ending = false;
	    this._writableState.finished = false;
	    this._writableState.errorEmitted = false;
	  }
	}

	function emitErrorNT(self, err) {
	  self.emit('error', err);
	}

	module.exports = {
	  destroy: destroy,
	  undestroy: undestroy
	};

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	'use strict';

	/*<replacement>*/

	var pna = __webpack_require__(92);
	/*</replacement>*/

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/

	module.exports = Duplex;

	/*<replacement>*/
	var util = __webpack_require__(97);
	util.inherits = __webpack_require__(88);
	/*</replacement>*/

	var Readable = __webpack_require__(90);
	var Writable = __webpack_require__(103);

	util.inherits(Duplex, Readable);

	{
	  // avoid scope creep, the keys array can then be collected
	  var keys = objectKeys(Writable.prototype);
	  for (var v = 0; v < keys.length; v++) {
	    var method = keys[v];
	    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	  }
	}

	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function () {
	    return this._writableState.highWaterMark;
	  }
	});

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  pna.nextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	Object.defineProperty(Duplex.prototype, 'destroyed', {
	  get: function () {
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return false;
	    }
	    return this._readableState.destroyed && this._writableState.destroyed;
	  },
	  set: function (value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (this._readableState === undefined || this._writableState === undefined) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._readableState.destroyed = value;
	    this._writableState.destroyed = value;
	  }
	});

	Duplex.prototype._destroy = function (err, cb) {
	  this.push(null);
	  this.end();

	  pna.nextTick(cb, err);
	};

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate, global) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.

	'use strict';

	/*<replacement>*/

	var pna = __webpack_require__(92);
	/*</replacement>*/

	module.exports = Writable;

	/* <replacement> */
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;
	  this.finish = function () {
	    onCorkedFinish(_this, state);
	  };
	}
	/* </replacement> */

	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
	/*</replacement>*/

	/*<replacement>*/
	var Duplex;
	/*</replacement>*/

	Writable.WritableState = WritableState;

	/*<replacement>*/
	var util = __webpack_require__(97);
	util.inherits = __webpack_require__(88);
	/*</replacement>*/

	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(106)
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream = __webpack_require__(93);
	/*</replacement>*/

	/*<replacement>*/

	var Buffer = __webpack_require__(94).Buffer;
	var OurUint8Array = global.Uint8Array || function () {};
	function _uint8ArrayToBuffer(chunk) {
	  return Buffer.from(chunk);
	}
	function _isUint8Array(obj) {
	  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
	}

	/*</replacement>*/

	var destroyImpl = __webpack_require__(101);

	util.inherits(Writable, Stream);

	function nop() {}

	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(102);

	  options = options || {};

	  // Duplex streams are both readable and writable, but share
	  // the same options object.
	  // However, some cases require setting options to different
	  // values for the readable and the writable sides of the duplex stream.
	  // These options can be provided separately as readableXXX and writableXXX.
	  var isDuplex = stream instanceof Duplex;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var writableHwm = options.writableHighWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

	  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;

	  // cast to ints.
	  this.highWaterMark = Math.floor(this.highWaterMark);

	  // if _final has been called
	  this.finalCalled = false;

	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // has it been destroyed
	  this.destroyed = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};

	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
	    });
	  } catch (_) {}
	})();

	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function (object) {
	      if (realHasInstance.call(this, object)) return true;
	      if (this !== Writable) return false;

	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function (object) {
	    return object instanceof this;
	  };
	}

	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(102);

	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.

	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
	    return new Writable(options);
	  }

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;

	    if (typeof options.destroy === 'function') this._destroy = options.destroy;

	    if (typeof options.final === 'function') this._final = options.final;
	  }

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  pna.nextTick(cb, er);
	}

	// Checks that a user-supplied chunk is valid, especially for the particular
	// mode the stream is in. Currently this means that `null` is never accepted
	// and undefined/non-string values are only allowed in object mode.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;

	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    pna.nextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	  var isBuf = !state.objectMode && _isUint8Array(chunk);

	  if (isBuf && !Buffer.isBuffer(chunk)) {
	    chunk = _uint8ArrayToBuffer(chunk);
	  }

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop;

	  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = Buffer.from(chunk, encoding);
	  }
	  return chunk;
	}

	Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
	  // making it explicit this property is not enumerable
	  // because otherwise some prototype manipulation in
	  // userland will fail
	  enumerable: false,
	  get: function () {
	    return this._writableState.highWaterMark;
	  }
	});

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
	  if (!isBuf) {
	    var newChunk = decodeChunk(state, chunk, encoding);
	    if (chunk !== newChunk) {
	      isBuf = true;
	      encoding = 'buffer';
	      chunk = newChunk;
	    }
	  }
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = {
	      chunk: chunk,
	      encoding: encoding,
	      isBuf: isBuf,
	      callback: cb,
	      next: null
	    };
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;

	  if (sync) {
	    // defer the callback if we are being called synchronously
	    // to avoid piling up things on the stack
	    pna.nextTick(cb, er);
	    // this can emit finish, and it will always happen
	    // after error
	    pna.nextTick(finishMaybe, stream, state);
	    stream._writableState.errorEmitted = true;
	    stream.emit('error', er);
	  } else {
	    // the caller expect this to happen before if
	    // it is async
	    cb(er);
	    stream._writableState.errorEmitted = true;
	    stream.emit('error', er);
	    // this can emit finish, but finish must
	    // always follow error
	    finishMaybe(stream, state);
	  }
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    var allBuffers = true;
	    while (entry) {
	      buffer[count] = entry;
	      if (!entry.isBuf) allBuffers = false;
	      entry = entry.next;
	      count += 1;
	    }
	    buffer.allBuffers = allBuffers;

	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	    state.bufferedRequestCount = 0;
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      state.bufferedRequestCount--;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('_write() is not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	function callFinal(stream, state) {
	  stream._final(function (err) {
	    state.pendingcb--;
	    if (err) {
	      stream.emit('error', err);
	    }
	    state.prefinished = true;
	    stream.emit('prefinish');
	    finishMaybe(stream, state);
	  });
	}
	function prefinish(stream, state) {
	  if (!state.prefinished && !state.finalCalled) {
	    if (typeof stream._final === 'function') {
	      state.pendingcb++;
	      state.finalCalled = true;
	      pna.nextTick(callFinal, stream, state);
	    } else {
	      state.prefinished = true;
	      stream.emit('prefinish');
	    }
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    prefinish(stream, state);
	    if (state.pendingcb === 0) {
	      state.finished = true;
	      stream.emit('finish');
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	function onCorkedFinish(corkReq, state, err) {
	  var entry = corkReq.entry;
	  corkReq.entry = null;
	  while (entry) {
	    var cb = entry.callback;
	    state.pendingcb--;
	    cb(err);
	    entry = entry.next;
	  }
	  if (state.corkedRequestsFree) {
	    state.corkedRequestsFree.next = corkReq;
	  } else {
	    state.corkedRequestsFree = corkReq;
	  }
	}

	Object.defineProperty(Writable.prototype, 'destroyed', {
	  get: function () {
	    if (this._writableState === undefined) {
	      return false;
	    }
	    return this._writableState.destroyed;
	  },
	  set: function (value) {
	    // we ignore the value if the stream
	    // has not been initialized yet
	    if (!this._writableState) {
	      return;
	    }

	    // backward compatibility, the user is explicitly
	    // managing destroyed
	    this._writableState.destroyed = value;
	  }
	});

	Writable.prototype.destroy = destroyImpl.destroy;
	Writable.prototype._undestroy = destroyImpl.undestroy;
	Writable.prototype._destroy = function (err, cb) {
	  this.end();
	  cb(err);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(91), __webpack_require__(104).setImmediate, (function() { return this; }())))

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
	            (typeof self !== "undefined" && self) ||
	            window;
	var apply = Function.prototype.apply;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) {
	  if (timeout) {
	    timeout.close();
	  }
	};

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(scope, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// setimmediate attaches itself to the global object
	__webpack_require__(105);
	// On some exotic environments, it's not clear which object `setimmediate` was
	// able to install onto.  Search each possibility in the same order as the
	// `setimmediate` library.
	exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
	                       (typeof global !== "undefined" && global.setImmediate) ||
	                       (this && this.setImmediate);
	exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
	                         (typeof global !== "undefined" && global.clearImmediate) ||
	                         (this && this.clearImmediate);

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
	    "use strict";

	    if (global.setImmediate) {
	        return;
	    }

	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;

	    function setImmediate(callback) {
	      // Callback can either be a function or a string
	      if (typeof callback !== "function") {
	        callback = new Function("" + callback);
	      }
	      // Copy function arguments
	      var args = new Array(arguments.length - 1);
	      for (var i = 0; i < args.length; i++) {
	          args[i] = arguments[i + 1];
	      }
	      // Store and register the task
	      var task = { callback: callback, args: args };
	      tasksByHandle[nextHandle] = task;
	      registerImmediate(nextHandle);
	      return nextHandle++;
	    }

	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }

	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	        case 0:
	            callback();
	            break;
	        case 1:
	            callback(args[0]);
	            break;
	        case 2:
	            callback(args[0], args[1]);
	            break;
	        case 3:
	            callback(args[0], args[1], args[2]);
	            break;
	        default:
	            callback.apply(undefined, args);
	            break;
	        }
	    }

	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }

	    function installNextTickImplementation() {
	        registerImmediate = function(handle) {
	            process.nextTick(function () { runIfPresent(handle); });
	        };
	    }

	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }

	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };

	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }

	        registerImmediate = function(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }

	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };

	        registerImmediate = function(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }

	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }

	    function installSetTimeoutImplementation() {
	        registerImmediate = function(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }

	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();

	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();

	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();

	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();

	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }

	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(91)))

/***/ }),
/* 106 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */

	module.exports = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	/*<replacement>*/

	var Buffer = __webpack_require__(94).Buffer;
	/*</replacement>*/

	var isEncoding = Buffer.isEncoding || function (encoding) {
	  encoding = '' + encoding;
	  switch (encoding && encoding.toLowerCase()) {
	    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
	      return true;
	    default:
	      return false;
	  }
	};

	function _normalizeEncoding(enc) {
	  if (!enc) return 'utf8';
	  var retried;
	  while (true) {
	    switch (enc) {
	      case 'utf8':
	      case 'utf-8':
	        return 'utf8';
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return 'utf16le';
	      case 'latin1':
	      case 'binary':
	        return 'latin1';
	      case 'base64':
	      case 'ascii':
	      case 'hex':
	        return enc;
	      default:
	        if (retried) return; // undefined
	        enc = ('' + enc).toLowerCase();
	        retried = true;
	    }
	  }
	};

	// Do not cache `Buffer.isEncoding` when checking encoding names as some
	// modules monkey-patch it to support additional encodings
	function normalizeEncoding(enc) {
	  var nenc = _normalizeEncoding(enc);
	  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
	  return nenc || enc;
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters.
	exports.StringDecoder = StringDecoder;
	function StringDecoder(encoding) {
	  this.encoding = normalizeEncoding(encoding);
	  var nb;
	  switch (this.encoding) {
	    case 'utf16le':
	      this.text = utf16Text;
	      this.end = utf16End;
	      nb = 4;
	      break;
	    case 'utf8':
	      this.fillLast = utf8FillLast;
	      nb = 4;
	      break;
	    case 'base64':
	      this.text = base64Text;
	      this.end = base64End;
	      nb = 3;
	      break;
	    default:
	      this.write = simpleWrite;
	      this.end = simpleEnd;
	      return;
	  }
	  this.lastNeed = 0;
	  this.lastTotal = 0;
	  this.lastChar = Buffer.allocUnsafe(nb);
	}

	StringDecoder.prototype.write = function (buf) {
	  if (buf.length === 0) return '';
	  var r;
	  var i;
	  if (this.lastNeed) {
	    r = this.fillLast(buf);
	    if (r === undefined) return '';
	    i = this.lastNeed;
	    this.lastNeed = 0;
	  } else {
	    i = 0;
	  }
	  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
	  return r || '';
	};

	StringDecoder.prototype.end = utf8End;

	// Returns only complete characters in a Buffer
	StringDecoder.prototype.text = utf8Text;

	// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
	StringDecoder.prototype.fillLast = function (buf) {
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
	  this.lastNeed -= buf.length;
	};

	// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
	// continuation byte. If an invalid byte is detected, -2 is returned.
	function utf8CheckByte(byte) {
	  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
	  return byte >> 6 === 0x02 ? -1 : -2;
	}

	// Checks at most 3 bytes at the end of a Buffer in order to detect an
	// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
	// needed to complete the UTF-8 character (if applicable) are returned.
	function utf8CheckIncomplete(self, buf, i) {
	  var j = buf.length - 1;
	  if (j < i) return 0;
	  var nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 1;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) self.lastNeed = nb - 2;
	    return nb;
	  }
	  if (--j < i || nb === -2) return 0;
	  nb = utf8CheckByte(buf[j]);
	  if (nb >= 0) {
	    if (nb > 0) {
	      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
	    }
	    return nb;
	  }
	  return 0;
	}

	// Validates as many continuation bytes for a multi-byte UTF-8 character as
	// needed or are available. If we see a non-continuation byte where we expect
	// one, we "replace" the validated continuation bytes we've seen so far with
	// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
	// behavior. The continuation byte check is included three times in the case
	// where all of the continuation bytes for a character exist in the same buffer.
	// It is also done this way as a slight performance increase instead of using a
	// loop.
	function utf8CheckExtraBytes(self, buf, p) {
	  if ((buf[0] & 0xC0) !== 0x80) {
	    self.lastNeed = 0;
	    return '\ufffd';
	  }
	  if (self.lastNeed > 1 && buf.length > 1) {
	    if ((buf[1] & 0xC0) !== 0x80) {
	      self.lastNeed = 1;
	      return '\ufffd';
	    }
	    if (self.lastNeed > 2 && buf.length > 2) {
	      if ((buf[2] & 0xC0) !== 0x80) {
	        self.lastNeed = 2;
	        return '\ufffd';
	      }
	    }
	  }
	}

	// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
	function utf8FillLast(buf) {
	  var p = this.lastTotal - this.lastNeed;
	  var r = utf8CheckExtraBytes(this, buf, p);
	  if (r !== undefined) return r;
	  if (this.lastNeed <= buf.length) {
	    buf.copy(this.lastChar, p, 0, this.lastNeed);
	    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
	  }
	  buf.copy(this.lastChar, p, 0, buf.length);
	  this.lastNeed -= buf.length;
	}

	// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
	// partial character, the character's bytes are buffered until the required
	// number of bytes are available.
	function utf8Text(buf, i) {
	  var total = utf8CheckIncomplete(this, buf, i);
	  if (!this.lastNeed) return buf.toString('utf8', i);
	  this.lastTotal = total;
	  var end = buf.length - (total - this.lastNeed);
	  buf.copy(this.lastChar, 0, end);
	  return buf.toString('utf8', i, end);
	}

	// For UTF-8, a replacement character is added when ending on a partial
	// character.
	function utf8End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + '\ufffd';
	  return r;
	}

	// UTF-16LE typically needs two bytes per character, but even if we have an even
	// number of bytes available, we need to check if we end on a leading/high
	// surrogate. In that case, we need to wait for the next two bytes in order to
	// decode the last character properly.
	function utf16Text(buf, i) {
	  if ((buf.length - i) % 2 === 0) {
	    var r = buf.toString('utf16le', i);
	    if (r) {
	      var c = r.charCodeAt(r.length - 1);
	      if (c >= 0xD800 && c <= 0xDBFF) {
	        this.lastNeed = 2;
	        this.lastTotal = 4;
	        this.lastChar[0] = buf[buf.length - 2];
	        this.lastChar[1] = buf[buf.length - 1];
	        return r.slice(0, -1);
	      }
	    }
	    return r;
	  }
	  this.lastNeed = 1;
	  this.lastTotal = 2;
	  this.lastChar[0] = buf[buf.length - 1];
	  return buf.toString('utf16le', i, buf.length - 1);
	}

	// For UTF-16LE we do not explicitly append special replacement characters if we
	// end on a partial character, we simply let v8 handle that.
	function utf16End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) {
	    var end = this.lastTotal - this.lastNeed;
	    return r + this.lastChar.toString('utf16le', 0, end);
	  }
	  return r;
	}

	function base64Text(buf, i) {
	  var n = (buf.length - i) % 3;
	  if (n === 0) return buf.toString('base64', i);
	  this.lastNeed = 3 - n;
	  this.lastTotal = 3;
	  if (n === 1) {
	    this.lastChar[0] = buf[buf.length - 1];
	  } else {
	    this.lastChar[0] = buf[buf.length - 2];
	    this.lastChar[1] = buf[buf.length - 1];
	  }
	  return buf.toString('base64', i, buf.length - n);
	}

	function base64End(buf) {
	  var r = buf && buf.length ? this.write(buf) : '';
	  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
	  return r;
	}

	// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
	function simpleWrite(buf) {
	  return buf.toString(this.encoding);
	}

	function simpleEnd(buf) {
	  return buf && buf.length ? this.write(buf) : '';
	}

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	'use strict';

	module.exports = Transform;

	var Duplex = __webpack_require__(102);

	/*<replacement>*/
	var util = __webpack_require__(97);
	util.inherits = __webpack_require__(88);
	/*</replacement>*/

	util.inherits(Transform, Duplex);

	function afterTransform(er, data) {
	  var ts = this._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb) {
	    return this.emit('error', new Error('write callback called multiple times'));
	  }

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data != null) // single equals check for both `null` and `undefined`
	    this.push(data);

	  cb(er);

	  var rs = this._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    this._read(rs.highWaterMark);
	  }
	}

	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = {
	    afterTransform: afterTransform.bind(this),
	    needTransform: false,
	    transforming: false,
	    writecb: null,
	    writechunk: null,
	    writeencoding: null
	  };

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;

	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  // When the writable side finishes, then flush out anything remaining.
	  this.on('prefinish', prefinish);
	}

	function prefinish() {
	  var _this = this;

	  if (typeof this._flush === 'function') {
	    this._flush(function (er, data) {
	      done(_this, er, data);
	    });
	  } else {
	    done(this, null, null);
	  }
	}

	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('_transform() is not implemented');
	};

	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	Transform.prototype._destroy = function (err, cb) {
	  var _this2 = this;

	  Duplex.prototype._destroy.call(this, err, function (err2) {
	    cb(err2);
	    _this2.emit('close');
	  });
	};

	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);

	  if (data != null) // single equals check for both `null` and `undefined`
	    stream.push(data);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

	  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

	  return stream.push(null);
	}

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	'use strict';

	module.exports = PassThrough;

	var Transform = __webpack_require__(108);

	/*<replacement>*/
	var util = __webpack_require__(97);
	util.inherits = __webpack_require__(88);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(103);


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(102);


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(89).Transform


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(89).PassThrough


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	/* 
	 * Copyright (c) 2016, Pierre-Anthony Lemieux <pal@sandflow.com>
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * * Redistributions of source code must retain the above copyright notice, this
	 *   list of conditions and the following disclaimer.
	 * * Redistributions in binary form must reproduce the above copyright notice,
	 *   this list of conditions and the following disclaimer in the documentation
	 *   and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
	 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
	 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
	 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
	 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
	 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 * POSSIBILITY OF SUCH DAMAGE.
	 */

	/**
	 * @module imscHTML
	 */

	;
	(function (imscHTML, imscNames, imscStyles) {

	    /**
	     * Function that maps <pre>smpte:background</pre> URIs to URLs resolving to image resource
	     * @callback IMGResolver
	     * @param {string} <pre>smpte:background</pre> URI
	     * @return {string} PNG resource URL
	     */


	    /**
	     * Renders an ISD object (returned by <pre>generateISD()</pre>) into a 
	     * parent element, that must be attached to the DOM. The ISD will be rendered
	     * into a child <pre>div</pre>
	     * with heigh and width equal to the clientHeight and clientWidth of the element,
	     * unless explicitly specified otherwise by the caller. Images URIs specified 
	     * by <pre>smpte:background</pre> attributes are mapped to image resource URLs
	     * by an <pre>imgResolver</pre> function. The latter takes the value of <code>smpte:background</code>
	     * attribute and an <code>img</code> DOM element as input, and is expected to
	     * set the <code>src</code> attribute of the <code>img</code> to the absolute URI of the image.
	     * <pre>displayForcedOnlyMode</pre> sets the (boolean)
	     * value of the IMSC1 displayForcedOnlyMode parameter. The function returns
	     * an opaque object that should passed in <code>previousISDState</code> when this function
	     * is called for the next ISD, otherwise <code>previousISDState</code> should be set to 
	     * <code>null</code>.
	     * 
	     * @param {Object} isd ISD to be rendered
	     * @param {Object} element Element into which the ISD is rendered
	     * @param {?IMGResolver} imgResolver Resolve <pre>smpte:background</pre> URIs into URLs.
	     * @param {?number} eheight Height (in pixel) of the child <div>div</div> or null 
	     *                  to use clientHeight of the parent element
	     * @param {?number} ewidth Width (in pixel) of the child <div>div</div> or null
	     *                  to use clientWidth of the parent element
	     * @param {?boolean} displayForcedOnlyMode Value of the IMSC1 displayForcedOnlyMode parameter,
	     *                   or false if null         
	     * @param {?module:imscUtils.ErrorHandler} errorHandler Error callback
	     * @param {Object} previousISDState State saved during processing of the previous ISD, or null if initial call
	     * @param {?boolean} enableRollUp Enables roll-up animations (see CEA 708)
	     * @return {Object} ISD state to be provided when this funtion is called for the next ISD
	     */

	    imscHTML.render = function (isd,
	            element,
	            imgResolver,
	            eheight,
	            ewidth,
	            displayForcedOnlyMode,
	            errorHandler,
	            previousISDState,
	            enableRollUp
	            ) {

	        /* maintain aspect ratio if specified */

	        var height = eheight || element.clientHeight;
	        var width = ewidth || element.clientWidth;

	        if (isd.aspectRatio !== null) {

	            var twidth = height * isd.aspectRatio;

	            if (twidth > width) {

	                height = Math.round(width / isd.aspectRatio);

	            } else {

	                width = twidth;

	            }

	        }

	        var rootcontainer = document.createElement("div");

	        rootcontainer.style.position = "relative";
	        rootcontainer.style.width = width + "px";
	        rootcontainer.style.height = height + "px";
	        rootcontainer.style.margin = "auto";
	        rootcontainer.style.top = 0;
	        rootcontainer.style.bottom = 0;
	        rootcontainer.style.left = 0;
	        rootcontainer.style.right = 0;
	        rootcontainer.style.zIndex = 0;

	        var context = {
	            h: height,
	            w: width,
	            regionH: null,
	            regionW: null,
	            imgResolver: imgResolver,
	            displayForcedOnlyMode: displayForcedOnlyMode || false,
	            isd: isd,
	            errorHandler: errorHandler,
	            previousISDState: previousISDState,
	            enableRollUp: enableRollUp || false,
	            currentISDState: {},
	            flg: null, /* current fillLineGap value if active, null otherwise */
	            lp: null, /* current linePadding value if active, null otherwise */
	            mra: null, /* current multiRowAlign value if active, null otherwise */
	            ipd: null, /* inline progression direction (lr, rl, tb) */
	            bpd: null, /* block progression direction (lr, rl, tb) */
	            ruby: null, /* is ruby present in a <p> */
	            textEmphasis: null, /* is textEmphasis present in a <p> */
	            rubyReserve: null /* is rubyReserve applicable to a <p> */
	        };

	        element.appendChild(rootcontainer);

	        for (var i in isd.contents) {

	            processElement(context, rootcontainer, isd.contents[i]);

	        }

	        return context.currentISDState;

	    };

	    function processElement(context, dom_parent, isd_element) {

	        var e;

	        if (isd_element.kind === 'region') {

	            e = document.createElement("div");
	            e.style.position = "absolute";

	        } else if (isd_element.kind === 'body') {

	            e = document.createElement("div");

	        } else if (isd_element.kind === 'div') {

	            e = document.createElement("div");

	        } else if (isd_element.kind === 'image') {

	            e = document.createElement("img");

	            if (context.imgResolver !== null && isd_element.src !== null) {

	                var uri = context.imgResolver(isd_element.src, e);

	                if (uri)
	                    e.src = uri;

	                e.height = context.regionH;
	                e.width = context.regionW;

	            }

	        } else if (isd_element.kind === 'p') {

	            e = document.createElement("p");

	        } else if (isd_element.kind === 'span') {

	            if (isd_element.styleAttrs[imscStyles.byName.ruby.qname] === "container") {

	                e = document.createElement("ruby");

	                context.ruby = true;

	            } else if (isd_element.styleAttrs[imscStyles.byName.ruby.qname] === "base") {

	                e = document.createElement("rb");

	            } else if (isd_element.styleAttrs[imscStyles.byName.ruby.qname] === "text") {

	                e = document.createElement("rt");


	            } else if (isd_element.styleAttrs[imscStyles.byName.ruby.qname] === "baseContainer") {

	                e = document.createElement("rbc");


	            } else if (isd_element.styleAttrs[imscStyles.byName.ruby.qname] === "textContainer") {

	                e = document.createElement("rtc");


	            } else if (isd_element.styleAttrs[imscStyles.byName.ruby.qname] === "delimiter") {

	                /* ignore rp */

	                return;

	            } else {

	                e = document.createElement("span");

	            }

	            var te = isd_element.styleAttrs[imscStyles.byName.textEmphasis.qname];

	            if (te && te.style !== "none") {

	                context.textEmphasis = true;

	            }

	            //e.textContent = isd_element.text;

	        } else if (isd_element.kind === 'br') {

	            e = document.createElement("br");

	        }

	        if (!e) {

	            reportError(context.errorHandler, "Error processing ISD element kind: " + isd_element.kind);

	            return;

	        }

	        /* add to parent */

	        dom_parent.appendChild(e);

	        /* override UA default margin */
	        /* TODO: should apply to <p> only */

	        e.style.margin = "0";

	        /* tranform TTML styles to CSS styles */

	        for (var i in STYLING_MAP_DEFS) {

	            var sm = STYLING_MAP_DEFS[i];

	            var attr = isd_element.styleAttrs[sm.qname];

	            if (attr !== undefined && sm.map !== null) {

	                sm.map(context, e, isd_element, attr);

	            }

	        }

	        var proc_e = e;

	        /* remember writing direction */

	        if (isd_element.kind === "region") {

	            var wdir = isd_element.styleAttrs[imscStyles.byName.writingMode.qname];

	            if (wdir === "lrtb" || wdir === "lr") {

	                context.ipd = "lr";
	                context.bpd = "tb";

	            } else if (wdir === "rltb" || wdir === "rl") {

	                context.ipd = "rl";
	                context.bpd = "tb";

	            } else if (wdir === "tblr") {

	                context.ipd = "tb";
	                context.bpd = "lr";

	            } else if (wdir === "tbrl" || wdir === "tb") {

	                context.ipd = "tb";
	                context.bpd = "rl";

	            }

	        }

	        /* do we have linePadding ? */

	        var lp = isd_element.styleAttrs[imscStyles.byName.linePadding.qname];

	        if (lp && (! lp.isZero())) {

	            var plength = lp.toUsedLength(context.w, context.h);


	            if (plength > 0) {
	                
	                /* apply padding to the <p> so that line padding does not cause line wraps */

	                var padmeasure = Math.ceil(plength) + "px";

	                if (context.bpd === "tb") {

	                    proc_e.style.paddingLeft = padmeasure;
	                    proc_e.style.paddingRight = padmeasure;

	                } else {

	                    proc_e.style.paddingTop = padmeasure;
	                    proc_e.style.paddingBottom = padmeasure;

	                }

	                context.lp = lp;
	            }
	        }

	        // do we have multiRowAlign?

	        var mra = isd_element.styleAttrs[imscStyles.byName.multiRowAlign.qname];

	        if (mra && mra !== "auto") {

	            /* create inline block to handle multirowAlign */

	            var s = document.createElement("span");

	            s.style.display = "inline-block";

	            s.style.textAlign = mra;

	            e.appendChild(s);

	            proc_e = s;

	            context.mra = mra;

	        }

	        /* do we have rubyReserve? */

	        var rr = isd_element.styleAttrs[imscStyles.byName.rubyReserve.qname];

	        if (rr && rr[0] !== "none") {
	            context.rubyReserve = rr;
	        }


	        /* remember we are filling line gaps */

	        if (isd_element.styleAttrs[imscStyles.byName.fillLineGap.qname]) {
	            context.flg = true;
	        }


	        if (isd_element.kind === "span" && isd_element.text) {

	            if (imscStyles.byName.textCombine.qname in isd_element.styleAttrs &&
	                    isd_element.styleAttrs[imscStyles.byName.textCombine.qname][0] === "all") {

	                /* ignore tate-chu-yoku since line break cannot happen within */
	                e.textContent = isd_element.text;

	            } else {

	                // wrap characters in spans to find the line wrap locations

	                var cbuf = '';

	                for (var j = 0; j < isd_element.text.length; j++) {

	                    cbuf += isd_element.text.charAt(j);

	                    var cc = isd_element.text.charCodeAt(j);

	                    if (cc < 0xD800 || cc > 0xDBFF || j === isd_element.text.length) {

	                        /* wrap the character(s) in a span unless it is a high surrogate */

	                        var span = document.createElement("span");

	                        span.textContent = cbuf;
	    
	                        e.appendChild(span);

	                        cbuf = '';

	                    }

	                }

	            }
	        }

	        /* process the children of the ISD element */

	        for (var k in isd_element.contents) {

	            processElement(context, proc_e, isd_element.contents[k]);

	        }

	        /* list of lines */

	        var linelist = [];


	        /* paragraph processing */
	        /* TODO: linePadding only supported for horizontal scripts */

	        if ((context.lp || context.mra || context.flg || context.ruby || context.textEmphasis || context.rubyReserve) &&
	                isd_element.kind === "p") {

	            constructLineList(context, proc_e, linelist, null);

	            /* apply rubyReserve */

	            if (context.rubyReserve) {

	                applyRubyReserve(linelist, context);

	                context.rubyReserve = null;

	            }

	            /* apply tts:rubyPosition="outside" */

	            if (context.ruby || context.rubyReserve) {

	                applyRubyPosition(linelist, context);

	                context.ruby = null;

	            }

	            /* apply text emphasis "outside" position */

	            if (context.textEmphasis) {

	                applyTextEmphasis(linelist, context);

	                context.textEmphasis = null;

	            }

	            /* insert line breaks for multirowalign */

	            if (context.mra) {

	                applyMultiRowAlign(linelist);

	                context.mra = null;

	            }

	            /* add linepadding */

	            if (context.lp) {

	                applyLinePadding(linelist, context.lp.toUsedLength(context.w, context.h), context);

	                context.lp = null;

	            }

	            /* fill line gaps linepadding */

	            if (context.flg) {

	                var par_edges = rect2edges(proc_e.getBoundingClientRect(), context);

	                applyFillLineGap(linelist, par_edges.before, par_edges.after, context);

	                context.flg = null;

	            }

	        }


	        /* region processing */

	        if (isd_element.kind === "region") {

	            /* build line list */

	            constructLineList(context, proc_e, linelist);

	            /* perform roll up if needed */

	            if ((context.bpd === "tb") &&
	                    context.enableRollUp &&
	                    isd_element.contents.length > 0 &&
	                    isd_element.styleAttrs[imscStyles.byName.displayAlign.qname] === 'after') {

	                /* horrible hack, perhaps default region id should be underscore everywhere? */

	                var rid = isd_element.id === '' ? '_' : isd_element.id;

	                var rb = new RegionPBuffer(rid, linelist);

	                context.currentISDState[rb.id] = rb;

	                if (context.previousISDState &&
	                        rb.id in context.previousISDState &&
	                        context.previousISDState[rb.id].plist.length > 0 &&
	                        rb.plist.length > 1 &&
	                        rb.plist[rb.plist.length - 2].text ===
	                        context.previousISDState[rb.id].plist[context.previousISDState[rb.id].plist.length - 1].text) {

	                    var body_elem = e.firstElementChild;

	                    var h = rb.plist[rb.plist.length - 1].after - rb.plist[rb.plist.length - 1].before;

	                    body_elem.style.bottom = "-" + h + "px";
	                    body_elem.style.transition = "transform 0.4s";
	                    body_elem.style.position = "relative";
	                    body_elem.style.transform = "translateY(-" + h + "px)";

	                }

	            }

	            /* TODO: clean-up the spans ? */

	        }
	    }

	    function applyLinePadding(lineList, lp, context) {

	        for (var i in lineList) {

	            var l = lineList[i].elements.length;

	            var se = lineList[i].elements[lineList[i].start_elem];

	            var ee = lineList[i].elements[lineList[i].end_elem];

	            var pospadpxlen = Math.ceil(lp) + "px";

	            var negpadpxlen = "-" + Math.ceil(lp) + "px";

	            if (l !== 0) {

	                if (context.ipd === "lr") {

	                    se.node.style.borderLeftColor = se.bgcolor || "#00000000";
	                    se.node.style.borderLeftStyle = "solid";
	                    se.node.style.borderLeftWidth = pospadpxlen;
	                    se.node.style.marginLeft = negpadpxlen;

	                } else if (context.ipd === "rl") {

	                    se.node.style.borderRightColor = se.bgcolor || "#00000000";
	                    se.node.style.borderRightStyle = "solid";
	                    se.node.style.borderRightWidth = pospadpxlen;
	                    se.node.style.marginRight = negpadpxlen;

	                } else if (context.ipd === "tb") {

	                    se.node.style.borderTopColor = se.bgcolor || "#00000000";
	                    se.node.style.borderTopStyle = "solid";
	                    se.node.style.borderTopWidth = pospadpxlen;
	                    se.node.style.marginTop = negpadpxlen;

	                }

	                if (context.ipd === "lr") {

	                    ee.node.style.borderRightColor = ee.bgcolor  || "#00000000";
	                    ee.node.style.borderRightStyle = "solid";
	                    ee.node.style.borderRightWidth = pospadpxlen;
	                    ee.node.style.marginRight = negpadpxlen;

	                } else if (context.ipd === "rl") {

	                    ee.node.style.borderLeftColor = ee.bgcolor || "#00000000";
	                    ee.node.style.borderLeftStyle = "solid";
	                    ee.node.style.borderLeftWidth = pospadpxlen;
	                    ee.node.style.marginLeft = negpadpxlen;

	                } else if (context.ipd === "tb") {

	                    ee.node.style.borderBottomColor = ee.bgcolor || "#00000000";
	                    ee.node.style.borderBottomStyle = "solid";
	                    ee.node.style.borderBottomWidth = pospadpxlen;
	                    ee.node.style.marginBottom = negpadpxlen;

	                }

	            }

	        }

	    }

	    function applyMultiRowAlign(lineList) {

	        /* apply an explicit br to all but the last line */

	        for (var i = 0; i < lineList.length - 1; i++) {

	            var l = lineList[i].elements.length;

	            if (l !== 0 && lineList[i].br === false) {
	                var br = document.createElement("br");

	                var lastnode = lineList[i].elements[l - 1].node;

	                lastnode.parentElement.insertBefore(br, lastnode.nextSibling);
	            }

	        }

	    }

	    function applyTextEmphasis(lineList, context) {

	        /* supports "outside" only */

	        for (var i = 0; i < lineList.length; i++) {

	            for (var j = 0; j < lineList[i].te.length; j++) {

	                /* skip if position already set */

	                if (lineList[i].te[j].style.textEmphasisPosition !== "")
	                    continue;

	                var pos;

	                if (context.bpd === "tb") {

	                    pos = (i === 0) ? "left over" : "left under";


	                } else {

	                    if (context.bpd === "rl") {

	                        pos = (i === 0) ? "right under" : "left under";

	                    } else {

	                        pos = (i === 0) ? "left under" : "right under";

	                    }

	                }

	                lineList[i].te[j].style.textEmphasisPosition = pos;

	            }

	        }

	    }

	    function applyRubyPosition(lineList, context) {

	        for (var i = 0; i < lineList.length; i++) {

	            for (var j = 0; j < lineList[i].rbc.length; j++) {

	                /* skip if ruby-position already set */

	                if (lineList[i].rbc[j].style.rubyPosition !== "")
	                    continue;

	                var pos;

	                if (context.bpd === "tb") {

	                    pos = (i === 0) ? "over" : "under";


	                } else {

	                    if (context.bpd === "rl") {

	                        pos = (i === 0) ? "over" : "under";

	                    } else {

	                        pos = (i === 0) ? "under" : "over";

	                    }

	                }

	                lineList[i].rbc[j].style.rubyPosition = pos;

	            }

	        }

	    }

	    function applyRubyReserve(lineList, context) {

	        for (var i = 0; i < lineList.length; i++) {

	            var ruby = document.createElement("ruby");

	            var rb = document.createElement("rb");
	            rb.textContent = "\u200B";

	            ruby.appendChild(rb);

	            var rt1;
	            var rt2;

	            var fs = context.rubyReserve[1].toUsedLength(context.w, context.h) + "px";

	            if (context.rubyReserve[0] === "both") {

	                rt1 = document.createElement("rtc");
	                rt1.style.rubyPosition = "under";
	                rt1.textContent = "\u200B";
	                rt1.style.fontSize = fs;

	                rt2 = document.createElement("rtc");
	                rt2.style.rubyPosition = "over";
	                rt2.textContent = "\u200B";
	                rt2.style.fontSize = fs;

	                ruby.appendChild(rt1);
	                ruby.appendChild(rt2);

	            } else {

	                rt1 = document.createElement("rtc");
	                rt1.textContent = "\u200B";
	                rt1.style.fontSize = fs;

	                if (context.rubyReserve[0] === "after" || (context.rubyReserve[0] === "outside" && i > 0)) {

	                    rt1.style.rubyPosition = (context.bpd === "tb" || context.bpd === "rl") ? "under" : "over";

	                } else {

	                    rt1.style.rubyPosition = (context.bpd === "tb" || context.bpd === "rl") ? "over" : "under";

	                }

	                ruby.appendChild(rt1);

	            }

	            var e = lineList[i].elements[0].node.parentElement.insertBefore(
	                    ruby,
	                    lineList[i].elements[0].node
	                    );

	        }

	    }

	    function applyFillLineGap(lineList, par_before, par_after, context) {

	        /* positive for BPD = lr and tb, negative for BPD = rl */
	        var s = Math.sign(par_after - par_before);

	        for (var i = 0; i <= lineList.length; i++) {

	            /* compute frontier between lines */

	            var frontier;

	            if (i === 0) {

	                frontier = par_before;

	            } else if (i === lineList.length) {

	                frontier = par_after;

	            } else {

	                frontier = (lineList[i].before + lineList[i - 1].after) / 2;

	            }

	            /* padding amount */

	            var pad;

	            /* current element */

	            var e;

	            /* before line */

	            if (i > 0) {

	                for (var j = 0; j < lineList[i - 1].elements.length; j++) {

	                    if (lineList[i - 1].elements[j].bgcolor === null)
	                        continue;

	                    e = lineList[i - 1].elements[j];

	                    if (s * (e.after - frontier) < 0) {

	                        pad = Math.ceil(Math.abs(frontier - e.after)) + "px";

	                        e.node.style.backgroundColor = e.bgcolor;

	                        if (context.bpd === "lr") {

	                            e.node.style.paddingRight = pad;


	                        } else if (context.bpd === "rl") {

	                            e.node.style.paddingLeft = pad;

	                        } else if (context.bpd === "tb") {

	                            e.node.style.paddingBottom = pad;

	                        }

	                    }

	                }

	            }

	            /* after line */

	            if (i < lineList.length) {

	                for (var k = 0; k < lineList[i].elements.length; k++) {

	                    e = lineList[i].elements[k];

	                    if (e.bgcolor === null)
	                        continue;

	                    if (s * (e.before - frontier) > 0) {

	                        pad = Math.ceil(Math.abs(e.before - frontier)) + "px";

	                        e.node.style.backgroundColor = e.bgcolor;

	                        if (context.bpd === "lr") {

	                            e.node.style.paddingLeft = pad;


	                        } else if (context.bpd === "rl") {

	                            e.node.style.paddingRight = pad;


	                        } else if (context.bpd === "tb") {

	                            e.node.style.paddingTop = pad;

	                        }

	                    }

	                }

	            }

	        }

	    }

	    function RegionPBuffer(id, lineList) {

	        this.id = id;

	        this.plist = lineList;

	    }

	    function pruneEmptySpans(element) {

	        var child = element.firstChild;

	        while (child) {

	            var nchild = child.nextSibling;

	            if (child.nodeType === Node.ELEMENT_NODE &&
	                    child.localName === 'span') {

	                pruneEmptySpans(child);

	                if (child.childElementCount === 0 &&
	                        child.textContent.length === 0) {

	                    element.removeChild(child);

	                }
	            }

	            child = nchild;
	        }

	    }

	    function rect2edges(rect, context) {

	        var edges = {before: null, after: null, start: null, end: null};

	        if (context.bpd === "tb") {

	            edges.before = rect.top;
	            edges.after = rect.bottom;

	            if (context.ipd === "lr") {

	                edges.start = rect.left;
	                edges.end = rect.right;

	            } else {

	                edges.start = rect.right;
	                edges.end = rect.left;
	            }

	        } else if (context.bpd === "lr") {

	            edges.before = rect.left;
	            edges.after = rect.right;
	            edges.start = rect.top;
	            edges.end = rect.bottom;

	        } else if (context.bpd === "rl") {

	            edges.before = rect.right;
	            edges.after = rect.left;
	            edges.start = rect.top;
	            edges.end = rect.bottom;

	        }

	        return edges;

	    }

	    function constructLineList(context, element, llist, bgcolor) {

	        if (element.localName === "rt" || element.localName === "rtc") {

	            /* skip ruby annotations */

	            return;

	        }

	        var curbgcolor = element.style.backgroundColor || bgcolor;

	        if (element.childElementCount === 0) {

	            if (element.localName === 'span' || element.localName === 'rb') {

	                var r = element.getBoundingClientRect();

	                /* skip if span is not displayed */

	                if (r.height === 0 || r.width === 0)
	                    return;

	                var edges = rect2edges(r, context);

	                if (llist.length === 0 ||
	                        (!isSameLine(edges.before, edges.after, llist[llist.length - 1].before, llist[llist.length - 1].after))
	                        ) {

	                    llist.push({
	                        before: edges.before,
	                        after: edges.after,
	                        start: edges.start,
	                        end: edges.end,
	                        start_elem: 0,
	                        end_elem: 0,
	                        elements: [],
	                        rbc: [],
	                        te: [],
	                        text: "",
	                        br: false
	                    });

	                } else {

	                    /* positive for BPD = lr and tb, negative for BPD = rl */
	                    var bpd_dir = Math.sign(edges.after - edges.before);

	                    /* positive for IPD = lr and tb, negative for IPD = rl */
	                    var ipd_dir = Math.sign(edges.end - edges.start);

	                    /* check if the line height has increased */

	                    if (bpd_dir * (edges.before - llist[llist.length - 1].before) < 0) {
	                        llist[llist.length - 1].before = edges.before;
	                    }

	                    if (bpd_dir * (edges.after - llist[llist.length - 1].after) > 0) {
	                        llist[llist.length - 1].after = edges.after;
	                    }

	                    if (ipd_dir * (edges.start - llist[llist.length - 1].start) < 0) {
	                        llist[llist.length - 1].start = edges.start;
	                        llist[llist.length - 1].start_elem = llist[llist.length - 1].elements.length;
	                    }

	                    if (ipd_dir * (edges.end - llist[llist.length - 1].end) > 0) {
	                        llist[llist.length - 1].end = edges.end;
	                        llist[llist.length - 1].end_elem = llist[llist.length - 1].elements.length;
	                    }

	                }

	                llist[llist.length - 1].text += element.textContent;

	                llist[llist.length - 1].elements.push(
	                        {
	                            node: element,
	                            bgcolor: curbgcolor,
	                            before: edges.before,
	                            after: edges.after
	                        }
	                );

	            } else if (element.localName === 'br' && llist.length !== 0) {

	                llist[llist.length - 1].br = true;

	            }

	        } else {

	            var child = element.firstChild;

	            while (child) {

	                if (child.nodeType === Node.ELEMENT_NODE) {

	                    constructLineList(context, child, llist, curbgcolor);

	                    if (child.localName === 'ruby' || child.localName === 'rtc') {

	                        /* remember non-empty ruby and rtc elements so that tts:rubyPosition can be applied */

	                        if (llist.length > 0) {

	                            llist[llist.length - 1].rbc.push(child);

	                        }

	                    } else if (child.localName === 'span' &&
	                            child.style.textEmphasisStyle !== "") {

	                        llist[llist.length - 1].te.push(child);

	                    }

	                }

	                child = child.nextSibling;
	            }
	        }

	    }

	    function isSameLine(before1, after1, before2, after2) {

	        return ((after1 < after2) && (before1 > before2)) || ((after2 <= after1) && (before2 >= before1));

	    }

	    function HTMLStylingMapDefintion(qName, mapFunc) {
	        this.qname = qName;
	        this.map = mapFunc;
	    }

	    var STYLING_MAP_DEFS = [

	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling backgroundColor",
	                function (context, dom_element, isd_element, attr) {

	                    /* skip if transparent */
	                    if (attr[3] === 0)
	                        return;

	                    dom_element.style.backgroundColor = "rgba(" +
	                            attr[0].toString() + "," +
	                            attr[1].toString() + "," +
	                            attr[2].toString() + "," +
	                            (attr[3] / 255).toString() +
	                            ")";
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling color",
	                function (context, dom_element, isd_element, attr) {
	                    dom_element.style.color = "rgba(" +
	                            attr[0].toString() + "," +
	                            attr[1].toString() + "," +
	                            attr[2].toString() + "," +
	                            (attr[3] / 255).toString() +
	                            ")";
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling direction",
	                function (context, dom_element, isd_element, attr) {
	                    dom_element.style.direction = attr;
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling display",
	                function (context, dom_element, isd_element, attr) {}
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling displayAlign",
	                function (context, dom_element, isd_element, attr) {

	                    /* see https://css-tricks.com/snippets/css/a-guide-to-flexbox/ */

	                    /* TODO: is this affected by writing direction? */

	                    dom_element.style.display = "flex";
	                    dom_element.style.flexDirection = "column";


	                    if (attr === "before") {

	                        dom_element.style.justifyContent = "flex-start";

	                    } else if (attr === "center") {

	                        dom_element.style.justifyContent = "center";

	                    } else if (attr === "after") {

	                        dom_element.style.justifyContent = "flex-end";
	                    }

	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling extent",
	                function (context, dom_element, isd_element, attr) {
	                    /* TODO: this is super ugly */

	                    context.regionH = attr.h.toUsedLength(context.w, context.h);
	                    context.regionW = attr.w.toUsedLength(context.w, context.h);

	                    /* 
	                     * CSS height/width are measured against the content rectangle,
	                     * whereas TTML height/width include padding
	                     */

	                    var hdelta = 0;
	                    var wdelta = 0;

	                    var p = isd_element.styleAttrs["http://www.w3.org/ns/ttml#styling padding"];

	                    if (!p) {

	                        /* error */

	                    } else {

	                        hdelta = p[0].toUsedLength(context.w, context.h) + p[2].toUsedLength(context.w, context.h);
	                        wdelta = p[1].toUsedLength(context.w, context.h) + p[3].toUsedLength(context.w, context.h);

	                    }

	                    dom_element.style.height = (context.regionH - hdelta) + "px";
	                    dom_element.style.width = (context.regionW - wdelta) + "px";

	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling fontFamily",
	                function (context, dom_element, isd_element, attr) {

	                    var rslt = [];

	                    /* per IMSC1 */

	                    for (var i in attr) {

	                        if (attr[i] === "monospaceSerif") {

	                            rslt.push("Courier New");
	                            rslt.push('"Liberation Mono"');
	                            rslt.push("Courier");
	                            rslt.push("monospace");

	                        } else if (attr[i] === "proportionalSansSerif") {

	                            rslt.push("Arial");
	                            rslt.push("Helvetica");
	                            rslt.push('"Liberation Sans"');
	                            rslt.push("sans-serif");

	                        } else if (attr[i] === "monospace") {

	                            rslt.push("monospace");

	                        } else if (attr[i] === "sansSerif") {

	                            rslt.push("sans-serif");

	                        } else if (attr[i] === "serif") {

	                            rslt.push("serif");

	                        } else if (attr[i] === "monospaceSansSerif") {

	                            rslt.push("Consolas");
	                            rslt.push("monospace");

	                        } else if (attr[i] === "proportionalSerif") {

	                            rslt.push("serif");

	                        } else {

	                            rslt.push(attr[i]);

	                        }

	                    }

	                    dom_element.style.fontFamily = rslt.join(",");
	                }
	        ),

	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling shear",
	                function (context, dom_element, isd_element, attr) {

	                    /* return immediately if tts:shear is 0% since CSS transforms are not inherited*/

	                    if (attr === 0)
	                        return;

	                    var angle = attr * -0.9;

	                    /* context.writingMode is needed since writing mode is not inherited and sets the inline progression */

	                    if (context.bpd === "tb") {

	                        dom_element.style.transform = "skewX(" + angle + "deg)";

	                    } else {

	                        dom_element.style.transform = "skewY(" + angle + "deg)";

	                    }

	                }
	        ),

	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling fontSize",
	                function (context, dom_element, isd_element, attr) {
	                    dom_element.style.fontSize = attr.toUsedLength(context.w, context.h) + "px";
	                }
	        ),

	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling fontStyle",
	                function (context, dom_element, isd_element, attr) {
	                    dom_element.style.fontStyle = attr;
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling fontWeight",
	                function (context, dom_element, isd_element, attr) {
	                    dom_element.style.fontWeight = attr;
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling lineHeight",
	                function (context, dom_element, isd_element, attr) {
	                    if (attr === "normal") {

	                        dom_element.style.lineHeight = "normal";

	                    } else {

	                        dom_element.style.lineHeight = attr.toUsedLength(context.w, context.h) + "px";
	                    }
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling opacity",
	                function (context, dom_element, isd_element, attr) {
	                    dom_element.style.opacity = attr;
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling origin",
	                function (context, dom_element, isd_element, attr) {
	                    dom_element.style.top = attr.h.toUsedLength(context.w, context.h) + "px";
	                    dom_element.style.left = attr.w.toUsedLength(context.w, context.h) + "px";
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling overflow",
	                function (context, dom_element, isd_element, attr) {
	                    dom_element.style.overflow = attr;
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling padding",
	                function (context, dom_element, isd_element, attr) {

	                    /* attr: top,left,bottom,right*/

	                    /* style: top right bottom left*/

	                    var rslt = [];

	                    rslt[0] = attr[0].toUsedLength(context.w, context.h) + "px";
	                    rslt[1] = attr[3].toUsedLength(context.w, context.h) + "px";
	                    rslt[2] = attr[2].toUsedLength(context.w, context.h) + "px";
	                    rslt[3] = attr[1].toUsedLength(context.w, context.h) + "px";

	                    dom_element.style.padding = rslt.join(" ");
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling position",
	                function (context, dom_element, isd_element, attr) {
	                    dom_element.style.top = attr.h.toUsedLength(context.w, context.h) + "px";
	                    dom_element.style.left = attr.w.toUsedLength(context.w, context.h) + "px";
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling rubyAlign",
	                function (context, dom_element, isd_element, attr) {
	                    dom_element.style.rubyAlign = attr;
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling rubyPosition",
	                function (context, dom_element, isd_element, attr) {

	                    /* skip if "outside", which is handled by applyRubyPosition() */

	                    if (attr === "before" || attr === "after") {

	                        var pos;

	                        if (context.bpd === "tb") {

	                            pos = (attr === "before") ? "over" : "under";


	                        } else {

	                            if (context.bpd === "rl") {

	                                pos = (attr === "before") ? "over" : "under";

	                            } else {

	                                pos = (attr === "before") ? "under" : "over";

	                            }

	                        }

	                        /* apply position to the parent dom_element, i.e. ruby or rtc */

	                        dom_element.parentElement.style.rubyPosition = pos;
	                    }
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling showBackground",
	                null
	                ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling textAlign",
	                function (context, dom_element, isd_element, attr) {

	                    var ta;
	                    var dir = isd_element.styleAttrs[imscStyles.byName.direction.qname];

	                    /* handle UAs that do not understand start or end */

	                    if (attr === "start") {

	                        ta = (dir === "rtl") ? "right" : "left";

	                    } else if (attr === "end") {

	                        ta = (dir === "rtl") ? "left" : "right";

	                    } else {

	                        ta = attr;

	                    }

	                    dom_element.style.textAlign = ta;

	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling textDecoration",
	                function (context, dom_element, isd_element, attr) {
	                    dom_element.style.textDecoration = attr.join(" ").replace("lineThrough", "line-through");
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling textOutline",
	                function (context, dom_element, isd_element, attr) {

	                    /* defer to tts:textShadow */
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling textShadow",
	                function (context, dom_element, isd_element, attr) {

	                    var txto = isd_element.styleAttrs[imscStyles.byName.textOutline.qname];

	                    if (attr === "none" && txto === "none") {

	                        dom_element.style.textShadow = "";

	                    } else {

	                        var s = [];

	                        if (txto !== "none") {

	                            /* emulate text outline */

	                            s.push(
	                                    "rgba(" +
	                                    txto.color[0].toString() + "," +
	                                    txto.color[1].toString() + "," +
	                                    txto.color[2].toString() + "," +
	                                    (txto.color[3] / 255).toString() +
	                                    ")" + " 0px 0px " +
	                                    txto.thickness.toUsedLength(context.w, context.h) + "px"
	                                    );

	                        }

	                        /* add text shadow */

	                        if (attr !== "none") {

	                            for (var i in attr) {


	                                s.push(attr[i].x_off.toUsedLength(context.w, context.h) + "px " +
	                                        attr[i].y_off.toUsedLength(context.w, context.h) + "px " +
	                                        attr[i].b_radius.toUsedLength(context.w, context.h) + "px " +
	                                        "rgba(" +
	                                        attr[i].color[0].toString() + "," +
	                                        attr[i].color[1].toString() + "," +
	                                        attr[i].color[2].toString() + "," +
	                                        (attr[i].color[3] / 255).toString() +
	                                        ")"
	                                        );

	                            }

	                        }

	                        dom_element.style.textShadow = s.join(",");

	                    }
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling textCombine",
	                function (context, dom_element, isd_element, attr) {

	                    dom_element.style.textCombineUpright = attr.join(" ");

	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling textEmphasis",
	                function (context, dom_element, isd_element, attr) {

	                    /* ignore color (not used in IMSC 1.1) */

	                    if (attr.style !== "none") {

	                        /* text-emphasis does not inherit in w */

	                        dom_element.style.textEmphasisStyle = attr.style + " " + attr.symbol;
	                    }

	                    /* ignore "outside" position (set in postprocessing) */

	                    if (attr.position === "before" || attr.position === "after") {

	                        var pos;

	                        if (context.bpd === "tb") {

	                            pos = (attr.position === "before") ? "left over" : "left under";


	                        } else {

	                            if (context.bpd === "rl") {

	                                pos = (attr.position === "before") ? "right under" : "left under";

	                            } else {

	                                pos = (attr.position === "before") ? "left under" : "right under";

	                            }

	                        }

	                        dom_element.style.textEmphasisPosition = pos;
	                    }
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling unicodeBidi",
	                function (context, dom_element, isd_element, attr) {

	                    var ub;

	                    if (attr === 'bidiOverride') {
	                        ub = "bidi-override";
	                    } else {
	                        ub = attr;
	                    }

	                    dom_element.style.unicodeBidi = ub;
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling visibility",
	                function (context, dom_element, isd_element, attr) {
	                    dom_element.style.visibility = attr;
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling wrapOption",
	                function (context, dom_element, isd_element, attr) {

	                    if (attr === "wrap") {

	                        if (isd_element.space === "preserve") {
	                            dom_element.style.whiteSpace = "pre-wrap";
	                        } else {
	                            dom_element.style.whiteSpace = "normal";
	                        }

	                    } else {

	                        if (isd_element.space === "preserve") {

	                            dom_element.style.whiteSpace = "pre";

	                        } else {
	                            dom_element.style.whiteSpace = "noWrap";
	                        }

	                    }

	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling writingMode",
	                function (context, dom_element, isd_element, attr) {
	                    if (attr === "lrtb" || attr === "lr") {

	                        context.writingMode = "horizontal-tb";

	                    } else if (attr === "rltb" || attr === "rl") {

	                        context.writingMode = "horizontal-tb";

	                    } else if (attr === "tblr") {

	                        context.writingMode = "vertical-lr";

	                    } else if (attr === "tbrl" || attr === "tb") {

	                        context.writingMode = "vertical-rl";

	                    }

	                    dom_element.style.writingMode = context.writingMode;
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml#styling zIndex",
	                function (context, dom_element, isd_element, attr) {
	                    dom_element.style.zIndex = attr;
	                }
	        ),
	        new HTMLStylingMapDefintion(
	                "http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay",
	                function (context, dom_element, isd_element, attr) {

	                    if (context.displayForcedOnlyMode && attr === false) {
	                        dom_element.style.visibility = "hidden";
	                    }

	                }
	        )
	    ];

	    var STYLMAP_BY_QNAME = {};

	    for (var i in STYLING_MAP_DEFS) {

	        STYLMAP_BY_QNAME[STYLING_MAP_DEFS[i].qname] = STYLING_MAP_DEFS[i];
	    }

	    function reportError(errorHandler, msg) {

	        if (errorHandler && errorHandler.error && errorHandler.error(msg))
	            throw msg;

	    }

	})( false ? this.imscHTML = {} : exports,
	        typeof imscNames === 'undefined' ? __webpack_require__(77) : imscNames,
	        typeof imscStyles === 'undefined' ? __webpack_require__(78) : imscStyles,
	        typeof imscUtils === 'undefined' ? __webpack_require__(79) : imscUtils);

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);function EmbeddedTextHtmlRender(){var captionId=0;var instance=undefined; /* HTML Rendering functions */function checkIndent(chars){var line='';for(var c=0;c < chars.length;++c) {var uc=chars[c];line += uc.uchar;}var l=line.length;var ll=line.replace(/^\s+/,'').length;return l - ll;}function getRegionProperties(region){return 'left: ' + region.x * 3.125 + '%; top: ' + region.y1 * 6.66 + '%; width: ' + (100 - region.x * 3.125) + '%; height: ' + Math.max(region.y2 - 1 - region.y1,1) * 6.66 + '%; align-items: flex-start; overflow: visible; -webkit-writing-mode: horizontal-tb;';}function createRGB(color){if(color === 'red'){return 'rgb(255, 0, 0)';}else if(color === 'green'){return 'rgb(0, 255, 0)';}else if(color === 'blue'){return 'rgb(0, 0, 255)';}else if(color === 'cyan'){return 'rgb(0, 255, 255)';}else if(color === 'magenta'){return 'rgb(255, 0, 255)';}else if(color === 'yellow'){return 'rgb(255, 255, 0)';}else if(color === 'white'){return 'rgb(255, 255, 255)';}else if(color === 'black'){return 'rgb(0, 0, 0)';}return color;}function getStyle(videoElement,style){var fontSize=videoElement.videoHeight / 15.0;if(style){return 'font-size: ' + fontSize + 'px; font-family: Menlo, Consolas, \'Cutive Mono\', monospace; color: ' + (style.foreground?createRGB(style.foreground):'rgb(255, 255, 255)') + '; font-style: ' + (style.italics?'italic':'normal') + '; text-decoration: ' + (style.underline?'underline':'none') + '; white-space: pre; background-color: ' + (style.background?createRGB(style.background):'transparent') + ';';}else {return 'font-size: ' + fontSize + 'px; font-family: Menlo, Consolas, \'Cutive Mono\', monospace; justify-content: flex-start; text-align: left; color: rgb(255, 255, 255); font-style: normal; white-space: pre; line-height: normal; font-weight: normal; text-decoration: none; width: 100%; display: flex;';}}function ltrim(s){return s.replace(/^\s+/g,'');}function rtrim(s){return s.replace(/\s+$/g,'');}function createHTMLCaptionsFromScreen(videoElement,startTime,endTime,captionScreen){var currRegion=null;var existingRegion=null;var lastRowHasText=false;var lastRowIndentL=-1;var currP={start:startTime,end:endTime,spans:[]};var currentStyle='style_cea608_white_black';var seenRegions={};var styleStates={};var regions=[];var r=undefined,s=undefined;for(r = 0;r < 15;++r) {var row=captionScreen.rows[r];var line='';var prevPenState=null;if(false === row.isEmpty()){ /* Row is not empty */ /* Get indentation of this row */var rowIndent=checkIndent(row.chars); /* Create a new region is there is none */if(currRegion === null){currRegion = {x:rowIndent,y1:r,y2:r + 1,p:[]};} /* Check if indentation has changed and we had text of last row */if(rowIndent !== lastRowIndentL && lastRowHasText){currRegion.p.push(currP);currP = {start:startTime,end:endTime,spans:[]};currRegion.y2 = r;currRegion.name = 'region_' + currRegion.x + '_' + currRegion.y1 + '_' + currRegion.y2;if(false === seenRegions.hasOwnProperty(currRegion.name)){regions.push(currRegion);seenRegions[currRegion.name] = currRegion;}else {existingRegion = seenRegions[currRegion.name];existingRegion.p.contat(currRegion.p);}currRegion = {x:rowIndent,y1:r,y2:r + 1,p:[]};}for(var c=0;c < row.chars.length;++c) {var uc=row.chars[c];var currPenState=uc.penState;if(prevPenState === null || !currPenState.equals(prevPenState)){if(line.trim().length > 0){currP.spans.push({name:currentStyle,line:line,row:r});line = '';}var currPenStateString='style_cea608_' + currPenState.foreground + '_' + currPenState.background;if(currPenState.underline){currPenStateString += '_underline';}if(currPenState.italics){currPenStateString += '_italics';}if(!styleStates.hasOwnProperty(currPenStateString)){styleStates[currPenStateString] = JSON.parse(JSON.stringify(currPenState));}prevPenState = currPenState;currentStyle = currPenStateString;}line += uc.uchar;}if(line.trim().length > 0){currP.spans.push({name:currentStyle,line:line,row:r});}lastRowHasText = true;lastRowIndentL = rowIndent;}else { /* Row is empty */lastRowHasText = false;lastRowIndentL = -1;if(currRegion){currRegion.p.push(currP);currP = {start:startTime,end:endTime,spans:[]};currRegion.y2 = r;currRegion.name = 'region_' + currRegion.x + '_' + currRegion.y1 + '_' + currRegion.y2;if(false === seenRegions.hasOwnProperty(currRegion.name)){regions.push(currRegion);seenRegions[currRegion.name] = currRegion;}else {existingRegion = seenRegions[currRegion.name];existingRegion.p.contat(currRegion.p);}currRegion = null;}}}if(currRegion){currRegion.p.push(currP);currRegion.y2 = r + 1;currRegion.name = 'region_' + currRegion.x + '_' + currRegion.y1 + '_' + currRegion.y2;if(false === seenRegions.hasOwnProperty(currRegion.name)){regions.push(currRegion);seenRegions[currRegion.name] = currRegion;}else {existingRegion = seenRegions[currRegion.name];existingRegion.p.contat(currRegion.p);}currRegion = null;}var captionsArray=[]; /* Loop thru regions */for(r = 0;r < regions.length;++r) {var region=regions[r];var cueID='sub_cea608_' + captionId++;var finalDiv=document.createElement('div');finalDiv.id = cueID;var cueRegionProperties=getRegionProperties(region);finalDiv.style.cssText = 'position: absolute; margin: 0; display: flex; box-sizing: border-box; pointer-events: none;' + cueRegionProperties;var bodyDiv=document.createElement('div');bodyDiv.className = 'paragraph bodyStyle';bodyDiv.style.cssText = getStyle(videoElement);var cueUniWrapper=document.createElement('div');cueUniWrapper.className = 'cueUniWrapper';cueUniWrapper.style.cssText = 'unicode-bidi: normal; direction: ltr;';for(var p=0;p < region.p.length;++p) {var ptag=region.p[p];var lastSpanRow=0;for(s = 0;s < ptag.spans.length;++s) {var span=ptag.spans[s];if(span.line.length > 0){if(s !== 0 && lastSpanRow != span.row){var brElement=document.createElement('br');brElement.className = 'lineBreak';cueUniWrapper.appendChild(brElement);}var sameRow=false;if(lastSpanRow === span.row){sameRow = true;}lastSpanRow = span.row;var spanStyle=styleStates[span.name];var spanElement=document.createElement('span');spanElement.className = 'spanPadding ' + span.name + ' customSpanColor';spanElement.style.cssText = getStyle(videoElement,spanStyle); /* If this is not the first span, and it's on the same
	                         * row as the last one */if(s !== 0 && sameRow){ /* and it's the last span on this row */if(s === ptag.spans.length - 1){ /* trim only the right side */spanElement.textContent = rtrim(span.line);}else { /* don't trim at all */spanElement.textContent = span.line;}}else { /* if there is more than 1 span and this isn't the last span */if(ptag.spans.length > 1 && s < ptag.spans.length - 1){ /* Check if next text is on same row */if(span.row === ptag.spans[s + 1].row){ /* Next element on same row, trim start */spanElement.textContent = ltrim(span.line);}else { /* Different rows, trim both */spanElement.textContent = span.line.trim();}}else {spanElement.textContent = span.line.trim();}}cueUniWrapper.appendChild(spanElement);}}}bodyDiv.appendChild(cueUniWrapper);finalDiv.appendChild(bodyDiv);var fontSize={'bodyStyle':['%',90]};for(var _s in styleStates) {if(styleStates.hasOwnProperty(_s)){fontSize[_s] = ['%',90];}}captionsArray.push({type:'html',start:startTime,end:endTime,cueHTMLElement:finalDiv,cueID:cueID,cellResolution:[32,15],isFromCEA608:true,fontSize:fontSize,lineHeight:{},linePadding:{}});}return captionsArray;}instance = {createHTMLCaptionsFromScreen:createHTMLCaptionsFromScreen};return instance;}EmbeddedTextHtmlRender.__dashjs_factory_name = 'EmbeddedTextHtmlRender';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(EmbeddedTextHtmlRender);module.exports = exports['default'];
	//# sourceMappingURL=EmbeddedTextHtmlRender.js.map


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2015-2016, DASH Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  1. Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  2. Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';(function(exports){"use strict"; /**
	     *  Exceptions from regular ASCII. CodePoints are mapped to UTF-16 codes
	     */var specialCea608CharsCodes={0x2a:0xe1, // lowercase a, acute accent
	0x5c:0xe9, // lowercase e, acute accent
	0x5e:0xed, // lowercase i, acute accent
	0x5f:0xf3, // lowercase o, acute accent
	0x60:0xfa, // lowercase u, acute accent
	0x7b:0xe7, // lowercase c with cedilla
	0x7c:0xf7, // division symbol
	0x7d:0xd1, // uppercase N tilde
	0x7e:0xf1, // lowercase n tilde
	0x7f:0x2588, // Full block
	// THIS BLOCK INCLUDES THE 16 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
	// THAT COME FROM HI BYTE=0x11 AND LOW BETWEEN 0x30 AND 0x3F
	// THIS MEANS THAT \x50 MUST BE ADDED TO THE VALUES
	0x80:0xae, // Registered symbol (R)
	0x81:0xb0, // degree sign
	0x82:0xbd, // 1/2 symbol
	0x83:0xbf, // Inverted (open) question mark
	0x84:0x2122, // Trademark symbol (TM)
	0x85:0xa2, // Cents symbol
	0x86:0xa3, // Pounds sterling
	0x87:0x266a, // Music 8'th note
	0x88:0xe0, // lowercase a, grave accent
	0x89:0x20, // transparent space (regular)
	0x8a:0xe8, // lowercase e, grave accent
	0x8b:0xe2, // lowercase a, circumflex accent
	0x8c:0xea, // lowercase e, circumflex accent
	0x8d:0xee, // lowercase i, circumflex accent
	0x8e:0xf4, // lowercase o, circumflex accent
	0x8f:0xfb, // lowercase u, circumflex accent
	// THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
	// THAT COME FROM HI BYTE=0x12 AND LOW BETWEEN 0x20 AND 0x3F
	0x90:0xc1, // capital letter A with acute
	0x91:0xc9, // capital letter E with acute
	0x92:0xd3, // capital letter O with acute
	0x93:0xda, // capital letter U with acute
	0x94:0xdc, // capital letter U with diaresis
	0x95:0xfc, // lowercase letter U with diaeresis
	0x96:0x2018, // opening single quote
	0x97:0xa1, // inverted exclamation mark
	0x98:0x2a, // asterisk
	0x99:0x2019, // closing single quote
	0x9a:0x2501, // box drawings heavy horizontal
	0x9b:0xa9, // copyright sign
	0x9c:0x2120, // Service mark
	0x9d:0x2022, // (round) bullet
	0x9e:0x201c, // Left double quotation mark
	0x9f:0x201d, // Right double quotation mark
	0xa0:0xc0, // uppercase A, grave accent
	0xa1:0xc2, // uppercase A, circumflex
	0xa2:0xc7, // uppercase C with cedilla
	0xa3:0xc8, // uppercase E, grave accent
	0xa4:0xca, // uppercase E, circumflex
	0xa5:0xcb, // capital letter E with diaresis
	0xa6:0xeb, // lowercase letter e with diaresis
	0xa7:0xce, // uppercase I, circumflex
	0xa8:0xcf, // uppercase I, with diaresis
	0xa9:0xef, // lowercase i, with diaresis
	0xaa:0xd4, // uppercase O, circumflex
	0xab:0xd9, // uppercase U, grave accent
	0xac:0xf9, // lowercase u, grave accent
	0xad:0xdb, // uppercase U, circumflex
	0xae:0xab, // left-pointing double angle quotation mark
	0xaf:0xbb, // right-pointing double angle quotation mark
	// THIS BLOCK INCLUDES THE 32 EXTENDED (TWO-BYTE) LINE 21 CHARACTERS
	// THAT COME FROM HI BYTE=0x13 AND LOW BETWEEN 0x20 AND 0x3F
	0xb0:0xc3, // Uppercase A, tilde
	0xb1:0xe3, // Lowercase a, tilde
	0xb2:0xcd, // Uppercase I, acute accent
	0xb3:0xcc, // Uppercase I, grave accent
	0xb4:0xec, // Lowercase i, grave accent
	0xb5:0xd2, // Uppercase O, grave accent
	0xb6:0xf2, // Lowercase o, grave accent
	0xb7:0xd5, // Uppercase O, tilde
	0xb8:0xf5, // Lowercase o, tilde
	0xb9:0x7b, // Open curly brace
	0xba:0x7d, // Closing curly brace
	0xbb:0x5c, // Backslash
	0xbc:0x5e, // Caret
	0xbd:0x5f, // Underscore
	0xbe:0x7c, // Pipe (vertical line)
	0xbf:0x223c, // Tilde operator
	0xc0:0xc4, // Uppercase A, umlaut
	0xc1:0xe4, // Lowercase A, umlaut
	0xc2:0xd6, // Uppercase O, umlaut
	0xc3:0xf6, // Lowercase o, umlaut
	0xc4:0xdf, // Esszett (sharp S)
	0xc5:0xa5, // Yen symbol
	0xc6:0xa4, // Generic currency sign
	0xc7:0x2503, // Box drawings heavy vertical
	0xc8:0xc5, // Uppercase A, ring
	0xc9:0xe5, // Lowercase A, ring
	0xca:0xd8, // Uppercase O, stroke
	0xcb:0xf8, // Lowercase o, strok
	0xcc:0x250f, // Box drawings heavy down and right
	0xcd:0x2513, // Box drawings heavy down and left
	0xce:0x2517, // Box drawings heavy up and right
	0xcf:0x251b // Box drawings heavy up and left
	}; /**
	     * Get Unicode Character from CEA-608 byte code
	     */var getCharForByte=function getCharForByte(byte){var charCode=byte;if(specialCea608CharsCodes.hasOwnProperty(byte)){charCode = specialCea608CharsCodes[byte];}return String.fromCharCode(charCode);};var NR_ROWS=15,NR_COLS=32; // Tables to look up row from PAC data
	var rowsLowCh1={0x11:1,0x12:3,0x15:5,0x16:7,0x17:9,0x10:11,0x13:12,0x14:14};var rowsHighCh1={0x11:2,0x12:4,0x15:6,0x16:8,0x17:10,0x13:13,0x14:15};var rowsLowCh2={0x19:1,0x1A:3,0x1D:5,0x1E:7,0x1F:9,0x18:11,0x1B:12,0x1C:14};var rowsHighCh2={0x19:2,0x1A:4,0x1D:6,0x1E:8,0x1F:10,0x1B:13,0x1C:15};var backgroundColors=['white','green','blue','cyan','red','yellow','magenta','black','transparent']; /**
	     * Simple logger class to be able to write with time-stamps and filter on level.
	     */var logger={verboseFilter:{'DATA':3,'DEBUG':3,'INFO':2,'WARNING':2,'TEXT':1,'ERROR':0},time:null,verboseLevel:0, // Only write errors
	setTime:function setTime(newTime){this.time = newTime;},log:function log(severity,msg){var minLevel=this.verboseFilter[severity];if(this.verboseLevel >= minLevel){console.log(this.time + " [" + severity + "] " + msg);}}};var numArrayToHexArray=function numArrayToHexArray(numArray){var hexArray=[];for(var j=0;j < numArray.length;j++) {hexArray.push(numArray[j].toString(16));}return hexArray;}; /**
	     * State of CEA-608 pen or character
	     * @constructor
	     */var PenState=function PenState(foreground,underline,italics,background,flash){this.foreground = foreground || "white";this.underline = underline || false;this.italics = italics || false;this.background = background || "black";this.flash = flash || false;};PenState.prototype = {reset:function reset(){this.foreground = "white";this.underline = false;this.italics = false;this.background = "black";this.flash = false;},setStyles:function setStyles(styles){var attribs=["foreground","underline","italics","background","flash"];for(var i=0;i < attribs.length;i++) {var style=attribs[i];if(styles.hasOwnProperty(style)){this[style] = styles[style];}}},isDefault:function isDefault(){return this.foreground === "white" && !this.underline && !this.italics && this.background === "black" && !this.flash;},equals:function equals(other){return this.foreground === other.foreground && this.underline === other.underline && this.italics === other.italics && this.background === other.background && this.flash === other.flash;},copy:function copy(newPenState){this.foreground = newPenState.foreground;this.underline = newPenState.underline;this.italics = newPenState.italics;this.background = newPenState.background;this.flash = newPenState.flash;},toString:function toString(){return "color=" + this.foreground + ", underline=" + this.underline + ", italics=" + this.italics + ", background=" + this.background + ", flash=" + this.flash;}}; /**
	     * Unicode character with styling and background.
	     * @constructor
	     */var StyledUnicodeChar=function StyledUnicodeChar(uchar,foreground,underline,italics,background,flash){this.uchar = uchar || ' '; // unicode character
	this.penState = new PenState(foreground,underline,italics,background,flash);};StyledUnicodeChar.prototype = {reset:function reset(){this.uchar = ' ';this.penState.reset();},setChar:function setChar(uchar,newPenState){this.uchar = uchar;this.penState.copy(newPenState);},setPenState:function setPenState(newPenState){this.penState.copy(newPenState);},equals:function equals(other){return this.uchar === other.uchar && this.penState.equals(other.penState);},copy:function copy(newChar){this.uchar = newChar.uchar;this.penState.copy(newChar.penState);},isEmpty:function isEmpty(){return this.uchar === ' ' && this.penState.isDefault();}}; /**
	     * CEA-608 row consisting of NR_COLS instances of StyledUnicodeChar.
	     * @constructor
	     */var Row=function Row(){this.chars = [];for(var i=0;i < NR_COLS;i++) {this.chars.push(new StyledUnicodeChar());}this.pos = 0;this.currPenState = new PenState();};Row.prototype = {equals:function equals(other){var equal=true;for(var i=0;i < NR_COLS;i++) {if(!this.chars[i].equals(other.chars[i])){equal = false;break;}}return equal;},copy:function copy(other){for(var i=0;i < NR_COLS;i++) {this.chars[i].copy(other.chars[i]);}},isEmpty:function isEmpty(){var empty=true;for(var i=0;i < NR_COLS;i++) {if(!this.chars[i].isEmpty()){empty = false;break;}}return empty;}, /**
	         *  Set the cursor to a valid column.
	         */setCursor:function setCursor(absPos){if(this.pos !== absPos){this.pos = absPos;}if(this.pos < 0){logger.log("ERROR","Negative cursor position " + this.pos);this.pos = 0;}else if(this.pos > NR_COLS){logger.log("ERROR","Too large cursor position " + this.pos);this.pos = NR_COLS;}}, /** 
	         * Move the cursor relative to current position.
	         */moveCursor:function moveCursor(relPos){var newPos=this.pos + relPos;if(relPos > 1){for(var i=this.pos + 1;i < newPos + 1;i++) {this.chars[i].setPenState(this.currPenState);}}this.setCursor(newPos);}, /**
	         * Backspace, move one step back and clear character.
	         */backSpace:function backSpace(){this.moveCursor(-1);this.chars[this.pos].setChar(' ',this.currPenState);},insertChar:function insertChar(byte){if(byte >= 0x90){ //Extended char
	this.backSpace();}var char=getCharForByte(byte);if(this.pos >= NR_COLS){logger.log("ERROR","Cannot insert " + byte.toString(16) + " (" + char + ") at position " + this.pos + ". Skipping it!");return;}this.chars[this.pos].setChar(char,this.currPenState);this.moveCursor(1);},clearFromPos:function clearFromPos(startPos){var i;for(i = startPos;i < NR_COLS;i++) {this.chars[i].reset();}},clear:function clear(){this.clearFromPos(0);this.pos = 0;this.currPenState.reset();},clearToEndOfRow:function clearToEndOfRow(){this.clearFromPos(this.pos);},getTextString:function getTextString(){var chars=[];var empty=true;for(var i=0;i < NR_COLS;i++) {var char=this.chars[i].uchar;if(char !== " "){empty = false;}chars.push(char);}if(empty){return "";}else {return chars.join("");}},setPenStyles:function setPenStyles(styles){this.currPenState.setStyles(styles);var currChar=this.chars[this.pos];currChar.setPenState(this.currPenState);}}; /**
	     * Keep a CEA-608 screen of 32x15 styled characters
	     * @constructor
	    */var CaptionScreen=function CaptionScreen(){this.rows = [];for(var i=0;i < NR_ROWS;i++) {this.rows.push(new Row()); // Note that we use zero-based numbering (0-14)
	}this.currRow = NR_ROWS - 1;this.nrRollUpRows = null;this.reset();};CaptionScreen.prototype = {reset:function reset(){for(var i=0;i < NR_ROWS;i++) {this.rows[i].clear();}this.currRow = NR_ROWS - 1;},equals:function equals(other){var equal=true;for(var i=0;i < NR_ROWS;i++) {if(!this.rows[i].equals(other.rows[i])){equal = false;break;}}return equal;},copy:function copy(other){for(var i=0;i < NR_ROWS;i++) {this.rows[i].copy(other.rows[i]);}},isEmpty:function isEmpty(){var empty=true;for(var i=0;i < NR_ROWS;i++) {if(!this.rows[i].isEmpty()){empty = false;break;}}return empty;},backSpace:function backSpace(){var row=this.rows[this.currRow];row.backSpace();},clearToEndOfRow:function clearToEndOfRow(){var row=this.rows[this.currRow];row.clearToEndOfRow();}, /**
	         * Insert a character (without styling) in the current row.
	         */insertChar:function insertChar(char){var row=this.rows[this.currRow];row.insertChar(char);},setPen:function setPen(styles){var row=this.rows[this.currRow];row.setPenStyles(styles);},moveCursor:function moveCursor(relPos){var row=this.rows[this.currRow];row.moveCursor(relPos);},setCursor:function setCursor(absPos){logger.log("INFO","setCursor: " + absPos);var row=this.rows[this.currRow];row.setCursor(absPos);},setPAC:function setPAC(pacData){logger.log("INFO","pacData = " + JSON.stringify(pacData));var newRow=pacData.row - 1;if(this.nrRollUpRows && newRow < this.nrRollUpRows - 1){newRow = this.nrRollUpRows - 1;}this.currRow = newRow;var row=this.rows[this.currRow];if(pacData.indent !== null){var indent=pacData.indent;var prevPos=Math.max(indent - 1,0);row.setCursor(pacData.indent);pacData.color = row.chars[prevPos].penState.foreground;}var styles={foreground:pacData.color,underline:pacData.underline,italics:pacData.italics,background:'black',flash:false};this.setPen(styles);}, /**
	         * Set background/extra foreground, but first do back_space, and then insert space (backwards compatibility).
	         */setBkgData:function setBkgData(bkgData){logger.log("INFO","bkgData = " + JSON.stringify(bkgData));this.backSpace();this.setPen(bkgData);this.insertChar(0x20); //Space
	},setRollUpRows:function setRollUpRows(nrRows){this.nrRollUpRows = nrRows;},rollUp:function rollUp(){if(this.nrRollUpRows === null){logger.log("DEBUG","roll_up but nrRollUpRows not set yet");return; //Not properly setup
	}logger.log("TEXT",this.getDisplayText());var topRowIndex=this.currRow + 1 - this.nrRollUpRows;var topRow=this.rows.splice(topRowIndex,1)[0];topRow.clear();this.rows.splice(this.currRow,0,topRow);logger.log("INFO","Rolling up"); //logger.log("TEXT", this.get_display_text())
	}, /**
	        * Get all non-empty rows with as unicode text. 
	        */getDisplayText:function getDisplayText(asOneRow){asOneRow = asOneRow || false;var displayText=[];var text="";var rowNr=-1;for(var i=0;i < NR_ROWS;i++) {var rowText=this.rows[i].getTextString();if(rowText){rowNr = i + 1;if(asOneRow){displayText.push("Row " + rowNr + ': "' + rowText + '"');}else {displayText.push(rowText.trim());}}}if(displayText.length > 0){if(asOneRow){text = "[" + displayText.join(" | ") + "]";}else {text = displayText.join("\n");}}return text;},getTextAndFormat:function getTextAndFormat(){return this.rows;}}; /**
	     * Handle a CEA-608 channel and send decoded data to outputFilter
	     * @constructor
	     * @param {Number} channelNumber (1 or 2)
	     * @param {CueHandler} outputFilter Output from channel1 newCue(startTime, endTime, captionScreen)
	    */var Cea608Channel=function Cea608Channel(channelNumber,outputFilter){this.chNr = channelNumber;this.outputFilter = outputFilter;this.mode = null;this.verbose = 0;this.displayedMemory = new CaptionScreen();this.nonDisplayedMemory = new CaptionScreen();this.lastOutputScreen = new CaptionScreen();this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];this.writeScreen = this.displayedMemory;this.mode = null;this.cueStartTime = null; // Keeps track of where a cue started.
	};Cea608Channel.prototype = {modes:["MODE_ROLL-UP","MODE_POP-ON","MODE_PAINT-ON","MODE_TEXT"],reset:function reset(){this.mode = null;this.displayedMemory.reset();this.nonDisplayedMemory.reset();this.lastOutputScreen.reset();this.currRollUpRow = this.displayedMemory.rows[NR_ROWS - 1];this.writeScreen = this.displayedMemory;this.mode = null;this.cueStartTime = null;this.lastCueEndTime = null;},getHandler:function getHandler(){return this.outputFilter;},setHandler:function setHandler(newHandler){this.outputFilter = newHandler;},setPAC:function setPAC(pacData){this.writeScreen.setPAC(pacData);},setBkgData:function setBkgData(bkgData){this.writeScreen.setBkgData(bkgData);},setMode:function setMode(newMode){if(newMode === this.mode){return;}this.mode = newMode;logger.log("INFO","MODE=" + newMode);if(this.mode == "MODE_POP-ON"){this.writeScreen = this.nonDisplayedMemory;}else {this.writeScreen = this.displayedMemory;this.writeScreen.reset();}if(this.mode !== "MODE_ROLL-UP"){this.displayedMemory.nrRollUpRows = null;this.nonDisplayedMemory.nrRollUpRows = null;}this.mode = newMode;},insertChars:function insertChars(chars){for(var i=0;i < chars.length;i++) {this.writeScreen.insertChar(chars[i]);}var screen=this.writeScreen === this.displayedMemory?"DISP":"NON_DISP";logger.log("INFO",screen + ": " + this.writeScreen.getDisplayText(true));if(this.mode === "MODE_PAINT-ON" || this.mode === "MODE_ROLL-UP"){logger.log("TEXT","DISPLAYED: " + this.displayedMemory.getDisplayText(true));this.outputDataUpdate();}},cc_RCL:function cc_RCL(){ // Resume Caption Loading (switch mode to Pop On)
	logger.log("INFO","RCL - Resume Caption Loading");this.setMode("MODE_POP-ON");},cc_BS:function cc_BS(){ // BackSpace
	logger.log("INFO","BS - BackSpace");if(this.mode === "MODE_TEXT"){return;}this.writeScreen.backSpace();if(this.writeScreen === this.displayedMemory){this.outputDataUpdate();}},cc_AOF:function cc_AOF(){ // Reserved (formerly Alarm Off)
	return;},cc_AON:function cc_AON(){ // Reserved (formerly Alarm On)
	return;},cc_DER:function cc_DER(){ // Delete to End of Row
	logger.log("INFO","DER- Delete to End of Row");this.writeScreen.clearToEndOfRow();this.outputDataUpdate();},cc_RU:function cc_RU(nrRows){ //Roll-Up Captions-2,3,or 4 Rows
	logger.log("INFO","RU(" + nrRows + ") - Roll Up");this.writeScreen = this.displayedMemory;this.setMode("MODE_ROLL-UP");this.writeScreen.setRollUpRows(nrRows);},cc_FON:function cc_FON(){ //Flash On
	logger.log("INFO","FON - Flash On");this.writeScreen.setPen({flash:true});},cc_RDC:function cc_RDC(){ // Resume Direct Captioning (switch mode to PaintOn)
	logger.log("INFO","RDC - Resume Direct Captioning");this.setMode("MODE_PAINT-ON");},cc_TR:function cc_TR(){ // Text Restart in text mode (not supported, however)
	logger.log("INFO","TR");this.setMode("MODE_TEXT");},cc_RTD:function cc_RTD(){ // Resume Text Display in Text mode (not supported, however)
	logger.log("INFO","RTD");this.setMode("MODE_TEXT");},cc_EDM:function cc_EDM(){ // Erase Displayed Memory
	logger.log("INFO","EDM - Erase Displayed Memory");this.displayedMemory.reset();this.outputDataUpdate();},cc_CR:function cc_CR(){ // Carriage Return
	logger.log("CR - Carriage Return");this.writeScreen.rollUp();this.outputDataUpdate();},cc_ENM:function cc_ENM(){ //Erase Non-Displayed Memory
	logger.log("INFO","ENM - Erase Non-displayed Memory");this.nonDisplayedMemory.reset();},cc_EOC:function cc_EOC(){ //End of Caption (Flip Memories)
	logger.log("INFO","EOC - End Of Caption");if(this.mode === "MODE_POP-ON"){var tmp=this.displayedMemory;this.displayedMemory = this.nonDisplayedMemory;this.nonDisplayedMemory = tmp;this.writeScreen = this.nonDisplayedMemory;logger.log("TEXT","DISP: " + this.displayedMemory.getDisplayText());}this.outputDataUpdate();},cc_TO:function cc_TO(nrCols){ // Tab Offset 1,2, or 3 columns
	logger.log("INFO","TO(" + nrCols + ") - Tab Offset");this.writeScreen.moveCursor(nrCols);},cc_MIDROW:function cc_MIDROW(secondByte){ // Parse MIDROW command
	var styles={flash:false};styles.underline = secondByte % 2 === 1;styles.italics = secondByte >= 0x2e;if(!styles.italics){var colorIndex=Math.floor(secondByte / 2) - 0x10;var colors=["white","green","blue","cyan","red","yellow","magenta"];styles.foreground = colors[colorIndex];}else {styles.foreground = "white";}logger.log("INFO","MIDROW: " + JSON.stringify(styles));this.writeScreen.setPen(styles);},outputDataUpdate:function outputDataUpdate(){var t=logger.time;if(t === null){return;}if(this.outputFilter){if(this.outputFilter.updateData){this.outputFilter.updateData(t,this.displayedMemory);}if(this.cueStartTime === null && !this.displayedMemory.isEmpty()){ // Start of a new cue
	this.cueStartTime = t;}else {if(!this.displayedMemory.equals(this.lastOutputScreen)){if(this.outputFilter.newCue){this.outputFilter.newCue(this.cueStartTime,t,this.lastOutputScreen);}this.cueStartTime = this.displayedMemory.isEmpty()?null:t;}}this.lastOutputScreen.copy(this.displayedMemory);}},cueSplitAtTime:function cueSplitAtTime(t){if(this.outputFilter){if(!this.displayedMemory.isEmpty()){if(this.outputFilter.newCue){this.outputFilter.newCue(this.cueStartTime,t,this.displayedMemory);}this.cueStartTime = t;}}}}; /**
	     * Parse CEA-608 data and send decoded data to out1 and out2.
	     * @constructor
	     * @param {Number} field  CEA-608 field (1 or 2)
	     * @param {CueHandler} out1 Output from channel1 newCue(startTime, endTime, captionScreen)
	     * @param {CueHandler} out2 Output from channel2 newCue(startTime, endTime, captionScreen)
	     */var Cea608Parser=function Cea608Parser(field,out1,out2){this.field = field || 1;this.outputs = [out1,out2];this.channels = [new Cea608Channel(1,out1),new Cea608Channel(2,out2)];this.currChNr = -1; // Will be 1 or 2
	this.lastCmdA = null; // First byte of last command
	this.lastCmdB = null; // Second byte of last command
	this.bufferedData = [];this.startTime = null;this.lastTime = null;this.dataCounters = {'padding':0,'char':0,'cmd':0,'other':0};};Cea608Parser.prototype = {getHandler:function getHandler(index){return this.channels[index].getHandler();},setHandler:function setHandler(index,newHandler){this.channels[index].setHandler(newHandler);}, /**
	         * Add data for time t in forms of list of bytes (unsigned ints). The bytes are treated as pairs.
	         */addData:function addData(t,byteList){var cmdFound,a,b,charsFound=false;this.lastTime = t;logger.setTime(t);for(var i=0;i < byteList.length;i += 2) {a = byteList[i] & 0x7f;b = byteList[i + 1] & 0x7f;if(a >= 0x10 && a <= 0x1f && a === this.lastCmdA && b === this.lastCmdB){this.lastCmdA = null;this.lastCmdB = null;logger.log("DEBUG","Repeated command (" + numArrayToHexArray([a,b]) + ") is dropped");continue; // Repeated commands are dropped (once)
	}if(a === 0 && b === 0){this.dataCounters.padding += 2;continue;}else {logger.log("DATA","[" + numArrayToHexArray([byteList[i],byteList[i + 1]]) + "] -> (" + numArrayToHexArray([a,b]) + ")");}cmdFound = this.parseCmd(a,b);if(!cmdFound){cmdFound = this.parseMidrow(a,b);}if(!cmdFound){cmdFound = this.parsePAC(a,b);}if(!cmdFound){cmdFound = this.parseBackgroundAttributes(a,b);}if(!cmdFound){charsFound = this.parseChars(a,b);if(charsFound){if(this.currChNr && this.currChNr >= 0){var channel=this.channels[this.currChNr - 1];channel.insertChars(charsFound);}else {logger.log("WARNING","No channel found yet. TEXT-MODE?");}}}if(cmdFound){this.dataCounters.cmd += 2;}else if(charsFound){this.dataCounters.char += 2;}else {this.dataCounters.other += 2;logger.log("WARNING","Couldn't parse cleaned data " + numArrayToHexArray([a,b]) + " orig: " + numArrayToHexArray([byteList[i],byteList[i + 1]]));}}}, /**
	         * Parse Command.
	         * @returns {Boolean} Tells if a command was found
	         */parseCmd:function parseCmd(a,b){var chNr=null;var cond1=(a === 0x14 || a === 0x15 || a === 0x1C || a === 0x1D) && 0x20 <= b && b <= 0x2F;var cond2=(a === 0x17 || a === 0x1F) && 0x21 <= b && b <= 0x23;if(!(cond1 || cond2)){return false;}if(a === 0x14 || a === 0x15 || a === 0x17){chNr = 1;}else {chNr = 2; // (a === 0x1C || a === 0x1D || a=== 0x1f)
	}var channel=this.channels[chNr - 1];if(a === 0x14 || a === 0x15 || a === 0x1C || a === 0x1D){if(b === 0x20){channel.cc_RCL();}else if(b === 0x21){channel.cc_BS();}else if(b === 0x22){channel.cc_AOF();}else if(b === 0x23){channel.cc_AON();}else if(b === 0x24){channel.cc_DER();}else if(b === 0x25){channel.cc_RU(2);}else if(b === 0x26){channel.cc_RU(3);}else if(b === 0x27){channel.cc_RU(4);}else if(b === 0x28){channel.cc_FON();}else if(b === 0x29){channel.cc_RDC();}else if(b === 0x2A){channel.cc_TR();}else if(b === 0x2B){channel.cc_RTD();}else if(b === 0x2C){channel.cc_EDM();}else if(b === 0x2D){channel.cc_CR();}else if(b === 0x2E){channel.cc_ENM();}else if(b === 0x2F){channel.cc_EOC();}}else { //a == 0x17 || a == 0x1F
	channel.cc_TO(b - 0x20);}this.lastCmdA = a;this.lastCmdB = b;this.currChNr = chNr;return true;}, /**
	         * Parse midrow styling command
	         * @returns {Boolean}
	         */parseMidrow:function parseMidrow(a,b){var chNr=null;if((a === 0x11 || a === 0x19) && 0x20 <= b && b <= 0x2f){if(a === 0x11){chNr = 1;}else {chNr = 2;}if(chNr !== this.currChNr){logger.log("ERROR","Mismatch channel in midrow parsing");return false;}var channel=this.channels[chNr - 1]; // cea608 spec says midrow codes should inject a space
	channel.insertChars([0x20]);channel.cc_MIDROW(b);logger.log("DEBUG","MIDROW (" + numArrayToHexArray([a,b]) + ")");this.lastCmdA = a;this.lastCmdB = b;return true;}return false;}, /**
	         * Parse Preable Access Codes (Table 53).
	         * @returns {Boolean} Tells if PAC found
	         */parsePAC:function parsePAC(a,b){var chNr=null;var row=null;var case1=(0x11 <= a && a <= 0x17 || 0x19 <= a && a <= 0x1F) && 0x40 <= b && b <= 0x7F;var case2=(a === 0x10 || a === 0x18) && 0x40 <= b && b <= 0x5F;if(!(case1 || case2)){return false;}chNr = a <= 0x17?1:2;if(0x40 <= b && b <= 0x5F){row = chNr === 1?rowsLowCh1[a]:rowsLowCh2[a];}else { // 0x60 <= b <= 0x7F
	row = chNr === 1?rowsHighCh1[a]:rowsHighCh2[a];}var pacData=this.interpretPAC(row,b);var channel=this.channels[chNr - 1];channel.setPAC(pacData);this.lastCmdA = a;this.lastCmdB = b;this.currChNr = chNr;return true;}, /**
	         * Interpret the second byte of the pac, and return the information.
	         * @returns {Object} pacData with style parameters.
	         */interpretPAC:function interpretPAC(row,byte){var pacIndex=byte;var pacData={color:null,italics:false,indent:null,underline:false,row:row};if(byte > 0x5F){pacIndex = byte - 0x60;}else {pacIndex = byte - 0x40;}pacData.underline = (pacIndex & 1) === 1;if(pacIndex <= 0xd){pacData.color = ['white','green','blue','cyan','red','yellow','magenta','white'][Math.floor(pacIndex / 2)];}else if(pacIndex <= 0xf){pacData.italics = true;pacData.color = 'white';}else {pacData.indent = Math.floor((pacIndex - 0x10) / 2) * 4;}return pacData; // Note that row has zero offset. The spec uses 1.
	}, /**
	         * Parse characters.
	         * @returns An array with 1 to 2 codes corresponding to chars, if found. null otherwise.
	         */parseChars:function parseChars(a,b){var channelNr=null,charCodes=null,charCode1=null,charCode2=null;if(a >= 0x19){channelNr = 2;charCode1 = a - 8;}else {channelNr = 1;charCode1 = a;}if(0x11 <= charCode1 && charCode1 <= 0x13){ // Special character
	var oneCode=b;if(charCode1 === 0x11){oneCode = b + 0x50;}else if(charCode1 === 0x12){oneCode = b + 0x70;}else {oneCode = b + 0x90;}logger.log("INFO","Special char '" + getCharForByte(oneCode) + "' in channel " + channelNr);charCodes = [oneCode];this.lastCmdA = a;this.lastCmdB = b;}else if(0x20 <= a && a <= 0x7f){charCodes = b === 0?[a]:[a,b];this.lastCmdA = null;this.lastCmdB = null;}if(charCodes){var hexCodes=numArrayToHexArray(charCodes);logger.log("DEBUG","Char codes =  " + hexCodes.join(","));}return charCodes;}, /**
	        * Parse extended background attributes as well as new foreground color black.
	        * @returns{Boolean} Tells if background attributes are found
	        */parseBackgroundAttributes:function parseBackgroundAttributes(a,b){var bkgData,index,chNr,channel;var case1=(a === 0x10 || a === 0x18) && 0x20 <= b && b <= 0x2f;var case2=(a === 0x17 || a === 0x1f) && 0x2d <= b && b <= 0x2f;if(!(case1 || case2)){return false;}bkgData = {};if(a === 0x10 || a === 0x18){index = Math.floor((b - 0x20) / 2);bkgData.background = backgroundColors[index];if(b % 2 === 1){bkgData.background = bkgData.background + "_semi";}}else if(b === 0x2d){bkgData.background = "transparent";}else {bkgData.foreground = "black";if(b === 0x2f){bkgData.underline = true;}}chNr = a < 0x18?1:2;channel = this.channels[chNr - 1];channel.setBkgData(bkgData);this.lastCmdA = a;this.lastCmdB = b;return true;}, /**
	         * Reset state of parser and its channels.
	         */reset:function reset(){for(var i=0;i < this.channels.length;i++) {if(this.channels[i]){this.channels[i].reset();}}this.lastCmdA = null;this.lastCmdB = null;}, /**
	         * Trigger the generation of a cue, and the start of a new one if displayScreens are not empty.
	         */cueSplitAtTime:function cueSplitAtTime(t){for(var i=0;i < this.channels.length;i++) {if(this.channels[i]){this.channels[i].cueSplitAtTime(t);}}}}; /**
	     * Find ranges corresponding to SEA CEA-608 NALUS in sizeprepended NALU array.
	     * @param {raw} dataView of binary data
	     * @param {startPos} start position in raw
	     * @param {size} total size of data in raw to consider
	     * @returns 
	     */var findCea608Nalus=function findCea608Nalus(raw,startPos,size){var nalSize=0,cursor=startPos,nalType=0,cea608NaluRanges=[], // Check SEI data according to ANSI-SCTE 128
	isCEA608SEI=function isCEA608SEI(payloadType,payloadSize,raw,pos){if(payloadType !== 4 || payloadSize < 8){return null;}var countryCode=raw.getUint8(pos);var providerCode=raw.getUint16(pos + 1);var userIdentifier=raw.getUint32(pos + 3);var userDataTypeCode=raw.getUint8(pos + 7);return countryCode == 0xB5 && providerCode == 0x31 && userIdentifier == 0x47413934 && userDataTypeCode == 0x3;};while(cursor < startPos + size) {nalSize = raw.getUint32(cursor);nalType = raw.getUint8(cursor + 4) & 0x1F; //console.log(time + "  NAL " + nalType);
	if(nalType === 6){ // SEI NAL Unit. The NAL header is the first byte
	//console.log("SEI NALU of size " + nalSize + " at time " + time);
	var pos=cursor + 5;var payloadType=-1;while(pos < cursor + 4 + nalSize - 1) { // The last byte should be rbsp_trailing_bits
	payloadType = 0;var b=0xFF;while(b === 0xFF) {b = raw.getUint8(pos);payloadType += b;pos++;}var payloadSize=0;b = 0xFF;while(b === 0xFF) {b = raw.getUint8(pos);payloadSize += b;pos++;}if(isCEA608SEI(payloadType,payloadSize,raw,pos)){ //console.log("CEA608 SEI " + time + " " + payloadSize);
	cea608NaluRanges.push([pos,payloadSize]);}pos += payloadSize;}}cursor += nalSize + 4;}return cea608NaluRanges;};var extractCea608DataFromRange=function extractCea608DataFromRange(raw,cea608Range){var pos=cea608Range[0];var fieldData=[[],[]];pos += 8; // Skip the identifier up to userDataTypeCode
	var ccCount=raw.getUint8(pos) & 0x1f;pos += 2; // Advance 1 and skip reserved byte
	for(var i=0;i < ccCount;i++) {var byte=raw.getUint8(pos);var ccValid=byte & 0x4;var ccType=byte & 0x3;pos++;var ccData1=raw.getUint8(pos); // Keep parity bit
	pos++;var ccData2=raw.getUint8(pos); // Keep parity bit
	pos++;if(ccValid && (ccData1 & 0x7f) + (ccData2 & 0x7f) !== 0){ //Check validity and non-empty data
	if(ccType === 0){fieldData[0].push(ccData1);fieldData[0].push(ccData2);}else if(ccType === 1){fieldData[1].push(ccData1);fieldData[1].push(ccData2);}}}return fieldData;};exports.logger = logger;exports.PenState = PenState;exports.CaptionScreen = CaptionScreen;exports.Cea608Parser = Cea608Parser;exports.findCea608Nalus = findCea608Nalus;exports.extractCea608DataFromRange = extractCea608DataFromRange;})( false?undefined.cea608parser = {}:exports);
	//# sourceMappingURL=cea608-parser.js.map


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _get=function get(_x,_x2,_x3){var _again=true;_function: while(_again) {var object=_x,property=_x2,receiver=_x3;_again = false;if(object === null)object = Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc === undefined){var parent=Object.getPrototypeOf(object);if(parent === null){return undefined;}else {_x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;}}else if('value' in desc){return desc.value;}else {var getter=desc.get;if(getter === undefined){return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass,superClass){if(typeof superClass !== 'function' && superClass !== null){throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__ = superClass;}var _ErrorsBase2=__webpack_require__(118);var _ErrorsBase3=_interopRequireDefault(_ErrorsBase2); /**
	 * Errors declaration
	 * @class
	 */var Errors=(function(_ErrorsBase){_inherits(Errors,_ErrorsBase);function Errors(){_classCallCheck(this,Errors);_get(Object.getPrototypeOf(Errors.prototype),'constructor',this).call(this); /**
	         * Error code returned when a manifest parsing error occurs
	         */this.MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE = 10; /**
	         * Error code returned when a manifest loading error occurs
	         */this.MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE = 11; /**
	         * Error code returned when a xlink loading error occurs
	         */this.XLINK_LOADER_LOADING_FAILURE_ERROR_CODE = 12; /**
	         * Error code returned when the update of segments list has failed
	         */this.SEGMENTS_UPDATE_FAILED_ERROR_CODE = 13;this.SEGMENTS_UNAVAILABLE_ERROR_CODE = 14;this.SEGMENT_BASE_LOADER_ERROR_CODE = 15;this.TIME_SYNC_FAILED_ERROR_CODE = 16;this.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE = 17;this.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE = 18;this.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE = 19;this.APPEND_ERROR_CODE = 20;this.REMOVE_ERROR_CODE = 21;this.DATA_UPDATE_FAILED_ERROR_CODE = 22; /**
	         * Error code returned when MediaSource is not supported by the browser
	         */this.CAPABILITY_MEDIASOURCE_ERROR_CODE = 23; /**
	         * Error code returned when Protected contents are not supported
	         */this.CAPABILITY_MEDIAKEYS_ERROR_CODE = 24;this.DOWNLOAD_ERROR_ID_MANIFEST_CODE = 25; /*
	         *@deprecated
	         */this.DOWNLOAD_ERROR_ID_MANIFEST = 'manifest';this.DOWNLOAD_ERROR_ID_SIDX_CODE = 26;this.DOWNLOAD_ERROR_ID_CONTENT_CODE = 27; /*
	         *@deprecated
	         */this.DOWNLOAD_ERROR_ID_CONTENT = 'content';this.DOWNLOAD_ERROR_ID_INITIALIZATION_CODE = 28; /*
	         *@deprecated
	         */this.DOWNLOAD_ERROR_ID_INITIALIZATION = 'initialization';this.DOWNLOAD_ERROR_ID_XLINK_CODE = 29; /*
	         *@deprecated
	         */this.DOWNLOAD_ERROR_ID_XLINK = 'xlink';this.MANIFEST_ERROR_ID_CODEC_CODE = 30;this.MANIFEST_ERROR_ID_PARSE_CODE = 31; /**
	         * Error code returned when no stream (period) has been detected in the manifest
	         */this.MANIFEST_ERROR_ID_NOSTREAMS_CODE = 32; /**
	         * Error code returned when something wrong has append during subtitles parsing (TTML or VTT)
	         */this.TIMED_TEXT_ERROR_ID_PARSE_CODE = 33; /**
	         * Error code returned when a 'muxed' media type has been detected in the manifest. This type is not supported
	         */this.MANIFEST_ERROR_ID_MULTIPLEXED_CODE = 34; /**
	         * Error code returned when a media source type is not supported
	         */this.MEDIASOURCE_TYPE_UNSUPPORTED_CODE = 35;this.MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE = 'parsing failed for ';this.MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE = 'Failed loading manifest: ';this.XLINK_LOADER_LOADING_FAILURE_ERROR_MESSAGE = 'Failed loading Xlink element: ';this.SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE = 'Segments update failed';this.SEGMENTS_UNAVAILABLE_ERROR_MESSAGE = 'no segments are available yet';this.SEGMENT_BASE_LOADER_ERROR_MESSAGE = 'error loading segments';this.TIME_SYNC_FAILED_ERROR_MESSAGE = 'Failed to synchronize time';this.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE = 'request is null';this.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE = 'Failed to resolve a valid URL';this.APPEND_ERROR_MESSAGE = 'chunk is not defined';this.REMOVE_ERROR_MESSAGE = 'buffer is not defined';this.DATA_UPDATE_FAILED_ERROR_MESSAGE = 'Data update failed';this.CAPABILITY_MEDIASOURCE_ERROR_MESSAGE = 'mediasource is not supported';this.CAPABILITY_MEDIAKEYS_ERROR_MESSAGE = 'mediakeys is not supported';this.TIMED_TEXT_ERROR_MESSAGE_PARSE = 'parsing error :';this.MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE = 'Error creating source buffer of type : ';}return Errors;})(_ErrorsBase3['default']);var errors=new Errors();exports['default'] = errors;module.exports = exports['default'];
	//# sourceMappingURL=Errors.js.map


/***/ }),
/* 118 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _createClass=(function(){function defineProperties(target,props){for(var i=0;i < props.length;i++) {var descriptor=props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if('value' in descriptor)descriptor.writable = true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};})();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var ErrorsBase=(function(){function ErrorsBase(){_classCallCheck(this,ErrorsBase);}_createClass(ErrorsBase,[{key:'extend',value:function extend(errors,config){if(!errors)return;var override=config?config.override:false;var publicOnly=config?config.publicOnly:false;for(var err in errors) {if(!errors.hasOwnProperty(err) || this[err] && !override)continue;if(publicOnly && errors[err].indexOf('public_') === -1)continue;this[err] = errors[err];}}}]);return ErrorsBase;})();exports['default'] = ErrorsBase;module.exports = exports['default'];
	//# sourceMappingURL=ErrorsBase.js.map


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var WEBVTT='WEBVTT';function VTTParser(){var context=this.context;var instance=undefined,logger=undefined,regExNewLine=undefined,regExToken=undefined,regExWhiteSpace=undefined,regExWhiteSpaceWordBoundary=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);regExNewLine = /(?:\r\n|\r|\n)/gm;regExToken = /-->/;regExWhiteSpace = /(^[\s]+|[\s]+$)/g;regExWhiteSpaceWordBoundary = /\s\b/g;}function parse(data){var captionArray=[];var len=undefined,lastStartTime=undefined;if(!data){return captionArray;}data = data.split(regExNewLine);len = data.length;lastStartTime = -1;for(var i=0;i < len;i++) {var item=data[i];if(item.length > 0 && item !== WEBVTT){if(item.match(regExToken)){var attributes=parseItemAttributes(item);var cuePoints=attributes.cuePoints;var styles=attributes.styles;var text=getSublines(data,i + 1);var startTime=convertCuePointTimes(cuePoints[0].replace(regExWhiteSpace,''));var endTime=convertCuePointTimes(cuePoints[1].replace(regExWhiteSpace,''));if(!isNaN(startTime) && !isNaN(endTime) && startTime >= lastStartTime && endTime > startTime){if(text !== ''){lastStartTime = startTime; //TODO Make VO external so other parsers can use.
	captionArray.push({start:startTime,end:endTime,data:text,styles:styles});}else {logger.error('Skipping cue due to empty/malformed cue text');}}else {logger.error('Skipping cue due to incorrect cue timing');}}}}return captionArray;}function convertCuePointTimes(time){var timeArray=time.split(':');var len=timeArray.length - 1;time = parseInt(timeArray[len - 1],10) * 60 + parseFloat(timeArray[len]);if(len === 2){time += parseInt(timeArray[0],10) * 3600;}return time;}function parseItemAttributes(data){var vttCuePoints=data.split(regExToken);var arr=vttCuePoints[1].split(regExWhiteSpaceWordBoundary);arr.shift(); //remove first array index it is empty...
	vttCuePoints[1] = arr[0];arr.shift();return {cuePoints:vttCuePoints,styles:getCaptionStyles(arr)};}function getCaptionStyles(arr){var styleObject={};arr.forEach(function(element){if(element.split(/:/).length > 1){var val=element.split(/:/)[1];if(val && val.search(/%/) != -1){val = parseInt(val.replace(/%/,''),10);}if(element.match(/align/) || element.match(/A/)){styleObject.align = val;}if(element.match(/line/) || element.match(/L/)){styleObject.line = val;}if(element.match(/position/) || element.match(/P/)){styleObject.position = val;}if(element.match(/size/) || element.match(/S/)){styleObject.size = val;}}});return styleObject;} /*
	    * VTT can have multiple lines to display per cuepoint.
	    */function getSublines(data,idx){var i=idx;var subline='';var lineData='';var lineCount=undefined;while(data[i] !== '' && i < data.length) {i++;}lineCount = i - idx;if(lineCount > 1){for(var j=0;j < lineCount;j++) {lineData = data[idx + j];if(!lineData.match(regExToken)){subline += lineData;if(j !== lineCount - 1){subline += '\n';}}else { // caption text should not have '-->' in it
	subline = '';break;}}}else {lineData = data[idx];if(!lineData.match(regExToken))subline = lineData;}return subline;}instance = {parse:parse};setup();return instance;}VTTParser.__dashjs_factory_name = 'VTTParser';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(VTTParser);module.exports = exports['default'];
	//# sourceMappingURL=VTTParser.js.map


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _imsc=__webpack_require__(75);function TTMLParser(){var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance(); /*
	     * This TTML parser follows "EBU-TT-D SUBTITLING DISTRIBUTION FORMAT - tech3380" spec - https://tech.ebu.ch/docs/tech/tech3380.pdf.
	     * */var instance=undefined,logger=undefined;var cueCounter=0; // Used to give every cue a unique ID.
	function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);}function getCueID(){var id='cue_TTML_' + cueCounter;cueCounter++;return id;} /**
	     * Parse the raw data and process it to return the HTML element representing the cue.
	     * Return the region to be processed and controlled (hide/show) by the caption controller.
	     * @param {string} data - raw data received from the TextSourceBuffer
	     * @param {number} offsetTime - offset time to apply to cue time
	     * @param {integer} startTimeSegment - startTime for the current segment
	     * @param {integer} endTimeSegment - endTime for the current segment
	     * @param {Array} images - images array referenced by subs MP4 box
	     */function parse(data,offsetTime,startTimeSegment,endTimeSegment,images){var errorMsg='';var captionArray=[];var startTime=undefined,endTime=undefined,i=undefined;var content={};var embeddedImages={};var currentImageId='';var accumulated_image_data='';var metadataHandler={onOpenTag:function onOpenTag(ns,name,attrs){if(name === 'image' && ns === 'http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt'){if(!attrs[' imagetype'] || attrs[' imagetype'].value !== 'PNG'){logger.warn('smpte-tt imagetype != PNG. Discarded');return;}currentImageId = attrs['http://www.w3.org/XML/1998/namespace id'].value;}},onCloseTag:function onCloseTag(){if(currentImageId){embeddedImages[currentImageId] = accumulated_image_data.trim();}accumulated_image_data = '';currentImageId = '';},onText:function onText(contents){if(currentImageId){accumulated_image_data = accumulated_image_data + contents;}}};if(!data){errorMsg = 'no ttml data to parse';throw new Error(errorMsg);}content.data = data;eventBus.trigger(_coreEventsEvents2['default'].TTML_TO_PARSE,content);var imsc1doc=(0,_imsc.fromXML)(content.data,function(msg){errorMsg = msg;},metadataHandler);eventBus.trigger(_coreEventsEvents2['default'].TTML_PARSED,{ttmlString:content.data,ttmlDoc:imsc1doc});var mediaTimeEvents=imsc1doc.getMediaTimeEvents();for(i = 0;i < mediaTimeEvents.length;i++) {var isd=(0,_imsc.generateISD)(imsc1doc,mediaTimeEvents[i],function(error){errorMsg = error;});if(isd.contents.some(function(topLevelContents){return topLevelContents.contents.length;})){ //be sure that mediaTimeEvents values are in the mp4 segment time ranges.
	startTime = mediaTimeEvents[i] + offsetTime < startTimeSegment?startTimeSegment:mediaTimeEvents[i] + offsetTime;endTime = mediaTimeEvents[i + 1] + offsetTime > endTimeSegment?endTimeSegment:mediaTimeEvents[i + 1] + offsetTime;if(startTime < endTime){captionArray.push({start:startTime,end:endTime,type:'html',cueID:getCueID(),isd:isd,images:images,embeddedImages:embeddedImages});}}}if(errorMsg !== ''){logger.error(errorMsg);throw new Error(errorMsg);}return captionArray;}instance = {parse:parse};setup();return instance;}TTMLParser.__dashjs_factory_name = 'TTMLParser';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(TTMLParser);module.exports = exports['default'];
	//# sourceMappingURL=TTMLParser.js.map


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker); /**
	 * This is a sink that is used to temporarily hold onto media chunks before a video element is added.
	 * The discharge() function is used to get the chunks out of the PreBuffer for adding to a real SourceBuffer.
	 *
	 * @class PreBufferSink
	 * @implements FragmentSink
	 */function PreBufferSink(onAppendedCallback){var context=this.context;var instance=undefined,logger=undefined,outstandingInit=undefined;var chunks=[];var onAppended=onAppendedCallback;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);}function reset(){chunks = [];outstandingInit = null;onAppended = null;}function append(chunk){if(chunk.segmentType !== 'InitializationSegment'){ //Init segments are stored in the initCache.
	chunks.push(chunk);chunks.sort(function(a,b){return a.start - b.start;});outstandingInit = null;}else { //We need to hold an init chunk for when a corresponding media segment is being downloaded when the discharge happens.
	outstandingInit = chunk;}logger.debug('PreBufferSink appended chunk s: ' + chunk.start + '; e: ' + chunk.end);if(onAppended){onAppended({chunk:chunk});}}function remove(start,end){chunks = chunks.filter(function(a){return !((isNaN(end) || a.start < end) && (isNaN(start) || a.end > start));}); //The opposite of the getChunks predicate.
	} //Nothing async, nothing to abort.
	function abort(){}function getAllBufferRanges(){var ranges=[];for(var i=0;i < chunks.length;i++) {var chunk=chunks[i];if(ranges.length === 0 || chunk.start > ranges[ranges.length - 1].end){ranges.push({start:chunk.start,end:chunk.end});}else {ranges[ranges.length - 1].end = chunk.end;}} //Implements TimeRanges interface. So acts just like sourceBuffer.buffered.
	var timeranges={start:function start(n){return ranges[n].start;},end:function end(n){return ranges[n].end;}};Object.defineProperty(timeranges,'length',{get:function get(){return ranges.length;}});return timeranges;}function updateTimestampOffset(){} // Nothing to do
	/**
	     * Return the all chunks in the buffer the lie between times start and end.
	     * Because a chunk cannot be split, this returns the full chunk if any part of its time lies in the requested range.
	     * Chunks are removed from the buffer when they are discharged.
	     * @function PreBufferSink#discharge
	     * @param {?Number} start The start time from which to discharge from the buffer. If NaN, it is regarded as unbounded.
	     * @param {?Number} end The end time from which to discharge from the buffer. If NaN, it is regarded as unbounded.
	     * @returns {Array} The set of chunks from the buffer within the time ranges.
	     */function discharge(start,end){var result=getChunksAt(start,end);if(outstandingInit){result.push(outstandingInit);outstandingInit = null;}remove(start,end);return result;}function getChunksAt(start,end){return chunks.filter(function(a){return (isNaN(end) || a.start < end) && (isNaN(start) || a.end > start);});}instance = {getAllBufferRanges:getAllBufferRanges,append:append,remove:remove,abort:abort,discharge:discharge,reset:reset,updateTimestampOffset:updateTimestampOffset};setup();return instance;}PreBufferSink.__dashjs_factory_name = 'PreBufferSink';var factory=_coreFactoryMaker2['default'].getClassFactory(PreBufferSink);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=PreBufferSink.js.map


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _rulesAbrABRRulesCollection=__webpack_require__(123);var _rulesAbrABRRulesCollection2=_interopRequireDefault(_rulesAbrABRRulesCollection);var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _constantsMetricsConstants=__webpack_require__(50);var _constantsMetricsConstants2=_interopRequireDefault(_constantsMetricsConstants);var _voBitrateInfo=__webpack_require__(131);var _voBitrateInfo2=_interopRequireDefault(_voBitrateInfo);var _modelsFragmentModel=__webpack_require__(53);var _modelsFragmentModel2=_interopRequireDefault(_modelsFragmentModel);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _rulesRulesContext=__webpack_require__(132);var _rulesRulesContext2=_interopRequireDefault(_rulesRulesContext);var _rulesSwitchRequest=__webpack_require__(125);var _rulesSwitchRequest2=_interopRequireDefault(_rulesSwitchRequest);var _rulesSwitchRequestHistory=__webpack_require__(133);var _rulesSwitchRequestHistory2=_interopRequireDefault(_rulesSwitchRequestHistory);var _rulesDroppedFramesHistory=__webpack_require__(134);var _rulesDroppedFramesHistory2=_interopRequireDefault(_rulesDroppedFramesHistory);var _rulesThroughputHistory=__webpack_require__(135);var _rulesThroughputHistory2=_interopRequireDefault(_rulesThroughputHistory);var _voMetricsHTTPRequest=__webpack_require__(65);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _utilsSupervisorTools=__webpack_require__(73);var ABANDON_LOAD='abandonload';var ALLOW_LOAD='allowload';var DEFAULT_VIDEO_BITRATE=1000;var DEFAULT_AUDIO_BITRATE=100;var QUALITY_DEFAULT=0;function AbrController(){var context=this.context;var debug=(0,_coreDebug2['default'])(context).getInstance();var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var instance=undefined,logger=undefined,abrRulesCollection=undefined,streamController=undefined,autoSwitchBitrate=undefined,topQualities=undefined,qualityDict=undefined,bitrateDict=undefined,ratioDict=undefined,streamProcessorDict=undefined,abandonmentStateDict=undefined,abandonmentTimeout=undefined,limitBitrateByPortal=undefined,usePixelRatioInLimitBitrateByPortal=undefined,windowResizeEventCalled=undefined,elementWidth=undefined,elementHeight=undefined,manifestModel=undefined,dashManifestModel=undefined,adapter=undefined,videoModel=undefined,mediaPlayerModel=undefined,domStorage=undefined,playbackIndex=undefined,switchHistoryDict=undefined,droppedFramesHistory=undefined,throughputHistory=undefined,isUsingBufferOccupancyABRDict=undefined,metricsModel=undefined,dashMetrics=undefined,useDeadTimeLatency=undefined;function setup(){logger = debug.getLogger(instance);resetInitialSettings();}function registerStreamType(type,streamProcessor){switchHistoryDict[type] = (0,_rulesSwitchRequestHistory2['default'])(context).create();streamProcessorDict[type] = streamProcessor;abandonmentStateDict[type] = abandonmentStateDict[type] || {};abandonmentStateDict[type].state = ALLOW_LOAD;isUsingBufferOccupancyABRDict[type] = false;eventBus.on(_coreEventsEvents2['default'].LOADING_PROGRESS,onFragmentLoadProgress,this);if(type == _constantsConstants2['default'].VIDEO){eventBus.on(_coreEventsEvents2['default'].QUALITY_CHANGE_RENDERED,onQualityChangeRendered,this);droppedFramesHistory = (0,_rulesDroppedFramesHistory2['default'])(context).create();setElementSize();}eventBus.on(_coreEventsEvents2['default'].METRIC_ADDED,onMetricAdded,this);eventBus.on(_coreEventsEvents2['default'].PERIOD_SWITCH_COMPLETED,createAbrRulesCollection,this);throughputHistory = (0,_rulesThroughputHistory2['default'])(context).create({mediaPlayerModel:mediaPlayerModel});}function unRegisterStreamType(type){delete streamProcessorDict[type];}function createAbrRulesCollection(){abrRulesCollection = (0,_rulesAbrABRRulesCollection2['default'])(context).create({metricsModel:metricsModel,dashMetrics:dashMetrics,mediaPlayerModel:mediaPlayerModel,adapter:adapter});abrRulesCollection.initialize();}function resetInitialSettings(){autoSwitchBitrate = {video:true,audio:true};topQualities = {};qualityDict = {};bitrateDict = {};ratioDict = {};abandonmentStateDict = {};streamProcessorDict = {};switchHistoryDict = {};isUsingBufferOccupancyABRDict = {};limitBitrateByPortal = false;useDeadTimeLatency = true;usePixelRatioInLimitBitrateByPortal = false;if(windowResizeEventCalled === undefined){windowResizeEventCalled = false;}playbackIndex = undefined;droppedFramesHistory = undefined;throughputHistory = undefined;clearTimeout(abandonmentTimeout);abandonmentTimeout = null;}function reset(){resetInitialSettings();eventBus.off(_coreEventsEvents2['default'].LOADING_PROGRESS,onFragmentLoadProgress,this);eventBus.off(_coreEventsEvents2['default'].QUALITY_CHANGE_RENDERED,onQualityChangeRendered,this);eventBus.off(_coreEventsEvents2['default'].METRIC_ADDED,onMetricAdded,this);eventBus.off(_coreEventsEvents2['default'].PERIOD_SWITCH_COMPLETED,createAbrRulesCollection,this);if(abrRulesCollection){abrRulesCollection.reset();}}function setConfig(config){if(!config)return;if(config.streamController){streamController = config.streamController;}if(config.domStorage){domStorage = config.domStorage;}if(config.mediaPlayerModel){mediaPlayerModel = config.mediaPlayerModel;}if(config.metricsModel){metricsModel = config.metricsModel;}if(config.dashMetrics){dashMetrics = config.dashMetrics;}if(config.dashManifestModel){dashManifestModel = config.dashManifestModel;}if(config.adapter){adapter = config.adapter;}if(config.manifestModel){manifestModel = config.manifestModel;}if(config.videoModel){videoModel = config.videoModel;}}function checkConfig(){if(!domStorage || !domStorage.hasOwnProperty('getSavedBitrateSettings')){throw new Error(_constantsConstants2['default'].MISSING_CONFIG_ERROR);}}function onQualityChangeRendered(e){if(e.mediaType === _constantsConstants2['default'].VIDEO){playbackIndex = e.oldQuality;droppedFramesHistory.push(playbackIndex,videoModel.getPlaybackQuality());}}function onMetricAdded(e){if(e.metric === _constantsMetricsConstants2['default'].HTTP_REQUEST && e.value && e.value.type === _voMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE && (e.mediaType === _constantsConstants2['default'].AUDIO || e.mediaType === _constantsConstants2['default'].VIDEO)){throughputHistory.push(e.mediaType,e.value,useDeadTimeLatency);}if(e.metric === _constantsMetricsConstants2['default'].BUFFER_LEVEL && (e.mediaType === _constantsConstants2['default'].AUDIO || e.mediaType === _constantsConstants2['default'].VIDEO)){updateIsUsingBufferOccupancyABR(e.mediaType,0.001 * e.value.level);}}function getTopQualityIndexFor(type,id){var idx=undefined;topQualities[id] = topQualities[id] || {};if(!topQualities[id].hasOwnProperty(type)){topQualities[id][type] = 0;}idx = checkMaxBitrate(topQualities[id][type],type);idx = checkMaxRepresentationRatio(idx,type,topQualities[id][type]);idx = checkPortalSize(idx,type);return idx;} /**
	     * Gets top BitrateInfo for the player
	     * @param {string} type - 'video' or 'audio' are the type options.
	     * @returns {BitrateInfo | null}
	     */function getTopBitrateInfoFor(type){if(type && streamProcessorDict && streamProcessorDict[type]){var streamInfo=streamProcessorDict[type].getStreamInfo();if(streamInfo && streamInfo.id){var idx=getTopQualityIndexFor(type,streamInfo.id);var bitrates=getBitrateList(streamProcessorDict[type].getMediaInfo());return bitrates[idx]?bitrates[idx]:null;}}return null;} /**
	     * @param {string} type
	     * @returns {number} A value of the initial bitrate, kbps
	     * @memberof AbrController#
	     */function getInitialBitrateFor(type){checkConfig();var savedBitrate=domStorage.getSavedBitrateSettings(type);if(!bitrateDict.hasOwnProperty(type)){if(ratioDict.hasOwnProperty(type)){var manifest=manifestModel.getValue();var representation=dashManifestModel.getAdaptationForType(manifest,0,type).Representation;if(Array.isArray(representation)){var repIdx=Math.max(Math.round(representation.length * ratioDict[type]) - 1,0);bitrateDict[type] = representation[repIdx].bandwidth;}else {bitrateDict[type] = 0;}}else if(!isNaN(savedBitrate)){bitrateDict[type] = savedBitrate;}else {bitrateDict[type] = type === _constantsConstants2['default'].VIDEO?DEFAULT_VIDEO_BITRATE:DEFAULT_AUDIO_BITRATE;}}return bitrateDict[type];} /**
	     * @param {string} type
	     * @param {number} value A value of the initial bitrate, kbps
	     * @memberof AbrController#
	     */function setInitialBitrateFor(type,value){(0,_utilsSupervisorTools.checkIsVideoOrAudioType)(type);(0,_utilsSupervisorTools.checkParameterType)(value,'number');bitrateDict[type] = value;}function getInitialRepresentationRatioFor(type){if(!ratioDict.hasOwnProperty(type)){return null;}return ratioDict[type];}function setInitialRepresentationRatioFor(type,value){ratioDict[type] = value;}function getMaxAllowedBitrateFor(type){if(bitrateDict.hasOwnProperty('max') && bitrateDict.max.hasOwnProperty(type)){return bitrateDict.max[type];}return NaN;}function getMinAllowedBitrateFor(type){if(bitrateDict.hasOwnProperty('min') && bitrateDict.min.hasOwnProperty(type)){return bitrateDict.min[type];}return NaN;} //TODO  change bitrateDict structure to hold one object for video and audio with initial and max values internal.
	// This means you need to update all the logic around initial bitrate DOMStorage, RebController etc...
	function setMaxAllowedBitrateFor(type,value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');(0,_utilsSupervisorTools.checkIsVideoOrAudioType)(type);bitrateDict.max = bitrateDict.max || {};bitrateDict.max[type] = value;}function setMinAllowedBitrateFor(type,value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');(0,_utilsSupervisorTools.checkIsVideoOrAudioType)(type);bitrateDict.min = bitrateDict.min || {};bitrateDict.min[type] = value;}function getMaxAllowedIndexFor(type){var maxBitrate=getMaxAllowedBitrateFor(type);if(maxBitrate){return getQualityForBitrate(streamProcessorDict[type].getMediaInfo(),maxBitrate);}else {return undefined;}}function getMinAllowedIndexFor(type){var minBitrate=getMinAllowedBitrateFor(type);if(minBitrate){var mediaInfo=streamProcessorDict[type].getMediaInfo();var bitrateList=getBitrateList(mediaInfo); // This returns the quality index <= for the given bitrate
	var minIdx=getQualityForBitrate(mediaInfo,minBitrate);if(bitrateList[minIdx] && minIdx < bitrateList.length - 1 && bitrateList[minIdx].bitrate < minBitrate * 1000){minIdx++; // Go to the next bitrate
	}return minIdx;}else {return undefined;}}function getMaxAllowedRepresentationRatioFor(type){if(ratioDict.hasOwnProperty('max') && ratioDict.max.hasOwnProperty(type)){return ratioDict.max[type];}return 1;}function setMaxAllowedRepresentationRatioFor(type,value){ratioDict.max = ratioDict.max || {};ratioDict.max[type] = value;}function getAutoSwitchBitrateFor(type){return autoSwitchBitrate[type];}function setAutoSwitchBitrateFor(type,value){(0,_utilsSupervisorTools.checkParameterType)(value,'boolean');(0,_utilsSupervisorTools.checkIsVideoOrAudioType)(type);autoSwitchBitrate[type] = value;}function getLimitBitrateByPortal(){return limitBitrateByPortal;}function setLimitBitrateByPortal(value){(0,_utilsSupervisorTools.checkParameterType)(value,'boolean');limitBitrateByPortal = value;}function getUsePixelRatioInLimitBitrateByPortal(){return usePixelRatioInLimitBitrateByPortal;}function setUsePixelRatioInLimitBitrateByPortal(value){(0,_utilsSupervisorTools.checkParameterType)(value,'boolean');usePixelRatioInLimitBitrateByPortal = value;}function getUseDeadTimeLatency(){return useDeadTimeLatency;}function setUseDeadTimeLatency(value){(0,_utilsSupervisorTools.checkParameterType)(value,'boolean');useDeadTimeLatency = value;}function checkPlaybackQuality(type){if(type && streamProcessorDict && streamProcessorDict[type]){var streamInfo=streamProcessorDict[type].getStreamInfo();var streamId=streamInfo?streamInfo.id:null;var oldQuality=getQualityFor(type);var rulesContext=(0,_rulesRulesContext2['default'])(context).create({abrController:instance,streamProcessor:streamProcessorDict[type],currentValue:oldQuality,switchHistory:switchHistoryDict[type],droppedFramesHistory:droppedFramesHistory,useBufferOccupancyABR:useBufferOccupancyABR(type)});if(droppedFramesHistory){var playbackQuality=videoModel.getPlaybackQuality();if(playbackQuality){droppedFramesHistory.push(playbackIndex,playbackQuality);}}if(getAutoSwitchBitrateFor(type)){var minIdx=getMinAllowedIndexFor(type);var topQualityIdx=getTopQualityIndexFor(type,streamId);var switchRequest=abrRulesCollection.getMaxQuality(rulesContext);var newQuality=switchRequest.quality;if(minIdx !== undefined && newQuality < minIdx){newQuality = minIdx;}if(newQuality > topQualityIdx){newQuality = topQualityIdx;}switchHistoryDict[type].push({oldValue:oldQuality,newValue:newQuality});if(newQuality > _rulesSwitchRequest2['default'].NO_CHANGE && newQuality != oldQuality){if(abandonmentStateDict[type].state === ALLOW_LOAD || newQuality > oldQuality){changeQuality(type,oldQuality,newQuality,topQualityIdx,switchRequest.reason);}}else if(debug.getLogToBrowserConsole()){var bufferLevel=dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(type));logger.debug('AbrController (' + type + ') stay on ' + oldQuality + '/' + topQualityIdx + ' (buffer: ' + bufferLevel + ')');}}}}function setPlaybackQuality(type,streamInfo,newQuality,reason){var id=streamInfo.id;var oldQuality=getQualityFor(type);(0,_utilsSupervisorTools.checkInteger)(newQuality);var topQualityIdx=getTopQualityIndexFor(type,id);if(newQuality !== oldQuality && newQuality >= 0 && newQuality <= topQualityIdx){changeQuality(type,oldQuality,newQuality,topQualityIdx,reason);}}function changeQuality(type,oldQuality,newQuality,topQualityIdx,reason){if(type && streamProcessorDict[type]){var streamInfo=streamProcessorDict[type].getStreamInfo();var id=streamInfo?streamInfo.id:null;if(debug.getLogToBrowserConsole()){var bufferLevel=dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(type));logger.info('AbrController (' + type + ') switch from ' + oldQuality + ' to ' + newQuality + '/' + topQualityIdx + ' (buffer: ' + bufferLevel + ') ' + (reason?JSON.stringify(reason):'.'));}setQualityFor(type,id,newQuality);eventBus.trigger(_coreEventsEvents2['default'].QUALITY_CHANGE_REQUESTED,{mediaType:type,streamInfo:streamInfo,oldQuality:oldQuality,newQuality:newQuality,reason:reason});}}function setAbandonmentStateFor(type,state){abandonmentStateDict[type].state = state;}function getAbandonmentStateFor(type){return abandonmentStateDict[type]?abandonmentStateDict[type].state:null;} /**
	     * @param {MediaInfo} mediaInfo
	     * @param {number} bitrate A bitrate value, kbps
	     * @param {number} latency Expected latency of connection, ms
	     * @returns {number} A quality index <= for the given bitrate
	     * @memberof AbrController#
	     */function getQualityForBitrate(mediaInfo,bitrate,latency){var voRepresentation=mediaInfo && mediaInfo.type?streamProcessorDict[mediaInfo.type].getRepresentationInfo():null;if(useDeadTimeLatency && latency && voRepresentation && voRepresentation.fragmentDuration){latency = latency / 1000;var fragmentDuration=voRepresentation.fragmentDuration;if(latency > fragmentDuration){return 0;}else {var deadTimeRatio=latency / fragmentDuration;bitrate = bitrate * (1 - deadTimeRatio);}}var bitrateList=getBitrateList(mediaInfo);for(var i=bitrateList.length - 1;i >= 0;i--) {var bitrateInfo=bitrateList[i];if(bitrate * 1000 >= bitrateInfo.bitrate){return i;}}return QUALITY_DEFAULT;} /**
	     * @param {MediaInfo} mediaInfo
	     * @returns {Array|null} A list of {@link BitrateInfo} objects
	     * @memberof AbrController#
	     */function getBitrateList(mediaInfo){var infoList=[];if(!mediaInfo || !mediaInfo.bitrateList)return infoList;var bitrateList=mediaInfo.bitrateList;var type=mediaInfo.type;var bitrateInfo=undefined;for(var i=0,ln=bitrateList.length;i < ln;i++) {bitrateInfo = new _voBitrateInfo2['default']();bitrateInfo.mediaType = type;bitrateInfo.qualityIndex = i;bitrateInfo.bitrate = bitrateList[i].bandwidth;bitrateInfo.width = bitrateList[i].width;bitrateInfo.height = bitrateList[i].height;bitrateInfo.scanType = bitrateList[i].scanType;infoList.push(bitrateInfo);}return infoList;}function updateIsUsingBufferOccupancyABR(mediaType,bufferLevel){var strategy=mediaPlayerModel.getABRStrategy();if(strategy === _constantsConstants2['default'].ABR_STRATEGY_BOLA){isUsingBufferOccupancyABRDict[mediaType] = true;return;}else if(strategy === _constantsConstants2['default'].ABR_STRATEGY_THROUGHPUT){isUsingBufferOccupancyABRDict[mediaType] = false;return;} // else ABR_STRATEGY_DYNAMIC
	var stableBufferTime=mediaPlayerModel.getStableBufferTime();var switchOnThreshold=stableBufferTime;var switchOffThreshold=0.5 * stableBufferTime;var useBufferABR=isUsingBufferOccupancyABRDict[mediaType];var newUseBufferABR=bufferLevel > (useBufferABR?switchOffThreshold:switchOnThreshold); // use hysteresis to avoid oscillating rules
	isUsingBufferOccupancyABRDict[mediaType] = newUseBufferABR;if(newUseBufferABR !== useBufferABR){if(newUseBufferABR){logger.info('AbrController (' + mediaType + ') switching from throughput to buffer occupancy ABR rule (buffer: ' + bufferLevel.toFixed(3) + ').');}else {logger.info('AbrController (' + mediaType + ') switching from buffer occupancy to throughput ABR rule (buffer: ' + bufferLevel.toFixed(3) + ').');}}}function useBufferOccupancyABR(mediaType){return isUsingBufferOccupancyABRDict[mediaType];}function getThroughputHistory(){return throughputHistory;}function updateTopQualityIndex(mediaInfo){var type=mediaInfo.type;var streamId=mediaInfo.streamInfo.id;var max=mediaInfo.representationCount - 1;setTopQualityIndex(type,streamId,max);return max;}function isPlayingAtTopQuality(streamInfo){var streamId=streamInfo.id;var audioQuality=getQualityFor(_constantsConstants2['default'].AUDIO);var videoQuality=getQualityFor(_constantsConstants2['default'].VIDEO);var isAtTop=audioQuality === getTopQualityIndexFor(_constantsConstants2['default'].AUDIO,streamId) && videoQuality === getTopQualityIndexFor(_constantsConstants2['default'].VIDEO,streamId);return isAtTop;}function getQualityFor(type){if(type && streamProcessorDict[type]){var streamInfo=streamProcessorDict[type].getStreamInfo();var id=streamInfo?streamInfo.id:null;var quality=undefined;if(id){qualityDict[id] = qualityDict[id] || {};if(!qualityDict[id].hasOwnProperty(type)){qualityDict[id][type] = QUALITY_DEFAULT;}quality = qualityDict[id][type];return quality;}}return QUALITY_DEFAULT;}function setQualityFor(type,id,value){qualityDict[id] = qualityDict[id] || {};qualityDict[id][type] = value;}function setTopQualityIndex(type,id,value){topQualities[id] = topQualities[id] || {};topQualities[id][type] = value;}function checkMaxBitrate(idx,type){var newIdx=idx;if(!streamProcessorDict[type]){return newIdx;}var minIdx=getMinAllowedIndexFor(type);if(minIdx !== undefined){newIdx = Math.max(idx,minIdx);}var maxIdx=getMaxAllowedIndexFor(type);if(maxIdx !== undefined){newIdx = Math.min(newIdx,maxIdx);}return newIdx;}function checkMaxRepresentationRatio(idx,type,maxIdx){var maxRepresentationRatio=getMaxAllowedRepresentationRatioFor(type);if(isNaN(maxRepresentationRatio) || maxRepresentationRatio >= 1 || maxRepresentationRatio < 0){return idx;}return Math.min(idx,Math.round(maxIdx * maxRepresentationRatio));}function setWindowResizeEventCalled(value){windowResizeEventCalled = value;}function setElementSize(){if(videoModel){var hasPixelRatio=usePixelRatioInLimitBitrateByPortal && window.hasOwnProperty('devicePixelRatio');var pixelRatio=hasPixelRatio?window.devicePixelRatio:1;elementWidth = videoModel.getClientWidth() * pixelRatio;elementHeight = videoModel.getClientHeight() * pixelRatio;}}function checkPortalSize(idx,type){if(type !== _constantsConstants2['default'].VIDEO || !limitBitrateByPortal || !streamProcessorDict[type]){return idx;}if(!windowResizeEventCalled){setElementSize();}var manifest=manifestModel.getValue();var representation=dashManifestModel.getAdaptationForType(manifest,0,type).Representation;var newIdx=idx;if(elementWidth > 0 && elementHeight > 0){while(newIdx > 0 && representation[newIdx] && elementWidth < representation[newIdx].width && elementWidth - representation[newIdx - 1].width < representation[newIdx].width - elementWidth) {newIdx = newIdx - 1;}if(representation.length - 2 >= newIdx && representation[newIdx].width === representation[newIdx + 1].width){newIdx = Math.min(idx,newIdx + 1);}}return newIdx;}function onFragmentLoadProgress(e){var type=e.request.mediaType;if(getAutoSwitchBitrateFor(type)){var streamProcessor=streamProcessorDict[type];if(!streamProcessor)return; // There may be a fragment load in progress when we switch periods and recreated some controllers.
	var rulesContext=(0,_rulesRulesContext2['default'])(context).create({abrController:instance,streamProcessor:streamProcessor,currentRequest:e.request,useBufferOccupancyABR:useBufferOccupancyABR(type)});var switchRequest=abrRulesCollection.shouldAbandonFragment(rulesContext);if(switchRequest.quality > _rulesSwitchRequest2['default'].NO_CHANGE){var fragmentModel=streamProcessor.getFragmentModel();var request=fragmentModel.getRequests({state:_modelsFragmentModel2['default'].FRAGMENT_MODEL_LOADING,index:e.request.index})[0];if(request){ //TODO Check if we should abort or if better to finish download. check bytesLoaded/Total
	fragmentModel.abortRequests();setAbandonmentStateFor(type,ABANDON_LOAD);switchHistoryDict[type].reset();switchHistoryDict[type].push({oldValue:getQualityFor(type,streamController.getActiveStreamInfo()),newValue:switchRequest.quality,confidence:1,reason:switchRequest.reason});setPlaybackQuality(type,streamController.getActiveStreamInfo(),switchRequest.quality,switchRequest.reason);clearTimeout(abandonmentTimeout);abandonmentTimeout = setTimeout(function(){setAbandonmentStateFor(type,ALLOW_LOAD);abandonmentTimeout = null;},mediaPlayerModel.getAbandonLoadTimeout());}}}}instance = {isPlayingAtTopQuality:isPlayingAtTopQuality,updateTopQualityIndex:updateTopQualityIndex,getThroughputHistory:getThroughputHistory,getBitrateList:getBitrateList,getQualityForBitrate:getQualityForBitrate,getMaxAllowedBitrateFor:getMaxAllowedBitrateFor,getTopBitrateInfoFor:getTopBitrateInfoFor,getMinAllowedBitrateFor:getMinAllowedBitrateFor,setMaxAllowedBitrateFor:setMaxAllowedBitrateFor,setMinAllowedBitrateFor:setMinAllowedBitrateFor,getMaxAllowedIndexFor:getMaxAllowedIndexFor,getMinAllowedIndexFor:getMinAllowedIndexFor,getMaxAllowedRepresentationRatioFor:getMaxAllowedRepresentationRatioFor,setMaxAllowedRepresentationRatioFor:setMaxAllowedRepresentationRatioFor,getInitialBitrateFor:getInitialBitrateFor,setInitialBitrateFor:setInitialBitrateFor,getInitialRepresentationRatioFor:getInitialRepresentationRatioFor,setInitialRepresentationRatioFor:setInitialRepresentationRatioFor,setAutoSwitchBitrateFor:setAutoSwitchBitrateFor,getAutoSwitchBitrateFor:getAutoSwitchBitrateFor,getUseDeadTimeLatency:getUseDeadTimeLatency,setUseDeadTimeLatency:setUseDeadTimeLatency,setLimitBitrateByPortal:setLimitBitrateByPortal,getLimitBitrateByPortal:getLimitBitrateByPortal,getUsePixelRatioInLimitBitrateByPortal:getUsePixelRatioInLimitBitrateByPortal,setUsePixelRatioInLimitBitrateByPortal:setUsePixelRatioInLimitBitrateByPortal,getQualityFor:getQualityFor,getAbandonmentStateFor:getAbandonmentStateFor,setPlaybackQuality:setPlaybackQuality,checkPlaybackQuality:checkPlaybackQuality,getTopQualityIndexFor:getTopQualityIndexFor,setElementSize:setElementSize,setWindowResizeEventCalled:setWindowResizeEventCalled,createAbrRulesCollection:createAbrRulesCollection,registerStreamType:registerStreamType,unRegisterStreamType:unRegisterStreamType,setConfig:setConfig,reset:reset};setup();return instance;}AbrController.__dashjs_factory_name = 'AbrController';var factory=_coreFactoryMaker2['default'].getSingletonFactory(AbrController);factory.ABANDON_LOAD = ABANDON_LOAD;factory.QUALITY_DEFAULT = QUALITY_DEFAULT;_coreFactoryMaker2['default'].updateSingletonFactory(AbrController.__dashjs_factory_name,factory);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=AbrController.js.map


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _ThroughputRule=__webpack_require__(124);var _ThroughputRule2=_interopRequireDefault(_ThroughputRule);var _InsufficientBufferRule=__webpack_require__(126);var _InsufficientBufferRule2=_interopRequireDefault(_InsufficientBufferRule);var _AbandonRequestsRule=__webpack_require__(127);var _AbandonRequestsRule2=_interopRequireDefault(_AbandonRequestsRule);var _DroppedFramesRule=__webpack_require__(128);var _DroppedFramesRule2=_interopRequireDefault(_DroppedFramesRule);var _SwitchHistoryRule=__webpack_require__(129);var _SwitchHistoryRule2=_interopRequireDefault(_SwitchHistoryRule);var _BolaRule=__webpack_require__(130);var _BolaRule2=_interopRequireDefault(_BolaRule);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _SwitchRequest=__webpack_require__(125);var _SwitchRequest2=_interopRequireDefault(_SwitchRequest);var QUALITY_SWITCH_RULES='qualitySwitchRules';var ABANDON_FRAGMENT_RULES='abandonFragmentRules';function ABRRulesCollection(config){config = config || {};var context=this.context;var mediaPlayerModel=config.mediaPlayerModel;var metricsModel=config.metricsModel;var dashMetrics=config.dashMetrics;var instance=undefined,qualitySwitchRules=undefined,abandonFragmentRules=undefined;function initialize(){qualitySwitchRules = [];abandonFragmentRules = [];if(mediaPlayerModel.getUseDefaultABRRules()){ // Only one of BolaRule and ThroughputRule will give a switchRequest.quality !== SwitchRequest.NO_CHANGE.
	// This is controlled by useBufferOccupancyABR mechanism in AbrController.
	qualitySwitchRules.push((0,_BolaRule2['default'])(context).create({metricsModel:metricsModel,dashMetrics:dashMetrics,mediaPlayerModel:mediaPlayerModel}));qualitySwitchRules.push((0,_ThroughputRule2['default'])(context).create({metricsModel:metricsModel,dashMetrics:dashMetrics}));qualitySwitchRules.push((0,_InsufficientBufferRule2['default'])(context).create({metricsModel:metricsModel,dashMetrics:dashMetrics}));qualitySwitchRules.push((0,_SwitchHistoryRule2['default'])(context).create());qualitySwitchRules.push((0,_DroppedFramesRule2['default'])(context).create());abandonFragmentRules.push((0,_AbandonRequestsRule2['default'])(context).create({metricsModel:metricsModel,dashMetrics:dashMetrics,mediaPlayerModel:mediaPlayerModel}));} // add custom ABR rules if any
	var customRules=mediaPlayerModel.getABRCustomRules();customRules.forEach(function(rule){if(rule.type === QUALITY_SWITCH_RULES){qualitySwitchRules.push(rule.rule(context).create());}if(rule.type === ABANDON_FRAGMENT_RULES){abandonFragmentRules.push(rule.rule(context).create());}});}function getActiveRules(srArray){return srArray.filter(function(sr){return sr.quality > _SwitchRequest2['default'].NO_CHANGE;});}function getMinSwitchRequest(srArray){var values={};var i=undefined,len=undefined,req=undefined,newQuality=undefined,quality=undefined;if(srArray.length === 0){return;}values[_SwitchRequest2['default'].PRIORITY.STRONG] = _SwitchRequest2['default'].NO_CHANGE;values[_SwitchRequest2['default'].PRIORITY.WEAK] = _SwitchRequest2['default'].NO_CHANGE;values[_SwitchRequest2['default'].PRIORITY.DEFAULT] = _SwitchRequest2['default'].NO_CHANGE;for(i = 0,len = srArray.length;i < len;i += 1) {req = srArray[i];if(req.quality !== _SwitchRequest2['default'].NO_CHANGE){values[req.priority] = values[req.priority] > _SwitchRequest2['default'].NO_CHANGE?Math.min(values[req.priority],req.quality):req.quality;}}if(values[_SwitchRequest2['default'].PRIORITY.WEAK] !== _SwitchRequest2['default'].NO_CHANGE){newQuality = values[_SwitchRequest2['default'].PRIORITY.WEAK];}if(values[_SwitchRequest2['default'].PRIORITY.DEFAULT] !== _SwitchRequest2['default'].NO_CHANGE){newQuality = values[_SwitchRequest2['default'].PRIORITY.DEFAULT];}if(values[_SwitchRequest2['default'].PRIORITY.STRONG] !== _SwitchRequest2['default'].NO_CHANGE){newQuality = values[_SwitchRequest2['default'].PRIORITY.STRONG];}if(newQuality !== _SwitchRequest2['default'].NO_CHANGE){quality = newQuality;}return (0,_SwitchRequest2['default'])(context).create(quality);}function getMaxQuality(rulesContext){var switchRequestArray=qualitySwitchRules.map(function(rule){return rule.getMaxIndex(rulesContext);});var activeRules=getActiveRules(switchRequestArray);var maxQuality=getMinSwitchRequest(activeRules);return maxQuality || (0,_SwitchRequest2['default'])(context).create();}function shouldAbandonFragment(rulesContext){var abandonRequestArray=abandonFragmentRules.map(function(rule){return rule.shouldAbandon(rulesContext);});var activeRules=getActiveRules(abandonRequestArray);var shouldAbandon=getMinSwitchRequest(activeRules);return shouldAbandon || (0,_SwitchRequest2['default'])(context).create();}function reset(){[qualitySwitchRules,abandonFragmentRules].forEach(function(rules){if(rules && rules.length){rules.forEach(function(rule){return rule.reset && rule.reset();});}});qualitySwitchRules = [];abandonFragmentRules = [];}instance = {initialize:initialize,reset:reset,getMaxQuality:getMaxQuality,shouldAbandonFragment:shouldAbandonFragment};return instance;}ABRRulesCollection.__dashjs_factory_name = 'ABRRulesCollection';var factory=_coreFactoryMaker2['default'].getClassFactory(ABRRulesCollection);factory.QUALITY_SWITCH_RULES = QUALITY_SWITCH_RULES;factory.ABANDON_FRAGMENT_RULES = ABANDON_FRAGMENT_RULES;_coreFactoryMaker2['default'].updateSingletonFactory(ABRRulesCollection.__dashjs_factory_name,factory);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=ABRRulesCollection.js.map


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _controllersBufferController=__webpack_require__(52);var _controllersBufferController2=_interopRequireDefault(_controllersBufferController);var _controllersAbrController=__webpack_require__(122);var _controllersAbrController2=_interopRequireDefault(_controllersAbrController);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _SwitchRequest=__webpack_require__(125);var _SwitchRequest2=_interopRequireDefault(_SwitchRequest);var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);function ThroughputRule(config){config = config || {};var context=this.context;var metricsModel=config.metricsModel;var instance=undefined,logger=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);}function checkConfig(){if(!metricsModel || !metricsModel.hasOwnProperty('getReadOnlyMetricsFor')){throw new Error(_constantsConstants2['default'].MISSING_CONFIG_ERROR);}}function getMaxIndex(rulesContext){var switchRequest=(0,_SwitchRequest2['default'])(context).create();if(!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('useBufferOccupancyABR') || !rulesContext.hasOwnProperty('getAbrController') || !rulesContext.hasOwnProperty('getScheduleController')){return switchRequest;}checkConfig();var mediaInfo=rulesContext.getMediaInfo();var mediaType=rulesContext.getMediaType();var metrics=metricsModel.getReadOnlyMetricsFor(mediaType);var scheduleController=rulesContext.getScheduleController();var abrController=rulesContext.getAbrController();var streamInfo=rulesContext.getStreamInfo();var isDynamic=streamInfo && streamInfo.manifestInfo?streamInfo.manifestInfo.isDynamic:null;var throughputHistory=abrController.getThroughputHistory();var throughput=throughputHistory.getSafeAverageThroughput(mediaType,isDynamic);var latency=throughputHistory.getAverageLatency(mediaType);var bufferStateVO=metrics.BufferState.length > 0?metrics.BufferState[metrics.BufferState.length - 1]:null;var useBufferOccupancyABR=rulesContext.useBufferOccupancyABR();if(!metrics || isNaN(throughput) || !bufferStateVO || useBufferOccupancyABR){return switchRequest;}if(abrController.getAbandonmentStateFor(mediaType) !== _controllersAbrController2['default'].ABANDON_LOAD){if(bufferStateVO.state === _controllersBufferController2['default'].BUFFER_LOADED || isDynamic){switchRequest.quality = abrController.getQualityForBitrate(mediaInfo,throughput,latency);scheduleController.setTimeToLoadDelay(0);logger.debug('requesting switch to index: ',switchRequest.quality,'type: ',mediaType,'Average throughput',Math.round(throughput),'kbps');switchRequest.reason = {throughput:throughput,latency:latency};}}return switchRequest;}function reset(){ // no persistent information to reset
	}instance = {getMaxIndex:getMaxIndex,reset:reset};setup();return instance;}ThroughputRule.__dashjs_factory_name = 'ThroughputRule';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(ThroughputRule);module.exports = exports['default'];
	//# sourceMappingURL=ThroughputRule.js.map


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var NO_CHANGE=-1;var PRIORITY={DEFAULT:0.5,STRONG:1,WEAK:0};function SwitchRequest(q,r,p){ //TODO refactor all the calls to this to use config to be like everything else.
	var instance=undefined,quality=undefined,priority=undefined,reason=undefined; // check priority value
	function getPriority(p){var ret=PRIORITY.DEFAULT; // check that p is one of declared priority value
	if(p === PRIORITY.DEFAULT || p === PRIORITY.STRONG || p === PRIORITY.WEAK){ret = p;}return ret;} // init attributes
	quality = q === undefined?NO_CHANGE:q;priority = getPriority(p);reason = r === undefined?null:r;instance = {quality:quality,reason:reason,priority:priority};return instance;}SwitchRequest.__dashjs_factory_name = 'SwitchRequest';var factory=_coreFactoryMaker2['default'].getClassFactory(SwitchRequest);factory.NO_CHANGE = NO_CHANGE;factory.PRIORITY = PRIORITY;_coreFactoryMaker2['default'].updateClassFactory(SwitchRequest.__dashjs_factory_name,factory);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=SwitchRequest.js.map


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _controllersBufferController=__webpack_require__(52);var _controllersBufferController2=_interopRequireDefault(_controllersBufferController);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _SwitchRequest=__webpack_require__(125);var _SwitchRequest2=_interopRequireDefault(_SwitchRequest);var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);function InsufficientBufferRule(config){config = config || {};var INSUFFICIENT_BUFFER_SAFETY_FACTOR=0.5;var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var metricsModel=config.metricsModel;var dashMetrics=config.dashMetrics;var instance=undefined,logger=undefined,bufferStateDict=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);resetInitialSettings();eventBus.on(_coreEventsEvents2['default'].PLAYBACK_SEEKING,onPlaybackSeeking,instance);}function checkConfig(){if(!metricsModel || !metricsModel.hasOwnProperty('getReadOnlyMetricsFor') || !dashMetrics || !dashMetrics.hasOwnProperty('getCurrentBufferLevel')){throw new Error(_constantsConstants2['default'].MISSING_CONFIG_ERROR);}} /*
	     * InsufficientBufferRule does not kick in before the first BUFFER_LOADED event happens. This is reset at every seek.
	     *
	     * If a BUFFER_EMPTY event happens, then InsufficientBufferRule returns switchRequest.quality=0 until BUFFER_LOADED happens.
	     *
	     * Otherwise InsufficientBufferRule gives a maximum bitrate depending on throughput and bufferLevel such that
	     * a whole fragment can be downloaded before the buffer runs out, subject to a conservative safety factor of 0.5.
	     * If the bufferLevel is low, then InsufficientBufferRule avoids rebuffering risk.
	     * If the bufferLevel is high, then InsufficientBufferRule give a high MaxIndex allowing other rules to take over.
	     */function getMaxIndex(rulesContext){var switchRequest=(0,_SwitchRequest2['default'])(context).create();if(!rulesContext || !rulesContext.hasOwnProperty('getMediaType')){return switchRequest;}checkConfig();var mediaType=rulesContext.getMediaType();var metrics=metricsModel.getReadOnlyMetricsFor(mediaType);var lastBufferStateVO=metrics.BufferState.length > 0?metrics.BufferState[metrics.BufferState.length - 1]:null;var representationInfo=rulesContext.getRepresentationInfo();var fragmentDuration=representationInfo.fragmentDuration; // Don't ask for a bitrate change if there is not info about buffer state or if fragmentDuration is not defined
	if(!lastBufferStateVO || !wasFirstBufferLoadedEventTriggered(mediaType,lastBufferStateVO) || !fragmentDuration){return switchRequest;}if(lastBufferStateVO.state === _controllersBufferController2['default'].BUFFER_EMPTY){logger.debug('Switch to index 0; buffer is empty.');switchRequest.quality = 0;switchRequest.reason = 'InsufficientBufferRule: Buffer is empty';}else {var mediaInfo=rulesContext.getMediaInfo();var abrController=rulesContext.getAbrController();var throughputHistory=abrController.getThroughputHistory();var bufferLevel=dashMetrics.getCurrentBufferLevel(metrics);var throughput=throughputHistory.getAverageThroughput(mediaType);var latency=throughputHistory.getAverageLatency(mediaType);var bitrate=throughput * (bufferLevel / fragmentDuration) * INSUFFICIENT_BUFFER_SAFETY_FACTOR;switchRequest.quality = abrController.getQualityForBitrate(mediaInfo,bitrate,latency);switchRequest.reason = 'InsufficientBufferRule: being conservative to avoid immediate rebuffering';}return switchRequest;}function wasFirstBufferLoadedEventTriggered(mediaType,currentBufferState){bufferStateDict[mediaType] = bufferStateDict[mediaType] || {};var wasTriggered=false;if(bufferStateDict[mediaType].firstBufferLoadedEvent){wasTriggered = true;}else if(currentBufferState && currentBufferState.state === _controllersBufferController2['default'].BUFFER_LOADED){bufferStateDict[mediaType].firstBufferLoadedEvent = true;wasTriggered = true;}return wasTriggered;}function resetInitialSettings(){bufferStateDict = {};}function onPlaybackSeeking(){resetInitialSettings();}function reset(){resetInitialSettings();eventBus.off(_coreEventsEvents2['default'].PLAYBACK_SEEKING,onPlaybackSeeking,instance);}instance = {getMaxIndex:getMaxIndex,reset:reset};setup();return instance;}InsufficientBufferRule.__dashjs_factory_name = 'InsufficientBufferRule';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(InsufficientBufferRule);module.exports = exports['default'];
	//# sourceMappingURL=InsufficientBufferRule.js.map


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _SwitchRequest=__webpack_require__(125);var _SwitchRequest2=_interopRequireDefault(_SwitchRequest);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);function AbandonRequestsRule(config){config = config || {};var ABANDON_MULTIPLIER=1.8;var GRACE_TIME_THRESHOLD=500;var MIN_LENGTH_TO_AVERAGE=5;var context=this.context;var mediaPlayerModel=config.mediaPlayerModel;var metricsModel=config.metricsModel;var dashMetrics=config.dashMetrics;var instance=undefined,logger=undefined,fragmentDict=undefined,abandonDict=undefined,throughputArray=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);reset();}function setFragmentRequestDict(type,id){fragmentDict[type] = fragmentDict[type] || {};fragmentDict[type][id] = fragmentDict[type][id] || {};}function storeLastRequestThroughputByType(type,throughput){throughputArray[type] = throughputArray[type] || [];throughputArray[type].push(throughput);}function shouldAbandon(rulesContext){var switchRequest=(0,_SwitchRequest2['default'])(context).create(_SwitchRequest2['default'].NO_CHANGE,{name:AbandonRequestsRule.__dashjs_factory_name});if(!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('getCurrentRequest') || !rulesContext.hasOwnProperty('getRepresentationInfo') || !rulesContext.hasOwnProperty('getAbrController')){return switchRequest;}var mediaInfo=rulesContext.getMediaInfo();var mediaType=rulesContext.getMediaType();var req=rulesContext.getCurrentRequest();if(!isNaN(req.index)){setFragmentRequestDict(mediaType,req.index);var stableBufferTime=mediaPlayerModel.getStableBufferTime();var bufferLevel=dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(mediaType));if(bufferLevel > stableBufferTime){return switchRequest;}var fragmentInfo=fragmentDict[mediaType][req.index];if(fragmentInfo === null || req.firstByteDate === null || abandonDict.hasOwnProperty(fragmentInfo.id)){return switchRequest;} //setup some init info based on first progress event
	if(fragmentInfo.firstByteTime === undefined){throughputArray[mediaType] = [];fragmentInfo.firstByteTime = req.firstByteDate.getTime();fragmentInfo.segmentDuration = req.duration;fragmentInfo.bytesTotal = req.bytesTotal;fragmentInfo.id = req.index;}fragmentInfo.bytesLoaded = req.bytesLoaded;fragmentInfo.elapsedTime = new Date().getTime() - fragmentInfo.firstByteTime;if(fragmentInfo.bytesLoaded > 0 && fragmentInfo.elapsedTime > 0){storeLastRequestThroughputByType(mediaType,Math.round(fragmentInfo.bytesLoaded * 8 / fragmentInfo.elapsedTime));}if(throughputArray[mediaType].length >= MIN_LENGTH_TO_AVERAGE && fragmentInfo.elapsedTime > GRACE_TIME_THRESHOLD && fragmentInfo.bytesLoaded < fragmentInfo.bytesTotal){var totalSampledValue=throughputArray[mediaType].reduce(function(a,b){return a + b;},0);fragmentInfo.measuredBandwidthInKbps = Math.round(totalSampledValue / throughputArray[mediaType].length);fragmentInfo.estimatedTimeOfDownload = +(fragmentInfo.bytesTotal * 8 / fragmentInfo.measuredBandwidthInKbps / 1000).toFixed(2);if(fragmentInfo.estimatedTimeOfDownload < fragmentInfo.segmentDuration * ABANDON_MULTIPLIER || rulesContext.getRepresentationInfo().quality === 0){return switchRequest;}else if(!abandonDict.hasOwnProperty(fragmentInfo.id)){var abrController=rulesContext.getAbrController();var bytesRemaining=fragmentInfo.bytesTotal - fragmentInfo.bytesLoaded;var bitrateList=abrController.getBitrateList(mediaInfo);var newQuality=abrController.getQualityForBitrate(mediaInfo,fragmentInfo.measuredBandwidthInKbps * mediaPlayerModel.getBandwidthSafetyFactor());var estimateOtherBytesTotal=fragmentInfo.bytesTotal * bitrateList[newQuality].bitrate / bitrateList[abrController.getQualityFor(mediaType,mediaInfo.streamInfo)].bitrate;if(bytesRemaining > estimateOtherBytesTotal){switchRequest.quality = newQuality;switchRequest.reason.throughput = fragmentInfo.measuredBandwidthInKbps;switchRequest.reason.fragmentID = fragmentInfo.id;abandonDict[fragmentInfo.id] = fragmentInfo;logger.debug('( ',mediaType,'frag id',fragmentInfo.id,') is asking to abandon and switch to quality to ',newQuality,' measured bandwidth was',fragmentInfo.measuredBandwidthInKbps);delete fragmentDict[mediaType][fragmentInfo.id];}}}else if(fragmentInfo.bytesLoaded === fragmentInfo.bytesTotal){delete fragmentDict[mediaType][fragmentInfo.id];}}return switchRequest;}function reset(){fragmentDict = {};abandonDict = {};throughputArray = [];}instance = {shouldAbandon:shouldAbandon,reset:reset};setup();return instance;}AbandonRequestsRule.__dashjs_factory_name = 'AbandonRequestsRule';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(AbandonRequestsRule);module.exports = exports['default'];
	//# sourceMappingURL=AbandonRequestsRule.js.map


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _SwitchRequest=__webpack_require__(125);var _SwitchRequest2=_interopRequireDefault(_SwitchRequest);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);function DroppedFramesRule(){var context=this.context;var instance=undefined,logger=undefined;var DROPPED_PERCENTAGE_FORBID=0.15;var GOOD_SAMPLE_SIZE=375; //Don't apply the rule until this many frames have been rendered(and counted under those indices).
	function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);}function getMaxIndex(rulesContext){var droppedFramesHistory=rulesContext.getDroppedFramesHistory();if(droppedFramesHistory){var dfh=droppedFramesHistory.getFrameHistory();var droppedFrames=0;var totalFrames=0;var maxIndex=_SwitchRequest2['default'].NO_CHANGE;for(var i=1;i < dfh.length;i++) { //No point in measuring dropped frames for the zeroeth index.
	if(dfh[i]){droppedFrames = dfh[i].droppedVideoFrames;totalFrames = dfh[i].totalVideoFrames;if(totalFrames > GOOD_SAMPLE_SIZE && droppedFrames / totalFrames > DROPPED_PERCENTAGE_FORBID){maxIndex = i - 1;logger.debug('index: ' + maxIndex + ' Dropped Frames: ' + droppedFrames + ' Total Frames: ' + totalFrames);break;}}}return (0,_SwitchRequest2['default'])(context).create(maxIndex,{droppedFrames:droppedFrames});}return (0,_SwitchRequest2['default'])(context).create();}instance = {getMaxIndex:getMaxIndex};setup();return instance;}DroppedFramesRule.__dashjs_factory_name = 'DroppedFramesRule';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(DroppedFramesRule);module.exports = exports['default'];
	//# sourceMappingURL=DroppedFramesRule.js.map


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _SwitchRequest=__webpack_require__(125);var _SwitchRequest2=_interopRequireDefault(_SwitchRequest);function SwitchHistoryRule(){var context=this.context;var instance=undefined,logger=undefined; //MAX_SWITCH is the number of drops made. It doesn't consider the size of the drop.
	var MAX_SWITCH=0.075; //Before this number of switch requests(no switch or actual), don't apply the rule.
	//must be < SwitchRequestHistory SWITCH_REQUEST_HISTORY_DEPTH to enable rule
	var SAMPLE_SIZE=6;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);}function getMaxIndex(rulesContext){var switchRequestHistory=rulesContext?rulesContext.getSwitchHistory():null;var switchRequests=switchRequestHistory?switchRequestHistory.getSwitchRequests():[];var drops=0;var noDrops=0;var dropSize=0;var switchRequest=(0,_SwitchRequest2['default'])(context).create();for(var i=0;i < switchRequests.length;i++) {if(switchRequests[i] !== undefined){drops += switchRequests[i].drops;noDrops += switchRequests[i].noDrops;dropSize += switchRequests[i].dropSize;if(drops + noDrops >= SAMPLE_SIZE && drops / noDrops > MAX_SWITCH){switchRequest.quality = i > 0 && switchRequests[i].drops > 0?i - 1:i;switchRequest.reason = {index:switchRequest.quality,drops:drops,noDrops:noDrops,dropSize:dropSize};logger.debug('Switch history rule index: ' + switchRequest.quality + ' samples: ' + (drops + noDrops) + ' drops: ' + drops);break;}}}return switchRequest;}instance = {getMaxIndex:getMaxIndex};setup();return instance;}SwitchHistoryRule.__dashjs_factory_name = 'SwitchHistoryRule';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(SwitchHistoryRule);module.exports = exports['default'];
	//# sourceMappingURL=SwitchHistoryRule.js.map


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2016, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ // For a description of the BOLA adaptive bitrate (ABR) algorithm, see http://arxiv.org/abs/1601.06748
	'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsMetricsConstants=__webpack_require__(50);var _constantsMetricsConstants2=_interopRequireDefault(_constantsMetricsConstants);var _SwitchRequest=__webpack_require__(125);var _SwitchRequest2=_interopRequireDefault(_SwitchRequest);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _voMetricsHTTPRequest=__webpack_require__(65);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug); // BOLA_STATE_ONE_BITRATE   : If there is only one bitrate (or initialization failed), always return NO_CHANGE.
	// BOLA_STATE_STARTUP       : Set placeholder buffer such that we download fragments at most recently measured throughput.
	// BOLA_STATE_STEADY        : Buffer primed, we switch to steady operation.
	// TODO: add BOLA_STATE_SEEK and tune BOLA behavior on seeking
	var BOLA_STATE_ONE_BITRATE=0;var BOLA_STATE_STARTUP=1;var BOLA_STATE_STEADY=2;var MINIMUM_BUFFER_S=10; // BOLA should never add artificial delays if buffer is less than MINIMUM_BUFFER_S.
	var MINIMUM_BUFFER_PER_BITRATE_LEVEL_S=2; // E.g. if there are 5 bitrates, BOLA switches to top bitrate at buffer = 10 + 5 * 2 = 20s.
	// If Schedule Controller does not allow buffer to reach that level, it can be achieved through the placeholder buffer level.
	var PLACEHOLDER_BUFFER_DECAY=0.99; // Make sure placeholder buffer does not stick around too long.
	function BolaRule(config){config = config || {};var context=this.context;var dashMetrics=config.dashMetrics;var metricsModel=config.metricsModel;var mediaPlayerModel=config.mediaPlayerModel;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var instance=undefined,logger=undefined,bolaStateDict=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);resetInitialSettings();eventBus.on(_coreEventsEvents2['default'].BUFFER_EMPTY,onBufferEmpty,instance);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_SEEKING,onPlaybackSeeking,instance);eventBus.on(_coreEventsEvents2['default'].PERIOD_SWITCH_STARTED,onPeriodSwitchStarted,instance);eventBus.on(_coreEventsEvents2['default'].MEDIA_FRAGMENT_LOADED,onMediaFragmentLoaded,instance);eventBus.on(_coreEventsEvents2['default'].METRIC_ADDED,onMetricAdded,instance);eventBus.on(_coreEventsEvents2['default'].QUALITY_CHANGE_REQUESTED,onQualityChangeRequested,instance);eventBus.on(_coreEventsEvents2['default'].FRAGMENT_LOADING_ABANDONED,onFragmentLoadingAbandoned,instance);}function utilitiesFromBitrates(bitrates){return bitrates.map(function(b){return Math.log(b);}); // no need to worry about offset, utilities will be offset (uniformly) anyway later
	} // NOTE: in live streaming, the real buffer level can drop below minimumBufferS, but bola should not stick to lowest bitrate by using a placeholder buffer level
	function calculateBolaParameters(stableBufferTime,bitrates,utilities){var highestUtilityIndex=utilities.reduce(function(highestIndex,u,uIndex){return u > utilities[highestIndex]?uIndex:highestIndex;},0);if(highestUtilityIndex === 0){ // if highestUtilityIndex === 0, then always use lowest bitrate
	return null;}var bufferTime=Math.max(stableBufferTime,MINIMUM_BUFFER_S + MINIMUM_BUFFER_PER_BITRATE_LEVEL_S * bitrates.length); // TODO: Investigate if following can be better if utilities are not the default Math.log utilities.
	// If using Math.log utilities, we can choose Vp and gp to always prefer bitrates[0] at minimumBufferS and bitrates[max] at bufferTarget.
	// (Vp * (utility + gp) - bufferLevel) / bitrate has the maxima described when:
	// Vp * (utilities[0] + gp - 1) === minimumBufferS and Vp * (utilities[max] + gp - 1) === bufferTarget
	// giving:
	var gp=(utilities[highestUtilityIndex] - 1) / (bufferTime / MINIMUM_BUFFER_S - 1);var Vp=MINIMUM_BUFFER_S / gp; // note that expressions for gp and Vp assume utilities[0] === 1, which is true because of normalization
	return {gp:gp,Vp:Vp};}function getInitialBolaState(rulesContext){var initialState={};var mediaInfo=rulesContext.getMediaInfo();var bitrates=mediaInfo.bitrateList.map(function(b){return b.bandwidth;});var utilities=utilitiesFromBitrates(bitrates);utilities = utilities.map(function(u){return u - utilities[0] + 1;}); // normalize
	var stableBufferTime=mediaPlayerModel.getStableBufferTime();var params=calculateBolaParameters(stableBufferTime,bitrates,utilities);if(!params){ // only happens when there is only one bitrate level
	initialState.state = BOLA_STATE_ONE_BITRATE;}else {initialState.state = BOLA_STATE_STARTUP;initialState.bitrates = bitrates;initialState.utilities = utilities;initialState.stableBufferTime = stableBufferTime;initialState.Vp = params.Vp;initialState.gp = params.gp;initialState.lastQuality = 0;clearBolaStateOnSeek(initialState);}return initialState;}function clearBolaStateOnSeek(bolaState){bolaState.placeholderBuffer = 0;bolaState.mostAdvancedSegmentStart = NaN;bolaState.lastSegmentWasReplacement = false;bolaState.lastSegmentStart = NaN;bolaState.lastSegmentDurationS = NaN;bolaState.lastSegmentRequestTimeMs = NaN;bolaState.lastSegmentFinishTimeMs = NaN;} // If the buffer target is changed (can this happen mid-stream?), then adjust BOLA parameters accordingly.
	function checkBolaStateStableBufferTime(bolaState,mediaType){var stableBufferTime=mediaPlayerModel.getStableBufferTime();if(bolaState.stableBufferTime !== stableBufferTime){var params=calculateBolaParameters(stableBufferTime,bolaState.bitrates,bolaState.utilities);if(params.Vp !== bolaState.Vp || params.gp !== bolaState.gp){ // correct placeholder buffer using two criteria:
	// 1. do not change effective buffer level at effectiveBufferLevel === MINIMUM_BUFFER_S ( === Vp * gp )
	// 2. scale placeholder buffer by Vp subject to offset indicated in 1.
	var bufferLevel=dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(mediaType));var effectiveBufferLevel=bufferLevel + bolaState.placeholderBuffer;effectiveBufferLevel -= MINIMUM_BUFFER_S;effectiveBufferLevel *= params.Vp / bolaState.Vp;effectiveBufferLevel += MINIMUM_BUFFER_S;bolaState.stableBufferTime = stableBufferTime;bolaState.Vp = params.Vp;bolaState.gp = params.gp;bolaState.placeholderBuffer = Math.max(0,effectiveBufferLevel - bufferLevel);}}}function getBolaState(rulesContext){var mediaType=rulesContext.getMediaType();var bolaState=bolaStateDict[mediaType];if(!bolaState){bolaState = getInitialBolaState(rulesContext);bolaStateDict[mediaType] = bolaState;}else if(bolaState.state !== BOLA_STATE_ONE_BITRATE){checkBolaStateStableBufferTime(bolaState,mediaType);}return bolaState;} // The core idea of BOLA.
	function getQualityFromBufferLevel(bolaState,bufferLevel){var bitrateCount=bolaState.bitrates.length;var quality=NaN;var score=NaN;for(var i=0;i < bitrateCount;++i) {var s=(bolaState.Vp * (bolaState.utilities[i] + bolaState.gp) - bufferLevel) / bolaState.bitrates[i];if(isNaN(score) || s >= score){score = s;quality = i;}}return quality;} // maximum buffer level which prefers to download at quality rather than wait
	function maxBufferLevelForQuality(bolaState,quality){return bolaState.Vp * (bolaState.utilities[quality] + bolaState.gp);} // the minimum buffer level that would cause BOLA to choose quality rather than a lower bitrate
	function minBufferLevelForQuality(bolaState,quality){var qBitrate=bolaState.bitrates[quality];var qUtility=bolaState.utilities[quality];var min=0;for(var i=quality - 1;i >= 0;--i) { // for each bitrate less than bitrates[quality], BOLA should prefer quality (unless other bitrate has higher utility)
	if(bolaState.utilities[i] < bolaState.utilities[quality]){var iBitrate=bolaState.bitrates[i];var iUtility=bolaState.utilities[i];var level=bolaState.Vp * (bolaState.gp + (qBitrate * iUtility - iBitrate * qUtility) / (qBitrate - iBitrate));min = Math.max(min,level); // we want min to be small but at least level(i) for all i
	}}return min;} /*
	     * The placeholder buffer increases the effective buffer that is used to calculate the bitrate.
	     * There are two main reasons we might want to increase the placeholder buffer:
	     *
	     * 1. When a segment finishes downloading, we would expect to get a call on getMaxIndex() regarding the quality for
	     *    the next segment. However, there might be a delay before the next call. E.g. when streaming live content, the
	     *    next segment might not be available yet. If the call to getMaxIndex() does happens after a delay, we don't
	     *    want the delay to change the BOLA decision - we only want to factor download time to decide on bitrate level.
	     *
	     * 2. It is possible to get a call to getMaxIndex() without having a segment download. The buffer target in dash.js
	     *    is different for top-quality segments and lower-quality segments. If getMaxIndex() returns a lower-than-top
	     *    quality, then the buffer controller might decide not to download a segment. When dash.js is ready for the next
	     *    segment, getMaxIndex() will be called again. We don't want this extra delay to factor in the bitrate decision.
	     */function updatePlaceholderBuffer(bolaState,mediaType){var nowMs=Date.now();if(!isNaN(bolaState.lastSegmentFinishTimeMs)){ // compensate for non-bandwidth-derived delays, e.g., live streaming availability, buffer controller
	var delay=0.001 * (nowMs - bolaState.lastSegmentFinishTimeMs);bolaState.placeholderBuffer += Math.max(0,delay);}else if(!isNaN(bolaState.lastCallTimeMs)){ // no download after last call, compensate for delay between calls
	var delay=0.001 * (nowMs - bolaState.lastCallTimeMs);bolaState.placeholderBuffer += Math.max(0,delay);}bolaState.lastCallTimeMs = nowMs;bolaState.lastSegmentStart = NaN;bolaState.lastSegmentRequestTimeMs = NaN;bolaState.lastSegmentFinishTimeMs = NaN;checkBolaStateStableBufferTime(bolaState,mediaType);}function onBufferEmpty(){ // if we rebuffer, we don't want the placeholder buffer to artificially raise BOLA quality
	for(var mediaType in bolaStateDict) {if(bolaStateDict.hasOwnProperty(mediaType) && bolaStateDict[mediaType].state === BOLA_STATE_STEADY){bolaStateDict[mediaType].placeholderBuffer = 0;}}}function onPlaybackSeeking(){ // TODO: 1. Verify what happens if we seek mid-fragment.
	// TODO: 2. If e.g. we have 10s fragments and seek, we might want to download the first fragment at a lower quality to restart playback quickly.
	for(var mediaType in bolaStateDict) {if(bolaStateDict.hasOwnProperty(mediaType)){var bolaState=bolaStateDict[mediaType];if(bolaState.state !== BOLA_STATE_ONE_BITRATE){bolaState.state = BOLA_STATE_STARTUP; // TODO: BOLA_STATE_SEEK?
	clearBolaStateOnSeek(bolaState);}}}}function onPeriodSwitchStarted(){ // TODO: does this have to be handled here?
	}function onMediaFragmentLoaded(e){if(e && e.chunk && e.chunk.mediaInfo){var bolaState=bolaStateDict[e.chunk.mediaInfo.type];if(bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE){var start=e.chunk.start;if(isNaN(bolaState.mostAdvancedSegmentStart) || start > bolaState.mostAdvancedSegmentStart){bolaState.mostAdvancedSegmentStart = start;bolaState.lastSegmentWasReplacement = false;}else {bolaState.lastSegmentWasReplacement = true;}bolaState.lastSegmentStart = start;bolaState.lastSegmentDurationS = e.chunk.duration;bolaState.lastQuality = e.chunk.quality;checkNewSegment(bolaState,e.chunk.mediaInfo.type);}}}function onMetricAdded(e){if(e && e.metric === _constantsMetricsConstants2['default'].HTTP_REQUEST && e.value && e.value.type === _voMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE && e.value.trace && e.value.trace.length){var bolaState=bolaStateDict[e.mediaType];if(bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE){bolaState.lastSegmentRequestTimeMs = e.value.trequest.getTime();bolaState.lastSegmentFinishTimeMs = e.value._tfinish.getTime();checkNewSegment(bolaState,e.mediaType);}}} /*
	     * When a new segment is downloaded, we get two notifications: onMediaFragmentLoaded() and onMetricAdded(). It is
	     * possible that the quality for the downloaded segment was lower (not higher) than the quality indicated by BOLA.
	     * This might happen because of other rules such as the DroppedFramesRule. When this happens, we trim the
	     * placeholder buffer to make BOLA more stable. This mechanism also avoids inflating the buffer when BOLA itself
	     * decides not to increase the quality to avoid oscillations.
	     *
	     * We should also check for replacement segments (fast switching). In this case, a segment is downloaded but does
	     * not grow the actual buffer. Fast switching might cause the buffer to deplete, causing BOLA to drop the bitrate.
	     * We avoid this by growing the placeholder buffer.
	     */function checkNewSegment(bolaState,mediaType){if(!isNaN(bolaState.lastSegmentStart) && !isNaN(bolaState.lastSegmentRequestTimeMs) && !isNaN(bolaState.placeholderBuffer)){bolaState.placeholderBuffer *= PLACEHOLDER_BUFFER_DECAY; // Find what maximum buffer corresponding to last segment was, and ensure placeholder is not relatively larger.
	if(!isNaN(bolaState.lastSegmentFinishTimeMs)){var bufferLevel=dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(mediaType));var bufferAtLastSegmentRequest=bufferLevel + 0.001 * (bolaState.lastSegmentFinishTimeMs - bolaState.lastSegmentRequestTimeMs); // estimate
	var maxEffectiveBufferForLastSegment=maxBufferLevelForQuality(bolaState,bolaState.lastQuality);var maxPlaceholderBuffer=Math.max(0,maxEffectiveBufferForLastSegment - bufferAtLastSegmentRequest);bolaState.placeholderBuffer = Math.min(maxPlaceholderBuffer,bolaState.placeholderBuffer);} // then see if we should grow placeholder buffer
	if(bolaState.lastSegmentWasReplacement && !isNaN(bolaState.lastSegmentDurationS)){ // compensate for segments that were downloaded but did not grow the buffer
	bolaState.placeholderBuffer += bolaState.lastSegmentDurationS;}bolaState.lastSegmentStart = NaN;bolaState.lastSegmentRequestTimeMs = NaN;}}function onQualityChangeRequested(e){ // Useful to store change requests when abandoning a download.
	if(e){var bolaState=bolaStateDict[e.mediaType];if(bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE){bolaState.abrQuality = e.newQuality;}}}function onFragmentLoadingAbandoned(e){if(e){var bolaState=bolaStateDict[e.mediaType];if(bolaState && bolaState.state !== BOLA_STATE_ONE_BITRATE){ // deflate placeholderBuffer - note that we want to be conservative when abandoning
	var bufferLevel=dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(e.mediaType));var wantEffectiveBufferLevel=undefined;if(bolaState.abrQuality > 0){ // deflate to point where BOLA just chooses newQuality over newQuality-1
	wantEffectiveBufferLevel = minBufferLevelForQuality(bolaState,bolaState.abrQuality);}else {wantEffectiveBufferLevel = MINIMUM_BUFFER_S;}var maxPlaceholderBuffer=Math.max(0,wantEffectiveBufferLevel - bufferLevel);bolaState.placeholderBuffer = Math.min(bolaState.placeholderBuffer,maxPlaceholderBuffer);}}}function getMaxIndex(rulesContext){var mediaInfo=rulesContext.getMediaInfo();var mediaType=rulesContext.getMediaType();var metrics=metricsModel.getReadOnlyMetricsFor(mediaType);var scheduleController=rulesContext.getScheduleController();var streamInfo=rulesContext.getStreamInfo();var abrController=rulesContext.getAbrController();var throughputHistory=abrController.getThroughputHistory();var streamId=streamInfo?streamInfo.id:null;var isDynamic=streamInfo && streamInfo.manifestInfo && streamInfo.manifestInfo.isDynamic;var useBufferOccupancyABR=rulesContext.useBufferOccupancyABR();var switchRequest=(0,_SwitchRequest2['default'])(context).create();switchRequest.reason = switchRequest.reason || {};if(!useBufferOccupancyABR){return switchRequest;}scheduleController.setTimeToLoadDelay(0);var bolaState=getBolaState(rulesContext);if(bolaState.state === BOLA_STATE_ONE_BITRATE){ // shouldn't even have been called
	return switchRequest;}var bufferLevel=dashMetrics.getCurrentBufferLevel(metrics);var throughput=throughputHistory.getAverageThroughput(mediaType,isDynamic);var safeThroughput=throughputHistory.getSafeAverageThroughput(mediaType,isDynamic);var latency=throughputHistory.getAverageLatency(mediaType);var quality=undefined;switchRequest.reason.state = bolaState.state;switchRequest.reason.throughput = throughput;switchRequest.reason.latency = latency;if(isNaN(throughput)){ // isNaN(throughput) === isNaN(safeThroughput) === isNaN(latency)
	// still starting up - not enough information
	return switchRequest;}switch(bolaState.state){case BOLA_STATE_STARTUP:quality = abrController.getQualityForBitrate(mediaInfo,safeThroughput,latency);switchRequest.quality = quality;switchRequest.reason.throughput = safeThroughput;bolaState.placeholderBuffer = Math.max(0,minBufferLevelForQuality(bolaState,quality) - bufferLevel);bolaState.lastQuality = quality;if(!isNaN(bolaState.lastSegmentDurationS) && bufferLevel >= bolaState.lastSegmentDurationS){bolaState.state = BOLA_STATE_STEADY;}break; // BOLA_STATE_STARTUP
	case BOLA_STATE_STEADY: // NB: The placeholder buffer is added to bufferLevel to come up with a bitrate.
	//     This might lead BOLA to be too optimistic and to choose a bitrate that would lead to rebuffering -
	//     if the real buffer bufferLevel runs out, the placeholder buffer cannot prevent rebuffering.
	//     However, the InsufficientBufferRule takes care of this scenario.
	updatePlaceholderBuffer(bolaState,mediaType);quality = getQualityFromBufferLevel(bolaState,bufferLevel + bolaState.placeholderBuffer); // we want to avoid oscillations
	// We implement the "BOLA-O" variant: when network bandwidth lies between two encoded bitrate levels, stick to the lowest level.
	var qualityForThroughput=abrController.getQualityForBitrate(mediaInfo,safeThroughput,latency);if(quality > bolaState.lastQuality && quality > qualityForThroughput){ // only intervene if we are trying to *increase* quality to an *unsustainable* level
	// we are only avoid oscillations - do not drop below last quality
	quality = Math.max(qualityForThroughput,bolaState.lastQuality);} // We do not want to overfill buffer with low quality chunks.
	// Note that there will be no delay if buffer level is below MINIMUM_BUFFER_S, probably even with some margin higher than MINIMUM_BUFFER_S.
	var delayS=Math.max(0,bufferLevel + bolaState.placeholderBuffer - maxBufferLevelForQuality(bolaState,quality)); // First reduce placeholder buffer, then tell schedule controller to pause.
	if(delayS <= bolaState.placeholderBuffer){bolaState.placeholderBuffer -= delayS;delayS = 0;}else {delayS -= bolaState.placeholderBuffer;bolaState.placeholderBuffer = 0;if(quality < abrController.getTopQualityIndexFor(mediaType,streamId)){ // At top quality, allow schedule controller to decide how far to fill buffer.
	scheduleController.setTimeToLoadDelay(1000 * delayS);}else {delayS = 0;}}switchRequest.quality = quality;switchRequest.reason.throughput = throughput;switchRequest.reason.latency = latency;switchRequest.reason.bufferLevel = bufferLevel;switchRequest.reason.placeholderBuffer = bolaState.placeholderBuffer;switchRequest.reason.delay = delayS;bolaState.lastQuality = quality; // keep bolaState.state === BOLA_STATE_STEADY
	break; // BOLA_STATE_STEADY
	default:logger.debug('BOLA ABR rule invoked in bad state.'); // should not arrive here, try to recover
	switchRequest.quality = abrController.getQualityForBitrate(mediaInfo,safeThroughput,latency);switchRequest.reason.state = bolaState.state;switchRequest.reason.throughput = safeThroughput;switchRequest.reason.latency = latency;bolaState.state = BOLA_STATE_STARTUP;clearBolaStateOnSeek(bolaState);}return switchRequest;}function resetInitialSettings(){bolaStateDict = {};}function reset(){resetInitialSettings();eventBus.off(_coreEventsEvents2['default'].BUFFER_EMPTY,onBufferEmpty,instance);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_SEEKING,onPlaybackSeeking,instance);eventBus.off(_coreEventsEvents2['default'].PERIOD_SWITCH_STARTED,onPeriodSwitchStarted,instance);eventBus.off(_coreEventsEvents2['default'].MEDIA_FRAGMENT_LOADED,onMediaFragmentLoaded,instance);eventBus.off(_coreEventsEvents2['default'].METRIC_ADDED,onMetricAdded,instance);eventBus.off(_coreEventsEvents2['default'].QUALITY_CHANGE_REQUESTED,onQualityChangeRequested,instance);eventBus.off(_coreEventsEvents2['default'].FRAGMENT_LOADING_ABANDONED,onFragmentLoadingAbandoned,instance);}instance = {getMaxIndex:getMaxIndex,reset:reset};setup();return instance;}BolaRule.__dashjs_factory_name = 'BolaRule';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(BolaRule);module.exports = exports['default'];
	//# sourceMappingURL=BolaRule.js.map


/***/ }),
/* 131 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var BitrateInfo=function BitrateInfo(){_classCallCheck(this,BitrateInfo);this.mediaType = null;this.bitrate = null;this.width = null;this.height = null;this.scanType = null;this.qualityIndex = NaN;};exports["default"] = BitrateInfo;module.exports = exports["default"];
	//# sourceMappingURL=BitrateInfo.js.map


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);function RulesContext(config){config = config || {};var instance=undefined;var abrController=config.abrController;var switchHistory=config.switchHistory;var droppedFramesHistory=config.droppedFramesHistory;var currentRequest=config.currentRequest;var bufferOccupancyABR=config.useBufferOccupancyABR;var scheduleController=config.streamProcessor?config.streamProcessor.getScheduleController():null;var representationInfo=config.streamProcessor?config.streamProcessor.getRepresentationInfo():null;function getMediaType(){var mediaInfo=getMediaInfo();return mediaInfo?mediaInfo.type:null;}function getStreamInfo(){var mediaInfo=getMediaInfo();return mediaInfo?mediaInfo.streamInfo:null;}function getMediaInfo(){return representationInfo?representationInfo.mediaInfo:null;}function getRepresentationInfo(){return representationInfo;}function getScheduleController(){return scheduleController;}function getAbrController(){return abrController;}function getSwitchHistory(){return switchHistory;}function getDroppedFramesHistory(){return droppedFramesHistory;}function getCurrentRequest(){return currentRequest;}function useBufferOccupancyABR(){return bufferOccupancyABR;}instance = {getMediaType:getMediaType,getMediaInfo:getMediaInfo,getDroppedFramesHistory:getDroppedFramesHistory,getCurrentRequest:getCurrentRequest,getSwitchHistory:getSwitchHistory,getStreamInfo:getStreamInfo,getScheduleController:getScheduleController,getAbrController:getAbrController,getRepresentationInfo:getRepresentationInfo,useBufferOccupancyABR:useBufferOccupancyABR};return instance;}RulesContext.__dashjs_factory_name = 'RulesContext';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(RulesContext);module.exports = exports['default'];
	//# sourceMappingURL=RulesContext.js.map


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _SwitchRequest=__webpack_require__(125);var _SwitchRequest2=_interopRequireDefault(_SwitchRequest);var SWITCH_REQUEST_HISTORY_DEPTH=8; // must be > SwitchHistoryRule SAMPLE_SIZE to enable rule
	function SwitchRequestHistory(){var switchRequests=[]; // running total
	var srHistory=[]; // history of each switch
	function push(switchRequest){if(switchRequest.newValue === _SwitchRequest2['default'].NO_CHANGE){switchRequest.newValue = switchRequest.oldValue;}if(!switchRequests[switchRequest.oldValue]){switchRequests[switchRequest.oldValue] = {noDrops:0,drops:0,dropSize:0};} // Set switch details
	var indexDiff=switchRequest.newValue - switchRequest.oldValue;var drop=indexDiff < 0?1:0;var dropSize=drop?-indexDiff:0;var noDrop=drop?0:1; // Update running totals
	switchRequests[switchRequest.oldValue].drops += drop;switchRequests[switchRequest.oldValue].dropSize += dropSize;switchRequests[switchRequest.oldValue].noDrops += noDrop; // Save to history
	srHistory.push({idx:switchRequest.oldValue,noDrop:noDrop,drop:drop,dropSize:dropSize}); // Shift earliest switch off srHistory and readjust to keep depth of running totals constant
	if(srHistory.length > SWITCH_REQUEST_HISTORY_DEPTH){var srHistoryFirst=srHistory.shift();switchRequests[srHistoryFirst.idx].drops -= srHistoryFirst.drop;switchRequests[srHistoryFirst.idx].dropSize -= srHistoryFirst.dropSize;switchRequests[srHistoryFirst.idx].noDrops -= srHistoryFirst.noDrop;}}function getSwitchRequests(){return switchRequests;}function reset(){switchRequests = [];srHistory = [];}return {push:push,getSwitchRequests:getSwitchRequests,reset:reset};}SwitchRequestHistory.__dashjs_factory_name = 'SwitchRequestHistory';var factory=_coreFactoryMaker2['default'].getClassFactory(SwitchRequestHistory);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=SwitchRequestHistory.js.map


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);function DroppedFramesHistory(){var values=[];var lastDroppedFrames=0;var lastTotalFrames=0;function push(index,playbackQuality){var droppedVideoFrames=playbackQuality && playbackQuality.droppedVideoFrames?playbackQuality.droppedVideoFrames:0;var totalVideoFrames=playbackQuality && playbackQuality.totalVideoFrames?playbackQuality.totalVideoFrames:0;var intervalDroppedFrames=droppedVideoFrames - lastDroppedFrames;lastDroppedFrames = droppedVideoFrames;var intervalTotalFrames=totalVideoFrames - lastTotalFrames;lastTotalFrames = totalVideoFrames;if(!isNaN(index)){if(!values[index]){values[index] = {droppedVideoFrames:intervalDroppedFrames,totalVideoFrames:intervalTotalFrames};}else {values[index].droppedVideoFrames += intervalDroppedFrames;values[index].totalVideoFrames += intervalTotalFrames;}}}function getDroppedFrameHistory(){return values;}function reset(playbackQuality){values = [];lastDroppedFrames = playbackQuality.droppedVideoFrames;lastTotalFrames = playbackQuality.totalVideoFrames;}return {push:push,getFrameHistory:getDroppedFrameHistory,reset:reset};}DroppedFramesHistory.__dashjs_factory_name = 'DroppedFramesHistory';var factory=_coreFactoryMaker2['default'].getClassFactory(DroppedFramesHistory);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=DroppedFramesHistory.js.map


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2017, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker); // throughput generally stored in kbit/s
	// latency generally stored in ms
	function ThroughputHistory(config){config = config || {}; // sliding window constants
	var MAX_MEASUREMENTS_TO_KEEP=20;var AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE=3;var AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD=4;var AVERAGE_LATENCY_SAMPLE_AMOUNT=4;var THROUGHPUT_DECREASE_SCALE=1.3;var THROUGHPUT_INCREASE_SCALE=1.3; // EWMA constants
	var EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS=8;var EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS=3;var EWMA_LATENCY_SLOW_HALF_LIFE_COUNT=2;var EWMA_LATENCY_FAST_HALF_LIFE_COUNT=1;var mediaPlayerModel=config.mediaPlayerModel;var throughputDict=undefined,latencyDict=undefined,ewmaThroughputDict=undefined,ewmaLatencyDict=undefined,ewmaHalfLife=undefined;function setup(){ewmaHalfLife = {throughputHalfLife:{fast:EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS,slow:EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS},latencyHalfLife:{fast:EWMA_LATENCY_FAST_HALF_LIFE_COUNT,slow:EWMA_LATENCY_SLOW_HALF_LIFE_COUNT}};reset();}function isCachedResponse(mediaType,latencyMs,downloadTimeMs){if(mediaType === _constantsConstants2['default'].VIDEO){return downloadTimeMs < mediaPlayerModel.getCacheLoadThresholdForType(_constantsConstants2['default'].VIDEO);}else if(mediaType === _constantsConstants2['default'].AUDIO){return downloadTimeMs < mediaPlayerModel.getCacheLoadThresholdForType(_constantsConstants2['default'].AUDIO);}}function push(mediaType,httpRequest,useDeadTimeLatency){if(!httpRequest.trace || !httpRequest.trace.length){return;}var latencyTimeInMilliseconds=httpRequest.tresponse.getTime() - httpRequest.trequest.getTime() || 1;var downloadTimeInMilliseconds=httpRequest._tfinish.getTime() - httpRequest.tresponse.getTime() || 1; //Make sure never 0 we divide by this value. Avoid infinity!
	var downloadBytes=httpRequest.trace.reduce(function(a,b){return a + b.b[0];},0);var throughputMeasureTime=undefined;if(mediaPlayerModel.getLowLatencyEnabled()){throughputMeasureTime = httpRequest.trace.reduce(function(a,b){return a + b.d;},0);}else {throughputMeasureTime = useDeadTimeLatency?downloadTimeInMilliseconds:latencyTimeInMilliseconds + downloadTimeInMilliseconds;}var throughput=Math.round(8 * downloadBytes / throughputMeasureTime); // bits/ms = kbits/s
	checkSettingsForMediaType(mediaType);if(isCachedResponse(mediaType,latencyTimeInMilliseconds,downloadTimeInMilliseconds)){if(throughputDict[mediaType].length > 0 && !throughputDict[mediaType].hasCachedEntries){ // already have some entries which are not cached entries
	// prevent cached fragment loads from skewing the average values
	return;}else { // have no entries || have cached entries
	// no uncached entries yet, rely on cached entries because ABR rules need something to go by
	throughputDict[mediaType].hasCachedEntries = true;}}else if(throughputDict[mediaType] && throughputDict[mediaType].hasCachedEntries){ // if we are here then we have some entries already, but they are cached, and now we have a new uncached entry
	clearSettingsForMediaType(mediaType);}throughputDict[mediaType].push(throughput);if(throughputDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP){throughputDict[mediaType].shift();}latencyDict[mediaType].push(latencyTimeInMilliseconds);if(latencyDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP){latencyDict[mediaType].shift();}updateEwmaEstimate(ewmaThroughputDict[mediaType],throughput,0.001 * downloadTimeInMilliseconds,ewmaHalfLife.throughputHalfLife);updateEwmaEstimate(ewmaLatencyDict[mediaType],latencyTimeInMilliseconds,1,ewmaHalfLife.latencyHalfLife);}function updateEwmaEstimate(ewmaObj,value,weight,halfLife){ // Note about startup:
	// Estimates start at 0, so early values are underestimated.
	// This effect is countered in getAverageEwma() by dividing the estimates by:
	//     1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)
	var fastAlpha=Math.pow(0.5,weight / halfLife.fast);ewmaObj.fastEstimate = (1 - fastAlpha) * value + fastAlpha * ewmaObj.fastEstimate;var slowAlpha=Math.pow(0.5,weight / halfLife.slow);ewmaObj.slowEstimate = (1 - slowAlpha) * value + slowAlpha * ewmaObj.slowEstimate;ewmaObj.totalWeight += weight;}function getSampleSize(isThroughput,mediaType,isLive){var arr=undefined,sampleSize=undefined;if(isThroughput){arr = throughputDict[mediaType];sampleSize = isLive?AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE:AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD;}else {arr = latencyDict[mediaType];sampleSize = AVERAGE_LATENCY_SAMPLE_AMOUNT;}if(!arr){sampleSize = 0;}else if(sampleSize >= arr.length){sampleSize = arr.length;}else if(isThroughput){ // if throughput samples vary a lot, average over a wider sample
	for(var i=1;i < sampleSize;++i) {var ratio=arr[i] / arr[i - 1];if(ratio >= THROUGHPUT_INCREASE_SCALE || ratio <= 1 / THROUGHPUT_DECREASE_SCALE){sampleSize += 1;if(sampleSize === arr.length){ // cannot increase sampleSize beyond arr.length
	break;}}}}return sampleSize;}function getAverage(isThroughput,mediaType,isDynamic){ // only two moving average methods defined at the moment
	return mediaPlayerModel.getMovingAverageMethod() !== _constantsConstants2['default'].MOVING_AVERAGE_SLIDING_WINDOW?getAverageEwma(isThroughput,mediaType):getAverageSlidingWindow(isThroughput,mediaType,isDynamic);}function getAverageSlidingWindow(isThroughput,mediaType,isDynamic){var sampleSize=getSampleSize(isThroughput,mediaType,isDynamic);var dict=isThroughput?throughputDict:latencyDict;var arr=dict[mediaType];if(sampleSize === 0 || !arr || arr.length === 0){return NaN;}arr = arr.slice(-sampleSize); // still works if sampleSize too large
	// arr.length >= 1
	return arr.reduce(function(total,elem){return total + elem;}) / arr.length;}function getAverageEwma(isThroughput,mediaType){var halfLife=isThroughput?ewmaHalfLife.throughputHalfLife:ewmaHalfLife.latencyHalfLife;var ewmaObj=isThroughput?ewmaThroughputDict[mediaType]:ewmaLatencyDict[mediaType];if(!ewmaObj || ewmaObj.totalWeight <= 0){return NaN;} // to correct for startup, divide by zero factor = 1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)
	var fastEstimate=ewmaObj.fastEstimate / (1 - Math.pow(0.5,ewmaObj.totalWeight / halfLife.fast));var slowEstimate=ewmaObj.slowEstimate / (1 - Math.pow(0.5,ewmaObj.totalWeight / halfLife.slow));return isThroughput?Math.min(fastEstimate,slowEstimate):Math.max(fastEstimate,slowEstimate);}function getAverageThroughput(mediaType,isDynamic){return getAverage(true,mediaType,isDynamic);}function getSafeAverageThroughput(mediaType,isDynamic){var average=getAverageThroughput(mediaType,isDynamic);if(!isNaN(average)){average *= mediaPlayerModel.getBandwidthSafetyFactor();}return average;}function getAverageLatency(mediaType){return getAverage(false,mediaType);}function checkSettingsForMediaType(mediaType){throughputDict[mediaType] = throughputDict[mediaType] || [];latencyDict[mediaType] = latencyDict[mediaType] || [];ewmaThroughputDict[mediaType] = ewmaThroughputDict[mediaType] || {fastEstimate:0,slowEstimate:0,totalWeight:0};ewmaLatencyDict[mediaType] = ewmaLatencyDict[mediaType] || {fastEstimate:0,slowEstimate:0,totalWeight:0};}function clearSettingsForMediaType(mediaType){delete throughputDict[mediaType];delete latencyDict[mediaType];delete ewmaThroughputDict[mediaType];delete ewmaLatencyDict[mediaType];checkSettingsForMediaType(mediaType);}function reset(){throughputDict = {};latencyDict = {};ewmaThroughputDict = {};ewmaLatencyDict = {};}var instance={push:push,getAverageThroughput:getAverageThroughput,getSafeAverageThroughput:getSafeAverageThroughput,getAverageLatency:getAverageLatency,reset:reset};setup();return instance;}ThroughputHistory.__dashjs_factory_name = 'ThroughputHistory';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(ThroughputHistory);module.exports = exports['default'];
	//# sourceMappingURL=ThroughputHistory.js.map


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var TRACK_SWITCH_MODE_NEVER_REPLACE='neverReplace';var TRACK_SWITCH_MODE_ALWAYS_REPLACE='alwaysReplace';var TRACK_SELECTION_MODE_HIGHEST_BITRATE='highestBitrate';var TRACK_SELECTION_MODE_WIDEST_RANGE='widestRange';var DEFAULT_INIT_TRACK_SELECTION_MODE=TRACK_SELECTION_MODE_HIGHEST_BITRATE;function MediaController(){var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var instance=undefined,logger=undefined,tracks=undefined,initialSettings=undefined,selectionMode=undefined,switchMode=undefined,domStorage=undefined;var validTrackSwitchModes=[TRACK_SWITCH_MODE_ALWAYS_REPLACE,TRACK_SWITCH_MODE_NEVER_REPLACE];var validTrackSelectionModes=[TRACK_SELECTION_MODE_HIGHEST_BITRATE,TRACK_SELECTION_MODE_WIDEST_RANGE];function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);reset();} /**
	     * @param {string} type
	     * @param {StreamInfo} streamInfo
	     * @memberof MediaController#
	     */function checkInitialMediaSettingsForType(type,streamInfo){var settings=getInitialSettings(type);var tracksForType=getTracksFor(type,streamInfo);var tracks=[];if(type === _constantsConstants2['default'].FRAGMENTED_TEXT){ // Choose the first track
	setTrack(tracksForType[0]);return;}if(!settings){settings = domStorage.getSavedMediaSettings(type);setInitialSettings(type,settings);}if(!tracksForType || tracksForType.length === 0)return;if(settings){tracksForType.forEach(function(track){if(matchSettings(settings,track)){tracks.push(track);}});}if(tracks.length === 0){setTrack(selectInitialTrack(tracksForType));}else {if(tracks.length > 1){setTrack(selectInitialTrack(tracks));}else {setTrack(tracks[0]);}}} /**
	     * @param {MediaInfo} track
	     * @memberof MediaController#
	     */function addTrack(track){if(!track)return;var mediaType=track.type;if(!isMultiTrackSupportedByType(mediaType))return;var streamId=track.streamInfo.id;if(!tracks[streamId]){tracks[streamId] = createTrackInfo();}var mediaTracks=tracks[streamId][mediaType].list;for(var i=0,len=mediaTracks.length;i < len;++i) { //track is already set.
	if(isTracksEqual(mediaTracks[i],track)){return;}}mediaTracks.push(track);var initSettings=getInitialSettings(mediaType);if(initSettings && matchSettings(initSettings,track) && !getCurrentTrackFor(mediaType,track.streamInfo)){setTrack(track);}} /**
	     * @param {string} type
	     * @param {StreamInfo} streamInfo
	     * @returns {Array}
	     * @memberof MediaController#
	     */function getTracksFor(type,streamInfo){if(!type || !streamInfo)return [];var id=streamInfo.id;if(!tracks[id] || !tracks[id][type])return [];return tracks[id][type].list;} /**
	     * @param {string} type
	     * @param {StreamInfo} streamInfo
	     * @returns {Object|null}
	     * @memberof MediaController#
	     */function getCurrentTrackFor(type,streamInfo){if(!type || !streamInfo || streamInfo && !tracks[streamInfo.id])return null;return tracks[streamInfo.id][type].current;} /**
	     * @param {MediaInfo} track
	     * @returns {boolean}
	     * @memberof MediaController#
	     */function isCurrentTrack(track){if(!track){return false;}var type=track.type;var id=track.streamInfo.id;return tracks[id] && tracks[id][type] && isTracksEqual(tracks[id][type].current,track);} /**
	     * @param {MediaInfo} track
	     * @memberof MediaController#
	     */function setTrack(track){if(!track)return;var type=track.type;var streamInfo=track.streamInfo;var id=streamInfo.id;var current=getCurrentTrackFor(type,streamInfo);if(!tracks[id] || !tracks[id][type] || isTracksEqual(track,current))return;tracks[id][type].current = track;if(tracks[id][type].current){eventBus.trigger(_coreEventsEvents2['default'].CURRENT_TRACK_CHANGED,{oldMediaInfo:current,newMediaInfo:track,switchMode:switchMode[type]});}var settings=extractSettings(track);if(!settings || !tracks[id][type].storeLastSettings)return;if(settings.roles){settings.role = settings.roles[0];delete settings.roles;}if(settings.accessibility){settings.accessibility = settings.accessibility[0];}if(settings.audioChannelConfiguration){settings.audioChannelConfiguration = settings.audioChannelConfiguration[0];}domStorage.setSavedMediaSettings(type,settings);} /**
	     * @param {string} type
	     * @param {Object} value
	     * @memberof MediaController#
	     */function setInitialSettings(type,value){if(!type || !value)return;initialSettings[type] = value;} /**
	     * @param {string} type
	     * @returns {Object|null}
	     * @memberof MediaController#
	     */function getInitialSettings(type){if(!type)return null;return initialSettings[type];} /**
	     * @param {string} type
	     * @param {string} mode
	     * @memberof MediaController#
	     */function setSwitchMode(type,mode){var isModeSupported=validTrackSwitchModes.indexOf(mode) !== -1;if(!isModeSupported){logger.warn('Track switch mode is not supported: ' + mode);return;}switchMode[type] = mode;} /**
	     * @param {string} type
	     * @returns {string} mode
	     * @memberof MediaController#
	     */function getSwitchMode(type){return switchMode[type];} /**
	     * @param {string} mode
	     * @memberof MediaController#
	     */function setSelectionModeForInitialTrack(mode){var isModeSupported=validTrackSelectionModes.indexOf(mode) !== -1;if(!isModeSupported){logger.warn('Track selection mode is not supported: ' + mode);return;}selectionMode = mode;} /**
	     * @returns {string} mode
	     * @memberof MediaController#
	     */function getSelectionModeForInitialTrack(){return selectionMode || DEFAULT_INIT_TRACK_SELECTION_MODE;} /**
	     * @param {string} type
	     * @returns {boolean}
	     * @memberof MediaController#
	     */function isMultiTrackSupportedByType(type){return type === _constantsConstants2['default'].AUDIO || type === _constantsConstants2['default'].VIDEO || type === _constantsConstants2['default'].TEXT || type === _constantsConstants2['default'].FRAGMENTED_TEXT || type === _constantsConstants2['default'].IMAGE;} /**
	     * @param {MediaInfo} t1 - first track to compare
	     * @param {MediaInfo} t2 - second track to compare
	     * @returns {boolean}
	     * @memberof MediaController#
	     */function isTracksEqual(t1,t2){if(!t1 && !t2){return true;}if(!t1 || !t2){return false;}var sameId=t1.id === t2.id;var sameViewpoint=t1.viewpoint === t2.viewpoint;var sameLang=t1.lang === t2.lang;var sameRoles=t1.roles.toString() === t2.roles.toString();var sameAccessibility=t1.accessibility.toString() === t2.accessibility.toString();var sameAudioChannelConfiguration=t1.audioChannelConfiguration.toString() === t2.audioChannelConfiguration.toString();return sameId && sameViewpoint && sameLang && sameRoles && sameAccessibility && sameAudioChannelConfiguration;}function setConfig(config){if(!config)return;if(config.domStorage){domStorage = config.domStorage;}} /**
	     * @memberof MediaController#
	     */function reset(){tracks = {};resetInitialSettings();resetSwitchMode();}function extractSettings(mediaInfo){var settings={lang:mediaInfo.lang,viewpoint:mediaInfo.viewpoint,roles:mediaInfo.roles,accessibility:mediaInfo.accessibility,audioChannelConfiguration:mediaInfo.audioChannelConfiguration};var notEmpty=settings.lang || settings.viewpoint || settings.role && settings.role.length > 0 || settings.accessibility && settings.accessibility.length > 0 || settings.audioChannelConfiguration && settings.audioChannelConfiguration.length > 0;return notEmpty?settings:null;}function matchSettings(settings,track){var matchLang=!settings.lang || settings.lang === track.lang;var matchViewPoint=!settings.viewpoint || settings.viewpoint === track.viewpoint;var matchRole=!settings.role || !!track.roles.filter(function(item){return item === settings.role;})[0];var matchAccessibility=!settings.accessibility || !!track.accessibility.filter(function(item){return item === settings.accessibility;})[0];var matchAudioChannelConfiguration=!settings.audioChannelConfiguration || !!track.audioChannelConfiguration.filter(function(item){return item === settings.audioChannelConfiguration;})[0];return matchLang && matchViewPoint && matchRole && matchAccessibility && matchAudioChannelConfiguration;}function resetSwitchMode(){switchMode = {audio:TRACK_SWITCH_MODE_ALWAYS_REPLACE,video:TRACK_SWITCH_MODE_NEVER_REPLACE};}function resetInitialSettings(){initialSettings = {audio:null,video:null};}function selectInitialTrack(tracks){var mode=getSelectionModeForInitialTrack();var tmpArr=[];var getTracksWithHighestBitrate=function getTracksWithHighestBitrate(trackArr){var max=0;var result=[];var tmp=undefined;trackArr.forEach(function(track){tmp = Math.max.apply(Math,track.bitrateList.map(function(obj){return obj.bandwidth;}));if(tmp > max){max = tmp;result = [track];}else if(tmp === max){result.push(track);}});return result;};var getTracksWithWidestRange=function getTracksWithWidestRange(trackArr){var max=0;var result=[];var tmp=undefined;trackArr.forEach(function(track){tmp = track.representationCount;if(tmp > max){max = tmp;result = [track];}else if(tmp === max){result.push(track);}});return result;};switch(mode){case TRACK_SELECTION_MODE_HIGHEST_BITRATE:tmpArr = getTracksWithHighestBitrate(tracks);if(tmpArr.length > 1){tmpArr = getTracksWithWidestRange(tmpArr);}break;case TRACK_SELECTION_MODE_WIDEST_RANGE:tmpArr = getTracksWithWidestRange(tracks);if(tmpArr.length > 1){tmpArr = getTracksWithHighestBitrate(tracks);}break;default:logger.warn('Track selection mode is not supported: ' + mode);break;}return tmpArr[0];}function createTrackInfo(){return {audio:{list:[],storeLastSettings:true,current:null},video:{list:[],storeLastSettings:true,current:null},text:{list:[],storeLastSettings:true,current:null},fragmentedText:{list:[],storeLastSettings:true,current:null},image:{list:[],storeLastSettings:true,current:null}};}instance = {checkInitialMediaSettingsForType:checkInitialMediaSettingsForType,addTrack:addTrack,getTracksFor:getTracksFor,getCurrentTrackFor:getCurrentTrackFor,isCurrentTrack:isCurrentTrack,setTrack:setTrack,setInitialSettings:setInitialSettings,getInitialSettings:getInitialSettings,setSwitchMode:setSwitchMode,getSwitchMode:getSwitchMode,setSelectionModeForInitialTrack:setSelectionModeForInitialTrack,getSelectionModeForInitialTrack:getSelectionModeForInitialTrack,isMultiTrackSupportedByType:isMultiTrackSupportedByType,isTracksEqual:isTracksEqual,setConfig:setConfig,reset:reset};setup();return instance;}MediaController.__dashjs_factory_name = 'MediaController';var factory=_coreFactoryMaker2['default'].getSingletonFactory(MediaController);factory.TRACK_SWITCH_MODE_NEVER_REPLACE = TRACK_SWITCH_MODE_NEVER_REPLACE;factory.TRACK_SWITCH_MODE_ALWAYS_REPLACE = TRACK_SWITCH_MODE_ALWAYS_REPLACE;factory.TRACK_SELECTION_MODE_HIGHEST_BITRATE = TRACK_SELECTION_MODE_HIGHEST_BITRATE;factory.TRACK_SELECTION_MODE_WIDEST_RANGE = TRACK_SELECTION_MODE_WIDEST_RANGE;factory.DEFAULT_INIT_TRACK_SELECTION_MODE = DEFAULT_INIT_TRACK_SELECTION_MODE;_coreFactoryMaker2['default'].updateSingletonFactory(MediaController.__dashjs_factory_name,factory);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=MediaController.js.map


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * Represents data structure to keep and drive {DataChunk}
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);function InitCache(){var data={};function save(chunk){var id=chunk.streamId;var representationId=chunk.representationId;data[id] = data[id] || {};data[id][representationId] = chunk;}function extract(streamId,representationId){if(data && data[streamId] && data[streamId][representationId]){return data[streamId][representationId];}else {return null;}}function reset(){data = {};}var instance={save:save,extract:extract,reset:reset};return instance;}InitCache.__dashjs_factory_name = 'InitCache';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(InitCache);module.exports = exports['default'];
	//# sourceMappingURL=InitCache.js.map


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _constantsMetricsConstants=__webpack_require__(50);var _constantsMetricsConstants2=_interopRequireDefault(_constantsMetricsConstants);var _Stream=__webpack_require__(139);var _Stream2=_interopRequireDefault(_Stream);var _ManifestUpdater=__webpack_require__(175);var _ManifestUpdater2=_interopRequireDefault(_ManifestUpdater);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _voMetricsPlayList=__webpack_require__(145);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _utilsInitCache=__webpack_require__(137);var _utilsInitCache2=_interopRequireDefault(_utilsInitCache);var _utilsURLUtils=__webpack_require__(154);var _utilsURLUtils2=_interopRequireDefault(_utilsURLUtils);var _MediaPlayerEvents=__webpack_require__(176);var _MediaPlayerEvents2=_interopRequireDefault(_MediaPlayerEvents);var _TimeSyncController=__webpack_require__(177);var _TimeSyncController2=_interopRequireDefault(_TimeSyncController);var _BaseURLController=__webpack_require__(178);var _BaseURLController2=_interopRequireDefault(_BaseURLController);var _MediaSourceController=__webpack_require__(187);var _MediaSourceController2=_interopRequireDefault(_MediaSourceController);var _voDashJSError=__webpack_require__(62);var _voDashJSError2=_interopRequireDefault(_voDashJSError);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);function StreamController(){ // Check whether there is a gap every 40 wallClockUpdateEvent times
	var STALL_THRESHOLD_TO_CHECK_GAPS=40;var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var instance=undefined,logger=undefined,capabilities=undefined,manifestUpdater=undefined,manifestLoader=undefined,manifestModel=undefined,dashManifestModel=undefined,adapter=undefined,metricsModel=undefined,dashMetrics=undefined,mediaSourceController=undefined,timeSyncController=undefined,baseURLController=undefined,domStorage=undefined,abrController=undefined,mediaController=undefined,textController=undefined,initCache=undefined,urlUtils=undefined,errHandler=undefined,timelineConverter=undefined,streams=undefined,activeStream=undefined,protectionController=undefined,protectionData=undefined,autoPlay=undefined,isStreamSwitchingInProgress=undefined,hasMediaError=undefined,hasInitialisationError=undefined,mediaSource=undefined,videoModel=undefined,playbackController=undefined,mediaPlayerModel=undefined,isPaused=undefined,initialPlayback=undefined,playListMetrics=undefined,videoTrackDetected=undefined,audioTrackDetected=undefined,isStreamBufferingCompleted=undefined,playbackEndedTimerId=undefined,preloadTimerId=undefined,wallclockTicked=undefined,buffers=undefined,compatible=undefined,preloading=undefined,lastPlaybackTime=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);timeSyncController = (0,_TimeSyncController2['default'])(context).getInstance();baseURLController = (0,_BaseURLController2['default'])(context).getInstance();mediaSourceController = (0,_MediaSourceController2['default'])(context).getInstance();initCache = (0,_utilsInitCache2['default'])(context).getInstance();urlUtils = (0,_utilsURLUtils2['default'])(context).getInstance();resetInitialSettings();}function initialize(autoPl,protData){checkSetConfigCall();autoPlay = autoPl;protectionData = protData;timelineConverter.initialize();manifestUpdater = (0,_ManifestUpdater2['default'])(context).create();manifestUpdater.setConfig({manifestModel:manifestModel,dashManifestModel:dashManifestModel,mediaPlayerModel:mediaPlayerModel,manifestLoader:manifestLoader,errHandler:errHandler});manifestUpdater.initialize();baseURLController.setConfig({dashManifestModel:dashManifestModel});registerEvents();}function registerEvents(){eventBus.on(_coreEventsEvents2['default'].PLAYBACK_TIME_UPDATED,onPlaybackTimeUpdated,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_SEEKING,onPlaybackSeeking,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_ERROR,onPlaybackError,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_STARTED,onPlaybackStarted,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_PAUSED,onPlaybackPaused,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_ENDED,onEnded,this);eventBus.on(_coreEventsEvents2['default'].MANIFEST_UPDATED,onManifestUpdated,this);eventBus.on(_coreEventsEvents2['default'].STREAM_BUFFERING_COMPLETED,onStreamBufferingCompleted,this);eventBus.on(_coreEventsEvents2['default'].MANIFEST_VALIDITY_CHANGED,onManifestValidityChanged,this);eventBus.on(_coreEventsEvents2['default'].TIME_SYNCHRONIZATION_COMPLETED,onTimeSyncCompleted,this);eventBus.on(_coreEventsEvents2['default'].WALLCLOCK_TIME_UPDATED,onWallclockTimeUpdated,this);eventBus.on(_MediaPlayerEvents2['default'].METRIC_ADDED,onMetricAdded,this);}function unRegisterEvents(){eventBus.off(_coreEventsEvents2['default'].PLAYBACK_TIME_UPDATED,onPlaybackTimeUpdated,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_SEEKING,onPlaybackSeeking,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_ERROR,onPlaybackError,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_STARTED,onPlaybackStarted,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_PAUSED,onPlaybackPaused,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_ENDED,onEnded,this);eventBus.off(_coreEventsEvents2['default'].MANIFEST_UPDATED,onManifestUpdated,this);eventBus.off(_coreEventsEvents2['default'].STREAM_BUFFERING_COMPLETED,onStreamBufferingCompleted,this);eventBus.off(_coreEventsEvents2['default'].MANIFEST_VALIDITY_CHANGED,onManifestValidityChanged,this);eventBus.off(_coreEventsEvents2['default'].TIME_SYNCHRONIZATION_COMPLETED,onTimeSyncCompleted,this);eventBus.off(_coreEventsEvents2['default'].WALLCLOCK_TIME_UPDATED,onWallclockTimeUpdated,this);eventBus.off(_MediaPlayerEvents2['default'].METRIC_ADDED,onMetricAdded,this);} /*
	     * Called when current playback position is changed.
	     * Used to determine the time current stream is finished and we should switch to the next stream.
	     */function onPlaybackTimeUpdated() /*e*/{if(isTrackTypePresent(_constantsConstants2['default'].VIDEO)){var playbackQuality=videoModel.getPlaybackQuality();if(playbackQuality){metricsModel.addDroppedFrames(_constantsConstants2['default'].VIDEO,playbackQuality);}}}function onWallclockTimeUpdated() /*e*/{if(!mediaPlayerModel.getJumpGaps() || !activeStream || activeStream.getProcessors().length === 0 || playbackController.isSeeking() || isPaused || isStreamSwitchingInProgress || hasMediaError || hasInitialisationError){return;}wallclockTicked++;if(wallclockTicked >= STALL_THRESHOLD_TO_CHECK_GAPS){var currentTime=playbackController.getTime();if(lastPlaybackTime === currentTime){jumpGap(currentTime);}else {lastPlaybackTime = currentTime;}wallclockTicked = 0;}}function jumpGap(time){var streamProcessors=activeStream.getProcessors();var smallGapLimit=mediaPlayerModel.getSmallGapLimit();var seekToPosition=undefined; // Find out what is the right time position to jump to taking
	// into account state of buffer
	for(var i=0;i < streamProcessors.length;i++) {var mediaBuffer=streamProcessors[i].getBuffer();var ranges=mediaBuffer.getAllBufferRanges();var nextRangeStartTime=undefined;if(!ranges || ranges.length <= 1)continue; // Get the range just after current time position
	for(var j=0;j < ranges.length;j++) {if(time < ranges.start(j)){nextRangeStartTime = ranges.start(j);break;}}if(nextRangeStartTime > 0){var gap=nextRangeStartTime - time;if(gap > 0 && gap <= smallGapLimit){if(seekToPosition === undefined || nextRangeStartTime > seekToPosition){seekToPosition = nextRangeStartTime;}}}}var timeToStreamEnd=playbackController.getTimeToStreamEnd();if(seekToPosition === undefined && !isNaN(timeToStreamEnd) && timeToStreamEnd < smallGapLimit){seekToPosition = time + timeToStreamEnd;} // If there is a safe position to jump to, do the seeking
	if(seekToPosition > 0){if(!isNaN(timeToStreamEnd) && seekToPosition >= time + timeToStreamEnd){logger.info('Jumping media gap (discontinuity) at time ',time,'. Jumping to end of the stream');eventBus.trigger(_coreEventsEvents2['default'].PLAYBACK_ENDED,{'isLast':getActiveStreamInfo().isLast});}else {logger.info('Jumping media gap (discontinuity) at time ',time,'. Jumping to time position',seekToPosition);playbackController.seek(seekToPosition);}}}function onPlaybackSeeking(e){var seekingStream=getStreamForTime(e.seekTime); //if end period has been detected, stop timer and reset isStreamBufferingCompleted
	if(playbackEndedTimerId){stopEndPeriodTimer();isStreamBufferingCompleted = false;}if(preloadTimerId){stopPreloadTimer();}if(seekingStream === activeStream && preloading){ // Seeking to the current period was requested while preloading the next one, deactivate preloading one
	preloading.deactivate(true);}if(seekingStream && (seekingStream !== activeStream || preloading && !activeStream.isActive())){ // If we're preloading other stream, the active one was deactivated and we need to switch back
	flushPlaylistMetrics(_voMetricsPlayList.PlayListTrace.END_OF_PERIOD_STOP_REASON);switchStream(activeStream,seekingStream,e.seekTime);}else {flushPlaylistMetrics(_voMetricsPlayList.PlayListTrace.USER_REQUEST_STOP_REASON);}addPlaylistMetrics(_voMetricsPlayList.PlayList.SEEK_START_REASON);}function onPlaybackStarted() /*e*/{logger.debug('[onPlaybackStarted]');if(initialPlayback){initialPlayback = false;addPlaylistMetrics(_voMetricsPlayList.PlayList.INITIAL_PLAYOUT_START_REASON);}else {if(isPaused){isPaused = false;addPlaylistMetrics(_voMetricsPlayList.PlayList.RESUME_FROM_PAUSE_START_REASON);toggleEndPeriodTimer();}}}function onPlaybackPaused(e){logger.debug('[onPlaybackPaused]');if(!e.ended){isPaused = true;flushPlaylistMetrics(_voMetricsPlayList.PlayListTrace.USER_REQUEST_STOP_REASON);toggleEndPeriodTimer();}}function stopEndPeriodTimer(){logger.debug('[toggleEndPeriodTimer] stop end period timer.');clearTimeout(playbackEndedTimerId);playbackEndedTimerId = undefined;}function stopPreloadTimer(){logger.debug('[PreloadTimer] stop period preload timer.');clearTimeout(preloadTimerId);preloadTimerId = undefined;}function toggleEndPeriodTimer(){ //stream buffering completed has not been detected, nothing to do....
	if(isStreamBufferingCompleted){ //stream buffering completed has been detected, if end period timer is running, stop it, otherwise start it....
	if(playbackEndedTimerId){stopEndPeriodTimer();}else {var timeToEnd=playbackController.getTimeToStreamEnd();var delayPlaybackEnded=timeToEnd > 0?timeToEnd * 1000:0;logger.debug('[toggleEndPeriodTimer] start-up of timer to notify PLAYBACK_ENDED event. It will be triggered in ' + delayPlaybackEnded + ' milliseconds');playbackEndedTimerId = setTimeout(function(){eventBus.trigger(_coreEventsEvents2['default'].PLAYBACK_ENDED,{'isLast':getActiveStreamInfo().isLast});},delayPlaybackEnded);var preloadDelay=delayPlaybackEnded < 2000?delayPlaybackEnded / 4:delayPlaybackEnded - 2000;logger.info('[StreamController][toggleEndPeriodTimer] Going to fire preload in ' + preloadDelay);preloadTimerId = setTimeout(onStreamCanLoadNext,preloadDelay);}}}function onStreamBufferingCompleted(){var isLast=getActiveStreamInfo().isLast;if(mediaSource && isLast){logger.info('[onStreamBufferingCompleted] calls signalEndOfStream of mediaSourceController.');mediaSourceController.signalEndOfStream(mediaSource);}else if(mediaSource && playbackEndedTimerId === undefined){ //send PLAYBACK_ENDED in order to switch to a new period, wait until the end of playing
	logger.info('[StreamController][onStreamBufferingCompleted] end of period detected');isStreamBufferingCompleted = true;if(isPaused === false){toggleEndPeriodTimer();}}}function onStreamCanLoadNext(){var isLast=getActiveStreamInfo().isLast;if(mediaSource && !isLast){(function(){var newStream=getNextStream();compatible = activeStream.isCompatibleWithStream(newStream);if(compatible){logger.info('[StreamController][onStreamCanLoadNext] Preloading next stream');activeStream.stopEventController();activeStream.deactivate(true);newStream.preload(mediaSource,buffers);preloading = newStream;newStream.getProcessors().forEach(function(p){adapter.setIndexHandlerTime(p,newStream.getStartTime());});}})();}}function getStreamForTime(time){var duration=0;var stream=null;var ln=streams.length;if(ln > 0){duration += streams[0].getStartTime();}for(var i=0;i < ln;i++) {stream = streams[i];duration = parseFloat((duration + stream.getDuration()).toFixed(5));if(time < duration){return stream;}}return null;} /**
	     * Returns a playhead time, in seconds, converted to be relative
	     * to the start of an identified stream/period or null if no such stream
	     * @param {number} time
	     * @param {string} id
	     * @returns {number|null}
	     */function getTimeRelativeToStreamId(time,id){var stream=null;var baseStart=0;var streamStart=0;var streamDur=null;var ln=streams.length;for(var i=0;i < ln;i++) {stream = streams[i];streamStart = stream.getStartTime();streamDur = stream.getDuration(); // use start time, if not undefined or NaN or similar
	if(Number.isFinite(streamStart)){baseStart = streamStart;}if(stream.getId() === id){return time - baseStart;}else { // use duration if not undefined or NaN or similar
	if(Number.isFinite(streamDur)){baseStart += streamDur;}}}return null;}function getActiveStreamProcessors(){return activeStream?activeStream.getProcessors():[];}function onEnded(){var nextStream=getNextStream();if(nextStream){audioTrackDetected = undefined;videoTrackDetected = undefined;switchStream(activeStream,nextStream,NaN);}else {logger.debug('StreamController no next stream found');}flushPlaylistMetrics(nextStream?_voMetricsPlayList.PlayListTrace.END_OF_PERIOD_STOP_REASON:_voMetricsPlayList.PlayListTrace.END_OF_CONTENT_STOP_REASON);playbackEndedTimerId = undefined;isStreamBufferingCompleted = false;}function getNextStream(){if(activeStream){var _ret2=(function(){var start=getActiveStreamInfo().start;var duration=getActiveStreamInfo().duration;return {v:streams.filter(function(stream){return stream.getStreamInfo().start === parseFloat((start + duration).toFixed(5));})[0]};})();if(typeof _ret2 === 'object')return _ret2.v;}}function switchStream(oldStream,newStream,seekTime){if(isStreamSwitchingInProgress || !newStream || oldStream === newStream && newStream.isActive())return;isStreamSwitchingInProgress = true;eventBus.trigger(_coreEventsEvents2['default'].PERIOD_SWITCH_STARTED,{fromStreamInfo:oldStream?oldStream.getStreamInfo():null,toStreamInfo:newStream.getStreamInfo()});compatible = false;if(oldStream){oldStream.stopEventController();compatible = activeStream.isCompatibleWithStream(newStream) && !seekTime || newStream.getPreloaded();oldStream.deactivate(compatible);}activeStream = newStream;preloading = false;playbackController.initialize(getActiveStreamInfo(),compatible);if(videoModel.getElement()){ //TODO detect if we should close jump to activateStream.
	openMediaSource(seekTime,oldStream,false,compatible);}else {preloadStream(seekTime);}}function preloadStream(seekTime){activateStream(seekTime,compatible);}function switchToVideoElement(seekTime){if(activeStream){playbackController.initialize(getActiveStreamInfo());openMediaSource(seekTime,null,true,false);}}function openMediaSource(seekTime,oldStream,streamActivated,keepBuffers){var sourceUrl=undefined;function onMediaSourceOpen(){ // Manage situations in which a call to reset happens while MediaSource is being opened
	if(!mediaSource)return;logger.debug('MediaSource is open!');window.URL.revokeObjectURL(sourceUrl);mediaSource.removeEventListener('sourceopen',onMediaSourceOpen);mediaSource.removeEventListener('webkitsourceopen',onMediaSourceOpen);setMediaDuration();if(!oldStream){eventBus.trigger(_coreEventsEvents2['default'].SOURCE_INITIALIZED);}if(streamActivated){activeStream.setMediaSource(mediaSource);}else {activateStream(seekTime,keepBuffers);}}if(!mediaSource){mediaSource = mediaSourceController.createMediaSource();mediaSource.addEventListener('sourceopen',onMediaSourceOpen,false);mediaSource.addEventListener('webkitsourceopen',onMediaSourceOpen,false);sourceUrl = mediaSourceController.attachMediaSource(mediaSource,videoModel);logger.debug('MediaSource attached to element.  Waiting on open...');}else {if(keepBuffers){activateStream(seekTime,keepBuffers);if(!oldStream){eventBus.trigger(_coreEventsEvents2['default'].SOURCE_INITIALIZED);}}else {mediaSourceController.detachMediaSource(videoModel);mediaSource.addEventListener('sourceopen',onMediaSourceOpen,false);mediaSource.addEventListener('webkitsourceopen',onMediaSourceOpen,false);sourceUrl = mediaSourceController.attachMediaSource(mediaSource,videoModel);logger.debug('MediaSource attached to element.  Waiting on open...');}}}function activateStream(seekTime,keepBuffers){buffers = activeStream.activate(mediaSource,keepBuffers?buffers:undefined);audioTrackDetected = checkTrackPresence(_constantsConstants2['default'].AUDIO);videoTrackDetected = checkTrackPresence(_constantsConstants2['default'].VIDEO);if(!initialPlayback){if(!isNaN(seekTime)){playbackController.seek(seekTime); //we only need to call seek here, IndexHandlerTime was set from seeking event
	}else {(function(){var startTime=playbackController.getStreamStartTime(true);if(!keepBuffers){activeStream.getProcessors().forEach(function(p){adapter.setIndexHandlerTime(p,startTime);});}})();}}activeStream.startEventController();if(autoPlay || !initialPlayback){playbackController.play();}isStreamSwitchingInProgress = false;eventBus.trigger(_coreEventsEvents2['default'].PERIOD_SWITCH_COMPLETED,{toStreamInfo:getActiveStreamInfo()});}function setMediaDuration(duration){var manifestDuration=duration?duration:getActiveStreamInfo().manifestInfo.duration;var mediaDuration=mediaSourceController.setDuration(mediaSource,manifestDuration);logger.debug('Duration successfully set to: ' + mediaDuration);}function getComposedStream(streamInfo){for(var i=0,ln=streams.length;i < ln;i++) {if(streams[i].getId() === streamInfo.id){return streams[i];}}return null;}function composeStreams(){try{var streamsInfo=adapter.getStreamsInfo();if(streamsInfo.length === 0){throw new Error('There are no streams');}var manifestUpdateInfo=dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor(_constantsConstants2['default'].STREAM));metricsModel.updateManifestUpdateInfo(manifestUpdateInfo,{currentTime:playbackController.getTime(),buffered:videoModel.getBufferRange(),presentationStartTime:streamsInfo[0].start,clientTimeOffset:timelineConverter.getClientTimeOffset()});for(var i=0,ln=streamsInfo.length;i < ln;i++) { // If the Stream object does not exist we probably loaded the manifest the first time or it was
	// introduced in the updated manifest, so we need to create a new Stream and perform all the initialization operations
	var streamInfo=streamsInfo[i];var stream=getComposedStream(streamInfo);if(!stream){stream = (0,_Stream2['default'])(context).create({manifestModel:manifestModel,dashManifestModel:dashManifestModel,mediaPlayerModel:mediaPlayerModel,metricsModel:metricsModel,dashMetrics:dashMetrics,manifestUpdater:manifestUpdater,adapter:adapter,timelineConverter:timelineConverter,capabilities:capabilities,errHandler:errHandler,baseURLController:baseURLController,domStorage:domStorage,abrController:abrController,playbackController:playbackController,mediaController:mediaController,textController:textController,videoModel:videoModel,streamController:instance});streams.push(stream);stream.initialize(streamInfo,protectionController);}else {stream.updateData(streamInfo);}metricsModel.addManifestUpdateStreamInfo(manifestUpdateInfo,streamInfo.id,streamInfo.index,streamInfo.start,streamInfo.duration);}if(!activeStream){ // we need to figure out what the correct starting period is
	var startTimeFormUriParameters=playbackController.getStartTimeFromUriParameters();var initialStream=null;if(startTimeFormUriParameters){var initialTime=!isNaN(startTimeFormUriParameters.fragS)?startTimeFormUriParameters.fragS:startTimeFormUriParameters.fragT;initialStream = getStreamForTime(initialTime);}switchStream(null,initialStream !== null?initialStream:streams[0],NaN);}eventBus.trigger(_coreEventsEvents2['default'].STREAMS_COMPOSED);}catch(e) {errHandler.manifestError(e.message,'nostreamscomposed',manifestModel.getValue());errHandler.error(new _voDashJSError2['default'](_coreErrorsErrors2['default'].MANIFEST_ERROR_ID_NOSTREAMS_CODE,e.message + 'nostreamscomposed',manifestModel.getValue()));hasInitialisationError = true;reset();}}function onTimeSyncCompleted() /*e*/{var manifest=manifestModel.getValue(); //TODO check if we can move this to initialize??
	if(protectionController){eventBus.trigger(_coreEventsEvents2['default'].PROTECTION_CREATED,{controller:protectionController,manifest:manifest});protectionController.setMediaElement(videoModel.getElement());if(protectionData){protectionController.setProtectionData(protectionData);}}composeStreams();}function onManifestUpdated(e){if(!e.error){(function(){ //Since streams are not composed yet , need to manually look up useCalculatedLiveEdgeTime to detect if stream
	//is SegmentTimeline to avoid using time source
	var manifest=e.manifest;adapter.updatePeriods(manifest);var streamInfo=adapter.getStreamsInfo(undefined,1)[0];var mediaInfo=adapter.getMediaInfoForType(streamInfo,_constantsConstants2['default'].VIDEO) || adapter.getMediaInfoForType(streamInfo,_constantsConstants2['default'].AUDIO);var useCalculatedLiveEdgeTime=undefined;if(mediaInfo){useCalculatedLiveEdgeTime = dashManifestModel.getUseCalculatedLiveEdgeTimeForAdaptation(adapter.getDataForMedia(mediaInfo));if(useCalculatedLiveEdgeTime){logger.debug('SegmentTimeline detected using calculated Live Edge Time');mediaPlayerModel.setUseManifestDateHeaderTimeSource(false);}}var manifestUTCTimingSources=dashManifestModel.getUTCTimingSources(e.manifest);var allUTCTimingSources=!dashManifestModel.getIsDynamic(manifest) || useCalculatedLiveEdgeTime?manifestUTCTimingSources:manifestUTCTimingSources.concat(mediaPlayerModel.getUTCTimingSources());var isHTTPS=urlUtils.isHTTPS(e.manifest.url); //If https is detected on manifest then lets apply that protocol to only the default time source(s). In the future we may find the need to apply this to more then just default so left code at this level instead of in MediaPlayer.
	allUTCTimingSources.forEach(function(item){if(item.value.replace(/.*?:\/\//g,'') === mediaPlayerModel.getDefaultUtcTimingSource().value.replace(/.*?:\/\//g,'')){item.value = item.value.replace(isHTTPS?new RegExp(/^(http:)?\/\//i):new RegExp(/^(https:)?\/\//i),isHTTPS?'https://':'http://');logger.debug('Matching default timing source protocol to manifest protocol: ',item.value);}});baseURLController.initialize(manifest);timeSyncController.setConfig({metricsModel:metricsModel,dashMetrics:dashMetrics,baseURLController:baseURLController});timeSyncController.initialize(allUTCTimingSources,mediaPlayerModel.getUseManifestDateHeaderTimeSource());})();}else {hasInitialisationError = true;reset();}}function isTrackTypePresent(trackType){var isTrackTypeDetected=undefined;if(!trackType){return isTrackTypeDetected;}switch(trackType){case _constantsConstants2['default'].VIDEO:isTrackTypeDetected = videoTrackDetected;break;case _constantsConstants2['default'].AUDIO:isTrackTypeDetected = audioTrackDetected;break;}return isTrackTypeDetected;}function checkTrackPresence(type){var isDetected=false;if(activeStream){activeStream.getProcessors().forEach(function(p){if(p.getMediaInfo().type === type){isDetected = true;}});}return isDetected;}function flushPlaylistMetrics(reason,time){time = time || new Date();if(playListMetrics){if(activeStream){activeStream.getProcessors().forEach(function(p){var ctrlr=p.getScheduleController();if(ctrlr){ctrlr.finalisePlayList(time,reason);}});}metricsModel.addPlayList(playListMetrics);playListMetrics = null;}}function addPlaylistMetrics(startReason){playListMetrics = new _voMetricsPlayList.PlayList();playListMetrics.start = new Date();playListMetrics.mstart = playbackController.getTime() * 1000;playListMetrics.starttype = startReason;if(activeStream){activeStream.getProcessors().forEach(function(p){var ctrlr=p.getScheduleController();if(ctrlr){ctrlr.setPlayList(playListMetrics);}});}}function onPlaybackError(e){if(!e.error)return;var msg='';switch(e.error.code){case 1:msg = 'MEDIA_ERR_ABORTED';break;case 2:msg = 'MEDIA_ERR_NETWORK';break;case 3:msg = 'MEDIA_ERR_DECODE';break;case 4:msg = 'MEDIA_ERR_SRC_NOT_SUPPORTED';break;case 5:msg = 'MEDIA_ERR_ENCRYPTED';break;default:msg = 'UNKNOWN';break;}hasMediaError = true;if(e.error.message){msg += ' (' + e.error.message + ')';}if(e.error.msExtendedCode){msg += ' (0x' + (e.error.msExtendedCode >>> 0).toString(16).toUpperCase() + ')';}logger.fatal('Video Element Error: ' + msg);if(e.error){logger.fatal(e.error);}errHandler.mediaSourceError(msg);errHandler.error(new _voDashJSError2['default'](e.error.code,msg));reset();}function getActiveStreamInfo(){return activeStream?activeStream.getStreamInfo():null;}function getStreamById(id){return streams.filter(function(item){return item.getId() === id;})[0];}function checkSetConfigCall(){if(!manifestLoader || !manifestLoader.hasOwnProperty('load') || !timelineConverter || !timelineConverter.hasOwnProperty('initialize') || !timelineConverter.hasOwnProperty('reset') || !timelineConverter.hasOwnProperty('getClientTimeOffset') || !manifestModel || !errHandler || !metricsModel || !playbackController){throw new Error('setConfig function has to be called previously');}}function checkInitializeCall(){if(!manifestUpdater || !manifestUpdater.hasOwnProperty('setManifest')){throw new Error('initialize function has to be called previously');}}function load(url){checkSetConfigCall();manifestLoader.load(url);}function loadWithManifest(manifest){checkInitializeCall();manifestUpdater.setManifest(manifest);}function onManifestValidityChanged(e){if(!isNaN(e.newDuration)){setMediaDuration(e.newDuration);}}function setConfig(config){if(!config)return;if(config.capabilities){capabilities = config.capabilities;}if(config.manifestLoader){manifestLoader = config.manifestLoader;}if(config.manifestModel){manifestModel = config.manifestModel;}if(config.dashManifestModel){dashManifestModel = config.dashManifestModel;}if(config.mediaPlayerModel){mediaPlayerModel = config.mediaPlayerModel;}if(config.protectionController){protectionController = config.protectionController;}if(config.adapter){adapter = config.adapter;}if(config.metricsModel){metricsModel = config.metricsModel;}if(config.dashMetrics){dashMetrics = config.dashMetrics;}if(config.errHandler){errHandler = config.errHandler;}if(config.timelineConverter){timelineConverter = config.timelineConverter;}if(config.videoModel){videoModel = config.videoModel;}if(config.playbackController){playbackController = config.playbackController;}if(config.domStorage){domStorage = config.domStorage;}if(config.abrController){abrController = config.abrController;}if(config.mediaController){mediaController = config.mediaController;}if(config.textController){textController = config.textController;}}function setProtectionData(protData){protectionData = protData;}function resetInitialSettings(){streams = [];protectionController = null;isStreamSwitchingInProgress = false;activeStream = null;hasMediaError = false;hasInitialisationError = false;videoTrackDetected = undefined;audioTrackDetected = undefined;initialPlayback = true;isPaused = false;autoPlay = true;playListMetrics = null;playbackEndedTimerId = undefined;isStreamBufferingCompleted = false;wallclockTicked = 0;}function reset(){checkSetConfigCall();timeSyncController.reset();flushPlaylistMetrics(hasMediaError || hasInitialisationError?_voMetricsPlayList.PlayListTrace.FAILURE_STOP_REASON:_voMetricsPlayList.PlayListTrace.USER_REQUEST_STOP_REASON);for(var i=0,ln=streams?streams.length:0;i < ln;i++) {var stream=streams[i];stream.reset(hasMediaError);}unRegisterEvents();baseURLController.reset();manifestUpdater.reset();metricsModel.clearAllCurrentMetrics();manifestModel.setValue(null);manifestLoader.reset();timelineConverter.reset();initCache.reset();if(mediaSource){mediaSourceController.detachMediaSource(videoModel);mediaSource = null;}videoModel = null;if(protectionController){protectionController.setMediaElement(null);protectionController = null;protectionData = null;if(manifestModel.getValue()){eventBus.trigger(_coreEventsEvents2['default'].PROTECTION_DESTROYED,{data:manifestModel.getValue().url});}}eventBus.trigger(_coreEventsEvents2['default'].STREAM_TEARDOWN_COMPLETE);resetInitialSettings();}function onMetricAdded(e){if(e.metric === _constantsMetricsConstants2['default'].DVR_INFO){ //Match media type? How can DVR window be different for media types?
	//Should we normalize and union the two?
	if(e.mediaType === _constantsConstants2['default'].AUDIO){mediaSourceController.setSeekable(mediaSource,e.value.range.start,e.value.range.end);}}}instance = {initialize:initialize,getActiveStreamInfo:getActiveStreamInfo,isTrackTypePresent:isTrackTypePresent,switchToVideoElement:switchToVideoElement,getStreamById:getStreamById,getStreamForTime:getStreamForTime,getTimeRelativeToStreamId:getTimeRelativeToStreamId,load:load,loadWithManifest:loadWithManifest,getActiveStreamProcessors:getActiveStreamProcessors,setConfig:setConfig,setProtectionData:setProtectionData,reset:reset};setup();return instance;}StreamController.__dashjs_factory_name = 'StreamController';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(StreamController);module.exports = exports['default'];
	//# sourceMappingURL=StreamController.js.map


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _StreamProcessor=__webpack_require__(140);var _StreamProcessor2=_interopRequireDefault(_StreamProcessor);var _controllersEventController=__webpack_require__(166);var _controllersEventController2=_interopRequireDefault(_controllersEventController);var _controllersFragmentController=__webpack_require__(167);var _controllersFragmentController2=_interopRequireDefault(_controllersFragmentController);var _thumbnailThumbnailController=__webpack_require__(171);var _thumbnailThumbnailController2=_interopRequireDefault(_thumbnailThumbnailController);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _voDashJSError=__webpack_require__(62);var _voDashJSError2=_interopRequireDefault(_voDashJSError);function Stream(config){config = config || {};var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var manifestModel=config.manifestModel;var dashManifestModel=config.dashManifestModel;var mediaPlayerModel=config.mediaPlayerModel;var manifestUpdater=config.manifestUpdater;var adapter=config.adapter;var capabilities=config.capabilities;var errHandler=config.errHandler;var timelineConverter=config.timelineConverter;var metricsModel=config.metricsModel;var abrController=config.abrController;var playbackController=config.playbackController;var mediaController=config.mediaController;var textController=config.textController;var videoModel=config.videoModel;var instance=undefined,logger=undefined,streamProcessors=undefined,isStreamActivated=undefined,isMediaInitialized=undefined,streamInfo=undefined,updateError=undefined,isUpdating=undefined,protectionController=undefined,fragmentController=undefined,thumbnailController=undefined,eventController=undefined,preloaded=undefined,trackChangedEvent=undefined;var codecCompatibilityTable=[{'codec':'avc1','compatibleCodecs':['avc3']},{'codec':'avc3','compatibleCodecs':['avc1']}];function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);resetInitialSettings();fragmentController = (0,_controllersFragmentController2['default'])(context).create({mediaPlayerModel:mediaPlayerModel,metricsModel:metricsModel,errHandler:errHandler});registerEvents();}function registerEvents(){eventBus.on(_coreEventsEvents2['default'].BUFFERING_COMPLETED,onBufferingCompleted,instance);eventBus.on(_coreEventsEvents2['default'].DATA_UPDATE_COMPLETED,onDataUpdateCompleted,instance);}function unRegisterEvents(){eventBus.off(_coreEventsEvents2['default'].DATA_UPDATE_COMPLETED,onDataUpdateCompleted,instance);eventBus.off(_coreEventsEvents2['default'].BUFFERING_COMPLETED,onBufferingCompleted,instance);}function registerProtectionEvents(){if(protectionController){eventBus.on(_coreEventsEvents2['default'].KEY_ERROR,onProtectionError,instance);eventBus.on(_coreEventsEvents2['default'].SERVER_CERTIFICATE_UPDATED,onProtectionError,instance);eventBus.on(_coreEventsEvents2['default'].LICENSE_REQUEST_COMPLETE,onProtectionError,instance);eventBus.on(_coreEventsEvents2['default'].KEY_SYSTEM_SELECTED,onProtectionError,instance);eventBus.on(_coreEventsEvents2['default'].KEY_SESSION_CREATED,onProtectionError,instance);eventBus.on(_coreEventsEvents2['default'].KEY_STATUSES_CHANGED,onProtectionError,instance);}}function unRegisterProtectionEvents(){if(protectionController){eventBus.off(_coreEventsEvents2['default'].KEY_ERROR,onProtectionError,instance);eventBus.off(_coreEventsEvents2['default'].SERVER_CERTIFICATE_UPDATED,onProtectionError,instance);eventBus.off(_coreEventsEvents2['default'].LICENSE_REQUEST_COMPLETE,onProtectionError,instance);eventBus.off(_coreEventsEvents2['default'].KEY_SYSTEM_SELECTED,onProtectionError,instance);eventBus.off(_coreEventsEvents2['default'].KEY_SESSION_CREATED,onProtectionError,instance);eventBus.off(_coreEventsEvents2['default'].KEY_STATUSES_CHANGED,onProtectionError,instance);}}function initialize(StreamInfo,ProtectionController){streamInfo = StreamInfo;protectionController = ProtectionController;registerProtectionEvents();} /**
	     * Activates Stream by re-initializing some of its components
	     * @param {MediaSource} mediaSource
	     * @memberof Stream#
	     * @param {SourceBuffer} previousBuffers
	     */function activate(mediaSource,previousBuffers){if(!isStreamActivated){var result=undefined;eventBus.on(_coreEventsEvents2['default'].CURRENT_TRACK_CHANGED,onCurrentTrackChanged,instance);if(!getPreloaded()){result = initializeMedia(mediaSource,previousBuffers);}else {initializeAfterPreload();result = previousBuffers;}isStreamActivated = true;return result;}return previousBuffers;} /**
	     * Partially resets some of the Stream elements
	     * @memberof Stream#
	     * @param {boolean} keepBuffers
	     */function deactivate(keepBuffers){var ln=streamProcessors?streamProcessors.length:0;var errored=false;for(var i=0;i < ln;i++) {var fragmentModel=streamProcessors[i].getFragmentModel();fragmentModel.removeExecutedRequestsBeforeTime(getStartTime() + getDuration());streamProcessors[i].reset(errored,keepBuffers);}streamProcessors = [];isStreamActivated = false;isMediaInitialized = false;setPreloaded(false);eventBus.off(_coreEventsEvents2['default'].CURRENT_TRACK_CHANGED,onCurrentTrackChanged,instance);}function isActive(){return isStreamActivated;}function setMediaSource(mediaSource){for(var i=0;i < streamProcessors.length;) {if(isMediaSupported(streamProcessors[i].getMediaInfo())){streamProcessors[i].setMediaSource(mediaSource);i++;}else {streamProcessors[i].reset();streamProcessors.splice(i,1);}}for(var i=0;i < streamProcessors.length;i++) { //Adding of new tracks to a stream processor isn't guaranteed by the spec after the METADATA_LOADED state
	//so do this after the buffers are created above.
	streamProcessors[i].dischargePreBuffer();}if(streamProcessors.length === 0){var msg='No streams to play.';errHandler.manifestError(msg,'nostreams',manifestModel.getValue());errHandler.error(new _voDashJSError2['default'](_coreErrorsErrors2['default'].MANIFEST_ERROR_ID_NOSTREAMS_CODE,msg + 'nostreams',manifestModel.getValue()));logger.fatal(msg);}}function resetInitialSettings(){deactivate();streamInfo = null;updateError = {};isUpdating = false;}function reset(){if(playbackController){playbackController.pause();}if(fragmentController){fragmentController.reset();fragmentController = null;}resetInitialSettings();unRegisterEvents();unRegisterProtectionEvents();setPreloaded(false);}function getDuration(){return streamInfo?streamInfo.duration:NaN;}function getStartTime(){return streamInfo?streamInfo.start:NaN;}function getId(){return streamInfo?streamInfo.id:null;}function getStreamInfo(){return streamInfo;}function getFragmentController(){return fragmentController;}function getThumbnailController(){return thumbnailController;}function checkConfig(){if(!abrController || !abrController.hasOwnProperty('getBitrateList') || !adapter || !adapter.hasOwnProperty('getAllMediaInfoForType') || !adapter.hasOwnProperty('getEventsFor')){throw new Error(_constantsConstants2['default'].MISSING_CONFIG_ERROR);}} /**
	     * @param {string} type
	     * @returns {Array}
	     * @memberof Stream#
	     */function getBitrateListFor(type){checkConfig();if(type === _constantsConstants2['default'].IMAGE){if(!thumbnailController){return [];}return thumbnailController.getBitrateList();}var mediaInfo=getMediaInfo(type);return abrController.getBitrateList(mediaInfo);}function startEventController(){if(eventController){eventController.start();}}function stopEventController(){if(eventController){eventController.stop();}}function onProtectionError(event){if(event.error){errHandler.mediaKeySessionError(event.error.message);errHandler.error(event.error);logger.fatal(event.error.message);reset();}}function isMediaSupported(mediaInfo){var type=mediaInfo.type;var codec=undefined,msg=undefined;if(type === _constantsConstants2['default'].MUXED && mediaInfo){msg = 'Multiplexed representations are intentionally not supported, as they are not compliant with the DASH-AVC/264 guidelines';logger.fatal(msg);errHandler.manifestError(msg,'multiplexedrep',manifestModel.getValue());errHandler.error(new _voDashJSError2['default'](_coreErrorsErrors2['default'].MANIFEST_ERROR_ID_MULTIPLEXED_CODE,msg,manifestModel.getValue()));return false;}if(type === _constantsConstants2['default'].TEXT || type === _constantsConstants2['default'].FRAGMENTED_TEXT || type === _constantsConstants2['default'].EMBEDDED_TEXT || type === _constantsConstants2['default'].IMAGE){return true;}codec = mediaInfo.codec;logger.debug(type + ' codec: ' + codec);if(!!mediaInfo.contentProtection && !capabilities.supportsEncryptedMedia()){errHandler.capabilityError('encryptedmedia');errHandler.error(new _voDashJSError2['default'](_coreErrorsErrors2['default'].CAPABILITY_MEDIAKEYS_ERROR_CODE,_coreErrorsErrors2['default'].CAPABILITY_MEDIAKEYS_ERROR_MESSAGE));}else if(!capabilities.supportsCodec(codec)){msg = type + 'Codec (' + codec + ') is not supported.';logger.error(msg);return false;}return true;}function onCurrentTrackChanged(e){if(e.newMediaInfo.streamInfo.id !== streamInfo.id)return;var processor=getProcessorForMediaInfo(e.newMediaInfo);if(!processor)return;var currentTime=playbackController.getTime();logger.info('Stream -  Process track changed at current time ' + currentTime);var mediaInfo=e.newMediaInfo;var manifest=manifestModel.getValue();logger.debug('Stream -  Update stream controller');if(manifest.refreshManifestOnSwitchTrack){logger.debug('Stream -  Refreshing manifest for switch track');trackChangedEvent = e;manifestUpdater.refreshManifest();}else {processor.selectMediaInfo(mediaInfo);if(mediaInfo.type !== _constantsConstants2['default'].FRAGMENTED_TEXT){abrController.updateTopQualityIndex(mediaInfo);processor.switchTrackAsked();processor.getFragmentModel().abortRequests();}else {processor.getScheduleController().setSeekTarget(NaN);adapter.setIndexHandlerTime(processor,currentTime);adapter.resetIndexHandler(processor);}}}function createStreamProcessor(mediaInfo,allMediaForType,mediaSource,optionalSettings){var streamProcessor=(0,_StreamProcessor2['default'])(context).create({type:mediaInfo.type,mimeType:mediaInfo.mimeType,timelineConverter:timelineConverter,adapter:adapter,manifestModel:manifestModel,dashManifestModel:dashManifestModel,mediaPlayerModel:mediaPlayerModel,metricsModel:metricsModel,dashMetrics:config.dashMetrics,baseURLController:config.baseURLController,stream:instance,abrController:abrController,domStorage:config.domStorage,playbackController:playbackController,mediaController:mediaController,streamController:config.streamController,textController:textController,errHandler:errHandler});streamProcessor.initialize(mediaSource);abrController.updateTopQualityIndex(mediaInfo);if(optionalSettings){streamProcessor.setBuffer(optionalSettings.buffer);streamProcessor.getIndexHandler().setCurrentTime(optionalSettings.currentTime);streamProcessors[optionalSettings.replaceIdx] = streamProcessor;}else {streamProcessors.push(streamProcessor);}if(optionalSettings && optionalSettings.ignoreMediaInfo){return;}if(mediaInfo.type === _constantsConstants2['default'].TEXT || mediaInfo.type === _constantsConstants2['default'].FRAGMENTED_TEXT){var idx=undefined;for(var i=0;i < allMediaForType.length;i++) {if(allMediaForType[i].index === mediaInfo.index){idx = i;}streamProcessor.addMediaInfo(allMediaForType[i]); //creates text tracks for all adaptations in one stream processor
	}streamProcessor.selectMediaInfo(allMediaForType[idx]); //sets the initial media info
	}else {streamProcessor.addMediaInfo(mediaInfo,true);}}function initializeMediaForType(type,mediaSource){var allMediaForType=adapter.getAllMediaInfoForType(streamInfo,type);var mediaInfo=null;var initialMediaInfo=undefined;if(!allMediaForType || allMediaForType.length === 0){logger.info('No ' + type + ' data.');return;}for(var i=0,ln=allMediaForType.length;i < ln;i++) {mediaInfo = allMediaForType[i];if(type === _constantsConstants2['default'].EMBEDDED_TEXT){textController.addEmbeddedTrack(mediaInfo);}else {if(!isMediaSupported(mediaInfo))continue;mediaController.addTrack(mediaInfo);}}if(type === _constantsConstants2['default'].EMBEDDED_TEXT || mediaController.getTracksFor(type,streamInfo).length === 0){return;}if(type === _constantsConstants2['default'].IMAGE){thumbnailController = (0,_thumbnailThumbnailController2['default'])(context).create({dashManifestModel:dashManifestModel,adapter:adapter,baseURLController:config.baseURLController,stream:instance,timelineConverter:config.timelineConverter});return;}if(type !== _constantsConstants2['default'].FRAGMENTED_TEXT || type === _constantsConstants2['default'].FRAGMENTED_TEXT && textController.getTextDefaultEnabled()){mediaController.checkInitialMediaSettingsForType(type,streamInfo);initialMediaInfo = mediaController.getCurrentTrackFor(type,streamInfo);}if(type === _constantsConstants2['default'].FRAGMENTED_TEXT && !textController.getTextDefaultEnabled()){initialMediaInfo = mediaController.getTracksFor(type,streamInfo)[0];} // TODO : How to tell index handler live/duration?
	// TODO : Pass to controller and then pass to each method on handler?
	createStreamProcessor(initialMediaInfo,allMediaForType,mediaSource);}function initializeEventController(){ //if initializeMedia is called from a switch period, eventController could have been already created.
	if(!eventController){eventController = (0,_controllersEventController2['default'])(context).create();eventController.setConfig({manifestUpdater:manifestUpdater,playbackController:playbackController});addInlineEvents();}}function addInlineEvents(){var events=adapter.getEventsFor(streamInfo);eventController.addInlineEvents(events);}function addInbandEvents(events){if(eventController){eventController.addInbandEvents(events);}}function initializeMedia(mediaSource,previousBuffers){checkConfig();var element=videoModel.getElement();initializeEventController();isUpdating = true;filterCodecs(_constantsConstants2['default'].VIDEO);filterCodecs(_constantsConstants2['default'].AUDIO);if(element === null || element && /^VIDEO$/i.test(element.nodeName)){initializeMediaForType(_constantsConstants2['default'].VIDEO,mediaSource);}initializeMediaForType(_constantsConstants2['default'].AUDIO,mediaSource);initializeMediaForType(_constantsConstants2['default'].TEXT,mediaSource);initializeMediaForType(_constantsConstants2['default'].FRAGMENTED_TEXT,mediaSource);initializeMediaForType(_constantsConstants2['default'].EMBEDDED_TEXT,mediaSource);initializeMediaForType(_constantsConstants2['default'].MUXED,mediaSource);initializeMediaForType(_constantsConstants2['default'].IMAGE,mediaSource); //TODO. Consider initialization of TextSourceBuffer here if embeddedText, but no sideloadedText.
	var buffers=createBuffers(previousBuffers);isMediaInitialized = true;isUpdating = false;if(streamProcessors.length === 0){var msg='No streams to play.';errHandler.manifestError(msg,'nostreams',manifestModel.getValue());errHandler.error(new _voDashJSError2['default'](_coreErrorsErrors2['default'].MANIFEST_ERROR_ID_NOSTREAMS_CODE,msg,manifestModel.getValue()));logger.fatal(msg);}else {checkIfInitializationCompleted();}return buffers;}function initializeAfterPreload(){isUpdating = true;checkConfig();filterCodecs(_constantsConstants2['default'].VIDEO);filterCodecs(_constantsConstants2['default'].AUDIO);isMediaInitialized = true;isUpdating = false;if(streamProcessors.length === 0){var msg='No streams to play.';errHandler.manifestError(msg,'nostreams',manifestModel.getValue());logger.debug(msg);}else {checkIfInitializationCompleted();}}function filterCodecs(type){var realAdaptation=dashManifestModel.getAdaptationForType(manifestModel.getValue(),streamInfo.index,type,streamInfo);if(!realAdaptation || !Array.isArray(realAdaptation.Representation_asArray))return; // Filter codecs that are not supported
	realAdaptation.Representation_asArray = realAdaptation.Representation_asArray.filter(function(_,i){ // keep at least codec from lowest representation
	if(i === 0)return true;var codec=dashManifestModel.getCodec(realAdaptation,i,true);if(!capabilities.supportsCodec(codec)){logger.error('[Stream] codec not supported: ' + codec);return false;}return true;});}function checkIfInitializationCompleted(){var ln=streamProcessors.length;var hasError=!!updateError.audio || !!updateError.video;var error=hasError?new _voDashJSError2['default'](_coreErrorsErrors2['default'].DATA_UPDATE_FAILED_ERROR_CODE,_coreErrorsErrors2['default'].DATA_UPDATE_FAILED_ERROR_MESSAGE):null;for(var i=0;i < ln;i++) {if(streamProcessors[i].isUpdating() || isUpdating){return;}}if(!isMediaInitialized){return;}if(protectionController){ // Need to check if streamProcessors exists because streamProcessors
	// could be cleared in case an error is detected while initializing DRM keysystem
	for(var i=0;i < ln && streamProcessors[i];i++) {if(streamProcessors[i].getType() === _constantsConstants2['default'].AUDIO || streamProcessors[i].getType() === _constantsConstants2['default'].VIDEO || streamProcessors[i].getType() === _constantsConstants2['default'].FRAGMENTED_TEXT){protectionController.initializeForMedia(streamProcessors[i].getMediaInfo());}}}eventBus.trigger(_coreEventsEvents2['default'].STREAM_INITIALIZED,{streamInfo:streamInfo,error:error});}function getMediaInfo(type){var ln=streamProcessors.length;var streamProcessor=null;for(var i=0;i < ln;i++) {streamProcessor = streamProcessors[i];if(streamProcessor.getType() === type){return streamProcessor.getMediaInfo();}}return null;}function createBuffers(previousBuffers){var buffers={};for(var i=0,ln=streamProcessors.length;i < ln;i++) {buffers[streamProcessors[i].getType()] = streamProcessors[i].createBuffer(previousBuffers).getBuffer();}return buffers;}function onBufferingCompleted(e){if(e.streamInfo !== streamInfo){return;}var processors=getProcessors();var ln=processors.length;if(ln === 0){logger.warn('onBufferingCompleted - can\'t trigger STREAM_BUFFERING_COMPLETED because no streamProcessor is defined');return;} // if there is at least one buffer controller that has not completed buffering yet do nothing
	for(var i=0;i < ln;i++) { //if audio or video buffer is not buffering completed state, do not send STREAM_BUFFERING_COMPLETED
	if(!processors[i].isBufferingCompleted() && (processors[i].getType() === _constantsConstants2['default'].AUDIO || processors[i].getType() === _constantsConstants2['default'].VIDEO)){logger.warn('onBufferingCompleted - can\'t trigger STREAM_BUFFERING_COMPLETED because streamProcessor ' + processors[i].getType() + ' is not buffering completed');return;}}logger.debug('onBufferingCompleted - trigger STREAM_BUFFERING_COMPLETED');eventBus.trigger(_coreEventsEvents2['default'].STREAM_BUFFERING_COMPLETED,{streamInfo:streamInfo});}function onDataUpdateCompleted(e){var sp=e.sender.getStreamProcessor();if(sp.getStreamInfo() !== streamInfo){return;}updateError[sp.getType()] = e.error;checkIfInitializationCompleted();}function getProcessorForMediaInfo(mediaInfo){if(!mediaInfo){return null;}var processors=getProcessors();return processors.filter(function(processor){return processor.getType() === mediaInfo.type;})[0];}function getProcessors(){var ln=streamProcessors.length;var arr=[];var type=undefined,streamProcessor=undefined;for(var i=0;i < ln;i++) {streamProcessor = streamProcessors[i];type = streamProcessor.getType();if(type === _constantsConstants2['default'].AUDIO || type === _constantsConstants2['default'].VIDEO || type === _constantsConstants2['default'].FRAGMENTED_TEXT || type === _constantsConstants2['default'].TEXT){arr.push(streamProcessor);}}return arr;}function updateData(updatedStreamInfo){logger.info('Manifest updated... updating data system wide.');isStreamActivated = false;isUpdating = true;streamInfo = updatedStreamInfo;if(eventController){addInlineEvents();}filterCodecs(_constantsConstants2['default'].VIDEO);filterCodecs(_constantsConstants2['default'].AUDIO);for(var i=0,ln=streamProcessors.length;i < ln;i++) {var streamProcessor=streamProcessors[i];var mediaInfo=adapter.getMediaInfoForType(streamInfo,streamProcessor.getType());abrController.updateTopQualityIndex(mediaInfo);streamProcessor.addMediaInfo(mediaInfo,true);}if(trackChangedEvent){var mediaInfo=trackChangedEvent.newMediaInfo;if(mediaInfo.type !== 'fragmentedText'){var processor=getProcessorForMediaInfo(trackChangedEvent.oldMediaInfo);if(!processor)return;processor.switchTrackAsked();trackChangedEvent = undefined;}}isUpdating = false;checkIfInitializationCompleted();}function isCompatibleWithStream(stream){return compareCodecs(stream,_constantsConstants2['default'].VIDEO) && compareCodecs(stream,_constantsConstants2['default'].AUDIO);}function compareCodecs(stream,type){if(!stream){return false;}var newStreamInfo=stream.getStreamInfo();var currentStreamInfo=getStreamInfo();if(!newStreamInfo || !currentStreamInfo){return false;}var newAdaptation=dashManifestModel.getAdaptationForType(manifestModel.getValue(),newStreamInfo.index,type,newStreamInfo);var currentAdaptation=dashManifestModel.getAdaptationForType(manifestModel.getValue(),currentStreamInfo.index,type,currentStreamInfo);if(!newAdaptation || !currentAdaptation){ // If there is no adaptation for neither the old or the new stream they're compatible
	return !newAdaptation && !currentAdaptation;} // If any of the periods requires EME, we can't do smooth transition
	if(newAdaptation.ContentProtection && !currentAdaptation.ContentProtection || !newAdaptation.ContentProtection && currentAdaptation.ContentProtection){return false;}var sameMimeType=newAdaptation && currentAdaptation && newAdaptation.mimeType === currentAdaptation.mimeType;var oldCodecs=currentAdaptation.Representation_asArray.map(function(representation){return representation.codecs;});var newCodecs=newAdaptation.Representation_asArray.map(function(representation){return representation.codecs;});var codecMatch=newCodecs.some(function(newCodec){return oldCodecs.indexOf(newCodec) > -1;});var partialCodecMatch=newCodecs.some(function(newCodec){return oldCodecs.some(function(oldCodec){return codecRootCompatibleWithCodec(oldCodec,newCodec);});});return codecMatch || partialCodecMatch && sameMimeType;} // Check if the root of the old codec is the same as the new one, or if it's declared as compatible in the compat table
	function codecRootCompatibleWithCodec(codec1,codec2){var codecRoot=codec1.split('.')[0];var compatTableCodec=codecCompatibilityTable.find(function(compat){return compat.codec === codecRoot;});var rootCompatible=codec2.indexOf(codecRoot) === 0;if(compatTableCodec){return rootCompatible || compatTableCodec.compatibleCodecs.some(function(compatibleCodec){return codec2.indexOf(compatibleCodec) === 0;});}return rootCompatible;}function setPreloaded(value){preloaded = value;}function getPreloaded(){return preloaded;}function preload(mediaSource,previousBuffers){initializeEventController();initializeMediaForType(_constantsConstants2['default'].VIDEO,mediaSource);initializeMediaForType(_constantsConstants2['default'].AUDIO,mediaSource);initializeMediaForType(_constantsConstants2['default'].TEXT,mediaSource);initializeMediaForType(_constantsConstants2['default'].FRAGMENTED_TEXT,mediaSource);initializeMediaForType(_constantsConstants2['default'].EMBEDDED_TEXT,mediaSource);initializeMediaForType(_constantsConstants2['default'].MUXED,mediaSource);initializeMediaForType(_constantsConstants2['default'].IMAGE,mediaSource);createBuffers(previousBuffers);eventBus.on(_coreEventsEvents2['default'].CURRENT_TRACK_CHANGED,onCurrentTrackChanged,instance);for(var i=0;i < streamProcessors.length && streamProcessors[i];i++) {streamProcessors[i].getScheduleController().start();}setPreloaded(true);}instance = {initialize:initialize,activate:activate,deactivate:deactivate,isActive:isActive,getDuration:getDuration,getStartTime:getStartTime,getId:getId,getStreamInfo:getStreamInfo,preload:preload,getFragmentController:getFragmentController,getThumbnailController:getThumbnailController,getBitrateListFor:getBitrateListFor,startEventController:startEventController,stopEventController:stopEventController,updateData:updateData,reset:reset,getProcessors:getProcessors,setMediaSource:setMediaSource,isCompatibleWithStream:isCompatibleWithStream,getPreloaded:getPreloaded,addInbandEvents:addInbandEvents};setup();return instance;}Stream.__dashjs_factory_name = 'Stream';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(Stream);module.exports = exports['default'];
	//# sourceMappingURL=Stream.js.map


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _utilsLiveEdgeFinder=__webpack_require__(141);var _utilsLiveEdgeFinder2=_interopRequireDefault(_utilsLiveEdgeFinder);var _controllersBufferController=__webpack_require__(52);var _controllersBufferController2=_interopRequireDefault(_controllersBufferController);var _textTextBufferController=__webpack_require__(142);var _textTextBufferController2=_interopRequireDefault(_textTextBufferController);var _controllersScheduleController=__webpack_require__(144);var _controllersScheduleController2=_interopRequireDefault(_controllersScheduleController);var _dashControllersRepresentationController=__webpack_require__(150);var _dashControllersRepresentationController2=_interopRequireDefault(_dashControllersRepresentationController);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _dashDashHandler=__webpack_require__(153);var _dashDashHandler2=_interopRequireDefault(_dashDashHandler);function StreamProcessor(config){config = config || {};var context=this.context;var indexHandler=undefined;var type=config.type;var errHandler=config.errHandler;var mimeType=config.mimeType;var timelineConverter=config.timelineConverter;var adapter=config.adapter;var manifestModel=config.manifestModel;var mediaPlayerModel=config.mediaPlayerModel;var stream=config.stream;var abrController=config.abrController;var playbackController=config.playbackController;var streamController=config.streamController;var mediaController=config.mediaController;var textController=config.textController;var domStorage=config.domStorage;var metricsModel=config.metricsModel;var dashMetrics=config.dashMetrics;var dashManifestModel=config.dashManifestModel;var instance=undefined,mediaInfo=undefined,mediaInfoArr=undefined,bufferController=undefined,scheduleController=undefined,liveEdgeFinder=undefined,representationController=undefined,fragmentModel=undefined,spExternalControllers=undefined;function setup(){if(playbackController && playbackController.getIsDynamic()){liveEdgeFinder = (0,_utilsLiveEdgeFinder2['default'])(context).create({timelineConverter:timelineConverter,streamProcessor:instance});}resetInitialSettings();}function initialize(mediaSource){indexHandler = (0,_dashDashHandler2['default'])(context).create({mimeType:mimeType,timelineConverter:timelineConverter,dashMetrics:dashMetrics,metricsModel:metricsModel,mediaPlayerModel:mediaPlayerModel,baseURLController:config.baseURLController,errHandler:errHandler}); // initialize controllers
	indexHandler.initialize(instance);abrController.registerStreamType(type,instance);fragmentModel = stream.getFragmentController().getModel(type);fragmentModel.setStreamProcessor(instance);bufferController = createBufferControllerForType(type);scheduleController = (0,_controllersScheduleController2['default'])(context).create({type:type,mimeType:mimeType,metricsModel:metricsModel,adapter:adapter,dashMetrics:dashMetrics,dashManifestModel:dashManifestModel,timelineConverter:timelineConverter,mediaPlayerModel:mediaPlayerModel,abrController:abrController,playbackController:playbackController,streamController:streamController,textController:textController,streamProcessor:instance,mediaController:mediaController});representationController = (0,_dashControllersRepresentationController2['default'])(context).create();representationController.setConfig({abrController:abrController,domStorage:domStorage,metricsModel:metricsModel,dashMetrics:dashMetrics,dashManifestModel:dashManifestModel,manifestModel:manifestModel,playbackController:playbackController,timelineConverter:timelineConverter,streamProcessor:instance});bufferController.initialize(mediaSource);scheduleController.initialize();representationController.initialize();}function registerExternalController(controller){spExternalControllers.push(controller);}function unregisterExternalController(controller){var index=spExternalControllers.indexOf(controller);if(index !== -1){spExternalControllers.splice(index,1);}}function getExternalControllers(){return spExternalControllers;}function unregisterAllExternalController(){spExternalControllers = [];}function resetInitialSettings(){mediaInfoArr = [];mediaInfo = null;unregisterAllExternalController();}function reset(errored,keepBuffers){indexHandler.reset();if(bufferController){bufferController.reset(errored,keepBuffers);bufferController = null;}if(scheduleController){scheduleController.reset();scheduleController = null;}if(representationController){representationController.reset();representationController = null;}if(abrController){abrController.unRegisterStreamType(type);}spExternalControllers.forEach(function(controller){controller.reset();});resetInitialSettings();type = null;stream = null;if(liveEdgeFinder){liveEdgeFinder.reset();liveEdgeFinder = null;}}function isUpdating(){return representationController?representationController.isUpdating():false;}function getType(){return type;}function getRepresentationController(){return representationController;}function getIndexHandler(){return indexHandler;}function getFragmentController(){return stream?stream.getFragmentController():null;}function getBuffer(){return bufferController.getBuffer();}function setBuffer(buffer){bufferController.setBuffer(buffer);}function getBufferController(){return bufferController;}function getFragmentModel(){return fragmentModel;}function getLiveEdgeFinder(){return liveEdgeFinder;}function getStreamInfo(){return stream?stream.getStreamInfo():null;}function addInbandEvents(events){if(stream){stream.addInbandEvents(events);}}function selectMediaInfo(newMediaInfo){if(newMediaInfo !== mediaInfo && (!newMediaInfo || !mediaInfo || newMediaInfo.type === mediaInfo.type)){mediaInfo = newMediaInfo;}adapter.updateData(this);}function addMediaInfo(newMediaInfo,selectNewMediaInfo){if(mediaInfoArr.indexOf(newMediaInfo) === -1){mediaInfoArr.push(newMediaInfo);}if(selectNewMediaInfo){this.selectMediaInfo(newMediaInfo);}}function getMediaInfoArr(){return mediaInfoArr;}function getMediaInfo(){return mediaInfo;}function getMediaSource(){return bufferController.getMediaSource();}function setMediaSource(mediaSource){bufferController.setMediaSource(mediaSource,getMediaInfo());}function dischargePreBuffer(){bufferController.dischargePreBuffer();}function getScheduleController(){return scheduleController;}function getRepresentationInfo(quality){return adapter.getRepresentationInfo(representationController,quality);}function isBufferingCompleted(){if(bufferController){return bufferController.getIsBufferingCompleted();}return false;}function timeIsBuffered(time){if(bufferController){return bufferController.getRangeAt(time,0) !== null;}return false;}function getBufferLevel(){return bufferController.getBufferLevel();}function switchInitData(representationId,bufferResetEnabled){if(bufferController){bufferController.switchInitData(getStreamInfo().id,representationId,bufferResetEnabled);}}function createBuffer(previousBuffers){return bufferController.getBuffer() || bufferController.createBuffer(mediaInfo,previousBuffers);}function switchTrackAsked(){scheduleController.switchTrackAsked();}function createBufferControllerForType(type){var controller=null;if(type === _constantsConstants2['default'].VIDEO || type === _constantsConstants2['default'].AUDIO){controller = (0,_controllersBufferController2['default'])(context).create({type:type,metricsModel:metricsModel,mediaPlayerModel:mediaPlayerModel,manifestModel:manifestModel,errHandler:errHandler,streamController:streamController,mediaController:mediaController,adapter:adapter,textController:textController,abrController:abrController,playbackController:playbackController,streamProcessor:instance});}else {controller = (0,_textTextBufferController2['default'])(context).create({type:type,mimeType:mimeType,metricsModel:metricsModel,mediaPlayerModel:mediaPlayerModel,manifestModel:manifestModel,errHandler:errHandler,streamController:streamController,mediaController:mediaController,adapter:adapter,textController:textController,abrController:abrController,playbackController:playbackController,streamProcessor:instance});}return controller;}function getPlaybackController(){return playbackController;}instance = {initialize:initialize,isUpdating:isUpdating,getType:getType,getBufferController:getBufferController,getFragmentModel:getFragmentModel,getScheduleController:getScheduleController,getLiveEdgeFinder:getLiveEdgeFinder,getFragmentController:getFragmentController,getRepresentationController:getRepresentationController,getIndexHandler:getIndexHandler,getPlaybackController:getPlaybackController,getRepresentationInfo:getRepresentationInfo,getBufferLevel:getBufferLevel,switchInitData:switchInitData,isBufferingCompleted:isBufferingCompleted,timeIsBuffered:timeIsBuffered,createBuffer:createBuffer,getStreamInfo:getStreamInfo,selectMediaInfo:selectMediaInfo,addMediaInfo:addMediaInfo,switchTrackAsked:switchTrackAsked,getMediaInfoArr:getMediaInfoArr,getMediaInfo:getMediaInfo,getMediaSource:getMediaSource,setMediaSource:setMediaSource,dischargePreBuffer:dischargePreBuffer,getBuffer:getBuffer,setBuffer:setBuffer,registerExternalController:registerExternalController,unregisterExternalController:unregisterExternalController,getExternalControllers:getExternalControllers,unregisterAllExternalController:unregisterAllExternalController,addInbandEvents:addInbandEvents,reset:reset};setup();return instance;}StreamProcessor.__dashjs_factory_name = 'StreamProcessor';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(StreamProcessor);module.exports = exports['default'];
	//# sourceMappingURL=StreamProcessor.js.map


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants); /**
	 * @param {Object} config
	 * @returns {{initialize: initialize, getLiveEdge: getLiveEdge, reset: reset}|*}
	 * @constructor
	 */function LiveEdgeFinder(config){config = config || {};var instance=undefined;var timelineConverter=config.timelineConverter;var streamProcessor=config.streamProcessor;function checkConfig(){if(!timelineConverter || !timelineConverter.hasOwnProperty('getExpectedLiveEdge') || !streamProcessor || !streamProcessor.hasOwnProperty('getRepresentationInfo')){throw new Error(_constantsConstants2['default'].MISSING_CONFIG_ERROR);}}function getLiveEdge(){checkConfig();var representationInfo=streamProcessor.getRepresentationInfo();var liveEdge=representationInfo.DVRWindow.end;if(representationInfo.useCalculatedLiveEdgeTime){liveEdge = timelineConverter.getExpectedLiveEdge();timelineConverter.setClientTimeOffset(liveEdge - representationInfo.DVRWindow.end);}return liveEdge;}function reset(){timelineConverter = null;streamProcessor = null;}instance = {getLiveEdge:getLiveEdge,reset:reset};return instance;}LiveEdgeFinder.__dashjs_factory_name = 'LiveEdgeFinder';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(LiveEdgeFinder);module.exports = exports['default'];
	//# sourceMappingURL=LiveEdgeFinder.js.map


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _controllersBufferController=__webpack_require__(52);var _controllersBufferController2=_interopRequireDefault(_controllersBufferController);var _NotFragmentedTextBufferController=__webpack_require__(143);var _NotFragmentedTextBufferController2=_interopRequireDefault(_NotFragmentedTextBufferController);function TextBufferController(config){config = config || {};var context=this.context;var _BufferControllerImpl=undefined;var instance=undefined;function setup(){ // according to text type, we create corresponding buffer controller
	if(config.type === _constantsConstants2['default'].FRAGMENTED_TEXT){ // in this case, internal buffer ocntroller is a classical BufferController object
	_BufferControllerImpl = (0,_controllersBufferController2['default'])(context).create({type:config.type,metricsModel:config.metricsModel,mediaPlayerModel:config.mediaPlayerModel,manifestModel:config.manifestModel,errHandler:config.errHandler,streamController:config.streamController,mediaController:config.mediaController,adapter:config.adapter,textController:config.textController,abrController:config.abrController,playbackController:config.playbackController,streamProcessor:config.streamProcessor});}else { // in this case, internal buffer controller is a not fragmented text controller object
	_BufferControllerImpl = (0,_NotFragmentedTextBufferController2['default'])(context).create({type:config.type,mimeType:config.mimeType,errHandler:config.errHandler,streamProcessor:config.streamProcessor});}}function getBufferControllerType(){return _BufferControllerImpl.getBufferControllerType();}function initialize(source,StreamProcessor){return _BufferControllerImpl.initialize(source,StreamProcessor);} /**
	     * @param {MediaInfo }mediaInfo
	     * @returns {Object} SourceBuffer object
	     * @memberof BufferController#
	     */function createBuffer(mediaInfo){return _BufferControllerImpl.createBuffer(mediaInfo);}function getType(){return _BufferControllerImpl.getType();}function getBuffer(){return _BufferControllerImpl.getBuffer();}function setBuffer(value){_BufferControllerImpl.setBuffer(value);}function getMediaSource(){return _BufferControllerImpl.getMediaSource();}function setMediaSource(value){_BufferControllerImpl.setMediaSource(value);}function getStreamProcessor(){_BufferControllerImpl.getStreamProcessor();}function setSeekStartTime(value){_BufferControllerImpl.setSeekStartTime(value);}function getBufferLevel(){return _BufferControllerImpl.getBufferLevel();}function reset(errored){_BufferControllerImpl.reset(errored);}function getIsBufferingCompleted(){return _BufferControllerImpl.getIsBufferingCompleted();}function switchInitData(streamId,representationId){_BufferControllerImpl.switchInitData(streamId,representationId);}function getIsPruningInProgress(){return _BufferControllerImpl.getIsPruningInProgress();}function dischargePreBuffer(){return _BufferControllerImpl.dischargePreBuffer();}function getRangeAt(time){return _BufferControllerImpl.getRangeAt(time);}function updateTimestampOffset(MSETimeOffset){var buffer=getBuffer();if(buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)){buffer.timestampOffset = MSETimeOffset;}}instance = {getBufferControllerType:getBufferControllerType,initialize:initialize,createBuffer:createBuffer,getType:getType,getStreamProcessor:getStreamProcessor,setSeekStartTime:setSeekStartTime,getBuffer:getBuffer,setBuffer:setBuffer,getBufferLevel:getBufferLevel,setMediaSource:setMediaSource,getMediaSource:getMediaSource,getIsBufferingCompleted:getIsBufferingCompleted,getIsPruningInProgress:getIsPruningInProgress,dischargePreBuffer:dischargePreBuffer,switchInitData:switchInitData,getRangeAt:getRangeAt,reset:reset,updateTimestampOffset:updateTimestampOffset};setup();return instance;}TextBufferController.__dashjs_factory_name = 'TextBufferController';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(TextBufferController);module.exports = exports['default'];
	//# sourceMappingURL=TextBufferController.js.map


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _utilsInitCache=__webpack_require__(137);var _utilsInitCache2=_interopRequireDefault(_utilsInitCache);var _SourceBufferSink=__webpack_require__(61);var _SourceBufferSink2=_interopRequireDefault(_SourceBufferSink);var _streamingTextTextController=__webpack_require__(63);var _streamingTextTextController2=_interopRequireDefault(_streamingTextTextController);var _streamingVoDashJSError=__webpack_require__(62);var _streamingVoDashJSError2=_interopRequireDefault(_streamingVoDashJSError);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);var BUFFER_CONTROLLER_TYPE='NotFragmentedTextBufferController';function NotFragmentedTextBufferController(config){config = config || {};var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var textController=(0,_streamingTextTextController2['default'])(context).getInstance();var errHandler=config.errHandler;var type=config.type;var mimeType=config.mimeType;var streamProcessor=config.streamProcessor;var instance=undefined,isBufferingCompleted=undefined,initialized=undefined,mediaSource=undefined,buffer=undefined,initCache=undefined;function setup(){initialized = false;mediaSource = null;isBufferingCompleted = false;eventBus.on(_coreEventsEvents2['default'].DATA_UPDATE_COMPLETED,onDataUpdateCompleted,instance);eventBus.on(_coreEventsEvents2['default'].INIT_FRAGMENT_LOADED,onInitFragmentLoaded,instance);}function getBufferControllerType(){return BUFFER_CONTROLLER_TYPE;}function initialize(source){setMediaSource(source);initCache = (0,_utilsInitCache2['default'])(context).getInstance();} /**
	     * @param {MediaInfo }mediaInfo
	     * @memberof BufferController#
	     */function createBuffer(mediaInfo){try{buffer = (0,_SourceBufferSink2['default'])(context).create(mediaSource,mediaInfo);if(!initialized){var textBuffer=buffer.getBuffer();if(textBuffer.hasOwnProperty(_constantsConstants2['default'].INITIALIZE)){textBuffer.initialize(mimeType,streamProcessor);}initialized = true;}return buffer;}catch(e) {if(mediaInfo.isText || mediaInfo.codec.indexOf('codecs="stpp') !== -1 || mediaInfo.codec.indexOf('codecs="wvtt') !== -1){try{buffer = textController.getTextSourceBuffer();}catch(e) {errHandler.mediaSourceError('Error creating ' + type + ' source buffer.');errHandler.error(new _streamingVoDashJSError2['default'](_coreErrorsErrors2['default'].MEDIASOURCE_TYPE_UNSUPPORTED_CODE,_coreErrorsErrors2['default'].MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type + ' : ' + e.message));}}else {errHandler.mediaSourceError('Error creating ' + type + ' source buffer.');errHandler.error(new _streamingVoDashJSError2['default'](_coreErrorsErrors2['default'].MEDIASOURCE_TYPE_UNSUPPORTED_CODE,_coreErrorsErrors2['default'].MEDIASOURCE_TYPE_UNSUPPORTED_MESSAGE + type));}}}function getType(){return type;}function getBuffer(){return buffer;}function setMediaSource(value){mediaSource = value;}function getMediaSource(){return mediaSource;}function getStreamProcessor(){return streamProcessor;}function getIsPruningInProgress(){return false;}function dischargePreBuffer(){}function setSeekStartTime(){ //Unused - TODO Remove need for stub function
	}function getBufferLevel(){return 0;}function getIsBufferingCompleted(){return isBufferingCompleted;}function reset(errored){eventBus.off(_coreEventsEvents2['default'].DATA_UPDATE_COMPLETED,onDataUpdateCompleted,instance);eventBus.off(_coreEventsEvents2['default'].INIT_FRAGMENT_LOADED,onInitFragmentLoaded,instance);if(!errored && buffer){buffer.abort();buffer.reset();buffer = null;}}function onDataUpdateCompleted(e){if(e.sender.getStreamProcessor() !== streamProcessor){return;}var chunk=initCache.extract(streamProcessor.getStreamInfo().id,e.sender.getCurrentRepresentation().id);if(!chunk){eventBus.trigger(_coreEventsEvents2['default'].TIMED_TEXT_REQUESTED,{index:0,sender:e.sender}); //TODO make index dynamic if referring to MP?
	}}function onInitFragmentLoaded(e){if(e.fragmentModel !== streamProcessor.getFragmentModel() || !e.chunk.bytes){return;}initCache.save(e.chunk);buffer.append(e.chunk);eventBus.trigger(_coreEventsEvents2['default'].STREAM_COMPLETED,{request:e.request,fragmentModel:e.fragmentModel});}function switchInitData(streamId,representationId){var chunk=initCache.extract(streamId,representationId);if(!chunk){eventBus.trigger(_coreEventsEvents2['default'].TIMED_TEXT_REQUESTED,{index:0,sender:instance});}}function getRangeAt(){return null;}function updateTimestampOffset(MSETimeOffset){if(buffer.timestampOffset !== MSETimeOffset && !isNaN(MSETimeOffset)){buffer.timestampOffset = MSETimeOffset;}}instance = {getBufferControllerType:getBufferControllerType,initialize:initialize,createBuffer:createBuffer,getType:getType,getStreamProcessor:getStreamProcessor,setSeekStartTime:setSeekStartTime,getBuffer:getBuffer,getBufferLevel:getBufferLevel,setMediaSource:setMediaSource,getMediaSource:getMediaSource,getIsBufferingCompleted:getIsBufferingCompleted,getIsPruningInProgress:getIsPruningInProgress,dischargePreBuffer:dischargePreBuffer,switchInitData:switchInitData,getRangeAt:getRangeAt,reset:reset,updateTimestampOffset:updateTimestampOffset};setup();return instance;}NotFragmentedTextBufferController.__dashjs_factory_name = BUFFER_CONTROLLER_TYPE;exports['default'] = _coreFactoryMaker2['default'].getClassFactory(NotFragmentedTextBufferController);module.exports = exports['default'];
	//# sourceMappingURL=NotFragmentedTextBufferController.js.map


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _voMetricsPlayList=__webpack_require__(145);var _AbrController=__webpack_require__(122);var _AbrController2=_interopRequireDefault(_AbrController);var _BufferController=__webpack_require__(52);var _BufferController2=_interopRequireDefault(_BufferController);var _rulesSchedulingBufferLevelRule=__webpack_require__(146);var _rulesSchedulingBufferLevelRule2=_interopRequireDefault(_rulesSchedulingBufferLevelRule);var _rulesSchedulingNextFragmentRequestRule=__webpack_require__(147);var _rulesSchedulingNextFragmentRequestRule2=_interopRequireDefault(_rulesSchedulingNextFragmentRequestRule);var _modelsFragmentModel=__webpack_require__(53);var _modelsFragmentModel2=_interopRequireDefault(_modelsFragmentModel);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _MediaController=__webpack_require__(136);var _MediaController2=_interopRequireDefault(_MediaController);var _dashUtilsSegmentsUtils=__webpack_require__(148);function ScheduleController(config){config = config || {};var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var metricsModel=config.metricsModel;var adapter=config.adapter;var dashMetrics=config.dashMetrics;var dashManifestModel=config.dashManifestModel;var timelineConverter=config.timelineConverter;var mediaPlayerModel=config.mediaPlayerModel;var abrController=config.abrController;var playbackController=config.playbackController;var streamController=config.streamController;var textController=config.textController;var type=config.type;var streamProcessor=config.streamProcessor;var mediaController=config.mediaController;var instance=undefined,logger=undefined,fragmentModel=undefined,currentRepresentationInfo=undefined,initialRequest=undefined,isStopped=undefined,playListMetrics=undefined,playListTraceMetrics=undefined,playListTraceMetricsClosed=undefined,isFragmentProcessingInProgress=undefined,timeToLoadDelay=undefined,scheduleTimeout=undefined,seekTarget=undefined,bufferLevelRule=undefined,nextFragmentRequestRule=undefined,lastFragmentRequest=undefined,topQualityIndex=undefined,lastInitQuality=undefined,replaceRequestArray=undefined,switchTrack=undefined,bufferResetInProgress=undefined,mediaRequest=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);resetInitialSettings();}function initialize(){fragmentModel = streamProcessor.getFragmentModel();bufferLevelRule = (0,_rulesSchedulingBufferLevelRule2['default'])(context).create({abrController:abrController,dashMetrics:dashMetrics,metricsModel:metricsModel,mediaPlayerModel:mediaPlayerModel,textController:textController});nextFragmentRequestRule = (0,_rulesSchedulingNextFragmentRequestRule2['default'])(context).create({adapter:adapter,textController:textController});if(dashManifestModel.getIsTextTrack(config.mimeType)){eventBus.on(_coreEventsEvents2['default'].TIMED_TEXT_REQUESTED,onTimedTextRequested,this);} //eventBus.on(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);
	eventBus.on(_coreEventsEvents2['default'].QUALITY_CHANGE_REQUESTED,onQualityChanged,this);eventBus.on(_coreEventsEvents2['default'].DATA_UPDATE_STARTED,onDataUpdateStarted,this);eventBus.on(_coreEventsEvents2['default'].DATA_UPDATE_COMPLETED,onDataUpdateCompleted,this);eventBus.on(_coreEventsEvents2['default'].FRAGMENT_LOADING_COMPLETED,onFragmentLoadingCompleted,this);eventBus.on(_coreEventsEvents2['default'].STREAM_COMPLETED,onStreamCompleted,this);eventBus.on(_coreEventsEvents2['default'].STREAM_INITIALIZED,onStreamInitialized,this);eventBus.on(_coreEventsEvents2['default'].BUFFER_LEVEL_STATE_CHANGED,onBufferLevelStateChanged,this);eventBus.on(_coreEventsEvents2['default'].BUFFER_CLEARED,onBufferCleared,this);eventBus.on(_coreEventsEvents2['default'].BYTES_APPENDED_END_FRAGMENT,onBytesAppended,this);eventBus.on(_coreEventsEvents2['default'].INIT_REQUESTED,onInitRequested,this);eventBus.on(_coreEventsEvents2['default'].QUOTA_EXCEEDED,onQuotaExceeded,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_SEEKING,onPlaybackSeeking,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_STARTED,onPlaybackStarted,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_RATE_CHANGED,onPlaybackRateChanged,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_TIME_UPDATED,onPlaybackTimeUpdated,this);eventBus.on(_coreEventsEvents2['default'].URL_RESOLUTION_FAILED,onURLResolutionFailed,this);eventBus.on(_coreEventsEvents2['default'].FRAGMENT_LOADING_ABANDONED,onFragmentLoadingAbandoned,this);}function isStarted(){return isStopped === false;}function start(){if(!currentRepresentationInfo || streamProcessor.isBufferingCompleted()){logger.warn('Start denied to Schedule Controller');return;}logger.debug('Schedule Controller starts');addPlaylistTraceMetrics();isStopped = false;if(initialRequest){initialRequest = false;}startScheduleTimer(0);}function stop(){if(isStopped){return;}logger.debug('Schedule Controller stops');isStopped = true;clearTimeout(scheduleTimeout);}function hasTopQualityChanged(type,id){topQualityIndex[id] = topQualityIndex[id] || {};var newTopQualityIndex=abrController.getTopQualityIndexFor(type,id);if(topQualityIndex[id][type] != newTopQualityIndex){logger.info('Top quality ' + type + ' index has changed from ' + topQualityIndex[id][type] + ' to ' + newTopQualityIndex);topQualityIndex[id][type] = newTopQualityIndex;return true;}return false;}function schedule(){var bufferController=streamProcessor.getBufferController();if(isStopped || isFragmentProcessingInProgress || !bufferController || playbackController.isPaused() && !mediaPlayerModel.getScheduleWhilePaused() || (type === _constantsConstants2['default'].FRAGMENTED_TEXT || type === _constantsConstants2['default'].TEXT) && !textController.isTextEnabled()){logger.debug('Schedule stop!');return;}if(bufferController.getIsBufferingCompleted()){logger.debug('Schedule stop because buffering is completed!');return;}validateExecutedFragmentRequest();var isReplacement=replaceRequestArray.length > 0;var streamInfo=streamProcessor.getStreamInfo();if(bufferResetInProgress || isNaN(lastInitQuality) || switchTrack || isReplacement || hasTopQualityChanged(currentRepresentationInfo.mediaInfo.type,streamInfo.id) || bufferLevelRule.execute(streamProcessor,streamController.isTrackTypePresent(_constantsConstants2['default'].VIDEO))){var getNextFragment=function getNextFragment(){var fragmentController=streamProcessor.getFragmentController();if(currentRepresentationInfo.quality !== lastInitQuality){logger.debug('Quality has changed, get init request for representationid = ' + currentRepresentationInfo.id);lastInitQuality = currentRepresentationInfo.quality;streamProcessor.switchInitData(currentRepresentationInfo.id);}else if(switchTrack){logger.debug('Switch track has been asked, get init request for ' + type + ' with representationid = ' + currentRepresentationInfo.id);bufferResetInProgress = mediaController.getSwitchMode(type) === _MediaController2['default'].TRACK_SWITCH_MODE_ALWAYS_REPLACE?true:false;streamProcessor.switchInitData(currentRepresentationInfo.id,bufferResetInProgress);lastInitQuality = currentRepresentationInfo.quality;switchTrack = false;}else {var replacement=replaceRequestArray.shift();if(fragmentController.isInitializationRequest(replacement)){ // To be sure the specific init segment had not already been loaded.
	streamProcessor.switchInitData(replacement.representationId);}else {var request=undefined; // Don't schedule next fragments while pruning to avoid buffer inconsistencies
	if(!streamProcessor.getBufferController().getIsPruningInProgress()){request = nextFragmentRequestRule.execute(streamProcessor,replacement);if(!request && streamInfo.manifestInfo && streamInfo.manifestInfo.isDynamic){logger.debug('Next fragment seems to be at the bleeding live edge and is not available yet. Rescheduling.');}}if(request){logger.debug('Next fragment request url is ' + request.url);fragmentModel.executeRequest(request);}else { // Use case - Playing at the bleeding live edge and frag is not available yet. Cycle back around.
	setFragmentProcessState(false);startScheduleTimer(mediaPlayerModel.getLowLatencyEnabled()?100:500);}}}};setFragmentProcessState(true);if(!isReplacement && !switchTrack){abrController.checkPlaybackQuality(type);}getNextFragment();}else {startScheduleTimer(500);}}function validateExecutedFragmentRequest(){ // Validate that the fragment request executed and appended into the source buffer is as
	// good of quality as the current quality and is the correct media track.
	var safeBufferLevel=currentRepresentationInfo.fragmentDuration * 1.5;var request=fragmentModel.getRequests({state:_modelsFragmentModel2['default'].FRAGMENT_MODEL_EXECUTED,time:playbackController.getTime() + safeBufferLevel,threshold:0})[0];if(request && replaceRequestArray.indexOf(request) === -1 && !dashManifestModel.getIsTextTrack(type)){var fastSwitchModeEnabled=mediaPlayerModel.getFastSwitchEnabled();var bufferLevel=streamProcessor.getBufferLevel();var abandonmentState=abrController.getAbandonmentStateFor(type); // Only replace on track switch when NEVER_REPLACE
	var trackChanged=!mediaController.isCurrentTrack(request.mediaInfo) && mediaController.getSwitchMode(request.mediaInfo.type) === _MediaController2['default'].TRACK_SWITCH_MODE_NEVER_REPLACE;var qualityChanged=request.quality < currentRepresentationInfo.quality;if(fastSwitchModeEnabled && (trackChanged || qualityChanged) && bufferLevel >= safeBufferLevel && abandonmentState !== _AbrController2['default'].ABANDON_LOAD){replaceRequest(request);logger.debug('Reloading outdated fragment at index: ',request.index);}else if(request.quality > currentRepresentationInfo.quality){ // The buffer has better quality it in then what we would request so set append point to end of buffer!!
	setSeekTarget(playbackController.getTime() + streamProcessor.getBufferLevel());}}}function startScheduleTimer(value){clearTimeout(scheduleTimeout);scheduleTimeout = setTimeout(schedule,value);}function onInitRequested(e){if(!e.sender || e.sender.getStreamProcessor() !== streamProcessor){return;}getInitRequest(currentRepresentationInfo.quality);}function setFragmentProcessState(state){if(isFragmentProcessingInProgress !== state){isFragmentProcessingInProgress = state;}else {logger.debug('isFragmentProcessingInProgress is already equal to',state);}}function getInitRequest(quality){var request=adapter.getInitRequest(streamProcessor,quality);if(request){setFragmentProcessState(true);request.url = (0,_dashUtilsSegmentsUtils.replaceTokenForTemplate)(request.url,'Bandwidth',currentRepresentationInfo?currentRepresentationInfo.bandwidth:null);fragmentModel.executeRequest(request);}}function switchTrackAsked(){switchTrack = true;}function replaceRequest(request){replaceRequestArray.push(request);}function onQualityChanged(e){if(type !== e.mediaType || streamProcessor.getStreamInfo().id !== e.streamInfo.id){return;}currentRepresentationInfo = streamProcessor.getRepresentationInfo(e.newQuality);if(currentRepresentationInfo === null || currentRepresentationInfo === undefined){throw new Error('Unexpected error! - currentRepresentationInfo is null or undefined');}clearPlayListTraceMetrics(new Date(),_voMetricsPlayList.PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON);addPlaylistTraceMetrics();}function completeQualityChange(trigger){if(playbackController && fragmentModel){var item=fragmentModel.getRequests({state:_modelsFragmentModel2['default'].FRAGMENT_MODEL_EXECUTED,time:playbackController.getTime(),threshold:0})[0];if(item && playbackController.getTime() >= item.startTime){if((!lastFragmentRequest.mediaInfo || item.mediaInfo.type === lastFragmentRequest.mediaInfo.type && item.mediaInfo.id !== lastFragmentRequest.mediaInfo.id) && trigger){eventBus.trigger(_coreEventsEvents2['default'].TRACK_CHANGE_RENDERED,{mediaType:type,oldMediaInfo:lastFragmentRequest.mediaInfo,newMediaInfo:item.mediaInfo});}if((item.quality !== lastFragmentRequest.quality || item.adaptationIndex !== lastFragmentRequest.adaptationIndex) && trigger){eventBus.trigger(_coreEventsEvents2['default'].QUALITY_CHANGE_RENDERED,{mediaType:type,oldQuality:lastFragmentRequest.quality,newQuality:item.quality});}lastFragmentRequest = {mediaInfo:item.mediaInfo,quality:item.quality,adaptationIndex:item.adaptationIndex};}}}function onDataUpdateCompleted(e){if(e.error || e.sender.getStreamProcessor() !== streamProcessor){return;}currentRepresentationInfo = adapter.convertDataToRepresentationInfo(e.currentRepresentation);}function onStreamInitialized(e){if(e.error || streamProcessor.getStreamInfo().id !== e.streamInfo.id){return;}currentRepresentationInfo = streamProcessor.getRepresentationInfo();if(initialRequest){if(playbackController.getIsDynamic()){timelineConverter.setTimeSyncCompleted(true);setLiveEdgeSeekTarget();}else {seekTarget = playbackController.getStreamStartTime(false);streamProcessor.getBufferController().setSeekStartTime(seekTarget);}}if(isStopped){start();}}function setLiveEdgeSeekTarget(){var liveEdgeFinder=streamProcessor.getLiveEdgeFinder();if(liveEdgeFinder){var liveEdge=liveEdgeFinder.getLiveEdge();var dvrWindowSize=currentRepresentationInfo.mediaInfo.streamInfo.manifestInfo.DVRWindowSize / 2;var startTime=liveEdge - playbackController.computeLiveDelay(currentRepresentationInfo.fragmentDuration,dvrWindowSize);var request=adapter.getFragmentRequest(streamProcessor,currentRepresentationInfo,startTime,{ignoreIsFinished:true});if(request){ // When low latency mode is selected but browser doesn't support fetch
	// start at the beginning of the segment to avoid consuming the whole buffer
	if(mediaPlayerModel.getLowLatencyEnabled()){var liveStartTime=request.duration < mediaPlayerModel.getLiveDelay()?request.startTime:request.startTime + request.duration - mediaPlayerModel.getLiveDelay();playbackController.setLiveStartTime(liveStartTime);}else {playbackController.setLiveStartTime(request.startTime);}}else {logger.debug('setLiveEdgeSeekTarget : getFragmentRequest returned undefined request object');}seekTarget = playbackController.getStreamStartTime(false,liveEdge);streamProcessor.getBufferController().setSeekStartTime(seekTarget); //special use case for multi period stream. If the startTime is out of the current period, send a seek command.
	//in onPlaybackSeeking callback (StreamController), the detection of switch stream is done.
	if(seekTarget > currentRepresentationInfo.mediaInfo.streamInfo.start + currentRepresentationInfo.mediaInfo.streamInfo.duration){playbackController.seek(seekTarget);}var manifestUpdateInfo=dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor(_constantsConstants2['default'].STREAM));metricsModel.updateManifestUpdateInfo(manifestUpdateInfo,{currentTime:seekTarget,presentationStartTime:liveEdge,latency:liveEdge - seekTarget,clientTimeOffset:timelineConverter.getClientTimeOffset()});}}function onStreamCompleted(e){if(e.fragmentModel !== fragmentModel){return;}stop();setFragmentProcessState(false);logger.info('Stream is complete');}function onFragmentLoadingCompleted(e){if(e.sender !== fragmentModel){return;}logger.info('OnFragmentLoadingCompleted - Url:',e.request?e.request.url:'undefined',', Range:',e.request.range?e.request.range:'undefined');if(dashManifestModel.getIsTextTrack(type)){setFragmentProcessState(false);}if(e.error && e.request.serviceLocation && !isStopped){replaceRequest(e.request);setFragmentProcessState(false);startScheduleTimer(0);}if(bufferResetInProgress){mediaRequest = e.request;}}function onPlaybackTimeUpdated(){completeQualityChange(true);}function onBytesAppended(e){if(e.sender.getStreamProcessor() !== streamProcessor){return;}if(bufferResetInProgress && !isNaN(e.startTime)){bufferResetInProgress = false;fragmentModel.addExecutedRequest(mediaRequest);}setFragmentProcessState(false);startScheduleTimer(0);}function onFragmentLoadingAbandoned(e){if(e.streamProcessor !== streamProcessor){return;}logger.info('onFragmentLoadingAbandoned for ' + type + ', request: ' + e.request.url + ' has been aborted');if(!playbackController.isSeeking() && !switchTrack){logger.info('onFragmentLoadingAbandoned for ' + type + ', request: ' + e.request.url + ' has to be downloaded again, origin is not seeking process or switch track call');replaceRequest(e.request);}setFragmentProcessState(false);startScheduleTimer(0);}function onDataUpdateStarted(e){if(e.sender.getStreamProcessor() !== streamProcessor){return;}stop();}function onBufferCleared(e){if(e.sender.getStreamProcessor() !== streamProcessor){return;}if(e.unintended){ // There was an unintended buffer remove, probably creating a gap in the buffer, remove every saved request
	streamProcessor.getFragmentModel().removeExecutedRequestsAfterTime(e.from,streamProcessor.getStreamInfo().duration);}else {streamProcessor.getFragmentModel().syncExecutedRequestsWithBufferedRange(streamProcessor.getBufferController().getBuffer().getAllBufferRanges(),streamProcessor.getStreamInfo().duration);}if(e.hasEnoughSpaceToAppend && isStopped){start();}}function onBufferLevelStateChanged(e){if(e.sender.getStreamProcessor() === streamProcessor && e.state === _BufferController2['default'].BUFFER_EMPTY && !playbackController.isSeeking()){logger.info('Buffer is empty! Stalling!');clearPlayListTraceMetrics(new Date(),_voMetricsPlayList.PlayListTrace.REBUFFERING_REASON);}}function onQuotaExceeded(e){if(e.sender.getStreamProcessor() !== streamProcessor){return;}stop();setFragmentProcessState(false);}function onURLResolutionFailed(){fragmentModel.abortRequests();stop();}function onTimedTextRequested(e){if(e.sender.getStreamProcessor() !== streamProcessor){return;} //if subtitles are disabled, do not download subtitles file.
	if(textController.isTextEnabled()){getInitRequest(e.index);}}function onPlaybackStarted(){if(isStopped || !mediaPlayerModel.getScheduleWhilePaused()){start();}}function onPlaybackSeeking(e){seekTarget = e.seekTime;setTimeToLoadDelay(0);if(isStopped){start();}var manifestUpdateInfo=dashMetrics.getCurrentManifestUpdate(metricsModel.getMetricsFor(_constantsConstants2['default'].STREAM));var latency=currentRepresentationInfo.DVRWindow && playbackController?currentRepresentationInfo.DVRWindow.end - playbackController.getTime():NaN;metricsModel.updateManifestUpdateInfo(manifestUpdateInfo,{latency:latency}); //if, during the seek command, the scheduleController is waiting : stop waiting, request chunk as soon as possible
	if(!isFragmentProcessingInProgress){startScheduleTimer(0);}else {logger.debug('onPlaybackSeeking for ' + type + ', call fragmentModel.abortRequests in order to seek quicker');fragmentModel.abortRequests();}}function onPlaybackRateChanged(e){if(playListTraceMetrics){playListTraceMetrics.playbackspeed = e.playbackRate.toString();}}function getSeekTarget(){return seekTarget;}function setSeekTarget(value){seekTarget = value;}function setTimeToLoadDelay(value){timeToLoadDelay = value;}function getTimeToLoadDelay(){return timeToLoadDelay;}function getBufferTarget(){return bufferLevelRule.getBufferTarget(streamProcessor,streamController.isTrackTypePresent(_constantsConstants2['default'].VIDEO));}function getType(){return type;}function setPlayList(playList){playListMetrics = playList;}function finalisePlayList(time,reason){clearPlayListTraceMetrics(time,reason);playListMetrics = null;}function clearPlayListTraceMetrics(endTime,stopreason){if(playListMetrics && playListTraceMetricsClosed === false){var startTime=playListTraceMetrics.start;var duration=endTime.getTime() - startTime.getTime();playListTraceMetrics.duration = duration;playListTraceMetrics.stopreason = stopreason;playListMetrics.trace.push(playListTraceMetrics);playListTraceMetricsClosed = true;}}function addPlaylistTraceMetrics(){if(playListMetrics && playListTraceMetricsClosed === true && currentRepresentationInfo){playListTraceMetricsClosed = false;playListTraceMetrics = new _voMetricsPlayList.PlayListTrace();playListTraceMetrics.representationid = currentRepresentationInfo.id;playListTraceMetrics.start = new Date();playListTraceMetrics.mstart = playbackController.getTime() * 1000;playListTraceMetrics.playbackspeed = playbackController.getPlaybackRate().toString();}}function resetInitialSettings(){isFragmentProcessingInProgress = false;timeToLoadDelay = 0;seekTarget = NaN;playListMetrics = null;playListTraceMetrics = null;playListTraceMetricsClosed = true;initialRequest = true;lastInitQuality = NaN;lastFragmentRequest = {mediaInfo:undefined,quality:NaN,adaptationIndex:NaN};topQualityIndex = {};replaceRequestArray = [];isStopped = true;switchTrack = false;bufferResetInProgress = false;mediaRequest = null;}function reset(){ //eventBus.off(Events.LIVE_EDGE_SEARCH_COMPLETED, onLiveEdgeSearchCompleted, this);
	eventBus.off(_coreEventsEvents2['default'].DATA_UPDATE_STARTED,onDataUpdateStarted,this);eventBus.off(_coreEventsEvents2['default'].DATA_UPDATE_COMPLETED,onDataUpdateCompleted,this);eventBus.off(_coreEventsEvents2['default'].BUFFER_LEVEL_STATE_CHANGED,onBufferLevelStateChanged,this);eventBus.off(_coreEventsEvents2['default'].QUALITY_CHANGE_REQUESTED,onQualityChanged,this);eventBus.off(_coreEventsEvents2['default'].FRAGMENT_LOADING_COMPLETED,onFragmentLoadingCompleted,this);eventBus.off(_coreEventsEvents2['default'].STREAM_COMPLETED,onStreamCompleted,this);eventBus.off(_coreEventsEvents2['default'].STREAM_INITIALIZED,onStreamInitialized,this);eventBus.off(_coreEventsEvents2['default'].QUOTA_EXCEEDED,onQuotaExceeded,this);eventBus.off(_coreEventsEvents2['default'].BYTES_APPENDED_END_FRAGMENT,onBytesAppended,this);eventBus.off(_coreEventsEvents2['default'].BUFFER_CLEARED,onBufferCleared,this);eventBus.off(_coreEventsEvents2['default'].INIT_REQUESTED,onInitRequested,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_RATE_CHANGED,onPlaybackRateChanged,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_SEEKING,onPlaybackSeeking,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_STARTED,onPlaybackStarted,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_TIME_UPDATED,onPlaybackTimeUpdated,this);eventBus.off(_coreEventsEvents2['default'].URL_RESOLUTION_FAILED,onURLResolutionFailed,this);eventBus.off(_coreEventsEvents2['default'].FRAGMENT_LOADING_ABANDONED,onFragmentLoadingAbandoned,this);if(dashManifestModel.getIsTextTrack(type)){eventBus.off(_coreEventsEvents2['default'].TIMED_TEXT_REQUESTED,onTimedTextRequested,this);}stop();completeQualityChange(false);resetInitialSettings();}instance = {initialize:initialize,getType:getType,getSeekTarget:getSeekTarget,setSeekTarget:setSeekTarget,setTimeToLoadDelay:setTimeToLoadDelay,getTimeToLoadDelay:getTimeToLoadDelay,replaceRequest:replaceRequest,switchTrackAsked:switchTrackAsked,isStarted:isStarted,start:start,stop:stop,reset:reset,setPlayList:setPlayList,getBufferTarget:getBufferTarget,finalisePlayList:finalisePlayList};setup();return instance;}ScheduleController.__dashjs_factory_name = 'ScheduleController';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(ScheduleController);module.exports = exports['default'];
	//# sourceMappingURL=ScheduleController.js.map


/***/ }),
/* 145 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc a PlayList from ISO23009-1 Annex D, this Object holds reference to the playback session information
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var PlayList= /**
	     * @class
	     */function PlayList(){_classCallCheck(this,PlayList); /**
	         * Timestamp of the user action that starts the playback stream...
	         * @public
	         */this.start = null; /**
	         * Presentation time at which playout was requested by the user...
	         * @public
	         */this.mstart = null; /**
	         * Type of user action which triggered playout
	         * - New playout request (e.g. initial playout or seeking)
	         * - Resume from pause
	         * - Other user request (e.g. user-requested quality change)
	         * - Start of a metrics collection stream (hence earlier entries in the play list not collected)
	         * @public
	         */this.starttype = null; /**
	         * List of streams of continuous rendering of decoded samples.
	         * @public
	         */this.trace = [];} /* Public Static Constants */;PlayList.INITIAL_PLAYOUT_START_REASON = 'initial_playout';PlayList.SEEK_START_REASON = 'seek';PlayList.RESUME_FROM_PAUSE_START_REASON = 'resume';PlayList.METRICS_COLLECTION_START_REASON = 'metrics_collection_start'; /**
	 * @classdesc a PlayList.Trace from ISO23009-1 Annex D
	 */var PlayListTrace= /**
	     * @class
	     */function PlayListTrace(){_classCallCheck(this,PlayListTrace); /**
	         * The value of the Representation@id of the Representation from which the samples were taken.
	         * @type {string}
	         * @public
	         */this.representationid = null; /**
	         * If not present, this metrics concerns the Representation as a whole.
	         * If present, subreplevel indicates the greatest value of any
	         * Subrepresentation@level being rendered.
	         * @type {number}
	         * @public
	         */this.subreplevel = null; /**
	         * The time at which the first sample was rendered
	         * @type {number}
	         * @public
	         */this.start = null; /**
	         * The presentation time of the first sample rendered.
	         * @type {number}
	         * @public
	         */this.mstart = null; /**
	         * The duration of the continuously presented samples (which is the same in real time and media time). "Continuously presented" means that the media clock continued to advance at the playout speed throughout the interval. NOTE: the spec does not call out the units, but all other durations etc are in ms, and we use ms too.
	         * @type {number}
	         * @public
	         */this.duration = null; /**
	         * The playback speed relative to normal playback speed (i.e.normal forward playback speed is 1.0).
	         * @type {number}
	         * @public
	         */this.playbackspeed = null; /**
	         * The reason why continuous presentation of this Representation was stopped.
	         * representation switch
	         * rebuffering
	         * user request
	         * end of Period
	         * end of Stream
	         * end of content
	         * end of a metrics collection period
	         *
	         * @type {string}
	         * @public
	         */this.stopreason = null;};PlayListTrace.REPRESENTATION_SWITCH_STOP_REASON = 'representation_switch';PlayListTrace.REBUFFERING_REASON = 'rebuffering';PlayListTrace.USER_REQUEST_STOP_REASON = 'user_request';PlayListTrace.END_OF_PERIOD_STOP_REASON = 'end_of_period';PlayListTrace.END_OF_CONTENT_STOP_REASON = 'end_of_content';PlayListTrace.METRICS_COLLECTION_STOP_REASON = 'metrics_collection_end';PlayListTrace.FAILURE_STOP_REASON = 'failure';exports.PlayList = PlayList;exports.PlayListTrace = PlayListTrace;
	//# sourceMappingURL=PlayList.js.map


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);function BufferLevelRule(config){config = config || {};var dashMetrics=config.dashMetrics;var metricsModel=config.metricsModel;var mediaPlayerModel=config.mediaPlayerModel;var textController=config.textController;var abrController=config.abrController;function setup(){}function execute(streamProcessor,videoTrackPresent){if(!streamProcessor){return true;}var bufferLevel=dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(streamProcessor.getType()));return bufferLevel < getBufferTarget(streamProcessor,videoTrackPresent);}function getBufferTarget(streamProcessor,videoTrackPresent){var bufferTarget=NaN;if(!streamProcessor){return bufferTarget;}var type=streamProcessor.getType();var representationInfo=streamProcessor.getRepresentationInfo();if(type === _constantsConstants2['default'].FRAGMENTED_TEXT){bufferTarget = textController.isTextEnabled()?representationInfo.fragmentDuration:0;}else if(type === _constantsConstants2['default'].AUDIO && videoTrackPresent){var videoBufferLevel=dashMetrics.getCurrentBufferLevel(metricsModel.getReadOnlyMetricsFor(_constantsConstants2['default'].VIDEO));if(isNaN(representationInfo.fragmentDuration)){bufferTarget = videoBufferLevel;}else {bufferTarget = Math.max(videoBufferLevel,representationInfo.fragmentDuration);}}else {var streamInfo=representationInfo.mediaInfo.streamInfo;if(abrController.isPlayingAtTopQuality(streamInfo)){var isLongFormContent=streamInfo.manifestInfo.duration >= mediaPlayerModel.getLongFormContentDurationThreshold();bufferTarget = isLongFormContent?mediaPlayerModel.getBufferTimeAtTopQualityLongForm():mediaPlayerModel.getBufferTimeAtTopQuality();}else {bufferTarget = mediaPlayerModel.getStableBufferTime();}}return bufferTarget;}var instance={execute:execute,getBufferTarget:getBufferTarget};setup();return instance;}BufferLevelRule.__dashjs_factory_name = 'BufferLevelRule';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(BufferLevelRule);module.exports = exports['default'];
	//# sourceMappingURL=BufferLevelRule.js.map


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _streamingVoFragmentRequest=__webpack_require__(59);var _streamingVoFragmentRequest2=_interopRequireDefault(_streamingVoFragmentRequest);function NextFragmentRequestRule(config){config = config || {};var context=this.context;var adapter=config.adapter;var textController=config.textController;var instance=undefined,logger=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);}function execute(streamProcessor,requestToReplace){if(!streamProcessor){return null;}var representationInfo=streamProcessor.getRepresentationInfo();var mediaInfo=representationInfo.mediaInfo;var mediaType=mediaInfo.type;var scheduleController=streamProcessor.getScheduleController();var seekTarget=scheduleController.getSeekTarget();var hasSeekTarget=!isNaN(seekTarget);var bufferController=streamProcessor.getBufferController();var currentTime=streamProcessor.getPlaybackController().getNormalizedTime();var time=hasSeekTarget?seekTarget:adapter.getIndexHandlerTime(streamProcessor);var bufferIsDivided=false;var request=undefined;if(hasSeekTarget){scheduleController.setSeekTarget(NaN);}if(isNaN(time) || mediaType === _constantsConstants2['default'].FRAGMENTED_TEXT && !textController.isTextEnabled()){return null;} /**
	         * This is critical for IE/Safari/EDGE
	         * */if(bufferController){var range=bufferController.getRangeAt(time);var playingRange=bufferController.getRangeAt(currentTime);var bufferRanges=bufferController.getBuffer().getAllBufferRanges();var numberOfBuffers=bufferRanges?bufferRanges.length:0;if((range !== null || playingRange !== null) && !hasSeekTarget){if(!range || playingRange && playingRange.start != range.start && playingRange.end != range.end){if(numberOfBuffers > 1 && mediaType !== _constantsConstants2['default'].FRAGMENTED_TEXT){streamProcessor.getFragmentModel().removeExecutedRequestsAfterTime(playingRange.end);bufferIsDivided = true;}range = playingRange;}logger.debug('Prior to making a request for time, NextFragmentRequestRule is aligning index handler\'s currentTime with bufferedRange.end for',mediaType,'.',time,'was changed to',range.end);time = range.end;}}if(requestToReplace){time = requestToReplace.startTime + requestToReplace.duration / 2;request = adapter.getFragmentRequest(streamProcessor,representationInfo,time,{timeThreshold:0,ignoreIsFinished:true});}else {request = adapter.getFragmentRequest(streamProcessor,representationInfo,time,{keepIdx:!hasSeekTarget && !bufferIsDivided}); // Then, check if this request was downloaded or not
	while(request && request.action !== _streamingVoFragmentRequest2['default'].ACTION_COMPLETE && streamProcessor.getFragmentModel().isFragmentLoaded(request)) { // loop until we found not loaded fragment, or no fragment
	request = adapter.getFragmentRequest(streamProcessor,representationInfo);}if(request){if(!isNaN(request.startTime + request.duration)){adapter.setIndexHandlerTime(streamProcessor,request.startTime + request.duration);}request.delayLoadingTime = new Date().getTime() + scheduleController.getTimeToLoadDelay();scheduleController.setTimeToLoadDelay(0);}}return request;}instance = {execute:execute};setup();return instance;}NextFragmentRequestRule.__dashjs_factory_name = 'NextFragmentRequestRule';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(NextFragmentRequestRule);module.exports = exports['default'];
	//# sourceMappingURL=NextFragmentRequestRule.js.map


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.unescapeDollarsInTemplate = unescapeDollarsInTemplate;exports.replaceIDForTemplate = replaceIDForTemplate;exports.replaceTokenForTemplate = replaceTokenForTemplate;exports.getIndexBasedSegment = getIndexBasedSegment;exports.getTimeBasedSegment = getTimeBasedSegment;exports.getSegmentByIndex = getSegmentByIndex;exports.decideSegmentListRangeForTemplate = decideSegmentListRangeForTemplate;function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _voSegment=__webpack_require__(149);var _voSegment2=_interopRequireDefault(_voSegment);function zeroPadToLength(numStr,minStrLength){while(numStr.length < minStrLength) {numStr = '0' + numStr;}return numStr;}function getNumberForSegment(segment,segmentIndex){return segment.representation.startNumber + segmentIndex;}function unescapeDollarsInTemplate(url){return url?url.split('$$').join('$'):url;}function replaceIDForTemplate(url,value){if(!value || !url || url.indexOf('$RepresentationID$') === -1){return url;}var v=value.toString();return url.split('$RepresentationID$').join(v);}function replaceTokenForTemplate(url,token,value){var formatTag='%0';var startPos=undefined,endPos=undefined,formatTagPos=undefined,specifier=undefined,width=undefined,paddedValue=undefined;var tokenLen=token.length;var formatTagLen=formatTag.length;if(!url){return url;} // keep looping round until all instances of <token> have been
	// replaced. once that has happened, startPos below will be -1
	// and the completed url will be returned.
	while(true) { // check if there is a valid $<token>...$ identifier
	// if not, return the url as is.
	startPos = url.indexOf('$' + token);if(startPos < 0){return url;} // the next '$' must be the end of the identifier
	// if there isn't one, return the url as is.
	endPos = url.indexOf('$',startPos + tokenLen);if(endPos < 0){return url;} // now see if there is an additional format tag suffixed to
	// the identifier within the enclosing '$' characters
	formatTagPos = url.indexOf(formatTag,startPos + tokenLen);if(formatTagPos > startPos && formatTagPos < endPos){specifier = url.charAt(endPos - 1);width = parseInt(url.substring(formatTagPos + formatTagLen,endPos - 1),10); // support the minimum specifiers required by IEEE 1003.1
	// (d, i , o, u, x, and X) for completeness
	switch(specifier){ // treat all int types as uint,
	// hence deliberate fallthrough
	case 'd':case 'i':case 'u':paddedValue = zeroPadToLength(value.toString(),width);break;case 'x':paddedValue = zeroPadToLength(value.toString(16),width);break;case 'X':paddedValue = zeroPadToLength(value.toString(16),width).toUpperCase();break;case 'o':paddedValue = zeroPadToLength(value.toString(8),width);break;default:return url;}}else {paddedValue = value;}url = url.substring(0,startPos) + paddedValue + url.substring(endPos + 1);}}function getIndexBasedSegment(timelineConverter,isDynamic,representation,index){var seg=undefined,duration=undefined,presentationStartTime=undefined,presentationEndTime=undefined;duration = representation.segmentDuration; /*
	     * From spec - If neither @duration attribute nor SegmentTimeline element is present, then the Representation
	     * shall contain exactly one Media Segment. The MPD start time is 0 and the MPD duration is obtained
	     * in the same way as for the last Media Segment in the Representation.
	     */if(isNaN(duration)){duration = representation.adaptation.period.duration;}presentationStartTime = parseFloat((representation.adaptation.period.start + index * duration).toFixed(5));presentationEndTime = parseFloat((presentationStartTime + duration).toFixed(5));seg = new _voSegment2['default']();seg.representation = representation;seg.duration = duration;seg.presentationStartTime = presentationStartTime;seg.mediaStartTime = timelineConverter.calcMediaTimeFromPresentationTime(seg.presentationStartTime,representation);seg.availabilityStartTime = timelineConverter.calcAvailabilityStartTimeFromPresentationTime(seg.presentationStartTime,representation.adaptation.period.mpd,isDynamic);seg.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationEndTime,representation.adaptation.period.mpd,isDynamic); // at this wall clock time, the video element currentTime should be seg.presentationStartTime
	seg.wallStartTime = timelineConverter.calcWallTimeForSegment(seg,isDynamic);seg.replacementNumber = getNumberForSegment(seg,index);seg.availabilityIdx = index;return seg;}function getTimeBasedSegment(timelineConverter,isDynamic,representation,time,duration,fTimescale,url,range,index,tManifest){var scaledTime=time / fTimescale;var scaledDuration=Math.min(duration / fTimescale,representation.adaptation.period.mpd.maxSegmentDuration);var presentationStartTime=undefined,presentationEndTime=undefined,seg=undefined;presentationStartTime = timelineConverter.calcPresentationTimeFromMediaTime(scaledTime,representation);presentationEndTime = presentationStartTime + scaledDuration;seg = new _voSegment2['default']();seg.representation = representation;seg.duration = scaledDuration;seg.mediaStartTime = scaledTime;seg.presentationStartTime = presentationStartTime; // For SegmentTimeline every segment is available at loadedTime
	seg.availabilityStartTime = representation.adaptation.period.mpd.manifest.loadedTime;seg.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationEndTime,representation.adaptation.period.mpd,isDynamic); // at this wall clock time, the video element currentTime should be seg.presentationStartTime
	seg.wallStartTime = timelineConverter.calcWallTimeForSegment(seg,isDynamic);seg.replacementTime = tManifest?tManifest:time;seg.replacementNumber = getNumberForSegment(seg,index);url = replaceTokenForTemplate(url,'Number',seg.replacementNumber);url = replaceTokenForTemplate(url,'Time',seg.replacementTime);seg.media = url;seg.mediaRange = range;seg.availabilityIdx = index;return seg;}function getSegmentByIndex(index,representation){if(!representation || !representation.segments)return null;var ln=representation.segments.length;var seg=undefined,i=undefined;if(index < ln){seg = representation.segments[index];if(seg && seg.availabilityIdx === index){return seg;}}for(i = 0;i < ln;i++) {seg = representation.segments[i];if(seg && seg.availabilityIdx === index){return seg;}}return null;}function decideSegmentListRangeForTemplate(timelineConverter,isDynamic,representation,requestedTime,index,givenAvailabilityUpperLimit){var duration=representation.segmentDuration;var minBufferTime=representation.adaptation.period.mpd.manifest.minBufferTime;var availabilityWindow=representation.segmentAvailabilityRange;var periodRelativeRange={start:timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation,availabilityWindow?availabilityWindow.start:NaN),end:timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation,availabilityWindow?availabilityWindow.end:NaN)};var currentSegmentList=representation.segments;var availabilityLowerLimit=2 * duration;var availabilityUpperLimit=givenAvailabilityUpperLimit || Math.max(2 * minBufferTime,10 * duration);var originAvailabilityTime=NaN;var originSegment=null;var start=undefined,end=undefined,range=undefined;periodRelativeRange.start = Math.max(periodRelativeRange.start,0);if(isDynamic && !timelineConverter.isTimeSyncCompleted()){start = Math.floor(periodRelativeRange.start / duration);end = Math.floor(periodRelativeRange.end / duration);range = {start:start,end:end};return range;} // if segments exist we should try to find the latest buffered time, which is the presentation time of the
	// segment for the current index
	if(currentSegmentList && currentSegmentList.length > 0){originSegment = getSegmentByIndex(index,representation);if(originSegment){originAvailabilityTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation,originSegment.presentationStartTime);}else {originAvailabilityTime = index > 0?index * duration:timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation,requestedTime);}}else { // If no segments exist, but index > 0, it means that we switch to the other representation, so
	// we should proceed from this time.
	// Otherwise we should start from the beginning for static mpds or from the end (live edge) for dynamic mpds
	originAvailabilityTime = index > 0?index * duration:isDynamic?periodRelativeRange.end:periodRelativeRange.start;} // segment list should not be out of the availability window range
	start = Math.floor(Math.max(originAvailabilityTime - availabilityLowerLimit,periodRelativeRange.start) / duration);end = Math.floor(Math.min(start + availabilityUpperLimit / duration,periodRelativeRange.end / duration));range = {start:start,end:end};return range;}
	//# sourceMappingURL=SegmentsUtils.js.map


/***/ }),
/* 149 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var Segment=function Segment(){_classCallCheck(this,Segment);this.indexRange = null;this.index = null;this.mediaRange = null;this.media = null;this.duration = NaN; // this is the time that should be inserted into the media url
	this.replacementTime = null; // this is the number that should be inserted into the media url
	this.replacementNumber = NaN; // This is supposed to match the time encoded in the media Segment
	this.mediaStartTime = NaN; // When the source buffer timeOffset is set to MSETimeOffset this is the
	// time that will match the seekTarget and video.currentTime
	this.presentationStartTime = NaN; // Do not schedule this segment until
	this.availabilityStartTime = NaN; // Ignore and  discard this segment after
	this.availabilityEndTime = NaN; // The index of the segment inside the availability window
	this.availabilityIdx = NaN; // For dynamic mpd's, this is the wall clock time that the video
	// element currentTime should be presentationStartTime
	this.wallStartTime = NaN;this.representation = null;};exports["default"] = Segment;module.exports = exports["default"];
	//# sourceMappingURL=Segment.js.map


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _streamingConstantsConstants=__webpack_require__(49);var _streamingConstantsConstants2=_interopRequireDefault(_streamingConstantsConstants);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);var _constantsDashConstants=__webpack_require__(151);var _constantsDashConstants2=_interopRequireDefault(_constantsDashConstants);var _streamingVoDashJSError=__webpack_require__(62);var _streamingVoDashJSError2=_interopRequireDefault(_streamingVoDashJSError);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _voRepresentation=__webpack_require__(152);var _voRepresentation2=_interopRequireDefault(_voRepresentation);function RepresentationController(){var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var instance=undefined,realAdaptation=undefined,realAdaptationIndex=undefined,updating=undefined,voAvailableRepresentations=undefined,currentVoRepresentation=undefined,abrController=undefined,indexHandler=undefined,playbackController=undefined,metricsModel=undefined,domStorage=undefined,timelineConverter=undefined,dashManifestModel=undefined,dashMetrics=undefined,streamProcessor=undefined,manifestModel=undefined;function setup(){resetInitialSettings();eventBus.on(_coreEventsEvents2['default'].QUALITY_CHANGE_REQUESTED,onQualityChanged,instance);eventBus.on(_coreEventsEvents2['default'].REPRESENTATION_UPDATED,onRepresentationUpdated,instance);eventBus.on(_coreEventsEvents2['default'].WALLCLOCK_TIME_UPDATED,onWallclockTimeUpdated,instance);eventBus.on(_coreEventsEvents2['default'].BUFFER_LEVEL_UPDATED,onBufferLevelUpdated,instance);eventBus.on(_coreEventsEvents2['default'].MANIFEST_VALIDITY_CHANGED,onManifestValidityChanged,instance);}function setConfig(config){ // allow the abrController created in setup to be overidden
	if(config.abrController){abrController = config.abrController;}if(config.domStorage){domStorage = config.domStorage;}if(config.metricsModel){metricsModel = config.metricsModel;}if(config.dashMetrics){dashMetrics = config.dashMetrics;}if(config.dashManifestModel){dashManifestModel = config.dashManifestModel;}if(config.playbackController){playbackController = config.playbackController;}if(config.timelineConverter){timelineConverter = config.timelineConverter;}if(config.manifestModel){manifestModel = config.manifestModel;}if(config.streamProcessor){streamProcessor = config.streamProcessor;}}function initialize(){indexHandler = streamProcessor.getIndexHandler();}function getStreamProcessor(){return streamProcessor;}function getData(){return realAdaptation;}function getDataIndex(){return realAdaptationIndex;}function isUpdating(){return updating;}function getCurrentRepresentation(){return currentVoRepresentation;}function resetInitialSettings(){realAdaptation = null;realAdaptationIndex = -1;updating = true;voAvailableRepresentations = [];abrController = null;playbackController = null;metricsModel = null;domStorage = null;timelineConverter = null;dashManifestModel = null;dashMetrics = null;}function reset(){eventBus.off(_coreEventsEvents2['default'].QUALITY_CHANGE_REQUESTED,onQualityChanged,instance);eventBus.off(_coreEventsEvents2['default'].REPRESENTATION_UPDATED,onRepresentationUpdated,instance);eventBus.off(_coreEventsEvents2['default'].WALLCLOCK_TIME_UPDATED,onWallclockTimeUpdated,instance);eventBus.off(_coreEventsEvents2['default'].BUFFER_LEVEL_UPDATED,onBufferLevelUpdated,instance);eventBus.off(_coreEventsEvents2['default'].MANIFEST_VALIDITY_CHANGED,onManifestValidityChanged,instance);resetInitialSettings();}function updateData(newRealAdaptation,voAdaptation,type){var streamInfo=streamProcessor.getStreamInfo();var maxQuality=abrController.getTopQualityIndexFor(type,streamInfo.id);var minIdx=abrController.getMinAllowedIndexFor(type);var quality=undefined,averageThroughput=undefined;var bitrate=null;updating = true;eventBus.trigger(_coreEventsEvents2['default'].DATA_UPDATE_STARTED,{sender:this});voAvailableRepresentations = updateRepresentations(voAdaptation);if((realAdaptation === null || realAdaptation.id != newRealAdaptation.id) && type !== _streamingConstantsConstants2['default'].FRAGMENTED_TEXT){averageThroughput = abrController.getThroughputHistory().getAverageThroughput(type);bitrate = averageThroughput || abrController.getInitialBitrateFor(type,streamInfo);quality = abrController.getQualityForBitrate(streamProcessor.getMediaInfo(),bitrate);}else {quality = abrController.getQualityFor(type,streamInfo);}if(minIdx !== undefined && quality < minIdx){quality = minIdx;}if(quality > maxQuality){quality = maxQuality;}currentVoRepresentation = getRepresentationForQuality(quality);realAdaptation = newRealAdaptation;if(type !== _streamingConstantsConstants2['default'].VIDEO && type !== _streamingConstantsConstants2['default'].AUDIO && type !== _streamingConstantsConstants2['default'].FRAGMENTED_TEXT){updating = false;eventBus.trigger(_coreEventsEvents2['default'].DATA_UPDATE_COMPLETED,{sender:this,data:realAdaptation,currentRepresentation:currentVoRepresentation});return;}for(var i=0;i < voAvailableRepresentations.length;i++) {indexHandler.updateRepresentation(voAvailableRepresentations[i],true);}}function addRepresentationSwitch(){var now=new Date();var currentRepresentation=getCurrentRepresentation();var currentVideoTimeMs=playbackController.getTime() * 1000;metricsModel.addRepresentationSwitch(currentRepresentation.adaptation.type,now,currentVideoTimeMs,currentRepresentation.id);}function addDVRMetric(){var streamInfo=streamProcessor.getStreamInfo();var manifestInfo=streamInfo?streamInfo.manifestInfo:null;var isDynamic=manifestInfo?manifestInfo.isDynamic:null;var range=timelineConverter.calcSegmentAvailabilityRange(currentVoRepresentation,isDynamic);metricsModel.addDVRInfo(streamProcessor.getType(),playbackController.getTime(),manifestInfo,range);}function getRepresentationForQuality(quality){return quality === null || quality === undefined || quality >= voAvailableRepresentations.length?null:voAvailableRepresentations[quality];}function getQualityForRepresentation(voRepresentation){return voAvailableRepresentations.indexOf(voRepresentation);}function isAllRepresentationsUpdated(){for(var i=0,ln=voAvailableRepresentations.length;i < ln;i++) {var segmentInfoType=voAvailableRepresentations[i].segmentInfoType;if(voAvailableRepresentations[i].segmentAvailabilityRange === null || !_voRepresentation2['default'].hasInitialization(voAvailableRepresentations[i]) || (segmentInfoType === _constantsDashConstants2['default'].SEGMENT_BASE || segmentInfoType === _constantsDashConstants2['default'].BASE_URL) && !voAvailableRepresentations[i].segments){return false;}}return true;}function updateRepresentations(voAdaptation){var voReps=undefined;realAdaptationIndex = dashManifestModel.getIndexForAdaptation(realAdaptation,voAdaptation.period.mpd.manifest,voAdaptation.period.index);voReps = dashManifestModel.getRepresentationsForAdaptation(voAdaptation);return voReps;}function updateAvailabilityWindow(isDynamic){var voRepresentation=undefined;for(var i=0,ln=voAvailableRepresentations.length;i < ln;i++) {voRepresentation = voAvailableRepresentations[i];voRepresentation.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(voRepresentation,isDynamic);}}function resetAvailabilityWindow(){voAvailableRepresentations.forEach(function(rep){rep.segmentAvailabilityRange = null;});}function postponeUpdate(postponeTimePeriod){var delay=postponeTimePeriod;var update=function update(){if(isUpdating())return;updating = true;eventBus.trigger(_coreEventsEvents2['default'].DATA_UPDATE_STARTED,{sender:instance}); // clear the segmentAvailabilityRange for all reps.
	// this ensures all are updated before the live edge search starts
	resetAvailabilityWindow();for(var i=0;i < voAvailableRepresentations.length;i++) {indexHandler.updateRepresentation(voAvailableRepresentations[i],true);}};updating = false;eventBus.trigger(_coreEventsEvents2['default'].AST_IN_FUTURE,{delay:delay});setTimeout(update,delay);}function onRepresentationUpdated(e){if(e.sender.getStreamProcessor() !== streamProcessor || !isUpdating())return;var r=e.representation;var streamMetrics=metricsModel.getMetricsFor(_streamingConstantsConstants2['default'].STREAM);var metrics=metricsModel.getMetricsFor(getCurrentRepresentation().adaptation.type);var manifestUpdateInfo=dashMetrics.getCurrentManifestUpdate(streamMetrics);var alreadyAdded=false;var postponeTimePeriod=0;var repInfo=undefined,err=undefined,repSwitch=undefined;if(r.adaptation.period.mpd.manifest.type === _constantsDashConstants2['default'].DYNAMIC && !r.adaptation.period.mpd.manifest.ignorePostponeTimePeriod){var segmentAvailabilityTimePeriod=r.segmentAvailabilityRange.end - r.segmentAvailabilityRange.start; // We must put things to sleep unless till e.g. the startTime calculation in ScheduleController.onLiveEdgeSearchCompleted fall after the segmentAvailabilityRange.start
	var liveDelay=playbackController.computeLiveDelay(currentVoRepresentation.segmentDuration,streamProcessor.getStreamInfo().manifestInfo.DVRWindowSize);postponeTimePeriod = (liveDelay - segmentAvailabilityTimePeriod) * 1000;}if(postponeTimePeriod > 0){addDVRMetric();postponeUpdate(postponeTimePeriod);err = new _streamingVoDashJSError2['default'](_coreErrorsErrors2['default'].SEGMENTS_UPDATE_FAILED_ERROR_CODE,_coreErrorsErrors2['default'].SEGMENTS_UPDATE_FAILED_ERROR_MESSAGE);eventBus.trigger(_coreEventsEvents2['default'].DATA_UPDATE_COMPLETED,{sender:this,data:realAdaptation,currentRepresentation:currentVoRepresentation,error:err});return;}if(manifestUpdateInfo){for(var i=0;i < manifestUpdateInfo.representationInfo.length;i++) {repInfo = manifestUpdateInfo.representationInfo[i];if(repInfo.index === r.index && repInfo.mediaType === streamProcessor.getType()){alreadyAdded = true;break;}}if(!alreadyAdded){metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo,r.id,r.index,r.adaptation.period.index,streamProcessor.getType(),r.presentationTimeOffset,r.startNumber,r.segmentInfoType);}}if(isAllRepresentationsUpdated()){updating = false;abrController.setPlaybackQuality(streamProcessor.getType(),streamProcessor.getStreamInfo(),getQualityForRepresentation(currentVoRepresentation));metricsModel.updateManifestUpdateInfo(manifestUpdateInfo,{latency:currentVoRepresentation.segmentAvailabilityRange.end - playbackController.getTime()});repSwitch = dashMetrics.getCurrentRepresentationSwitch(metrics);if(!repSwitch){addRepresentationSwitch();}eventBus.trigger(_coreEventsEvents2['default'].DATA_UPDATE_COMPLETED,{sender:this,data:realAdaptation,currentRepresentation:currentVoRepresentation});}}function onWallclockTimeUpdated(e){if(e.isDynamic){updateAvailabilityWindow(e.isDynamic);}}function onBufferLevelUpdated(e){if(e.sender.getStreamProcessor() !== streamProcessor)return;var manifest=manifestModel.getValue();if(!manifest.doNotUpdateDVRWindowOnBufferUpdated){addDVRMetric();}}function onQualityChanged(e){if(e.mediaType !== streamProcessor.getType() || streamProcessor.getStreamInfo().id !== e.streamInfo.id)return;if(e.oldQuality !== e.newQuality){currentVoRepresentation = getRepresentationForQuality(e.newQuality);var bitrate=abrController.getThroughputHistory().getAverageThroughput(e.mediaType);if(!isNaN(bitrate)){domStorage.setSavedBitrateSettings(e.mediaType,bitrate);}addRepresentationSwitch();}}function onManifestValidityChanged(e){if(e.newDuration){var representation=getCurrentRepresentation();if(representation && representation.adaptation.period){var period=representation.adaptation.period;period.duration = e.newDuration;}}}instance = {initialize:initialize,setConfig:setConfig,getData:getData,getDataIndex:getDataIndex,isUpdating:isUpdating,updateData:updateData,getStreamProcessor:getStreamProcessor,getCurrentRepresentation:getCurrentRepresentation,getRepresentationForQuality:getRepresentationForQuality,reset:reset};setup();return instance;}RepresentationController.__dashjs_factory_name = 'RepresentationController';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(RepresentationController);module.exports = exports['default'];
	//# sourceMappingURL=RepresentationController.js.map


/***/ }),
/* 151 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * Dash constants declaration
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _createClass=(function(){function defineProperties(target,props){for(var i=0;i < props.length;i++) {var descriptor=props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if('value' in descriptor)descriptor.writable = true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};})();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var DashConstants=(function(){_createClass(DashConstants,[{key:'init',value:function init(){this.BASE_URL = 'BaseURL';this.SEGMENT_BASE = 'SegmentBase';this.SEGMENT_TEMPLATE = 'SegmentTemplate';this.SEGMENT_LIST = 'SegmentList';this.SEGMENT_URL = 'SegmentURL';this.SEGMENT_TIMELINE = 'SegmentTimeline';this.SEGMENT_PROFILES = 'segmentProfiles';this.ADAPTATION_SET = 'AdaptationSet';this.REPRESENTATION = 'Representation';this.REPRESENTATION_INDEX = 'RepresentationIndex';this.SUB_REPRESENTATION = 'SubRepresentation';this.INITIALIZATION = 'Initialization';this.INITIALIZATION_MINUS = 'initialization';this.MPD = 'MPD';this.PERIOD = 'Period';this.ASSET_IDENTIFIER = 'AssetIdentifier';this.EVENT_STREAM = 'EventStream';this.ID = 'id';this.PROFILES = 'profiles';this.SERVICE_LOCATION = 'serviceLocation';this.RANGE = 'range';this.INDEX = 'index';this.MEDIA = 'media';this.BYTE_RANGE = 'byteRange';this.INDEX_RANGE = 'indexRange';this.MEDIA_RANGE = 'mediaRange';this.VALUE = 'value';this.CONTENT_TYPE = 'contentType';this.MIME_TYPE = 'mimeType';this.BITSTREAM_SWITCHING = 'BitstreamSwitching';this.BITSTREAM_SWITCHING_MINUS = 'bitstreamSwitching';this.CODECS = 'codecs';this.DEPENDENCY_ID = 'dependencyId';this.MEDIA_STREAM_STRUCTURE_ID = 'mediaStreamStructureId';this.METRICS = 'Metrics';this.METRICS_MINUS = 'metrics';this.REPORTING = 'Reporting';this.WIDTH = 'width';this.HEIGHT = 'height';this.SAR = 'sar';this.FRAMERATE = 'frameRate';this.AUDIO_SAMPLING_RATE = 'audioSamplingRate';this.MAXIMUM_SAP_PERIOD = 'maximumSAPPeriod';this.START_WITH_SAP = 'startWithSAP';this.MAX_PLAYOUT_RATE = 'maxPlayoutRate';this.CODING_DEPENDENCY = 'codingDependency';this.SCAN_TYPE = 'scanType';this.FRAME_PACKING = 'FramePacking';this.AUDIO_CHANNEL_CONFIGURATION = 'AudioChannelConfiguration';this.CONTENT_PROTECTION = 'ContentProtection';this.ESSENTIAL_PROPERTY = 'EssentialProperty';this.SUPPLEMENTAL_PROPERTY = 'SupplementalProperty';this.INBAND_EVENT_STREAM = 'InbandEventStream';this.ACCESSIBILITY = 'Accessibility';this.ROLE = 'Role';this.RATING = 'Rating';this.CONTENT_COMPONENT = 'ContentComponent';this.SUBSET = 'Subset';this.LANG = 'lang';this.VIEWPOINT = 'Viewpoint';this.ROLE_ASARRAY = 'Role_asArray';this.ACCESSIBILITY_ASARRAY = 'Accessibility_asArray';this.AUDIOCHANNELCONFIGURATION_ASARRAY = 'AudioChannelConfiguration_asArray';this.CONTENTPROTECTION_ASARRAY = 'ContentProtection_asArray';this.MAIN = 'main';this.DYNAMIC = 'dynamic';this.MEDIA_PRESENTATION_DURATION = 'mediaPresentationDuration';this.MINIMUM_UPDATE_PERIOD = 'minimumUpdatePeriod';this.CODEC_PRIVATE_DATA = 'codecPrivateData';this.BANDWITH = 'bandwidth';this.SOURCE_URL = 'sourceURL';this.TIMESCALE = 'timescale';this.DURATION = 'duration';this.START_NUMBER = 'startNumber';this.PRESENTATION_TIME_OFFSET = 'presentationTimeOffset';this.AVAILABILITY_START_TIME = 'availabilityStartTime';this.AVAILABILITY_END_TIME = 'availabilityEndTime';this.TIMESHIFT_BUFFER_DEPTH = 'timeShiftBufferDepth';this.MAX_SEGMENT_DURATION = 'maxSegmentDuration';this.PRESENTATION_TIME = 'presentationTime';this.MIN_BUFFER_TIME = 'minBufferTime';this.MAX_SUBSEGMENT_DURATION = 'maxSubsegmentDuration';this.START = 'start';this.AVAILABILITY_TIME_OFFSET = 'availabilityTimeOffset';this.AVAILABILITY_TIME_COMPLETE = 'availabilityTimeComplete';this.CENC_DEFAULT_KID = 'cenc:default_KID';this.DVB_PRIORITY = 'dvb:priority';this.DVB_WEIGHT = 'dvb:weight';}}]);function DashConstants(){_classCallCheck(this,DashConstants);this.init();}return DashConstants;})();var constants=new DashConstants();exports['default'] = constants;module.exports = exports['default'];
	//# sourceMappingURL=DashConstants.js.map


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _createClass=(function(){function defineProperties(target,props){for(var i=0;i < props.length;i++) {var descriptor=props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if('value' in descriptor)descriptor.writable = true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};})();function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var _constantsDashConstants=__webpack_require__(151);var _constantsDashConstants2=_interopRequireDefault(_constantsDashConstants);var Representation=(function(){function Representation(){_classCallCheck(this,Representation);this.id = null;this.index = -1;this.adaptation = null;this.segmentInfoType = null;this.initialization = null;this.codecs = null;this.codecPrivateData = null;this.segmentDuration = NaN;this.timescale = 1;this.startNumber = 1;this.indexRange = null;this.range = null;this.presentationTimeOffset = 0; // Set the source buffer timeOffset to this
	this.MSETimeOffset = NaN;this.segmentAvailabilityRange = null;this.availableSegmentsNumber = 0;this.bandwidth = NaN;this.width = NaN;this.height = NaN;this.scanType = null;this.maxPlayoutRate = NaN;this.availabilityTimeOffset = 0;this.availabilityTimeComplete = true;}_createClass(Representation,null,[{key:'hasInitialization',value:function hasInitialization(r){return r.initialization !== null || r.range !== null;}},{key:'hasSegments',value:function hasSegments(r){return r.segmentInfoType !== _constantsDashConstants2['default'].BASE_URL && r.segmentInfoType !== _constantsDashConstants2['default'].SEGMENT_BASE && !r.indexRange;}}]);return Representation;})();exports['default'] = Representation;module.exports = exports['default'];
	//# sourceMappingURL=Representation.js.map


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _streamingConstantsConstants=__webpack_require__(49);var _streamingConstantsConstants2=_interopRequireDefault(_streamingConstantsConstants);var _constantsDashConstants=__webpack_require__(151);var _constantsDashConstants2=_interopRequireDefault(_constantsDashConstants);var _streamingVoFragmentRequest=__webpack_require__(59);var _streamingVoFragmentRequest2=_interopRequireDefault(_streamingVoFragmentRequest);var _streamingVoDashJSError=__webpack_require__(62);var _streamingVoDashJSError2=_interopRequireDefault(_streamingVoDashJSError);var _streamingVoMetricsHTTPRequest=__webpack_require__(65);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _streamingUtilsURLUtils=__webpack_require__(154);var _streamingUtilsURLUtils2=_interopRequireDefault(_streamingUtilsURLUtils);var _voRepresentation=__webpack_require__(152);var _voRepresentation2=_interopRequireDefault(_voRepresentation);var _utilsSegmentsUtils=__webpack_require__(148);var _utilsSegmentsGetter=__webpack_require__(155);var _utilsSegmentsGetter2=_interopRequireDefault(_utilsSegmentsGetter);var _SegmentBaseLoader=__webpack_require__(159);var _SegmentBaseLoader2=_interopRequireDefault(_SegmentBaseLoader);var _WebmSegmentBaseLoader=__webpack_require__(164);var _WebmSegmentBaseLoader2=_interopRequireDefault(_WebmSegmentBaseLoader);function DashHandler(config){config = config || {};var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var urlUtils=(0,_streamingUtilsURLUtils2['default'])(context).getInstance();var segmentBaseLoader=undefined;var timelineConverter=config.timelineConverter;var dashMetrics=config.dashMetrics;var metricsModel=config.metricsModel;var mediaPlayerModel=config.mediaPlayerModel;var errHandler=config.errHandler;var baseURLController=config.baseURLController;var instance=undefined,logger=undefined,index=undefined,requestedTime=undefined,currentTime=undefined,streamProcessor=undefined,segmentsGetter=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);resetInitialSettings();segmentBaseLoader = isWebM(config.mimeType)?(0,_WebmSegmentBaseLoader2['default'])(context).getInstance():(0,_SegmentBaseLoader2['default'])(context).getInstance();segmentBaseLoader.setConfig({baseURLController:baseURLController,metricsModel:metricsModel,mediaPlayerModel:mediaPlayerModel,errHandler:errHandler});eventBus.on(_coreEventsEvents2['default'].INITIALIZATION_LOADED,onInitializationLoaded,instance);eventBus.on(_coreEventsEvents2['default'].SEGMENTS_LOADED,onSegmentsLoaded,instance);}function isWebM(mimeType){var type=mimeType.split('/')[1];return 'webm' === type.toLowerCase();}function initialize(StreamProcessor){streamProcessor = StreamProcessor;segmentBaseLoader.initialize();segmentsGetter = (0,_utilsSegmentsGetter2['default'])(context).create(config,isDynamic());}function getType(){return streamProcessor?streamProcessor.getType():null;}function isDynamic(){var streamInfo=streamProcessor?streamProcessor.getStreamInfo():null;return streamInfo?streamInfo.manifestInfo.isDynamic:null;}function getMediaInfo(){return streamProcessor?streamProcessor.getMediaInfo():null;}function getStreamProcessor(){return streamProcessor;}function setCurrentTime(value){currentTime = value;}function getCurrentTime(){return currentTime;}function resetIndex(){index = -1;}function resetInitialSettings(){resetIndex();currentTime = 0;requestedTime = null;streamProcessor = null;segmentsGetter = null;}function reset(){resetInitialSettings();eventBus.off(_coreEventsEvents2['default'].INITIALIZATION_LOADED,onInitializationLoaded,instance);eventBus.off(_coreEventsEvents2['default'].SEGMENTS_LOADED,onSegmentsLoaded,instance);}function setRequestUrl(request,destination,representation){var baseURL=baseURLController.resolve(representation.path);var url=undefined,serviceLocation=undefined;if(!baseURL || destination === baseURL.url || !urlUtils.isRelative(destination)){url = destination;}else {url = baseURL.url;serviceLocation = baseURL.serviceLocation;if(destination){url = urlUtils.resolve(destination,url);}}if(urlUtils.isRelative(url)){return false;}request.url = url;request.serviceLocation = serviceLocation;return true;}function generateInitRequest(representation,mediaType){var request=new _streamingVoFragmentRequest2['default']();var period=representation.adaptation.period;var presentationStartTime=period.start;var isDynamicStream=isDynamic();request.mediaType = mediaType;request.type = _streamingVoMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE;request.range = representation.range;request.availabilityStartTime = timelineConverter.calcAvailabilityStartTimeFromPresentationTime(presentationStartTime,period.mpd,isDynamicStream);request.availabilityEndTime = timelineConverter.calcAvailabilityEndTimeFromPresentationTime(presentationStartTime + period.duration,period.mpd,isDynamicStream);request.quality = representation.index;request.mediaInfo = getMediaInfo();request.representationId = representation.id;if(setRequestUrl(request,representation.initialization,representation)){return request;}}function getInitRequest(representation){if(!representation)return null;var request=generateInitRequest(representation,getType());return request;}function isMediaFinished(representation){var isFinished=false;var isDynamicStream=isDynamic();if(!isDynamicStream && index === representation.availableSegmentsNumber){isFinished = true;}else {var seg=(0,_utilsSegmentsUtils.getSegmentByIndex)(index,representation);if(seg){var time=parseFloat((seg.presentationStartTime - representation.adaptation.period.start).toFixed(5));var duration=representation.adaptation.period.duration;logger.debug(representation.segmentInfoType + ': ' + time + ' / ' + duration);isFinished = representation.segmentInfoType === _constantsDashConstants2['default'].SEGMENT_TIMELINE && isDynamicStream?false:time >= duration;}else {logger.debug('isMediaFinished - no segment found');}}return isFinished;}function updateSegments(voRepresentation){segmentsGetter.getSegments(voRepresentation,requestedTime,index,onSegmentListUpdated);}function onSegmentListUpdated(voRepresentation,segments){voRepresentation.segments = segments;if(segments && segments.length > 0){if(isDynamic()){var lastSegment=segments[segments.length - 1];var liveEdge=lastSegment.presentationStartTime;var metrics=metricsModel.getMetricsFor(_streamingConstantsConstants2['default'].STREAM); // the last segment is the Expected, not calculated, live edge.
	timelineConverter.setExpectedLiveEdge(liveEdge);metricsModel.updateManifestUpdateInfo(dashMetrics.getCurrentManifestUpdate(metrics),{presentationStartTime:liveEdge});}}}function updateSegmentList(voRepresentation){if(!voRepresentation){throw new Error('no representation');}voRepresentation.segments = null;updateSegments(voRepresentation);}function updateRepresentation(voRepresentation,keepIdx){var hasInitialization=_voRepresentation2['default'].hasInitialization(voRepresentation);var hasSegments=_voRepresentation2['default'].hasSegments(voRepresentation);var error=undefined;if(!voRepresentation.segmentDuration && !voRepresentation.segments){updateSegmentList(voRepresentation);}voRepresentation.segmentAvailabilityRange = timelineConverter.calcSegmentAvailabilityRange(voRepresentation,isDynamic());if(voRepresentation.segmentAvailabilityRange.end < voRepresentation.segmentAvailabilityRange.start && !voRepresentation.useCalculatedLiveEdgeTime){error = new _streamingVoDashJSError2['default'](_coreErrorsErrors2['default'].SEGMENTS_UNAVAILABLE_ERROR_CODE,_coreErrorsErrors2['default'].SEGMENTS_UNAVAILABLE_ERROR_MESSAGE,{availabilityDelay:voRepresentation.segmentAvailabilityRange.start - voRepresentation.segmentAvailabilityRange.end});eventBus.trigger(_coreEventsEvents2['default'].REPRESENTATION_UPDATED,{sender:this,representation:voRepresentation,error:error});return;}if(!keepIdx){resetIndex();}if(voRepresentation.segmentDuration){updateSegmentList(voRepresentation);}if(!hasInitialization){segmentBaseLoader.loadInitialization(voRepresentation);}if(!hasSegments){segmentBaseLoader.loadSegments(voRepresentation,getType(),voRepresentation.indexRange);}if(hasInitialization && hasSegments){eventBus.trigger(_coreEventsEvents2['default'].REPRESENTATION_UPDATED,{sender:this,representation:voRepresentation});}}function getIndexForSegments(time,representation,timeThreshold){var segments=representation.segments;var ln=segments?segments.length:null;var idx=-1;var epsilon=undefined,frag=undefined,ft=undefined,fd=undefined,i=undefined;if(segments && ln > 0){ // In case timeThreshold is not provided, let's use the default value set in MediaPlayerModel
	timeThreshold = timeThreshold === undefined || timeThreshold === null?mediaPlayerModel.getSegmentOverlapToleranceTime():timeThreshold;for(i = 0;i < ln;i++) {frag = segments[i];ft = frag.presentationStartTime;fd = frag.duration; // In case timeThreshold is null, set epsilon to half the fragment duration
	epsilon = timeThreshold === undefined || timeThreshold === null?fd / 2:timeThreshold;if(time + epsilon >= ft && time - epsilon < ft + fd){idx = frag.availabilityIdx;break;}}}return idx;}function getRequestForSegment(segment){if(segment === null || segment === undefined){return null;}var request=new _streamingVoFragmentRequest2['default']();var representation=segment.representation;var bandwidth=representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].bandwidth;var url=segment.media;url = (0,_utilsSegmentsUtils.replaceTokenForTemplate)(url,'Number',segment.replacementNumber);url = (0,_utilsSegmentsUtils.replaceTokenForTemplate)(url,'Time',segment.replacementTime);url = (0,_utilsSegmentsUtils.replaceTokenForTemplate)(url,'Bandwidth',bandwidth);url = (0,_utilsSegmentsUtils.replaceIDForTemplate)(url,representation.id);url = (0,_utilsSegmentsUtils.unescapeDollarsInTemplate)(url);request.mediaType = getType();request.type = _streamingVoMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE;request.range = segment.mediaRange;request.startTime = segment.presentationStartTime;request.duration = segment.duration;request.timescale = representation.timescale;request.availabilityStartTime = segment.availabilityStartTime;request.availabilityEndTime = segment.availabilityEndTime;request.wallStartTime = segment.wallStartTime;request.quality = representation.index;request.index = segment.availabilityIdx;request.mediaInfo = getMediaInfo();request.adaptationIndex = representation.adaptation.index;request.representationId = representation.id;if(setRequestUrl(request,url,representation)){return request;}}function getSegmentRequestForTime(representation,time,options){var request=undefined,segment=undefined,finished=undefined;if(!representation){return null;}var type=getType();var idx=index;var keepIdx=options?options.keepIdx:false;var timeThreshold=options?options.timeThreshold:null;var ignoreIsFinished=options && options.ignoreIsFinished?true:false;if(requestedTime !== time){ // When playing at live edge with 0 delay we may loop back with same time and index until it is available. Reduces verboseness of logs.
	requestedTime = time;logger.debug('Getting the request for ' + type + ' time : ' + time);}updateSegments(representation);index = getIndexForSegments(time,representation,timeThreshold); //Index may be -1 if getSegments needs to update again.  So after getSegments is called and updated then try to get index again.
	if(index < 0){updateSegments(representation);index = getIndexForSegments(time,representation,timeThreshold);}if(index > 0){logger.debug('Index for ' + type + ' time ' + time + ' is ' + index);}finished = !ignoreIsFinished?isMediaFinished(representation):false;if(finished){request = new _streamingVoFragmentRequest2['default']();request.action = _streamingVoFragmentRequest2['default'].ACTION_COMPLETE;request.index = index;request.mediaType = type;request.mediaInfo = getMediaInfo();logger.debug('Signal complete in getSegmentRequestForTime -',type);}else {segment = (0,_utilsSegmentsUtils.getSegmentByIndex)(index,representation);request = getRequestForSegment(segment);}if(keepIdx && idx >= 0){index = representation.segmentInfoType === _constantsDashConstants2['default'].SEGMENT_TIMELINE && isDynamic()?index:idx;}return request;}function getNextSegmentRequest(representation){var request=undefined,segment=undefined,finished=undefined;if(!representation || index === -1){return null;}var type=getType();var isDynamicStream=isDynamic();requestedTime = null;index++;logger.debug('Getting the next request at index: ' + index + ', type: ' + type); // check that there is a segment in this index. If none, update segments and wait for next time loop is called
	var seg=(0,_utilsSegmentsUtils.getSegmentByIndex)(index,representation);if(!seg && isDynamicStream){logger.debug('No segment found at index: ' + index + '. Wait for next loop');updateSegments(representation);index--;return null;}finished = isMediaFinished(representation);if(finished){request = new _streamingVoFragmentRequest2['default']();request.action = _streamingVoFragmentRequest2['default'].ACTION_COMPLETE;request.index = index;request.mediaType = type;request.mediaInfo = getMediaInfo();logger.debug('Signal complete -',type);}else {updateSegments(representation);segment = (0,_utilsSegmentsUtils.getSegmentByIndex)(index,representation);request = getRequestForSegment(segment);if(!segment && isDynamicStream){ /*
	                 Sometimes when playing dynamic streams with 0 fragment delay at live edge we ask for
	                 an index before it is available so we decrement index back and send null request
	                 which triggers the validate loop to rerun and the next time the segment should be
	                 available.
	                 */index--;}}return request;}function onInitializationLoaded(e){var representation=e.representation;if(!representation.segments)return;eventBus.trigger(_coreEventsEvents2['default'].REPRESENTATION_UPDATED,{sender:this,representation:representation});}function onSegmentsLoaded(e){if(e.error || getType() !== e.mediaType)return;var fragments=e.segments;var representation=e.representation;var segments=[];var count=0;var i=undefined,len=undefined,s=undefined,seg=undefined;for(i = 0,len = fragments.length;i < len;i++) {s = fragments[i];seg = (0,_utilsSegmentsUtils.getTimeBasedSegment)(timelineConverter,isDynamic(),representation,s.startTime,s.duration,s.timescale,s.media,s.mediaRange,count);segments.push(seg);seg = null;count++;}representation.segmentAvailabilityRange = {start:segments[0].presentationStartTime,end:segments[len - 1].presentationStartTime};representation.availableSegmentsNumber = len;onSegmentListUpdated(representation,segments);if(!_voRepresentation2['default'].hasInitialization(representation))return;eventBus.trigger(_coreEventsEvents2['default'].REPRESENTATION_UPDATED,{sender:this,representation:representation});}instance = {initialize:initialize,getStreamProcessor:getStreamProcessor,getInitRequest:getInitRequest,getSegmentRequestForTime:getSegmentRequestForTime,getNextSegmentRequest:getNextSegmentRequest,updateRepresentation:updateRepresentation,updateSegmentList:updateSegmentList,setCurrentTime:setCurrentTime,getCurrentTime:getCurrentTime,reset:reset,resetIndex:resetIndex};setup();return instance;}DashHandler.__dashjs_factory_name = 'DashHandler';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(DashHandler);module.exports = exports['default'];
	//# sourceMappingURL=DashHandler.js.map


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker); /**
	 * @module URLUtils
	 * @description Provides utility functions for operating on URLs.
	 * Initially this is simply a method to determine the Base URL of a URL, but
	 * should probably include other things provided all over the place such as
	 * determining whether a URL is relative/absolute, resolving two paths etc.
	 */function URLUtils(){var resolveFunction=undefined;var schemeRegex=/^[a-z][a-z0-9+\-.]*:/i;var httpUrlRegex=/^https?:\/\//i;var httpsUrlRegex=/^https:\/\//i;var originRegex=/^([a-z][a-z0-9+\-.]*:\/\/[^\/]+)\/?/i; /**
	     * Resolves a url given an optional base url
	     * Uses window.URL to do the resolution.
	     *
	     * @param {string} url
	     * @param {string} [baseUrl]
	     * @return {string}
	     * @memberof module:URLUtils
	     * @instance
	     * @private
	     */var nativeURLResolver=function nativeURLResolver(url,baseUrl){try{ // this will throw if baseurl is undefined, invalid etc
	return new window.URL(url,baseUrl).toString();}catch(e) {return url;}}; /**
	     * Resolves a url given an optional base url
	     * Does not resolve ./, ../ etc but will do enough to construct something
	     * which will satisfy XHR etc when window.URL is not available ie
	     * IE11/node etc.
	     *
	     * @param {string} url
	     * @param {string} [baseUrl]
	     * @return {string}
	     * @memberof module:URLUtils
	     * @instance
	     * @private
	     */var dumbURLResolver=function dumbURLResolver(url,baseUrl){var baseUrlParseFunc=parseBaseUrl;if(!baseUrl){return url;}if(!isRelative(url)){return url;}if(isPathAbsolute(url)){baseUrlParseFunc = parseOrigin;}if(isSchemeRelative(url)){baseUrlParseFunc = parseScheme;}var base=baseUrlParseFunc(baseUrl);var joinChar=base.charAt(base.length - 1) !== '/' && url.charAt(0) !== '/'?'/':'';return [base,url].join(joinChar);};function setup(){try{var u=new window.URL('x','http://y'); //jshint ignore:line
	resolveFunction = nativeURLResolver;}catch(e) { // must be IE11/Node etc
	}finally {resolveFunction = resolveFunction || dumbURLResolver;}} /**
	     * Returns a string that contains the Base URL of a URL, if determinable.
	     * @param {string} url - full url
	     * @return {string}
	     * @memberof module:URLUtils
	     * @instance
	     */function parseBaseUrl(url){var slashIndex=url.indexOf('/');var lastSlashIndex=url.lastIndexOf('/');if(slashIndex !== -1){ // if there is only '//'
	if(lastSlashIndex === slashIndex + 1){return url;}if(url.indexOf('?') !== -1){url = url.substring(0,url.indexOf('?'));}return url.substring(0,lastSlashIndex + 1);}return '';} /**
	     * Returns a string that contains the scheme and origin of a URL,
	     * if determinable.
	     * @param {string} url - full url
	     * @return {string}
	     * @memberof module:URLUtils
	     * @instance
	     */function parseOrigin(url){var matches=url.match(originRegex);if(matches){return matches[1];}return '';} /**
	     * Returns a string that contains the scheme of a URL, if determinable.
	     * @param {string} url - full url
	     * @return {string}
	     * @memberof module:URLUtils
	     * @instance
	     */function parseScheme(url){var matches=url.match(schemeRegex);if(matches){return matches[0];}return '';} /**
	     * Determines whether the url is relative.
	     * @return {bool}
	     * @param {string} url
	     * @memberof module:URLUtils
	     * @instance
	     */function isRelative(url){return !schemeRegex.test(url);} /**
	     * Determines whether the url is path-absolute.
	     * @return {bool}
	     * @param {string} url
	     * @memberof module:URLUtils
	     * @instance
	     */function isPathAbsolute(url){return isRelative(url) && url.charAt(0) === '/';} /**
	     * Determines whether the url is scheme-relative.
	     * @return {bool}
	     * @param {string} url
	     * @memberof module:URLUtils
	     * @instance
	     */function isSchemeRelative(url){return url.indexOf('//') === 0;} /**
	     * Determines whether the url is an HTTP-URL as defined in ISO/IEC
	     * 23009-1:2014 3.1.15. ie URL with a fixed scheme of http or https
	     * @return {bool}
	     * @param {string} url
	     * @memberof module:URLUtils
	     * @instance
	     */function isHTTPURL(url){return httpUrlRegex.test(url);} /**
	     * Determines whether the supplied url has https scheme
	     * @return {bool}
	     * @param {string} url
	     * @memberof module:URLUtils
	     * @instance
	     */function isHTTPS(url){return httpsUrlRegex.test(url);} /**
	     * Resolves a url given an optional base url
	     * @return {string}
	     * @param {string} url
	     * @param {string} [baseUrl]
	     * @memberof module:URLUtils
	     * @instance
	     */function resolve(url,baseUrl){return resolveFunction(url,baseUrl);}setup();var instance={parseBaseUrl:parseBaseUrl,parseOrigin:parseOrigin,parseScheme:parseScheme,isRelative:isRelative,isPathAbsolute:isPathAbsolute,isSchemeRelative:isSchemeRelative,isHTTPURL:isHTTPURL,isHTTPS:isHTTPS,resolve:resolve};return instance;}URLUtils.__dashjs_factory_name = 'URLUtils';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(URLUtils);module.exports = exports['default'];
	//# sourceMappingURL=URLUtils.js.map


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsDashConstants=__webpack_require__(151);var _constantsDashConstants2=_interopRequireDefault(_constantsDashConstants);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _TimelineSegmentsGetter=__webpack_require__(156);var _TimelineSegmentsGetter2=_interopRequireDefault(_TimelineSegmentsGetter);var _TemplateSegmentsGetter=__webpack_require__(157);var _TemplateSegmentsGetter2=_interopRequireDefault(_TemplateSegmentsGetter);var _ListSegmentsGetter=__webpack_require__(158);var _ListSegmentsGetter2=_interopRequireDefault(_ListSegmentsGetter);function SegmentsGetter(config,isDynamic){var context=this.context;var instance=undefined,timelineSegmentsGetter=undefined,templateSegmentsGetter=undefined,listSegmentsGetter=undefined;function setup(){timelineSegmentsGetter = (0,_TimelineSegmentsGetter2['default'])(context).create(config,isDynamic);templateSegmentsGetter = (0,_TemplateSegmentsGetter2['default'])(context).create(config,isDynamic);listSegmentsGetter = (0,_ListSegmentsGetter2['default'])(context).create(config,isDynamic);} // availabilityUpperLimit parameter is not used directly by any dash.js function, but it is needed as a helper
	// for other developments that extend dash.js, and provide their own transport layers (ex: P2P transport)
	function getSegments(representation,requestedTime,index,onSegmentListUpdatedCallback,availabilityUpperLimit){var segments=undefined;var type=representation.segmentInfoType; // Already figure out the segments.
	if(type === _constantsDashConstants2['default'].SEGMENT_BASE || type === _constantsDashConstants2['default'].BASE_URL || !isSegmentListUpdateRequired(representation,index)){segments = representation.segments;}else {if(type === _constantsDashConstants2['default'].SEGMENT_TIMELINE){segments = timelineSegmentsGetter.getSegments(representation,requestedTime,index,availabilityUpperLimit);}else if(type === _constantsDashConstants2['default'].SEGMENT_TEMPLATE){segments = templateSegmentsGetter.getSegments(representation,requestedTime,index,availabilityUpperLimit);}else if(type === _constantsDashConstants2['default'].SEGMENT_LIST){segments = listSegmentsGetter.getSegments(representation,requestedTime,index,availabilityUpperLimit);}if(onSegmentListUpdatedCallback){onSegmentListUpdatedCallback(representation,segments);}}}function isSegmentListUpdateRequired(representation,index){var segments=representation.segments;var updateRequired=false;var upperIdx=undefined,lowerIdx=undefined;if(!segments || segments.length === 0){updateRequired = true;}else {lowerIdx = segments[0].availabilityIdx;upperIdx = segments[segments.length - 1].availabilityIdx;updateRequired = index < lowerIdx || index > upperIdx;}return updateRequired;}instance = {getSegments:getSegments};setup();return instance;}SegmentsGetter.__dashjs_factory_name = 'SegmentsGetter';var factory=_coreFactoryMaker2['default'].getClassFactory(SegmentsGetter);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=SegmentsGetter.js.map


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _streamingConstantsConstants=__webpack_require__(49);var _streamingConstantsConstants2=_interopRequireDefault(_streamingConstantsConstants);var _SegmentsUtils=__webpack_require__(148);function TimelineSegmentsGetter(config,isDynamic){config = config || {};var timelineConverter=config.timelineConverter;var instance=undefined;function checkConfig(){if(!timelineConverter || !timelineConverter.hasOwnProperty('calcMediaTimeFromPresentationTime') || !timelineConverter.hasOwnProperty('calcSegmentAvailabilityRange')){throw new Error(_streamingConstantsConstants2['default'].MISSING_CONFIG_ERROR);}}function getSegmentsFromTimeline(representation,requestedTime,index,availabilityUpperLimit){checkConfig();if(!representation){throw new Error('no representation');}if(requestedTime === undefined){requestedTime = null;}var base=representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate || representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;var timeline=base.SegmentTimeline;var list=base.SegmentURL_asArray;var isAvailableSegmentNumberCalculated=representation.availableSegmentsNumber > 0;var maxSegmentsAhead=undefined;if(availabilityUpperLimit){maxSegmentsAhead = availabilityUpperLimit;}else {maxSegmentsAhead = index > -1 || requestedTime !== null?10:Infinity;}var time=0;var scaledTime=0;var availabilityIdx=-1;var segments=[];var requiredMediaTime=null;var fragments=undefined,frag=undefined,i=undefined,len=undefined,j=undefined,repeat=undefined,repeatEndTime=undefined,nextFrag=undefined,hasEnoughSegments=undefined,startIdx=undefined,fTimescale=undefined;var createSegment=function createSegment(s,i){var media=base.media;var mediaRange=s.mediaRange;if(list){media = list[i].media || '';mediaRange = list[i].mediaRange;}return (0,_SegmentsUtils.getTimeBasedSegment)(timelineConverter,isDynamic,representation,time,s.d,fTimescale,media,mediaRange,availabilityIdx,s.tManifest);};fTimescale = representation.timescale;fragments = timeline.S_asArray;startIdx = index;if(requestedTime !== null){requiredMediaTime = timelineConverter.calcMediaTimeFromPresentationTime(requestedTime,representation);}for(i = 0,len = fragments.length;i < len;i++) {frag = fragments[i];repeat = 0;if(frag.hasOwnProperty('r')){repeat = frag.r;} // For a repeated S element, t belongs only to the first segment
	if(frag.hasOwnProperty('t')){time = frag.t;scaledTime = time / fTimescale;} // This is a special case: "A negative value of the @r attribute of the S element indicates that the duration indicated in @d attribute repeats until the start of the next S element, the end of the Period or until the
	// next MPD update."
	if(repeat < 0){nextFrag = fragments[i + 1];if(nextFrag && nextFrag.hasOwnProperty('t')){repeatEndTime = nextFrag.t / fTimescale;}else {var availabilityEnd=representation.segmentAvailabilityRange?representation.segmentAvailabilityRange.end:timelineConverter.calcSegmentAvailabilityRange(representation,isDynamic).end;repeatEndTime = timelineConverter.calcMediaTimeFromPresentationTime(availabilityEnd,representation);representation.segmentDuration = frag.d / fTimescale;}repeat = Math.ceil((repeatEndTime - scaledTime) / (frag.d / fTimescale)) - 1;} // if we have enough segments in the list, but we have not calculated the total number of the segments yet we
	// should continue the loop and calc the number. Once it is calculated, we can break the loop.
	if(hasEnoughSegments){if(isAvailableSegmentNumberCalculated)break;availabilityIdx += repeat + 1;continue;}for(j = 0;j <= repeat;j++) {availabilityIdx++;if(segments.length > maxSegmentsAhead){hasEnoughSegments = true;if(isAvailableSegmentNumberCalculated)break;continue;}if(requiredMediaTime !== null){ // In some cases when requiredMediaTime = actual end time of the last segment
	// it is possible that this time a bit exceeds the declared end time of the last segment.
	// in this case we still need to include the last segment in the segment list. to do this we
	// use a correction factor = 1.5. This number is used because the largest possible deviation is
	// is 50% of segment duration.
	if(scaledTime >= requiredMediaTime - frag.d / fTimescale * 1.5){segments.push(createSegment(frag,availabilityIdx));}}else if(availabilityIdx >= startIdx){segments.push(createSegment(frag,availabilityIdx));}time += frag.d;scaledTime = time / fTimescale;}}if(!isAvailableSegmentNumberCalculated){representation.availableSegmentsNumber = availabilityIdx + 1;}return segments;}instance = {getSegments:getSegmentsFromTimeline};return instance;}TimelineSegmentsGetter.__dashjs_factory_name = 'TimelineSegmentsGetter';var factory=_coreFactoryMaker2['default'].getClassFactory(TimelineSegmentsGetter);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=TimelineSegmentsGetter.js.map


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _SegmentsUtils=__webpack_require__(148);function TemplateSegmentsGetter(config,isDynamic){var timelineConverter=config.timelineConverter;var instance=undefined;function getSegmentsFromTemplate(representation,requestedTime,index,availabilityUpperLimit){var template=representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate;var duration=representation.segmentDuration;var availabilityWindow=representation.segmentAvailabilityRange;var segments=[];var url=null;var seg=null;var segmentRange=undefined,periodSegIdx=undefined,startIdx=undefined,endIdx=undefined,start=undefined;start = representation.startNumber;if(isNaN(duration) && !isDynamic){segmentRange = {start:start,end:start};}else {segmentRange = (0,_SegmentsUtils.decideSegmentListRangeForTemplate)(timelineConverter,isDynamic,representation,requestedTime,index,availabilityUpperLimit);}startIdx = segmentRange.start;endIdx = segmentRange.end;for(periodSegIdx = startIdx;periodSegIdx <= endIdx;periodSegIdx++) {seg = (0,_SegmentsUtils.getIndexBasedSegment)(timelineConverter,isDynamic,representation,periodSegIdx);seg.replacementTime = (start + periodSegIdx - 1) * representation.segmentDuration;url = template.media;url = (0,_SegmentsUtils.replaceTokenForTemplate)(url,'Number',seg.replacementNumber);url = (0,_SegmentsUtils.replaceTokenForTemplate)(url,'Time',seg.replacementTime);seg.media = url;segments.push(seg);seg = null;}if(isNaN(duration)){representation.availableSegmentsNumber = 1;}else {representation.availableSegmentsNumber = Math.ceil((availabilityWindow.end - availabilityWindow.start) / duration);}return segments;}instance = {getSegments:getSegmentsFromTemplate};return instance;}TemplateSegmentsGetter.__dashjs_factory_name = 'TemplateSegmentsGetter';var factory=_coreFactoryMaker2['default'].getClassFactory(TemplateSegmentsGetter);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=TemplateSegmentsGetter.js.map


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _SegmentsUtils=__webpack_require__(148);function ListSegmentsGetter(config,isDynamic){config = config || {};var timelineConverter=config.timelineConverter;var instance=undefined;function getSegmentsFromList(representation,requestedTime,index,availabilityUpperLimit){var list=representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;var len=list.SegmentURL_asArray.length;var segments=[];var periodSegIdx=undefined,seg=undefined,s=undefined,range=undefined,startIdx=undefined,endIdx=undefined,start=undefined;start = representation.startNumber;range = (0,_SegmentsUtils.decideSegmentListRangeForTemplate)(timelineConverter,isDynamic,representation,requestedTime,index,availabilityUpperLimit);startIdx = Math.max(range.start,0);endIdx = Math.min(range.end,list.SegmentURL_asArray.length - 1);for(periodSegIdx = startIdx;periodSegIdx <= endIdx;periodSegIdx++) {s = list.SegmentURL_asArray[periodSegIdx];seg = (0,_SegmentsUtils.getIndexBasedSegment)(timelineConverter,isDynamic,representation,periodSegIdx);seg.replacementTime = (start + periodSegIdx - 1) * representation.segmentDuration;seg.media = s.media?s.media:'';seg.mediaRange = s.mediaRange;seg.index = s.index;seg.indexRange = s.indexRange;segments.push(seg);seg = null;}representation.availableSegmentsNumber = len;return segments;}instance = {getSegments:getSegmentsFromList};return instance;}ListSegmentsGetter.__dashjs_factory_name = 'ListSegmentsGetter';var factory=_coreFactoryMaker2['default'].getClassFactory(ListSegmentsGetter);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=ListSegmentsGetter.js.map


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _streamingUtilsRequestModifier=__webpack_require__(160);var _streamingUtilsRequestModifier2=_interopRequireDefault(_streamingUtilsRequestModifier);var _voSegment=__webpack_require__(149);var _voSegment2=_interopRequireDefault(_voSegment);var _streamingVoDashJSError=__webpack_require__(62);var _streamingVoDashJSError2=_interopRequireDefault(_streamingVoDashJSError);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _streamingUtilsBoxParser=__webpack_require__(67);var _streamingUtilsBoxParser2=_interopRequireDefault(_streamingUtilsBoxParser);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _streamingVoMetricsHTTPRequest=__webpack_require__(65);var _streamingVoFragmentRequest=__webpack_require__(59);var _streamingVoFragmentRequest2=_interopRequireDefault(_streamingVoFragmentRequest);var _streamingNetHTTPLoader=__webpack_require__(161);var _streamingNetHTTPLoader2=_interopRequireDefault(_streamingNetHTTPLoader);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);function SegmentBaseLoader(){var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var instance=undefined,logger=undefined,errHandler=undefined,boxParser=undefined,requestModifier=undefined,metricsModel=undefined,mediaPlayerModel=undefined,httpLoader=undefined,baseURLController=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);}function initialize(){boxParser = (0,_streamingUtilsBoxParser2['default'])(context).getInstance();requestModifier = (0,_streamingUtilsRequestModifier2['default'])(context).getInstance();httpLoader = (0,_streamingNetHTTPLoader2['default'])(context).create({errHandler:errHandler,metricsModel:metricsModel,mediaPlayerModel:mediaPlayerModel,requestModifier:requestModifier});}function setConfig(config){if(config.baseURLController){baseURLController = config.baseURLController;}if(config.metricsModel){metricsModel = config.metricsModel;}if(config.mediaPlayerModel){mediaPlayerModel = config.mediaPlayerModel;}if(config.errHandler){errHandler = config.errHandler;}}function checkSetConfigCall(){if(!baseURLController || !baseURLController.hasOwnProperty('resolve')){throw new Error('setConfig function has to be called previously');}}function loadInitialization(representation,loadingInfo){checkSetConfigCall();var initRange=null;var baseUrl=baseURLController.resolve(representation.path);var info=loadingInfo || {init:true,url:baseUrl?baseUrl.url:undefined,range:{start:0,end:1500},searching:false,bytesLoaded:0,bytesToLoad:1500};logger.debug('Start searching for initialization.');var request=getFragmentRequest(info);var onload=function onload(response){info.bytesLoaded = info.range.end;initRange = boxParser.findInitRange(response);if(initRange){representation.range = initRange; // note that we don't explicitly set rep.initialization as this
	// will be computed when all BaseURLs are resolved later
	eventBus.trigger(_coreEventsEvents2['default'].INITIALIZATION_LOADED,{representation:representation});}else {info.range.end = info.bytesLoaded + info.bytesToLoad;loadInitialization(representation,info);}};var onerror=function onerror(){eventBus.trigger(_coreEventsEvents2['default'].INITIALIZATION_LOADED,{representation:representation});};httpLoader.load({request:request,success:onload,error:onerror});logger.debug('Perform init search: ' + info.url);}function loadSegments(representation,type,range,loadingInfo,callback){checkSetConfigCall();if(range && (range.start === undefined || range.end === undefined)){var parts=range?range.toString().split('-'):null;range = parts?{start:parseFloat(parts[0]),end:parseFloat(parts[1])}:null;}callback = !callback?onLoaded:callback;var isoFile=null;var sidx=null;var hasRange=!!range;var baseUrl=baseURLController.resolve(representation.path);var info={init:false,url:baseUrl?baseUrl.url:undefined,range:hasRange?range:{start:0,end:1500},searching:!hasRange,bytesLoaded:loadingInfo?loadingInfo.bytesLoaded:0,bytesToLoad:1500};var request=getFragmentRequest(info);var onload=function onload(response){var extraBytes=info.bytesToLoad;var loadedLength=response.byteLength;info.bytesLoaded = info.range.end - info.range.start;isoFile = boxParser.parse(response);sidx = isoFile.getBox('sidx');if(!sidx || !sidx.isComplete){if(sidx){info.range.start = sidx.offset || info.range.start;info.range.end = info.range.start + (sidx.size || extraBytes);}else if(loadedLength < info.bytesLoaded){ // if we have reached a search limit or if we have reached the end of the file we have to stop trying to find sidx
	callback(null,representation,type);return;}else {var lastBox=isoFile.getLastBox();if(lastBox && lastBox.size){info.range.start = lastBox.offset + lastBox.size;info.range.end = info.range.start + extraBytes;}else {info.range.end += extraBytes;}}loadSegments(representation,type,info.range,info,callback);}else {var ref=sidx.references;var loadMultiSidx=undefined,segments=undefined;if(ref !== null && ref !== undefined && ref.length > 0){loadMultiSidx = ref[0].reference_type === 1;}if(loadMultiSidx){(function(){logger.debug('Initiate multiple SIDX load.');info.range.end = info.range.start + sidx.size;var j=undefined,len=undefined,ss=undefined,se=undefined,r=undefined;var segs=[];var count=0;var offset=(sidx.offset || info.range.start) + sidx.size;var tmpCallback=function tmpCallback(result){if(result){segs = segs.concat(result);count++;if(count >= len){callback(segs,representation,type);}}else {callback(null,representation,type);}};for(j = 0,len = ref.length;j < len;j++) {ss = offset;se = offset + ref[j].referenced_size - 1;offset = offset + ref[j].referenced_size;r = {start:ss,end:se};loadSegments(representation,null,r,info,tmpCallback);}})();}else {logger.debug('Parsing segments from SIDX.');segments = getSegmentsForSidx(sidx,info);callback(segments,representation,type);}}};var onerror=function onerror(){callback(null,representation,type);};httpLoader.load({request:request,success:onload,error:onerror});logger.debug('Perform SIDX load: ' + info.url);}function reset(){httpLoader.abort();httpLoader = null;errHandler = null;boxParser = null;requestModifier = null;}function getSegmentsForSidx(sidx,info){var refs=sidx.references;var len=refs.length;var timescale=sidx.timescale;var time=sidx.earliest_presentation_time;var start=info.range.start + sidx.offset + sidx.first_offset + sidx.size;var segments=[];var segment=undefined,end=undefined,duration=undefined,size=undefined;for(var i=0;i < len;i++) {duration = refs[i].subsegment_duration;size = refs[i].referenced_size;segment = new _voSegment2['default'](); // note that we don't explicitly set segment.media as this will be
	// computed when all BaseURLs are resolved later
	segment.duration = duration;segment.startTime = time;segment.timescale = timescale;end = start + size - 1;segment.mediaRange = start + '-' + end;segments.push(segment);time += duration;start += size;}return segments;}function getFragmentRequest(info){if(!info.url){return;}var request=new _streamingVoFragmentRequest2['default']();request.type = info.init?_streamingVoMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE:_streamingVoMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE;request.url = info.url;request.range = info.range.start + '-' + info.range.end;return request;}function onLoaded(segments,representation,type){if(segments){eventBus.trigger(_coreEventsEvents2['default'].SEGMENTS_LOADED,{segments:segments,representation:representation,mediaType:type});}else {eventBus.trigger(_coreEventsEvents2['default'].SEGMENTS_LOADED,{segments:null,representation:representation,mediaType:type,error:new _streamingVoDashJSError2['default'](_coreErrorsErrors2['default'].SEGMENT_BASE_LOADER_ERROR_CODE,_coreErrorsErrors2['default'].SEGMENT_BASE_LOADER_ERROR_MESSAGE)});}}instance = {setConfig:setConfig,initialize:initialize,loadInitialization:loadInitialization,loadSegments:loadSegments,reset:reset};setup();return instance;}SegmentBaseLoader.__dashjs_factory_name = 'SegmentBaseLoader';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(SegmentBaseLoader);module.exports = exports['default'];
	//# sourceMappingURL=SegmentBaseLoader.js.map


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);function RequestModifier(){var instance=undefined;function modifyRequestURL(url){return url;}function modifyRequestHeader(request){return request;}instance = {modifyRequestURL:modifyRequestURL,modifyRequestHeader:modifyRequestHeader};return instance;}RequestModifier.__dashjs_factory_name = 'RequestModifier';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(RequestModifier);module.exports = exports['default'];
	//# sourceMappingURL=RequestModifier.js.map


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else {obj[key] = value;}return obj;}var _XHRLoader=__webpack_require__(162);var _XHRLoader2=_interopRequireDefault(_XHRLoader);var _FetchLoader=__webpack_require__(163);var _FetchLoader2=_interopRequireDefault(_FetchLoader);var _voMetricsHTTPRequest=__webpack_require__(65);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);var _voDashJSError=__webpack_require__(62);var _voDashJSError2=_interopRequireDefault(_voDashJSError); /**
	 * @module HTTPLoader
	 * @description Manages download of resources via HTTP.
	 * @param {Object} cfg - dependancies from parent
	 */function HTTPLoader(cfg){cfg = cfg || {};var context=this.context;var errHandler=cfg.errHandler;var metricsModel=cfg.metricsModel;var mediaPlayerModel=cfg.mediaPlayerModel;var requestModifier=cfg.requestModifier;var boxParser=cfg.boxParser;var useFetch=cfg.useFetch || false;var instance=undefined;var requests=undefined;var delayedRequests=undefined;var retryTimers=undefined;var downloadErrorToRequestTypeMap=undefined;var newDownloadErrorToRequestTypeMap=undefined;function setup(){var _downloadErrorToRequestTypeMap,_newDownloadErrorToRequestTypeMap;requests = [];delayedRequests = [];retryTimers = [];downloadErrorToRequestTypeMap = (_downloadErrorToRequestTypeMap = {},_defineProperty(_downloadErrorToRequestTypeMap,_voMetricsHTTPRequest.HTTPRequest.MPD_TYPE,_coreErrorsErrors2['default'].DOWNLOAD_ERROR_ID_MANIFEST),_defineProperty(_downloadErrorToRequestTypeMap,_voMetricsHTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE,_coreErrorsErrors2['default'].DOWNLOAD_ERROR_ID_XLINK),_defineProperty(_downloadErrorToRequestTypeMap,_voMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE,_coreErrorsErrors2['default'].DOWNLOAD_ERROR_ID_INITIALIZATION),_defineProperty(_downloadErrorToRequestTypeMap,_voMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE,_coreErrorsErrors2['default'].DOWNLOAD_ERROR_ID_CONTENT),_defineProperty(_downloadErrorToRequestTypeMap,_voMetricsHTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE,_coreErrorsErrors2['default'].DOWNLOAD_ERROR_ID_CONTENT),_defineProperty(_downloadErrorToRequestTypeMap,_voMetricsHTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE,_coreErrorsErrors2['default'].DOWNLOAD_ERROR_ID_CONTENT),_defineProperty(_downloadErrorToRequestTypeMap,_voMetricsHTTPRequest.HTTPRequest.OTHER_TYPE,_coreErrorsErrors2['default'].DOWNLOAD_ERROR_ID_CONTENT),_downloadErrorToRequestTypeMap);newDownloadErrorToRequestTypeMap = (_newDownloadErrorToRequestTypeMap = {},_defineProperty(_newDownloadErrorToRequestTypeMap,_voMetricsHTTPRequest.HTTPRequest.MPD_TYPE,_coreErrorsErrors2['default'].DOWNLOAD_ERROR_ID_MANIFEST_CODE),_defineProperty(_newDownloadErrorToRequestTypeMap,_voMetricsHTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE,_coreErrorsErrors2['default'].DOWNLOAD_ERROR_ID_XLINK_CODE),_defineProperty(_newDownloadErrorToRequestTypeMap,_voMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE,_coreErrorsErrors2['default'].DOWNLOAD_ERROR_ID_INITIALIZATION_CODE),_defineProperty(_newDownloadErrorToRequestTypeMap,_voMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE,_coreErrorsErrors2['default'].DOWNLOAD_ERROR_ID_CONTENT_CODE),_defineProperty(_newDownloadErrorToRequestTypeMap,_voMetricsHTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE,_coreErrorsErrors2['default'].DOWNLOAD_ERROR_ID_CONTENT_CODE),_defineProperty(_newDownloadErrorToRequestTypeMap,_voMetricsHTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE,_coreErrorsErrors2['default'].DOWNLOAD_ERROR_ID_CONTENT_CODE),_defineProperty(_newDownloadErrorToRequestTypeMap,_voMetricsHTTPRequest.HTTPRequest.OTHER_TYPE,_coreErrorsErrors2['default'].DOWNLOAD_ERROR_ID_CONTENT_CODE),_newDownloadErrorToRequestTypeMap);}function internalLoad(config,remainingAttempts){var request=config.request;var traces=[];var firstProgress=true;var needFailureReport=true;var requestStartTime=new Date();var lastTraceTime=requestStartTime;var lastTraceReceivedCount=0;var httpRequest=undefined;if(!requestModifier || !metricsModel || !errHandler){throw new Error('config object is not correct or missing');}var handleLoaded=function handleLoaded(success){needFailureReport = false;request.requestStartDate = requestStartTime;request.requestEndDate = new Date();request.firstByteDate = request.firstByteDate || requestStartTime;if(!request.checkExistenceOnly){metricsModel.addHttpRequest(request.mediaType,null,request.type,request.url,httpRequest.response?httpRequest.response.responseURL:null,request.serviceLocation || null,request.range || null,request.requestStartDate,request.firstByteDate,request.requestEndDate,httpRequest.response?httpRequest.response.status:null,request.duration,httpRequest.response && httpRequest.response.getAllResponseHeaders?httpRequest.response.getAllResponseHeaders():httpRequest.response?httpRequest.response.responseHeaders:[],success?traces:null);}};var onloadend=function onloadend(){if(requests.indexOf(httpRequest) === -1){return;}else {requests.splice(requests.indexOf(httpRequest),1);}if(needFailureReport){handleLoaded(false);if(remainingAttempts > 0){remainingAttempts--;retryTimers.push(setTimeout(function(){internalLoad(config,remainingAttempts);},mediaPlayerModel.getRetryIntervalForType(request.type)));}else {errHandler.downloadError(downloadErrorToRequestTypeMap[request.type],request.url,request);errHandler.error(new _voDashJSError2['default'](newDownloadErrorToRequestTypeMap[request.type],request.url + ' is not available',{request:request,response:httpRequest.response}));if(config.error){config.error(request,'error',httpRequest.response.statusText);}if(config.complete){config.complete(request,httpRequest.response.statusText);}}}};var progress=function progress(event){var currentTime=new Date();if(firstProgress){firstProgress = false;if(!event.lengthComputable || event.lengthComputable && event.total !== event.loaded){request.firstByteDate = currentTime;}}if(event.lengthComputable){request.bytesLoaded = event.loaded;request.bytesTotal = event.total;}if(!event.noTrace){traces.push({s:lastTraceTime,d:event.time?event.time:currentTime.getTime() - lastTraceTime.getTime(),b:[event.loaded?event.loaded - lastTraceReceivedCount:0]});lastTraceTime = currentTime;lastTraceReceivedCount = event.loaded;}if(config.progress && event){config.progress(event);}};var onload=function onload(){if(httpRequest.response.status >= 200 && httpRequest.response.status <= 299){handleLoaded(true);if(config.success){config.success(httpRequest.response.response,httpRequest.response.statusText,httpRequest.response.responseURL);}if(config.complete){config.complete(request,httpRequest.response.statusText);}}};var onabort=function onabort(){if(config.abort){config.abort(request);}};var loader=undefined;if(useFetch && window.fetch && request.responseType === 'arraybuffer'){loader = (0,_FetchLoader2['default'])(context).create({requestModifier:requestModifier,boxParser:boxParser});}else {loader = (0,_XHRLoader2['default'])(context).create({requestModifier:requestModifier,boxParser:boxParser});}var modifiedUrl=requestModifier.modifyRequestURL(request.url);var verb=request.checkExistenceOnly?_voMetricsHTTPRequest.HTTPRequest.HEAD:_voMetricsHTTPRequest.HTTPRequest.GET;var withCredentials=mediaPlayerModel.getXHRWithCredentialsForType(request.type);httpRequest = {url:modifiedUrl,method:verb,withCredentials:withCredentials,request:request,onload:onload,onend:onloadend,onerror:onloadend,progress:progress,onabort:onabort,loader:loader}; // Adds the ability to delay single fragment loading time to control buffer.
	var now=new Date().getTime();if(isNaN(request.delayLoadingTime) || now >= request.delayLoadingTime){ // no delay - just send
	requests.push(httpRequest);loader.load(httpRequest);}else {(function(){ // delay
	var delayedRequest={httpRequest:httpRequest};delayedRequests.push(delayedRequest);delayedRequest.delayTimeout = setTimeout(function(){if(delayedRequests.indexOf(delayedRequest) === -1){return;}else {delayedRequests.splice(delayedRequests.indexOf(delayedRequest),1);}try{requestStartTime = new Date();lastTraceTime = requestStartTime;requests.push(delayedRequest.httpRequest);loader.load(delayedRequest.httpRequest);}catch(e) {delayedRequest.httpRequest.onerror();}},request.delayLoadingTime - now);})();}} /**
	     * Initiates a download of the resource described by config.request
	     * @param {Object} config - contains request (FragmentRequest or derived type), and callbacks
	     * @memberof module:HTTPLoader
	     * @instance
	     */function load(config){if(config.request){internalLoad(config,mediaPlayerModel.getRetryAttemptsForType(config.request.type));}} /**
	     * Aborts any inflight downloads
	     * @memberof module:HTTPLoader
	     * @instance
	     */function abort(){retryTimers.forEach(function(t){return clearTimeout(t);});retryTimers = [];delayedRequests.forEach(function(x){return clearTimeout(x.delayTimeout);});delayedRequests = [];requests.forEach(function(x){ // abort will trigger onloadend which we don't want
	// when deliberately aborting inflight requests -
	// set them to undefined so they are not called
	x.onloadend = x.onerror = x.onprogress = undefined;x.loader.abort(x);x.onabort();});requests = [];}instance = {load:load,abort:abort};setup();return instance;}HTTPLoader.__dashjs_factory_name = 'HTTPLoader';var factory=_coreFactoryMaker2['default'].getClassFactory(HTTPLoader);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=HTTPLoader.js.map


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker); /**
	 * @module XHRLoader
	 * @description Manages download of resources via HTTP.
	 * @param {Object} cfg - dependencies from parent
	 */function XHRLoader(cfg){cfg = cfg || {};var requestModifier=cfg.requestModifier;var instance=undefined;function load(httpRequest){ // Variables will be used in the callback functions
	var requestStartTime=new Date();var request=httpRequest.request;var xhr=new XMLHttpRequest();xhr.open(httpRequest.method,httpRequest.url,true);if(request.responseType){xhr.responseType = request.responseType;}if(request.range){xhr.setRequestHeader('Range','bytes=' + request.range);}if(!request.requestStartDate){request.requestStartDate = requestStartTime;}if(requestModifier){xhr = requestModifier.modifyRequestHeader(xhr);}xhr.withCredentials = httpRequest.withCredentials;xhr.onload = httpRequest.onload;xhr.onloadend = httpRequest.onend;xhr.onerror = httpRequest.onerror;xhr.onprogress = httpRequest.progress;xhr.onabort = httpRequest.onabort;xhr.send();httpRequest.response = xhr;}function abort(request){var x=request.response;x.onloadend = x.onerror = x.onprogress = undefined; //Ignore events from aborted requests.
	x.abort();}instance = {load:load,abort:abort};return instance;}XHRLoader.__dashjs_factory_name = 'XHRLoader';var factory=_coreFactoryMaker2['default'].getClassFactory(XHRLoader);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=XHRLoader.js.map


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker); /**
	* @module FetchLoader
	* @description Manages download of resources via HTTP using fetch.
	* @param {Object} cfg - dependencies from parent
	*/function FetchLoader(cfg){cfg = cfg || {};var requestModifier=cfg.requestModifier;var boxParser=cfg.boxParser;var instance=undefined;function load(httpRequest){ // Variables will be used in the callback functions
	var requestStartTime=new Date();var request=httpRequest.request;var headers=new Headers(); /*jshint ignore:line*/if(request.range){headers.append('Range','bytes=' + request.range);}if(!request.requestStartDate){request.requestStartDate = requestStartTime;}if(requestModifier){ // modifyRequestHeader expects a XMLHttpRequest object so,
	// to keep backward compatibility, we should expose a setRequestHeader method
	// TODO: Remove RequestModifier dependency on XMLHttpRequest object and define
	// a more generic way to intercept/modify requests
	requestModifier.modifyRequestHeader({setRequestHeader:function setRequestHeader(header,value){headers.append(header,value);}});}var abortController=undefined;if(typeof window.AbortController === 'function'){abortController = new AbortController(); /*jshint ignore:line*/httpRequest.abortController = abortController;}var reqOptions={method:httpRequest.method,headers:headers,credentials:httpRequest.withCredentials?'include':undefined,signal:abortController?abortController.signal:undefined};fetch(httpRequest.url,reqOptions).then(function(response){if(!httpRequest.response){httpRequest.response = {};}httpRequest.response.status = response.status;httpRequest.response.statusText = response.statusText;httpRequest.response.responseURL = response.url;if(!response.ok){httpRequest.onerror();}var responseHeaders='';var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=response.headers.keys()[Symbol.iterator](),_step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done);_iteratorNormalCompletion = true) {var key=_step.value;responseHeaders += key + ': ' + response.headers.get(key) + '\n';}}catch(err) {_didIteratorError = true;_iteratorError = err;}finally {try{if(!_iteratorNormalCompletion && _iterator['return']){_iterator['return']();}}finally {if(_didIteratorError){throw _iteratorError;}}}httpRequest.response.responseHeaders = responseHeaders;if(!response.body){ // Fetch returning a ReadableStream response body is not currently supported by all browsers.
	// Browser compatibility: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API
	// If it is not supported, returning the whole segment when it's ready (as xhr)
	return response.arrayBuffer().then(function(buffer){httpRequest.response.response = buffer;var event={loaded:buffer.byteLength,total:buffer.byteLength,stream:false};httpRequest.progress(event);httpRequest.onload();httpRequest.onend();return;});}var totalBytes=parseInt(response.headers.get('Content-Length'),10);var bytesReceived=0;var signaledFirstByte=false;var remaining=new Uint8Array();var offset=0;httpRequest.reader = response.body.getReader();var downLoadedData=[];var processResult=function processResult(_ref){var value=_ref.value;var done=_ref.done;if(done){if(remaining){ // If there is pending data, call progress so network metrics
	// are correctly generated
	// Same structure as https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget/onprogress
	httpRequest.progress({loaded:bytesReceived,total:isNaN(totalBytes)?bytesReceived:totalBytes,lengthComputable:true,time:calculateDownloadedTime(downLoadedData,bytesReceived),stream:true});httpRequest.response.response = remaining.buffer;}httpRequest.onload();httpRequest.onend();return;}if(value && value.length > 0){remaining = concatTypedArray(remaining,value);bytesReceived += value.length;downLoadedData.push({ts:Date.now(),bytes:value.length});var boxesInfo=boxParser.findLastTopIsoBoxCompleted(['moov','mdat'],remaining,offset);if(boxesInfo.found){var end=boxesInfo.lastCompletedOffset + boxesInfo.size; // If we are going to pass full buffer, avoid copying it and pass
	// complete buffer. Otherwise clone the part of the buffer that is completed
	// and adjust remaining buffer. A clone is needed because ArrayBuffer of a typed-array
	// keeps a reference to the original data
	var data=undefined;if(end === remaining.length){data = remaining;remaining = new Uint8Array();}else {data = new Uint8Array(remaining.subarray(0,end));remaining = remaining.subarray(end);} // Announce progress but don't track traces. Throughput measures are quite unstable
	// when they are based in small amount of data
	httpRequest.progress({data:data.buffer,lengthComputable:false,noTrace:true});offset = 0;}else {offset = boxesInfo.lastCompletedOffset; // Call progress so it generates traces that will be later used to know when the first byte
	// were received
	if(!signaledFirstByte){httpRequest.progress({lengthComputable:false,noTrace:true});signaledFirstByte = true;}}}read(httpRequest,processResult);};read(httpRequest,processResult);})['catch'](function(e){if(httpRequest.onerror){httpRequest.onerror(e);}});}function read(httpRequest,processResult){httpRequest.reader.read().then(processResult)['catch'](function(e){if(httpRequest.onerror && httpRequest.response.status === 200){ // Error, but response code is 200, trigger error
	httpRequest.onerror(e);}});}function concatTypedArray(remaining,data){if(remaining.length === 0){return data;}var result=new Uint8Array(remaining.length + data.length);result.set(remaining);result.set(data,remaining.length);return result;}function abort(request){if(request.abortController){ // For firefox and edge
	request.abortController.abort();}else if(request.reader){ // For Chrome
	try{request.reader.cancel();}catch(e) { // throw exceptions (TypeError) when reader was previously closed,
	// for example, because a network issue
	}}}function calculateDownloadedTime(datum,bytesReceived){datum = datum.filter(function(data){return data.bytes > bytesReceived / 4 / datum.length;});if(datum.length > 1){var _ret=(function(){var time=0;var avgTimeDistance=(datum[datum.length - 1].ts - datum[0].ts) / datum.length;datum.forEach(function(data,index){ // To be counted the data has to be over a threshold
	var next=datum[index + 1];if(next){var distance=next.ts - data.ts;time += distance < avgTimeDistance?distance:0;}});return {v:time};})();if(typeof _ret === 'object')return _ret.v;}return null;}instance = {load:load,abort:abort,calculateDownloadedTime:calculateDownloadedTime};return instance;}FetchLoader.__dashjs_factory_name = 'FetchLoader';var factory=_coreFactoryMaker2['default'].getClassFactory(FetchLoader);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=FetchLoader.js.map


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _streamingUtilsEBMLParser=__webpack_require__(165);var _streamingUtilsEBMLParser2=_interopRequireDefault(_streamingUtilsEBMLParser);var _streamingConstantsConstants=__webpack_require__(49);var _streamingConstantsConstants2=_interopRequireDefault(_streamingConstantsConstants);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _streamingUtilsRequestModifier=__webpack_require__(160);var _streamingUtilsRequestModifier2=_interopRequireDefault(_streamingUtilsRequestModifier);var _voSegment=__webpack_require__(149);var _voSegment2=_interopRequireDefault(_voSegment);var _streamingVoMetricsHTTPRequest=__webpack_require__(65);var _streamingVoFragmentRequest=__webpack_require__(59);var _streamingVoFragmentRequest2=_interopRequireDefault(_streamingVoFragmentRequest);var _streamingNetHTTPLoader=__webpack_require__(161);var _streamingNetHTTPLoader2=_interopRequireDefault(_streamingNetHTTPLoader);var _streamingVoDashJSError=__webpack_require__(62);var _streamingVoDashJSError2=_interopRequireDefault(_streamingVoDashJSError);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);function WebmSegmentBaseLoader(){var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var instance=undefined,logger=undefined,WebM=undefined,errHandler=undefined,requestModifier=undefined,metricsModel=undefined,mediaPlayerModel=undefined,httpLoader=undefined,baseURLController=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);WebM = {EBML:{tag:0x1A45DFA3,required:true},Segment:{tag:0x18538067,required:true,SeekHead:{tag:0x114D9B74,required:true},Info:{tag:0x1549A966,required:true,TimecodeScale:{tag:0x2AD7B1,required:true,parse:'getMatroskaUint'},Duration:{tag:0x4489,required:true,parse:'getMatroskaFloat'}},Tracks:{tag:0x1654AE6B,required:true},Cues:{tag:0x1C53BB6B,required:true,CuePoint:{tag:0xBB,required:true,CueTime:{tag:0xB3,required:true,parse:'getMatroskaUint'},CueTrackPositions:{tag:0xB7,required:true,CueTrack:{tag:0xF7,required:true,parse:'getMatroskaUint'},CueClusterPosition:{tag:0xF1,required:true,parse:'getMatroskaUint'}}}}},Void:{tag:0xEC,required:true}};}function initialize(){requestModifier = (0,_streamingUtilsRequestModifier2['default'])(context).getInstance();httpLoader = (0,_streamingNetHTTPLoader2['default'])(context).create({errHandler:errHandler,metricsModel:metricsModel,mediaPlayerModel:mediaPlayerModel,requestModifier:requestModifier});}function setConfig(config){if(!config.baseURLController || !config.metricsModel || !config.mediaPlayerModel || !config.errHandler){throw new Error(_streamingConstantsConstants2['default'].MISSING_CONFIG_ERROR);}baseURLController = config.baseURLController;metricsModel = config.metricsModel;mediaPlayerModel = config.mediaPlayerModel;errHandler = config.errHandler;}function parseCues(ab){var cues=[];var cue=undefined;var cueTrack=undefined;var ebmlParser=(0,_streamingUtilsEBMLParser2['default'])(context).create({data:ab});ebmlParser.consumeTagAndSize(WebM.Segment.Cues);while(ebmlParser.moreData() && ebmlParser.consumeTagAndSize(WebM.Segment.Cues.CuePoint,true)) {cue = {};cue.CueTime = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTime);cue.CueTracks = [];while(ebmlParser.moreData() && ebmlParser.consumeTag(WebM.Segment.Cues.CuePoint.CueTrackPositions,true)) {var cueTrackPositionSize=ebmlParser.getMatroskaCodedNum();var startPos=ebmlParser.getPos();cueTrack = {};cueTrack.Track = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTrackPositions.CueTrack);if(cueTrack.Track === 0){throw new Error('Cue track cannot be 0');}cueTrack.ClusterPosition = ebmlParser.parseTag(WebM.Segment.Cues.CuePoint.CueTrackPositions.CueClusterPosition);cue.CueTracks.push(cueTrack); // we're not interested any other elements - skip remaining bytes
	ebmlParser.setPos(startPos + cueTrackPositionSize);}if(cue.CueTracks.length === 0){throw new Error('Mandatory cuetrack not found');}cues.push(cue);}if(cues.length === 0){throw new Error('mandatory cuepoint not found');}return cues;}function parseSegments(data,segmentStart,segmentEnd,segmentDuration){var duration=undefined;var parsed=undefined;var segments=undefined;var segment=undefined;var i=undefined;var len=undefined;var start=undefined;var end=undefined;parsed = parseCues(data);segments = []; // we are assuming one cue track per cue point
	// both duration and media range require the i + 1 segment
	// the final segment has to use global segment parameters
	for(i = 0,len = parsed.length;i < len;i += 1) {segment = new _voSegment2['default']();duration = 0;if(i < parsed.length - 1){duration = parsed[i + 1].CueTime - parsed[i].CueTime;}else {duration = segmentDuration - parsed[i].CueTime;} // note that we don't explicitly set segment.media as this will be
	// computed when all BaseURLs are resolved later
	segment.duration = duration;segment.startTime = parsed[i].CueTime;segment.timescale = 1000; // hardcoded for ms
	start = parsed[i].CueTracks[0].ClusterPosition + segmentStart;if(i < parsed.length - 1){end = parsed[i + 1].CueTracks[0].ClusterPosition + segmentStart - 1;}else {end = segmentEnd - 1;}segment.mediaRange = start + '-' + end;segments.push(segment);}logger.debug('Parsed cues: ' + segments.length + ' cues.');return segments;}function parseEbmlHeader(data,media,theRange,callback){var ebmlParser=(0,_streamingUtilsEBMLParser2['default'])(context).create({data:data});var duration=undefined;var segments=undefined;var parts=theRange.split('-');var request=null;var info={url:media,range:{start:parseFloat(parts[0]),end:parseFloat(parts[1])},request:request};var segmentEnd=undefined;var segmentStart=undefined;logger.debug('Parse EBML header: ' + info.url); // skip over the header itself
	ebmlParser.skipOverElement(WebM.EBML);ebmlParser.consumeTag(WebM.Segment); // segments start here
	segmentEnd = ebmlParser.getMatroskaCodedNum();segmentEnd += ebmlParser.getPos();segmentStart = ebmlParser.getPos(); // skip over any top level elements to get to the segment info
	while(ebmlParser.moreData() && !ebmlParser.consumeTagAndSize(WebM.Segment.Info,true)) {if(!(ebmlParser.skipOverElement(WebM.Segment.SeekHead,true) || ebmlParser.skipOverElement(WebM.Segment.Tracks,true) || ebmlParser.skipOverElement(WebM.Segment.Cues,true) || ebmlParser.skipOverElement(WebM.Void,true))){throw new Error('no valid top level element found');}} // we only need one thing in segment info, duration
	while(duration === undefined) {var infoTag=ebmlParser.getMatroskaCodedNum(true);var infoElementSize=ebmlParser.getMatroskaCodedNum();switch(infoTag){case WebM.Segment.Info.Duration.tag:duration = ebmlParser[WebM.Segment.Info.Duration.parse](infoElementSize);break;default:ebmlParser.setPos(ebmlParser.getPos() + infoElementSize);break;}} // once we have what we need from segment info, we jump right to the
	// cues
	request = getFragmentRequest(info);var onload=function onload(response){segments = parseSegments(response,segmentStart,segmentEnd,duration);callback(segments);};var onloadend=function onloadend(){logger.error('Download Error: Cues ' + info.url);callback(null);};httpLoader.load({request:request,success:onload,error:onloadend});logger.debug('Perform cues load: ' + info.url + ' bytes=' + info.range.start + '-' + info.range.end);}function checkSetConfigCall(){if(!baseURLController || !baseURLController.hasOwnProperty('resolve')){throw new Error('setConfig function has to be called previously');}}function loadInitialization(representation,loadingInfo){checkSetConfigCall();var request=null;var baseUrl=baseURLController.resolve(representation.path);var media=baseUrl?baseUrl.url:undefined;var initRange=representation.range.split('-');var info=loadingInfo || {range:{start:parseFloat(initRange[0]),end:parseFloat(initRange[1])},request:request,url:media,init:true};logger.info('Start loading initialization.');request = getFragmentRequest(info);var onload=function onload(){ // note that we don't explicitly set rep.initialization as this
	// will be computed when all BaseURLs are resolved later
	eventBus.trigger(_coreEventsEvents2['default'].INITIALIZATION_LOADED,{representation:representation});};var onloadend=function onloadend(){eventBus.trigger(_coreEventsEvents2['default'].INITIALIZATION_LOADED,{representation:representation});};httpLoader.load({request:request,success:onload,error:onloadend});logger.debug('Perform init load: ' + info.url);}function loadSegments(representation,type,theRange,callback){checkSetConfigCall();var request=null;var baseUrl=baseURLController.resolve(representation.path);var media=baseUrl?baseUrl.url:undefined;var bytesToLoad=8192;var info={bytesLoaded:0,bytesToLoad:bytesToLoad,range:{start:0,end:bytesToLoad},request:request,url:media,init:false};callback = !callback?onLoaded:callback;request = getFragmentRequest(info); // first load the header, but preserve the manifest range so we can
	// load the cues after parsing the header
	// NOTE: we expect segment info to appear in the first 8192 bytes
	logger.debug('Parsing ebml header');var onload=function onload(response){parseEbmlHeader(response,media,theRange,function(segments){callback(segments,representation,type);});};var onloadend=function onloadend(){callback(null,representation,type);};httpLoader.load({request:request,success:onload,error:onloadend});}function onLoaded(segments,representation,type){if(segments){eventBus.trigger(_coreEventsEvents2['default'].SEGMENTS_LOADED,{segments:segments,representation:representation,mediaType:type});}else {eventBus.trigger(_coreEventsEvents2['default'].SEGMENTS_LOADED,{segments:null,representation:representation,mediaType:type,error:new _streamingVoDashJSError2['default'](_coreErrorsErrors2['default'].SEGMENT_BASE_LOADER_ERROR_CODE,_coreErrorsErrors2['default'].SEGMENT_BASE_LOADER_ERROR_MESSAGE)});}}function getFragmentRequest(info){var request=new _streamingVoFragmentRequest2['default']();request.type = info.init?_streamingVoMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE:_streamingVoMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE;request.url = info.url;request.range = info.range.start + '-' + info.range.end;return request;}function reset(){errHandler = null;requestModifier = null;}instance = {setConfig:setConfig,initialize:initialize,loadInitialization:loadInitialization,loadSegments:loadSegments,reset:reset};setup();return instance;}WebmSegmentBaseLoader.__dashjs_factory_name = 'WebmSegmentBaseLoader';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(WebmSegmentBaseLoader);module.exports = exports['default'];
	//# sourceMappingURL=WebmSegmentBaseLoader.js.map


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker); /**
	 * Creates an instance of an EBMLParser class which implements a large subset
	 * of the functionality required to parse Matroska EBML
	 *
	 * @param {Object} config object with data member which is the buffer to parse
	 */function EBMLParser(config){config = config || {};var instance=undefined;var data=new DataView(config.data);var pos=0;function getPos(){return pos;}function setPos(value){pos = value;} /**
	     * Consumes an EBML tag from the data stream.
	     *
	     * @param {Object} tag to parse, A tag is an object with at least a {number} tag and
	     * {boolean} required flag.
	     * @param {boolean} test whether or not the function should throw if a required
	     * tag is not found
	     * @return {boolean} whether or not the tag was found
	     * @throws will throw an exception if a required tag is not found and test
	     * param is false or undefined, or if the stream is malformed.
	     * @memberof EBMLParser
	     */function consumeTag(tag,test){var found=true;var bytesConsumed=0;var p1=undefined,p2=undefined;if(test === undefined){test = false;}if(tag.tag > 0xFFFFFF){if(data.getUint32(pos) !== tag.tag){found = false;}bytesConsumed = 4;}else if(tag.tag > 0xFFFF){ // 3 bytes
	p1 = data.getUint16(pos);p2 = data.getUint8(pos + 2); // shift p1 over a byte and add p2
	if(p1 * 256 + p2 !== tag.tag){found = false;}bytesConsumed = 3;}else if(tag.tag > 0xFF){if(data.getUint16(pos) !== tag.tag){found = false;}bytesConsumed = 2;}else {if(data.getUint8(pos) !== tag.tag){found = false;}bytesConsumed = 1;}if(!found && tag.required && !test){throw new Error('required tag not found');}if(found){pos += bytesConsumed;}return found;} /**
	     * Consumes an EBML tag from the data stream.   If the tag is found then this
	     * function will also remove the size field which follows the tag from the
	     * data stream.
	     *
	     * @param {Object} tag to parse, A tag is an object with at least a {number} tag and
	     * {boolean} required flag.
	     * @param {boolean} test whether or not the function should throw if a required
	     * tag is not found
	     * @return {boolean} whether or not the tag was found
	     * @throws will throw an exception if a required tag is not found and test
	     * param is false or undefined, or if the stream is malformedata.
	     * @memberof EBMLParser
	     */function consumeTagAndSize(tag,test){var found=consumeTag(tag,test);if(found){getMatroskaCodedNum();}return found;} /**
	     * Consumes an EBML tag from the data stream.   If the tag is found then this
	     * function will also remove the size field which follows the tag from the
	     * data stream.  It will use the value of the size field to parse a binary
	     * field, using a parser defined in the tag itself
	     *
	     * @param {Object} tag to parse, A tag is an object with at least a {number} tag,
	     * {boolean} required flag, and a parse function which takes a size parameter
	     * @return {boolean} whether or not the tag was found
	     * @throws will throw an exception if a required tag is not found,
	     * or if the stream is malformed
	     * @memberof EBMLParser
	     */function parseTag(tag){var size=undefined;consumeTag(tag);size = getMatroskaCodedNum();return instance[tag.parse](size);} /**
	     * Consumes an EBML tag from the data stream.   If the tag is found then this
	     * function will also remove the size field which follows the tag from the
	     * data stream.  It will use the value of the size field to skip over the
	     * entire section of EBML encapsulated by the tag.
	     *
	     * @param {Object} tag to parse, A tag is an object with at least a {number} tag, and
	     * {boolean} required flag
	     * @param {boolean} test a flag to indicate if an exception should be thrown
	     * if a required tag is not found
	     * @return {boolean} whether or not the tag was found
	     * @throws will throw an exception if a required tag is not found and test is
	     * false or undefined or if the stream is malformed
	     * @memberof EBMLParser
	     */function skipOverElement(tag,test){var found=consumeTag(tag,test);var headerSize=undefined;if(found){headerSize = getMatroskaCodedNum();pos += headerSize;}return found;} /**
	     * Returns and consumes a number encoded according to the Matroska EBML
	     * specification from the bitstream.
	     *
	     * @param {boolean} retainMSB whether or not to retain the Most Significant Bit (the
	     * first 1). this is usually true when reading Tag IDs.
	     * @return {number} the decoded number
	     * @throws will throw an exception if the bit stream is malformed or there is
	     * not enough data
	     * @memberof EBMLParser
	     */function getMatroskaCodedNum(retainMSB){var bytesUsed=1;var mask=0x80;var maxBytes=8;var extraBytes=-1;var num=0;var ch=data.getUint8(pos);var i=0;for(i = 0;i < maxBytes;i += 1) {if((ch & mask) === mask){num = retainMSB === undefined?ch & ~mask:ch;extraBytes = i;break;}mask >>= 1;}for(i = 0;i < extraBytes;i += 1,bytesUsed += 1) {num = num << 8 | 0xff & data.getUint8(pos + bytesUsed);}pos += bytesUsed;return num;} /**
	     * Returns and consumes a float from the bitstream.
	     *
	     * @param {number} size 4 or 8 byte floats are supported
	     * @return {number} the decoded number
	     * @throws will throw an exception if the bit stream is malformed or there is
	     * not enough data
	     * @memberof EBMLParser
	     */function getMatroskaFloat(size){var outFloat=undefined;switch(size){case 4:outFloat = data.getFloat32(pos);pos += 4;break;case 8:outFloat = data.getFloat64(pos);pos += 8;break;}return outFloat;} /**
	     * Consumes and returns an unsigned int from the bitstream.
	     *
	     * @param {number} size 1 to 8 bytes
	     * @return {number} the decoded number
	     * @throws will throw an exception if the bit stream is malformed or there is
	     * not enough data
	     * @memberof EBMLParser
	     */function getMatroskaUint(size){var val=0;for(var i=0;i < size;i += 1) {val <<= 8;val |= data.getUint8(pos + i) & 0xff;}pos += size;return val;} /**
	     * Tests whether there is more data in the bitstream for parsing
	     *
	     * @return {boolean} whether there is more data to parse
	     * @memberof EBMLParser
	     */function moreData(){return pos < data.byteLength;}instance = {getPos:getPos,setPos:setPos,consumeTag:consumeTag,consumeTagAndSize:consumeTagAndSize,parseTag:parseTag,skipOverElement:skipOverElement,getMatroskaCodedNum:getMatroskaCodedNum,getMatroskaFloat:getMatroskaFloat,getMatroskaUint:getMatroskaUint,moreData:moreData};return instance;}EBMLParser.__dashjs_factory_name = 'EBMLParser';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(EBMLParser);module.exports = exports['default'];
	//# sourceMappingURL=EBMLParser.js.map


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);function EventController(){var MPD_RELOAD_SCHEME='urn:mpeg:dash:event:2012';var MPD_RELOAD_VALUE=1;var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var instance=undefined,logger=undefined,inlineEvents=undefined, // Holds all Inline Events not triggered yet
	inbandEvents=undefined, // Holds all Inband Events not triggered yet
	activeEvents=undefined, // Holds all Events currently running
	eventInterval=undefined, // variable holding the setInterval
	refreshDelay=undefined, // refreshTime for the setInterval
	presentationTimeThreshold=undefined,manifestUpdater=undefined,playbackController=undefined,isStarted=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);resetInitialSettings();}function resetInitialSettings(){isStarted = false;inlineEvents = {};inbandEvents = {};activeEvents = {};eventInterval = null;refreshDelay = 100;presentationTimeThreshold = refreshDelay / 1000;}function checkSetConfigCall(){if(!manifestUpdater || !playbackController){throw new Error('setConfig function has to be called previously');}}function stop(){if(eventInterval !== null && isStarted){clearInterval(eventInterval);eventInterval = null;isStarted = false;}}function start(){checkSetConfigCall();logger.debug('Start Event Controller');if(!isStarted && !isNaN(refreshDelay)){isStarted = true;eventInterval = setInterval(onEventTimer,refreshDelay);}} /**
	     * Add events to the eventList. Events that are not in the mpd anymore but not triggered yet will still be deleted
	     * @param {Array.<Object>} values
	     */function addInlineEvents(values){checkSetConfigCall();inlineEvents = {};if(values){for(var i=0;i < values.length;i++) {var event=values[i];inlineEvents[event.id] = event;logger.debug('Add inline event with id ' + event.id);}}logger.debug('Added ' + values.length + ' inline events');} /**
	     * i.e. processing of any one event message box with the same id is sufficient
	     * @param {Array.<Object>} values
	     */function addInbandEvents(values){checkSetConfigCall();for(var i=0;i < values.length;i++) {var event=values[i];if(!(event.id in inbandEvents)){if(event.eventStream.schemeIdUri === MPD_RELOAD_SCHEME && inbandEvents[event.id] === undefined){handleManifestReloadEvent(event);}inbandEvents[event.id] = event;logger.debug('Add inband event with id ' + event.id);}else {logger.debug('Repeated event with id ' + event.id);}}}function handleManifestReloadEvent(event){if(event.eventStream.value == MPD_RELOAD_VALUE){var timescale=event.eventStream.timescale || 1;var validUntil=event.presentationTime / timescale;var newDuration=undefined;if(event.presentationTime == 0xFFFFFFFF){ //0xFF... means remaining duration unknown
	newDuration = NaN;}else {newDuration = (event.presentationTime + event.duration) / timescale;}logger.info('Manifest validity changed: Valid until: ' + validUntil + '; remaining duration: ' + newDuration);eventBus.trigger(_coreEventsEvents2['default'].MANIFEST_VALIDITY_CHANGED,{id:event.id,validUntil:validUntil,newDuration:newDuration,newManifestValidAfter:NaN //event.message_data - this is an arraybuffer with a timestring in it, but not used yet
	});}} /**
	     * Remove events which are over from the list
	     */function removeEvents(){if(activeEvents){var currentVideoTime=playbackController.getTime();var eventIds=Object.keys(activeEvents);for(var i=0;i < eventIds.length;i++) {var eventId=eventIds[i];var curr=activeEvents[eventId];if(curr !== null && (curr.duration + curr.presentationTime) / curr.eventStream.timescale < currentVideoTime){logger.debug('Remove Event ' + eventId + ' at time ' + currentVideoTime);curr = null;delete activeEvents[eventId];}}}} /**
	     * Iterate through the eventList and trigger/remove the events
	     */function onEventTimer(){triggerEvents(inbandEvents);triggerEvents(inlineEvents);removeEvents();}function refreshManifest(){checkSetConfigCall();manifestUpdater.refreshManifest();}function triggerEvents(events){var currentVideoTime=playbackController.getTime();var presentationTime; /* == Trigger events that are ready == */if(events){var eventIds=Object.keys(events);for(var i=0;i < eventIds.length;i++) {var eventId=eventIds[i];var curr=events[eventId];if(curr !== undefined){presentationTime = curr.presentationTime / curr.eventStream.timescale;if(presentationTime === 0 || presentationTime <= currentVideoTime && presentationTime + presentationTimeThreshold > currentVideoTime){logger.debug('Start Event ' + eventId + ' at ' + currentVideoTime);if(curr.duration > 0){activeEvents[eventId] = curr;}if(curr.eventStream.schemeIdUri == MPD_RELOAD_SCHEME && curr.eventStream.value == MPD_RELOAD_VALUE){if(curr.duration !== 0 || curr.presentationTimeDelta !== 0){ //If both are set to zero, it indicates the media is over at this point. Don't reload the manifest.
	refreshManifest();}}else {eventBus.trigger(curr.eventStream.schemeIdUri,{event:curr});}delete events[eventId];}}}}}function setConfig(config){if(!config)return;if(config.manifestUpdater){manifestUpdater = config.manifestUpdater;}if(config.playbackController){playbackController = config.playbackController;}}function reset(){stop();resetInitialSettings();}instance = {addInlineEvents:addInlineEvents,addInbandEvents:addInbandEvents,stop:stop,start:start,setConfig:setConfig,reset:reset};setup();return instance;}EventController.__dashjs_factory_name = 'EventController';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(EventController);module.exports = exports['default'];
	//# sourceMappingURL=EventController.js.map


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _voMetricsHTTPRequest=__webpack_require__(65);var _voDataChunk=__webpack_require__(168);var _voDataChunk2=_interopRequireDefault(_voDataChunk);var _modelsFragmentModel=__webpack_require__(53);var _modelsFragmentModel2=_interopRequireDefault(_modelsFragmentModel);var _FragmentLoader=__webpack_require__(169);var _FragmentLoader2=_interopRequireDefault(_FragmentLoader);var _utilsRequestModifier=__webpack_require__(160);var _utilsRequestModifier2=_interopRequireDefault(_utilsRequestModifier);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);function FragmentController(config){config = config || {};var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var errHandler=config.errHandler;var mediaPlayerModel=config.mediaPlayerModel;var metricsModel=config.metricsModel;var instance=undefined,logger=undefined,fragmentModels=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);resetInitialSettings();eventBus.on(_coreEventsEvents2['default'].FRAGMENT_LOADING_COMPLETED,onFragmentLoadingCompleted,instance);eventBus.on(_coreEventsEvents2['default'].FRAGMENT_LOADING_PROGRESS,onFragmentLoadingCompleted,instance);}function getModel(type){var model=fragmentModels[type];if(!model){model = (0,_modelsFragmentModel2['default'])(context).create({metricsModel:metricsModel,fragmentLoader:(0,_FragmentLoader2['default'])(context).create({metricsModel:metricsModel,mediaPlayerModel:mediaPlayerModel,errHandler:errHandler,requestModifier:(0,_utilsRequestModifier2['default'])(context).getInstance()})});fragmentModels[type] = model;}return model;}function isInitializationRequest(request){return request && request.type && request.type === _voMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE;}function resetInitialSettings(){for(var model in fragmentModels) {fragmentModels[model].reset();}fragmentModels = {};}function reset(){eventBus.off(_coreEventsEvents2['default'].FRAGMENT_LOADING_COMPLETED,onFragmentLoadingCompleted,this);eventBus.off(_coreEventsEvents2['default'].FRAGMENT_LOADING_PROGRESS,onFragmentLoadingCompleted,this);resetInitialSettings();}function createDataChunk(bytes,request,streamId,endFragment){var chunk=new _voDataChunk2['default']();chunk.streamId = streamId;chunk.mediaInfo = request.mediaInfo;chunk.segmentType = request.type;chunk.start = request.startTime;chunk.duration = request.duration;chunk.end = chunk.start + chunk.duration;chunk.bytes = bytes;chunk.index = request.index;chunk.quality = request.quality;chunk.representationId = request.representationId;chunk.endFragment = endFragment;return chunk;}function onFragmentLoadingCompleted(e){if(fragmentModels[e.request.mediaType] !== e.sender){return;}var request=e.request;var bytes=e.response;var isInit=isInitializationRequest(request);var streamInfo=request.mediaInfo.streamInfo;if(e.error){if(e.request.mediaType === _constantsConstants2['default'].AUDIO || e.request.mediaType === _constantsConstants2['default'].VIDEO || e.request.mediaType === _constantsConstants2['default'].FRAGMENTED_TEXT){ // add service location to blacklist controller - only for audio or video. text should not set errors
	eventBus.trigger(_coreEventsEvents2['default'].SERVICE_LOCATION_BLACKLIST_ADD,{entry:e.request.serviceLocation});}}if(!bytes || !streamInfo){logger.warn('No ' + request.mediaType + ' bytes to push or stream is inactive.');return;}var chunk=createDataChunk(bytes,request,streamInfo.id,e.type !== _coreEventsEvents2['default'].FRAGMENT_LOADING_PROGRESS);eventBus.trigger(isInit?_coreEventsEvents2['default'].INIT_FRAGMENT_LOADED:_coreEventsEvents2['default'].MEDIA_FRAGMENT_LOADED,{chunk:chunk,fragmentModel:e.sender});}instance = {getModel:getModel,isInitializationRequest:isInitializationRequest,reset:reset};setup();return instance;}FragmentController.__dashjs_factory_name = 'FragmentController';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(FragmentController);module.exports = exports['default'];
	//# sourceMappingURL=FragmentController.js.map


/***/ }),
/* 168 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var DataChunk= //Represents a data structure that keep all the necessary info about a single init/media segment
	function DataChunk(){_classCallCheck(this,DataChunk);this.streamId = null;this.mediaInfo = null;this.segmentType = null;this.quality = NaN;this.index = NaN;this.bytes = null;this.start = NaN;this.end = NaN;this.duration = NaN;this.representationId = null;this.endFragment = null;};exports["default"] = DataChunk;module.exports = exports["default"];
	//# sourceMappingURL=DataChunk.js.map


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _netHTTPLoader=__webpack_require__(161);var _netHTTPLoader2=_interopRequireDefault(_netHTTPLoader);var _voHeadRequest=__webpack_require__(170);var _voHeadRequest2=_interopRequireDefault(_voHeadRequest);var _voDashJSError=__webpack_require__(62);var _voDashJSError2=_interopRequireDefault(_voDashJSError);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _streamingUtilsBoxParser=__webpack_require__(67);var _streamingUtilsBoxParser2=_interopRequireDefault(_streamingUtilsBoxParser);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);function FragmentLoader(config){config = config || {};var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var instance=undefined,httpLoader=undefined;function setup(){var boxParser=(0,_streamingUtilsBoxParser2['default'])(context).getInstance();httpLoader = (0,_netHTTPLoader2['default'])(context).create({errHandler:config.errHandler,metricsModel:config.metricsModel,mediaPlayerModel:config.mediaPlayerModel,requestModifier:config.requestModifier,boxParser:boxParser,useFetch:config.mediaPlayerModel.getLowLatencyEnabled()});}function checkForExistence(request){var report=function report(success){eventBus.trigger(_coreEventsEvents2['default'].CHECK_FOR_EXISTENCE_COMPLETED,{request:request,exists:success});};if(request){var headRequest=new _voHeadRequest2['default'](request.url);httpLoader.load({request:headRequest,success:function success(){report(true);},error:function error(){report(false);}});}else {report(false);}}function load(request){var report=function report(data,error){eventBus.trigger(_coreEventsEvents2['default'].LOADING_COMPLETED,{request:request,response:data || null,error:error || null,sender:instance});};if(request){httpLoader.load({request:request,progress:function progress(event){eventBus.trigger(_coreEventsEvents2['default'].LOADING_PROGRESS,{request:request,stream:event.stream});if(event.data){eventBus.trigger(_coreEventsEvents2['default'].LOADING_DATA_PROGRESS,{request:request,response:event.data || null,error:null,sender:instance});}},success:function success(data){report(data);},error:function error(request,statusText,errorText){report(undefined,new _voDashJSError2['default'](_coreErrorsErrors2['default'].FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE,errorText,statusText));},abort:function abort(request){if(request){eventBus.trigger(_coreEventsEvents2['default'].LOADING_ABANDONED,{request:request,mediaType:request.mediaType,sender:instance});}}});}else {report(undefined,new _voDashJSError2['default'](_coreErrorsErrors2['default'].FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE,_coreErrorsErrors2['default'].FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE));}}function abort(){if(httpLoader){httpLoader.abort();}}function reset(){if(httpLoader){httpLoader.abort();httpLoader = null;}}instance = {checkForExistence:checkForExistence,load:load,abort:abort,reset:reset};setup();return instance;}FragmentLoader.__dashjs_factory_name = 'FragmentLoader';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(FragmentLoader);module.exports = exports['default'];
	//# sourceMappingURL=FragmentLoader.js.map


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _get=function get(_x,_x2,_x3){var _again=true;_function: while(_again) {var object=_x,property=_x2,receiver=_x3;_again = false;if(object === null)object = Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc === undefined){var parent=Object.getPrototypeOf(object);if(parent === null){return undefined;}else {_x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;}}else if('value' in desc){return desc.value;}else {var getter=desc.get;if(getter === undefined){return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass,superClass){if(typeof superClass !== 'function' && superClass !== null){throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__ = superClass;}var _FragmentRequest2=__webpack_require__(59);var _FragmentRequest3=_interopRequireDefault(_FragmentRequest2);var HeadRequest=(function(_FragmentRequest){_inherits(HeadRequest,_FragmentRequest);function HeadRequest(url){_classCallCheck(this,HeadRequest);_get(Object.getPrototypeOf(HeadRequest.prototype),'constructor',this).call(this);this.url = url || null;this.checkForExistenceOnly = true;}return HeadRequest;})(_FragmentRequest3['default']);exports['default'] = HeadRequest;module.exports = exports['default'];
	//# sourceMappingURL=HeadRequest.js.map


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _voThumbnail=__webpack_require__(172);var _voThumbnail2=_interopRequireDefault(_voThumbnail);var _ThumbnailTracks=__webpack_require__(173);var _ThumbnailTracks2=_interopRequireDefault(_ThumbnailTracks);var _voBitrateInfo=__webpack_require__(131);var _voBitrateInfo2=_interopRequireDefault(_voBitrateInfo);var _dashUtilsSegmentsUtils=__webpack_require__(148);function ThumbnailController(config){var context=this.context;var instance=undefined,thumbnailTracks=undefined;function setup(){reset();thumbnailTracks = (0,_ThumbnailTracks2['default'])(context).create({dashManifestModel:config.dashManifestModel,adapter:config.adapter,baseURLController:config.baseURLController,stream:config.stream,timelineConverter:config.timelineConverter});}function getThumbnail(time,callback){var track=thumbnailTracks.getCurrentTrack();if(!track || track.segmentDuration <= 0 || time === undefined || time === null){return null;} // Calculate index of the sprite given a time
	var seq=Math.floor(time / track.segmentDuration);var offset=time % track.segmentDuration;var thumbIndex=Math.floor(offset * track.tilesHor * track.tilesVert / track.segmentDuration); // Create and return the thumbnail
	var thumbnail=new _voThumbnail2['default']();thumbnail.width = Math.floor(track.widthPerTile);thumbnail.height = Math.floor(track.heightPerTile);thumbnail.x = Math.floor(thumbIndex % track.tilesHor) * track.widthPerTile;thumbnail.y = Math.floor(thumbIndex / track.tilesHor) * track.heightPerTile;if('readThumbnail' in track){return track.readThumbnail(time,function(url){thumbnail.url = url;if(callback)callback(thumbnail);});}else {thumbnail.url = buildUrlFromTemplate(track,seq);if(callback)callback(thumbnail);return thumbnail;}}function buildUrlFromTemplate(track,seq){var seqIdx=seq + track.startNumber;var url=(0,_dashUtilsSegmentsUtils.replaceTokenForTemplate)(track.templateUrl,'Number',seqIdx);url = (0,_dashUtilsSegmentsUtils.replaceTokenForTemplate)(url,'Time',(seqIdx - 1) * track.segmentDuration);url = (0,_dashUtilsSegmentsUtils.replaceTokenForTemplate)(url,'Bandwidth',track.bandwidth);return (0,_dashUtilsSegmentsUtils.unescapeDollarsInTemplate)(url);}function setTrackByIndex(index){thumbnailTracks.setTrackByIndex(index);}function getCurrentTrackIndex(){return thumbnailTracks.getCurrentTrackIndex();}function getBitrateList(){var tracks=thumbnailTracks.getTracks();var i=0;return tracks.map(function(t){var bitrateInfo=new _voBitrateInfo2['default']();bitrateInfo.mediaType = _constantsConstants2['default'].IMAGE;bitrateInfo.qualityIndex = i++;bitrateInfo.bitrate = t.bitrate;bitrateInfo.width = t.width;bitrateInfo.height = t.height;return bitrateInfo;});}function reset(){if(thumbnailTracks){thumbnailTracks.reset();}}instance = {get:getThumbnail,setTrackByIndex:setTrackByIndex,getCurrentTrackIndex:getCurrentTrackIndex,getBitrateList:getBitrateList,reset:reset};setup();return instance;}ThumbnailController.__dashjs_factory_name = 'ThumbnailController';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(ThumbnailController);module.exports = exports['default'];
	//# sourceMappingURL=ThumbnailController.js.map


/***/ }),
/* 172 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var Thumbnail=function Thumbnail(){_classCallCheck(this,Thumbnail);this.url = null;this.width = null;this.height = null;this.x = null;this.y = null;};exports["default"] = Thumbnail;module.exports = exports["default"];
	//# sourceMappingURL=Thumbnail.js.map


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _dashConstantsDashConstants=__webpack_require__(151);var _dashConstantsDashConstants2=_interopRequireDefault(_dashConstantsDashConstants);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _voThumbnailTrackInfo=__webpack_require__(174);var _voThumbnailTrackInfo2=_interopRequireDefault(_voThumbnailTrackInfo);var _streamingUtilsURLUtils=__webpack_require__(154);var _streamingUtilsURLUtils2=_interopRequireDefault(_streamingUtilsURLUtils);var _dashUtilsSegmentsUtils=__webpack_require__(148);var _dashSegmentBaseLoader=__webpack_require__(159);var _dashSegmentBaseLoader2=_interopRequireDefault(_dashSegmentBaseLoader);var _streamingUtilsBoxParser=__webpack_require__(67);var _streamingUtilsBoxParser2=_interopRequireDefault(_streamingUtilsBoxParser);var _streamingNetXHRLoader=__webpack_require__(162);var _streamingNetXHRLoader2=_interopRequireDefault(_streamingNetXHRLoader);var THUMBNAILS_SCHEME_ID_URIS=['http://dashif.org/thumbnail_tile','http://dashif.org/guidelines/thumbnail_tile'];function ThumbnailTracks(config){var context=this.context;var dashManifestModel=config.dashManifestModel;var adapter=config.adapter;var baseURLController=config.baseURLController;var stream=config.stream;var urlUtils=(0,_streamingUtilsURLUtils2['default'])(context).getInstance();var loader=undefined,segmentBaseLoader=undefined,boxParser=undefined;var timelineConverter=config.timelineConverter;var metricsModel=config.metricsModel;var mediaPlayerModel=config.mediaPlayerModel;var errHandler=config.errHandler;var instance=undefined,tracks=undefined,currentTrackIndex=undefined;function initialize(){reset();loader = (0,_streamingNetXHRLoader2['default'])(context).create({});boxParser = (0,_streamingUtilsBoxParser2['default'])(context).getInstance();segmentBaseLoader = (0,_dashSegmentBaseLoader2['default'])(context).getInstance();segmentBaseLoader.setConfig({baseURLController:baseURLController,metricsModel:metricsModel,mediaPlayerModel:mediaPlayerModel,errHandler:errHandler}); // parse representation and create tracks
	addTracks();}function normalizeSegments(fragments,representation){var segments=[];var count=0;var i=undefined,len=undefined,s=undefined,seg=undefined;for(i = 0,len = fragments.length;i < len;i++) {s = fragments[i];seg = (0,_dashUtilsSegmentsUtils.getTimeBasedSegment)(timelineConverter,dashManifestModel.getIsDynamic(),representation,s.startTime,s.duration,s.timescale,s.media,s.mediaRange,count);segments.push(seg);seg = null;count++;}return segments;}function addTracks(){if(!stream || !dashManifestModel || !adapter){return;}var streamInfo=stream.getStreamInfo();if(!streamInfo){return;} // Extract thumbnail tracks
	var mediaInfo=adapter.getMediaInfoForType(streamInfo,_constantsConstants2['default'].IMAGE);if(!mediaInfo){return;}var voAdaptation=adapter.getDataForMedia(mediaInfo);if(!voAdaptation){return;}var voReps=dashManifestModel.getRepresentationsForAdaptation(voAdaptation);if(voReps && voReps.length > 0){voReps.forEach(function(rep){if(rep.segmentInfoType === _dashConstantsDashConstants2['default'].SEGMENT_TEMPLATE && rep.segmentDuration > 0 && rep.media)createTrack(rep);if(rep.segmentInfoType === _dashConstantsDashConstants2['default'].SEGMENT_BASE)createTrack(rep,true);});}if(tracks.length > 0){ // Sort bitrates and select the lowest bitrate rendition
	tracks.sort(function(a,b){return a.bitrate - b.bitrate;});currentTrackIndex = tracks.length - 1;}}function createTrack(representation,useSegmentBase){var track=new _voThumbnailTrackInfo2['default']();track.id = representation.id;track.bitrate = representation.bandwidth;track.width = representation.width;track.height = representation.height;track.tilesHor = 1;track.tilesVert = 1;if(representation.essentialProperties){representation.essentialProperties.forEach(function(p){if(THUMBNAILS_SCHEME_ID_URIS.indexOf(p.schemeIdUri) >= 0 && p.value){var vars=p.value.split('x');if(vars.length === 2 && !isNaN(vars[0]) && !isNaN(vars[1])){track.tilesHor = parseInt(vars[0],10);track.tilesVert = parseInt(vars[1],10);}}});}if(useSegmentBase){segmentBaseLoader.loadSegments(representation,_constantsConstants2['default'].IMAGE,representation.indexRange,{},function(segments,representation){var cache=[];segments = normalizeSegments(segments,representation);track.segmentDuration = segments[0].duration; //assume all segments have the same duration
	track.readThumbnail = function(time,callback){var cached=null;cache.some(function(el){if(el.start <= time && el.end > time){cached = el.url;return true;}});if(cached){callback(cached);}else {segments.some(function(ss){if(ss.mediaStartTime <= time && ss.mediaStartTime + ss.duration > time){var baseURL=baseURLController.resolve(representation.path);loader.load({method:'get',url:baseURL.url,request:{range:ss.mediaRange,responseType:'arraybuffer'},onload:function onload(e){var info=boxParser.getSamplesInfo(e.target.response);var blob=new Blob([e.target.response.slice(info.sampleList[0].offset,info.sampleList[0].offset + info.sampleList[0].size)],{type:'image/jpeg'});var imageUrl=window.URL.createObjectURL(blob);cache.push({start:ss.mediaStartTime,end:ss.mediaStartTime + ss.duration,url:imageUrl});if(callback)callback(imageUrl);}});return true;}});}};});}else {track.startNumber = representation.startNumber;track.segmentDuration = representation.segmentDuration;track.timescale = representation.timescale;track.templateUrl = buildTemplateUrl(representation);}if(track.tilesHor > 0 && track.tilesVert > 0){ // Precalculate width and heigth per tile for perf reasons
	track.widthPerTile = track.width / track.tilesHor;track.heightPerTile = track.height / track.tilesVert;tracks.push(track);}}function buildTemplateUrl(representation){var templateUrl=urlUtils.isRelative(representation.media)?urlUtils.resolve(representation.media,baseURLController.resolve(representation.path).url):representation.media;if(!templateUrl){return '';}return (0,_dashUtilsSegmentsUtils.replaceIDForTemplate)(templateUrl,representation.id);}function getTracks(){return tracks;}function getCurrentTrackIndex(){return currentTrackIndex;}function getCurrentTrack(){if(currentTrackIndex < 0){return null;}return tracks[currentTrackIndex];}function setTrackByIndex(index){if(!tracks || tracks.length === 0){return;} // select highest bitrate in case selected index is higher than bitrate list length
	if(index >= tracks.length){index = tracks.length - 1;}currentTrackIndex = index;}function reset(){tracks = [];currentTrackIndex = -1;}instance = {initialize:initialize,getTracks:getTracks,reset:reset,setTrackByIndex:setTrackByIndex,getCurrentTrack:getCurrentTrack,getCurrentTrackIndex:getCurrentTrackIndex};initialize();return instance;}ThumbnailTracks.__dashjs_factory_name = 'ThumbnailTracks';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(ThumbnailTracks);module.exports = exports['default'];
	//# sourceMappingURL=ThumbnailTracks.js.map


/***/ }),
/* 174 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var ThumbnailTrackInfo=function ThumbnailTrackInfo(){_classCallCheck(this,ThumbnailTrackInfo);this.bitrate = 0;this.width = 0;this.height = 0;this.tilesHor = 0;this.tilesVert = 0;this.widthPerTile = 0;this.heightPerTile = 0;this.startNumber = 0;this.segmentDuration = 0;this.timescale = 0;this.templateUrl = '';this.id = '';};exports['default'] = ThumbnailTrackInfo;module.exports = exports['default'];
	//# sourceMappingURL=ThumbnailTrackInfo.js.map


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);function ManifestUpdater(){var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var instance=undefined,logger=undefined,refreshDelay=undefined,refreshTimer=undefined,isPaused=undefined,isUpdating=undefined,manifestLoader=undefined,manifestModel=undefined,dashManifestModel=undefined,errHandler=undefined,mediaPlayerModel=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);}function setConfig(config){if(!config)return;if(config.manifestModel){manifestModel = config.manifestModel;}if(config.dashManifestModel){dashManifestModel = config.dashManifestModel;}if(config.mediaPlayerModel){mediaPlayerModel = config.mediaPlayerModel;}if(config.manifestLoader){manifestLoader = config.manifestLoader;}if(config.errHandler){errHandler = config.errHandler;}}function initialize(){resetInitialSettings();eventBus.on(_coreEventsEvents2['default'].STREAMS_COMPOSED,onStreamsComposed,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_STARTED,onPlaybackStarted,this);eventBus.on(_coreEventsEvents2['default'].PLAYBACK_PAUSED,onPlaybackPaused,this);eventBus.on(_coreEventsEvents2['default'].INTERNAL_MANIFEST_LOADED,onManifestLoaded,this);}function setManifest(manifest){update(manifest);}function resetInitialSettings(){refreshDelay = NaN;isUpdating = false;isPaused = true;stopManifestRefreshTimer();}function reset(){eventBus.off(_coreEventsEvents2['default'].PLAYBACK_STARTED,onPlaybackStarted,this);eventBus.off(_coreEventsEvents2['default'].PLAYBACK_PAUSED,onPlaybackPaused,this);eventBus.off(_coreEventsEvents2['default'].STREAMS_COMPOSED,onStreamsComposed,this);eventBus.off(_coreEventsEvents2['default'].INTERNAL_MANIFEST_LOADED,onManifestLoaded,this);resetInitialSettings();}function stopManifestRefreshTimer(){if(refreshTimer !== null){clearInterval(refreshTimer);refreshTimer = null;}}function startManifestRefreshTimer(delay){stopManifestRefreshTimer();if(isNaN(delay) && !isNaN(refreshDelay)){delay = refreshDelay * 1000;}if(!isNaN(delay)){logger.debug('Refresh manifest in ' + delay + ' milliseconds.');refreshTimer = setTimeout(onRefreshTimer,delay);}}function refreshManifest(){isUpdating = true;var manifest=manifestModel.getValue();var url=manifest.url;var location=dashManifestModel.getLocation(manifest);if(location){url = location;}manifestLoader.load(url);}function update(manifest){manifestModel.setValue(manifest);var date=new Date();var latencyOfLastUpdate=(date.getTime() - manifest.loadedTime.getTime()) / 1000;refreshDelay = dashManifestModel.getManifestUpdatePeriod(manifest,latencyOfLastUpdate); // setTimeout uses a 32 bit number to store the delay. Any number greater than it
	// will cause event associated with setTimeout to trigger immediately
	if(refreshDelay * 1000 > 0x7FFFFFFF){refreshDelay = 0x7FFFFFFF / 1000;}eventBus.trigger(_coreEventsEvents2['default'].MANIFEST_UPDATED,{manifest:manifest});logger.info('Manifest has been refreshed at ' + date + '[' + date.getTime() / 1000 + '] ');if(!isPaused){startManifestRefreshTimer();}}function onRefreshTimer(){if(isPaused && !mediaPlayerModel.getScheduleWhilePaused()){return;}if(isUpdating){startManifestRefreshTimer(mediaPlayerModel.getManifestUpdateRetryInterval());return;}refreshManifest();}function onManifestLoaded(e){if(!e.error){update(e.manifest);}else if(e.error.code === _coreErrorsErrors2['default'].MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE){errHandler.error(e.error);}}function onPlaybackStarted() /*e*/{isPaused = false;startManifestRefreshTimer();}function onPlaybackPaused() /*e*/{isPaused = true;stopManifestRefreshTimer();}function onStreamsComposed() /*e*/{ // When streams are ready we can consider manifest update completed. Resolve the update promise.
	isUpdating = false;}instance = {initialize:initialize,setManifest:setManifest,refreshManifest:refreshManifest,setConfig:setConfig,reset:reset};setup();return instance;}ManifestUpdater.__dashjs_factory_name = 'ManifestUpdater';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(ManifestUpdater);module.exports = exports['default'];
	//# sourceMappingURL=ManifestUpdater.js.map


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _get=function get(_x,_x2,_x3){var _again=true;_function: while(_again) {var object=_x,property=_x2,receiver=_x3;_again = false;if(object === null)object = Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc === undefined){var parent=Object.getPrototypeOf(object);if(parent === null){return undefined;}else {_x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;}}else if('value' in desc){return desc.value;}else {var getter=desc.get;if(getter === undefined){return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass,superClass){if(typeof superClass !== 'function' && superClass !== null){throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__ = superClass;}var _coreEventsEventsBase=__webpack_require__(58);var _coreEventsEventsBase2=_interopRequireDefault(_coreEventsEventsBase); /**
	 * @class
	 *
	 */var MediaPlayerEvents=(function(_EventsBase){_inherits(MediaPlayerEvents,_EventsBase); /**
	     * @description Public facing external events to be used when developing a player that implements dash.js.
	     */function MediaPlayerEvents(){_classCallCheck(this,MediaPlayerEvents);_get(Object.getPrototypeOf(MediaPlayerEvents.prototype),'constructor',this).call(this); /**
	         * Triggered when playback will not start yet
	         * as the MPD's availabilityStartTime is in the future.
	         * Check delay property in payload to determine time before playback will start.
	         */this.AST_IN_FUTURE = 'astInFuture'; /**
	         * Triggered when the video element's buffer state changes to stalled.
	         * Check mediaType in payload to determine type (Video, Audio, FragmentedText).
	         * @event MediaPlayerEvents#BUFFER_EMPTY
	         */this.BUFFER_EMPTY = 'bufferStalled'; /**
	         * Triggered when the video element's buffer state changes to loaded.
	         * Check mediaType in payload to determine type (Video, Audio, FragmentedText).
	         * @event MediaPlayerEvents#BUFFER_LOADED
	         */this.BUFFER_LOADED = 'bufferLoaded'; /**
	         * Triggered when the video element's buffer state changes, either stalled or loaded. Check payload for state.
	         * @event MediaPlayerEvents#BUFFER_LEVEL_STATE_CHANGED
	         */this.BUFFER_LEVEL_STATE_CHANGED = 'bufferStateChanged'; /**
	         * Triggered when there is an error from the element or MSE source buffer.
	         * @event MediaPlayerEvents#ERROR
	         */this.ERROR = 'error'; /**
	         * Triggered when a fragment download has completed.
	         * @event MediaPlayerEvents#FRAGMENT_LOADING_COMPLETED
	         */this.FRAGMENT_LOADING_COMPLETED = 'fragmentLoadingCompleted'; /**
	         * Triggered when a partial fragment download has completed.
	         * @event MediaPlayerEvents#FRAGMENT_LOADING_PROGRESS
	         */this.FRAGMENT_LOADING_PROGRESS = 'fragmentLoadingProgress'; /**
	         * Triggered when a fragment download has started.
	         * @event MediaPlayerEvents#FRAGMENT_LOADING_STARTED
	         */this.FRAGMENT_LOADING_STARTED = 'fragmentLoadingStarted'; /**
	         * Triggered when a fragment download is abandoned due to detection of slow download base on the ABR abandon rule..
	         * @event MediaPlayerEvents#FRAGMENT_LOADING_ABANDONED
	         */this.FRAGMENT_LOADING_ABANDONED = 'fragmentLoadingAbandoned'; /**
	         * Triggered when {@link module:Debug} logger methods are called.
	         * @event MediaPlayerEvents#LOG
	         */this.LOG = 'log'; //TODO refactor with internal event
	/**
	         * Triggered when the manifest load is complete
	         * @event MediaPlayerEvents#MANIFEST_LOADED
	         */this.MANIFEST_LOADED = 'manifestLoaded'; /**
	         * Triggered anytime there is a change to the overall metrics.
	         * @event MediaPlayerEvents#METRICS_CHANGED
	         */this.METRICS_CHANGED = 'metricsChanged'; /**
	         * Triggered when an individual metric is added, updated or cleared.
	         * @event MediaPlayerEvents#METRIC_CHANGED
	         */this.METRIC_CHANGED = 'metricChanged'; /**
	         * Triggered every time a new metric is added.
	         * @event MediaPlayerEvents#METRIC_ADDED
	         */this.METRIC_ADDED = 'metricAdded'; /**
	         * Triggered every time a metric is updated.
	         * @event MediaPlayerEvents#METRIC_UPDATED
	         */this.METRIC_UPDATED = 'metricUpdated'; /**
	         * Triggered at the stream end of a period.
	         * @event MediaPlayerEvents#PERIOD_SWITCH_COMPLETED
	         */this.PERIOD_SWITCH_COMPLETED = 'periodSwitchCompleted'; /**
	         * Triggered when a new period starts.
	         * @event MediaPlayerEvents#PERIOD_SWITCH_STARTED
	         */this.PERIOD_SWITCH_STARTED = 'periodSwitchStarted'; /**
	         * Triggered when an ABR up /down switch is initiated; either by user in manual mode or auto mode via ABR rules.
	         * @event MediaPlayerEvents#QUALITY_CHANGE_REQUESTED
	         */this.QUALITY_CHANGE_REQUESTED = 'qualityChangeRequested'; /**
	         * Triggered when the new ABR quality is being rendered on-screen.
	         * @event MediaPlayerEvents#QUALITY_CHANGE_RENDERED
	         */this.QUALITY_CHANGE_RENDERED = 'qualityChangeRendered'; /**
	         * Triggered when the new track is being rendered.
	         * @event MediaPlayerEvents#TRACK_CHANGE_RENDERED
	         */this.TRACK_CHANGE_RENDERED = 'trackChangeRendered'; /**
	         * Triggered when the source is setup and ready.
	         * @event MediaPlayerEvents#SOURCE_INITIALIZED
	         */this.SOURCE_INITIALIZED = 'sourceInitialized'; /**
	         * Triggered when a stream (period) is loaded
	         * @event MediaPlayerEvents#STREAM_INITIALIZED
	         */this.STREAM_INITIALIZED = 'streamInitialized'; /**
	         * Triggered when the player has been reset.
	         * @event MediaPlayerEvents#STREAM_TEARDOWN_COMPLETE
	         */this.STREAM_TEARDOWN_COMPLETE = 'streamTeardownComplete'; /**
	         * Triggered once all text tracks detected in the MPD are added to the video element.
	         * @event MediaPlayerEvents#TEXT_TRACKS_ADDED
	         */this.TEXT_TRACKS_ADDED = 'allTextTracksAdded'; /**
	         * Triggered when a text track is added to the video element's TextTrackList
	         * @event MediaPlayerEvents#TEXT_TRACK_ADDED
	         */this.TEXT_TRACK_ADDED = 'textTrackAdded'; /**
	         * Triggered when a ttml chunk is parsed.
	         * @event MediaPlayerEvents#TTML_PARSED
	         */this.TTML_PARSED = 'ttmlParsed'; /**
	         * Triggered when a ttml chunk has to be parsed.
	         * @event MediaPlayerEvents#TTML_TO_PARSE
	         */this.TTML_TO_PARSE = 'ttmlToParse'; /**
	         * Triggered when a caption is rendered.
	         * @event MediaPlayerEvents#CAPTION_RENDERED
	         */this.CAPTION_RENDERED = 'captionRendered'; /**
	         * Triggered when the caption container is resized.
	         * @event MediaPlayerEvents#CAPTION_CONTAINER_RESIZE
	         */this.CAPTION_CONTAINER_RESIZE = 'captionContainerResize'; /**
	         * Sent when enough data is available that the media can be played,
	         * at least for a couple of frames.  This corresponds to the
	         * HAVE_ENOUGH_DATA readyState.
	         * @event MediaPlayerEvents#CAN_PLAY
	         */this.CAN_PLAY = 'canPlay'; /**
	         * Sent when playback completes.
	         * @event MediaPlayerEvents#PLAYBACK_ENDED
	         */this.PLAYBACK_ENDED = 'playbackEnded'; /**
	         * Sent when an error occurs.  The element's error
	         * attribute contains more information.
	         * @event MediaPlayerEvents#PLAYBACK_ERROR
	         */this.PLAYBACK_ERROR = 'playbackError'; /**
	         * Sent when playback is not allowed (for example if user gesture is needed).
	         * @event MediaPlayerEvents#PLAYBACK_NOT_ALLOWED
	         */this.PLAYBACK_NOT_ALLOWED = 'playbackNotAllowed'; /**
	         * The media's metadata has finished loading; all attributes now
	         * contain as much useful information as they're going to.
	         * @event MediaPlayerEvents#PLAYBACK_METADATA_LOADED
	         */this.PLAYBACK_METADATA_LOADED = 'playbackMetaDataLoaded'; /**
	         * Sent when playback is paused.
	         * @event MediaPlayerEvents#PLAYBACK_PAUSED
	         */this.PLAYBACK_PAUSED = 'playbackPaused'; /**
	         * Sent when the media begins to play (either for the first time, after having been paused,
	         * or after ending and then restarting).
	         *
	         * @event MediaPlayerEvents#PLAYBACK_PLAYING
	         */this.PLAYBACK_PLAYING = 'playbackPlaying'; /**
	         * Sent periodically to inform interested parties of progress downloading
	         * the media. Information about the current amount of the media that has
	         * been downloaded is available in the media element's buffered attribute.
	         * @event MediaPlayerEvents#PLAYBACK_PROGRESS
	         */this.PLAYBACK_PROGRESS = 'playbackProgress'; /**
	         * Sent when the playback speed changes.
	         * @event MediaPlayerEvents#PLAYBACK_RATE_CHANGED
	         */this.PLAYBACK_RATE_CHANGED = 'playbackRateChanged'; /**
	         * Sent when a seek operation completes.
	         * @event MediaPlayerEvents#PLAYBACK_SEEKED
	         */this.PLAYBACK_SEEKED = 'playbackSeeked'; /**
	         * Sent when a seek operation begins.
	         * @event MediaPlayerEvents#PLAYBACK_SEEKING
	         */this.PLAYBACK_SEEKING = 'playbackSeeking'; /**
	         * Sent when a seek operation has been asked.
	         * @event MediaPlayerEvents#PLAYBACK_SEEK_ASKED
	         */this.PLAYBACK_SEEK_ASKED = 'playbackSeekAsked'; /**
	         * Sent when the video element reports stalled
	         * @event MediaPlayerEvents#PLAYBACK_STALLED
	         */this.PLAYBACK_STALLED = 'playbackStalled'; /**
	         * Sent when playback of the media starts after having been paused;
	         * that is, when playback is resumed after a prior pause event.
	         *
	         * @event MediaPlayerEvents#PLAYBACK_STARTED
	         */this.PLAYBACK_STARTED = 'playbackStarted'; /**
	         * The time indicated by the element's currentTime attribute has changed.
	         * @event MediaPlayerEvents#PLAYBACK_TIME_UPDATED
	         */this.PLAYBACK_TIME_UPDATED = 'playbackTimeUpdated'; /**
	         * Sent when the media playback has stopped because of a temporary lack of data.
	         *
	         * @event MediaPlayerEvents#PLAYBACK_WAITING
	         */this.PLAYBACK_WAITING = 'playbackWaiting'; /**
	         * Manifest validity changed - As a result of an MPD validity expiration event.
	         * @event MediaPlayerEvents#MANIFEST_VALIDITY_CHANGED
	         */this.MANIFEST_VALIDITY_CHANGED = 'manifestValidityChanged';}return MediaPlayerEvents;})(_coreEventsEventsBase2['default']);var mediaPlayerEvents=new MediaPlayerEvents();exports['default'] = mediaPlayerEvents;module.exports = exports['default'];
	//# sourceMappingURL=MediaPlayerEvents.js.map


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _voDashJSError=__webpack_require__(62);var _voDashJSError2=_interopRequireDefault(_voDashJSError);var _voMetricsHTTPRequest=__webpack_require__(65);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _utilsURLUtils=__webpack_require__(154);var _utilsURLUtils2=_interopRequireDefault(_utilsURLUtils);var HTTP_TIMEOUT_MS=5000;function TimeSyncController(){var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var urlUtils=(0,_utilsURLUtils2['default'])(context).getInstance();var instance=undefined,logger=undefined,offsetToDeviceTimeMs=undefined,isSynchronizing=undefined,isInitialised=undefined,useManifestDateHeaderTimeSource=undefined,handlers=undefined,metricsModel=undefined,dashMetrics=undefined,baseURLController=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);}function initialize(timingSources,useManifestDateHeader){useManifestDateHeaderTimeSource = useManifestDateHeader;offsetToDeviceTimeMs = 0;isSynchronizing = false;isInitialised = false; // a list of known schemeIdUris and a method to call with @value
	handlers = {'urn:mpeg:dash:utc:http-head:2014':httpHeadHandler,'urn:mpeg:dash:utc:http-xsdate:2014':httpHandler.bind(null,xsdatetimeDecoder),'urn:mpeg:dash:utc:http-iso:2014':httpHandler.bind(null,iso8601Decoder),'urn:mpeg:dash:utc:direct:2014':directHandler, // some specs referencing early ISO23009-1 drafts incorrectly use
	// 2012 in the URI, rather than 2014. support these for now.
	'urn:mpeg:dash:utc:http-head:2012':httpHeadHandler,'urn:mpeg:dash:utc:http-xsdate:2012':httpHandler.bind(null,xsdatetimeDecoder),'urn:mpeg:dash:utc:http-iso:2012':httpHandler.bind(null,iso8601Decoder),'urn:mpeg:dash:utc:direct:2012':directHandler, // it isn't clear how the data returned would be formatted, and
	// no public examples available so http-ntp not supported for now.
	// presumably you would do an arraybuffer type xhr and decode the
	// binary data returned but I would want to see a sample first.
	'urn:mpeg:dash:utc:http-ntp:2014':notSupportedHandler, // not clear how this would be supported in javascript (in browser)
	'urn:mpeg:dash:utc:ntp:2014':notSupportedHandler,'urn:mpeg:dash:utc:sntp:2014':notSupportedHandler};if(!getIsSynchronizing()){attemptSync(timingSources);setIsInitialised(true);}}function setConfig(config){if(!config)return;if(config.metricsModel){metricsModel = config.metricsModel;}if(config.dashMetrics){dashMetrics = config.dashMetrics;}if(config.baseURLController){baseURLController = config.baseURLController;}}function getOffsetToDeviceTimeMs(){return getOffsetMs();}function setIsSynchronizing(value){isSynchronizing = value;}function getIsSynchronizing(){return isSynchronizing;}function setIsInitialised(value){isInitialised = value;}function setOffsetMs(value){offsetToDeviceTimeMs = value;}function getOffsetMs(){return offsetToDeviceTimeMs;} // takes xsdatetime and returns milliseconds since UNIX epoch
	// may not be necessary as xsdatetime is very similar to ISO 8601
	// which is natively understood by javascript Date parser
	function alternateXsdatetimeDecoder(xsdatetimeStr){ // taken from DashParser - should probably refactor both uses
	var SECONDS_IN_MIN=60;var MINUTES_IN_HOUR=60;var MILLISECONDS_IN_SECONDS=1000;var datetimeRegex=/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\.[0-9]*)?)?(?:([+\-])([0-9]{2})([0-9]{2}))?/;var utcDate=undefined,timezoneOffset=undefined;var match=datetimeRegex.exec(xsdatetimeStr); // If the string does not contain a timezone offset different browsers can interpret it either
	// as UTC or as a local time so we have to parse the string manually to normalize the given date value for
	// all browsers
	utcDate = Date.UTC(parseInt(match[1],10),parseInt(match[2],10) - 1, // months start from zero
	parseInt(match[3],10),parseInt(match[4],10),parseInt(match[5],10),match[6] && (parseInt(match[6],10) || 0),match[7] && parseFloat(match[7]) * MILLISECONDS_IN_SECONDS || 0); // If the date has timezone offset take it into account as well
	if(match[9] && match[10]){timezoneOffset = parseInt(match[9],10) * MINUTES_IN_HOUR + parseInt(match[10],10);utcDate += (match[8] === '+'?-1:+1) * timezoneOffset * SECONDS_IN_MIN * MILLISECONDS_IN_SECONDS;}return new Date(utcDate).getTime();} // try to use the built in parser, since xsdate is a constrained ISO8601
	// which is supported natively by Date.parse. if that fails, try a
	// regex-based version used elsewhere in this application.
	function xsdatetimeDecoder(xsdatetimeStr){var parsedDate=Date.parse(xsdatetimeStr);if(isNaN(parsedDate)){parsedDate = alternateXsdatetimeDecoder(xsdatetimeStr);}return parsedDate;} // takes ISO 8601 timestamp and returns milliseconds since UNIX epoch
	function iso8601Decoder(isoStr){return Date.parse(isoStr);} // takes RFC 1123 timestamp (which is same as ISO8601) and returns
	// milliseconds since UNIX epoch
	function rfc1123Decoder(dateStr){return Date.parse(dateStr);}function notSupportedHandler(url,onSuccessCB,onFailureCB){onFailureCB();}function directHandler(xsdatetimeStr,onSuccessCB,onFailureCB){var time=xsdatetimeDecoder(xsdatetimeStr);if(!isNaN(time)){onSuccessCB(time);return;}onFailureCB();}function httpHandler(decoder,url,onSuccessCB,onFailureCB,isHeadRequest){var oncomplete=undefined,onload=undefined;var complete=false;var req=new XMLHttpRequest();var verb=isHeadRequest?_voMetricsHTTPRequest.HTTPRequest.HEAD:_voMetricsHTTPRequest.HTTPRequest.GET;var urls=url.match(/\S+/g); // according to ISO 23009-1, url could be a white-space
	// separated list of URLs. just handle one at a time.
	url = urls.shift();oncomplete = function(){if(complete){return;} // we only want to pass through here once per xhr,
	// regardless of whether the load was successful.
	complete = true; // if there are more urls to try, call self.
	if(urls.length){httpHandler(decoder,urls.join(' '),onSuccessCB,onFailureCB,isHeadRequest);}else {onFailureCB();}};onload = function(){var time=undefined,result=undefined;if(req.status === 200){time = isHeadRequest?req.getResponseHeader('Date'):req.response;result = decoder(time); // decoder returns NaN if non-standard input
	if(!isNaN(result)){onSuccessCB(result);complete = true;}}};if(urlUtils.isRelative(url)){ // passing no path to resolve will return just MPD BaseURL/baseUri
	var baseUrl=baseURLController.resolve();if(baseUrl){url = urlUtils.resolve(url,baseUrl.url);}}req.open(verb,url);req.timeout = HTTP_TIMEOUT_MS || 0;req.onload = onload;req.onloadend = oncomplete;req.send();}function httpHeadHandler(url,onSuccessCB,onFailureCB){httpHandler(rfc1123Decoder,url,onSuccessCB,onFailureCB,true);}function checkForDateHeader(){var metrics=metricsModel.getReadOnlyMetricsFor(_constantsConstants2['default'].STREAM);var dateHeaderValue=dashMetrics.getLatestMPDRequestHeaderValueByID(metrics,'Date');var dateHeaderTime=dateHeaderValue !== null?new Date(dateHeaderValue).getTime():Number.NaN;if(!isNaN(dateHeaderTime)){setOffsetMs(dateHeaderTime - new Date().getTime());completeTimeSyncSequence(false,dateHeaderTime / 1000,offsetToDeviceTimeMs);}else {completeTimeSyncSequence(true);}}function completeTimeSyncSequence(failed,time,offset){setIsSynchronizing(false);eventBus.trigger(_coreEventsEvents2['default'].TIME_SYNCHRONIZATION_COMPLETED,{time:time,offset:offset,error:failed?new _voDashJSError2['default'](_coreErrorsErrors2['default'].TIME_SYNC_FAILED_ERROR_CODE,_coreErrorsErrors2['default'].TIME_SYNC_FAILED_ERROR_MESSAGE):null});}function calculateTimeOffset(serverTime,deviceTime){return serverTime - deviceTime;}function attemptSync(sources,sourceIndex){ // if called with no sourceIndex, use zero (highest priority)
	var index=sourceIndex || 0; // the sources should be ordered in priority from the manifest.
	// try each in turn, from the top, until either something
	// sensible happens, or we run out of sources to try.
	var source=sources[index]; // callback to emit event to listeners
	var onComplete=function onComplete(time,offset){var failed=!time || !offset;if(failed && useManifestDateHeaderTimeSource){ //Before falling back to binary search , check if date header exists on MPD. if so, use for a time source.
	checkForDateHeader();}else {completeTimeSyncSequence(failed,time,offset);}};setIsSynchronizing(true);if(source){ // check if there is a handler for this @schemeIdUri
	if(handlers.hasOwnProperty(source.schemeIdUri)){ // if so, call it with its @value
	handlers[source.schemeIdUri](source.value,function(serverTime){ // the timing source returned something useful
	var deviceTime=new Date().getTime();var offset=calculateTimeOffset(serverTime,deviceTime);setOffsetMs(offset);logger.info('Local time: ' + new Date(deviceTime));logger.info('Server time: ' + new Date(serverTime));logger.info('Server Time - Local Time (ms): ' + offset);onComplete(serverTime,offset);},function(){ // the timing source was probably uncontactable
	// or returned something we can't use - try again
	// with the remaining sources
	attemptSync(sources,index + 1);});}else { // an unknown schemeIdUri must have been found
	// try again with the remaining sources
	attemptSync(sources,index + 1);}}else { // no valid time source could be found, just use device time
	setOffsetMs(0);onComplete();}}function reset(){setIsInitialised(false);setIsSynchronizing(false);}instance = {initialize:initialize,getOffsetToDeviceTimeMs:getOffsetToDeviceTimeMs,setConfig:setConfig,reset:reset};setup();return instance;}TimeSyncController.__dashjs_factory_name = 'TimeSyncController';var factory=_coreFactoryMaker2['default'].getSingletonFactory(TimeSyncController);factory.HTTP_TIMEOUT_MS = HTTP_TIMEOUT_MS;_coreFactoryMaker2['default'].updateSingletonFactory(TimeSyncController.__dashjs_factory_name,factory);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=TimeSyncController.js.map


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _modelsBaseURLTreeModel=__webpack_require__(179);var _modelsBaseURLTreeModel2=_interopRequireDefault(_modelsBaseURLTreeModel);var _utilsBaseURLSelector=__webpack_require__(182);var _utilsBaseURLSelector2=_interopRequireDefault(_utilsBaseURLSelector);var _utilsURLUtils=__webpack_require__(154);var _utilsURLUtils2=_interopRequireDefault(_utilsURLUtils);var _dashVoBaseURL=__webpack_require__(186);var _dashVoBaseURL2=_interopRequireDefault(_dashVoBaseURL);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);function BaseURLController(){var instance=undefined;var dashManifestModel=undefined;var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var urlUtils=(0,_utilsURLUtils2['default'])(context).getInstance();var baseURLTreeModel=undefined,baseURLSelector=undefined;function onBlackListChanged(e){baseURLTreeModel.invalidateSelectedIndexes(e.entry);}function setup(){baseURLTreeModel = (0,_modelsBaseURLTreeModel2['default'])(context).create();baseURLSelector = (0,_utilsBaseURLSelector2['default'])(context).create();eventBus.on(_coreEventsEvents2['default'].SERVICE_LOCATION_BLACKLIST_CHANGED,onBlackListChanged,instance);}function setConfig(config){if(config.baseURLTreeModel){baseURLTreeModel = config.baseURLTreeModel;}if(config.baseURLSelector){baseURLSelector = config.baseURLSelector;}if(config.dashManifestModel){dashManifestModel = config.dashManifestModel;}}function update(manifest){baseURLTreeModel.update(manifest);baseURLSelector.chooseSelectorFromManifest(manifest);}function resolve(path){var baseUrls=baseURLTreeModel.getForPath(path);var baseUrl=baseUrls.reduce(function(p,c){var b=baseURLSelector.select(c);if(b){if(!urlUtils.isRelative(b.url)){p.url = b.url;p.serviceLocation = b.serviceLocation;}else {p.url = urlUtils.resolve(b.url,p.url);}p.availabilityTimeOffset = b.availabilityTimeOffset;p.availabilityTimeComplete = b.availabilityTimeComplete;}else {return new _dashVoBaseURL2['default']();}return p;},new _dashVoBaseURL2['default']());if(!urlUtils.isRelative(baseUrl.url)){return baseUrl;}}function reset(){baseURLTreeModel.reset();baseURLSelector.reset();}function initialize(data){ // report config to baseURLTreeModel and baseURLSelector
	baseURLTreeModel.setConfig({dashManifestModel:dashManifestModel});baseURLSelector.setConfig({dashManifestModel:dashManifestModel});update(data);}instance = {reset:reset,initialize:initialize,resolve:resolve,setConfig:setConfig};setup();return instance;}BaseURLController.__dashjs_factory_name = 'BaseURLController';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(BaseURLController);module.exports = exports['default'];
	//# sourceMappingURL=BaseURLController.js.map


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var _utilsObjectUtils=__webpack_require__(180);var _utilsObjectUtils2=_interopRequireDefault(_utilsObjectUtils);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var DEFAULT_INDEX=NaN;var Node=function Node(_baseUrls,_selectedIdx){_classCallCheck(this,Node);this.data = {baseUrls:_baseUrls || null,selectedIdx:_selectedIdx || DEFAULT_INDEX};this.children = [];};function BaseURLTreeModel(){var instance=undefined,root=undefined,dashManifestModel=undefined;var context=this.context;var objectUtils=(0,_utilsObjectUtils2['default'])(context).getInstance();function setup(){reset();}function setConfig(config){if(config.dashManifestModel){dashManifestModel = config.dashManifestModel;}}function checkSetConfigCall(){if(!dashManifestModel || !dashManifestModel.hasOwnProperty('getBaseURLsFromElement') || !dashManifestModel.hasOwnProperty('getRepresentationSortFunction')){throw new Error('setConfig function has to be called previously');}}function updateChildData(node,index,element){var baseUrls=dashManifestModel.getBaseURLsFromElement(element);if(!node[index]){node[index] = new Node(baseUrls);}else {if(!objectUtils.areEqual(baseUrls,node[index].data.baseUrls)){node[index].data.baseUrls = baseUrls;node[index].data.selectedIdx = DEFAULT_INDEX;}}}function getBaseURLCollectionsFromManifest(manifest){checkSetConfigCall();var baseUrls=dashManifestModel.getBaseURLsFromElement(manifest);if(!objectUtils.areEqual(baseUrls,root.data.baseUrls)){root.data.baseUrls = baseUrls;root.data.selectedIdx = DEFAULT_INDEX;}if(manifest && manifest.Period_asArray){manifest.Period_asArray.forEach(function(p,pi){updateChildData(root.children,pi,p);if(p.AdaptationSet_asArray){p.AdaptationSet_asArray.forEach(function(a,ai){updateChildData(root.children[pi].children,ai,a);if(a.Representation_asArray){a.Representation_asArray.sort(dashManifestModel.getRepresentationSortFunction()).forEach(function(r,ri){updateChildData(root.children[pi].children[ai].children,ri,r);});}});}});}}function walk(callback,node){var target=node || root;callback(target.data);if(target.children){target.children.forEach(function(child){return walk(callback,child);});}}function invalidateSelectedIndexes(serviceLocation){walk(function(data){if(!isNaN(data.selectedIdx)){if(serviceLocation === data.baseUrls[data.selectedIdx].serviceLocation){data.selectedIdx = DEFAULT_INDEX;}}});}function update(manifest){getBaseURLCollectionsFromManifest(manifest);}function reset(){root = new Node();}function getForPath(path){var target=root;var nodes=[target.data];if(path){path.forEach(function(p){target = target.children[p];if(target){nodes.push(target.data);}});}return nodes.filter(function(n){return n.baseUrls.length;});}instance = {reset:reset,update:update,getForPath:getForPath,invalidateSelectedIndexes:invalidateSelectedIndexes,setConfig:setConfig};setup();return instance;}BaseURLTreeModel.__dashjs_factory_name = 'BaseURLTreeModel';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(BaseURLTreeModel);module.exports = exports['default'];
	//# sourceMappingURL=BaseURLTreeModel.js.map


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _fastDeepEqual=__webpack_require__(181);var _fastDeepEqual2=_interopRequireDefault(_fastDeepEqual); /**
	 * @module ObjectUtils
	 * @description Provides utility functions for objects
	 */function ObjectUtils(){var instance=undefined; /**
	     * Returns true if objects are equal
	     * @return {boolean}
	     * @param {object} obj1
	     * @param {object} obj2
	     * @memberof module:ObjectUtils
	     * @instance
	     */function areEqual(obj1,obj2){return (0,_fastDeepEqual2['default'])(obj1,obj2);}instance = {areEqual:areEqual};return instance;}ObjectUtils.__dashjs_factory_name = 'ObjectUtils';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(ObjectUtils);module.exports = exports['default'];
	//# sourceMappingURL=ObjectUtils.js.map


/***/ }),
/* 181 */
/***/ (function(module, exports) {

	'use strict';

	var isArray = Array.isArray;
	var keyList = Object.keys;
	var hasProp = Object.prototype.hasOwnProperty;

	module.exports = function equal(a, b) {
	  if (a === b) return true;

	  var arrA = isArray(a)
	    , arrB = isArray(b)
	    , i
	    , length
	    , key;

	  if (arrA && arrB) {
	    length = a.length;
	    if (length != b.length) return false;
	    for (i = 0; i < length; i++)
	      if (!equal(a[i], b[i])) return false;
	    return true;
	  }

	  if (arrA != arrB) return false;

	  var dateA = a instanceof Date
	    , dateB = b instanceof Date;
	  if (dateA != dateB) return false;
	  if (dateA && dateB) return a.getTime() == b.getTime();

	  var regexpA = a instanceof RegExp
	    , regexpB = b instanceof RegExp;
	  if (regexpA != regexpB) return false;
	  if (regexpA && regexpB) return a.toString() == b.toString();

	  if (a instanceof Object && b instanceof Object) {
	    var keys = keyList(a);
	    length = keys.length;

	    if (length !== keyList(b).length)
	      return false;

	    for (i = 0; i < length; i++)
	      if (!hasProp.call(b, keys[i])) return false;

	    for (i = 0; i < length; i++) {
	      key = keys[i];
	      if (!equal(a[key], b[key])) return false;
	    }

	    return true;
	  }

	  return false;
	};


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _controllersBlacklistController=__webpack_require__(183);var _controllersBlacklistController2=_interopRequireDefault(_controllersBlacklistController);var _baseUrlResolutionDVBSelector=__webpack_require__(184);var _baseUrlResolutionDVBSelector2=_interopRequireDefault(_baseUrlResolutionDVBSelector);var _baseUrlResolutionBasicSelector=__webpack_require__(185);var _baseUrlResolutionBasicSelector2=_interopRequireDefault(_baseUrlResolutionBasicSelector);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _voDashJSError=__webpack_require__(62);var _voDashJSError2=_interopRequireDefault(_voDashJSError);var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);function BaseURLSelector(){var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var dashManifestModel=undefined;var instance=undefined,serviceLocationBlacklistController=undefined,basicSelector=undefined,dvbSelector=undefined,selector=undefined;function setup(){serviceLocationBlacklistController = (0,_controllersBlacklistController2['default'])(context).create({updateEventName:_coreEventsEvents2['default'].SERVICE_LOCATION_BLACKLIST_CHANGED,addBlacklistEventName:_coreEventsEvents2['default'].SERVICE_LOCATION_BLACKLIST_ADD});basicSelector = (0,_baseUrlResolutionBasicSelector2['default'])(context).create({blacklistController:serviceLocationBlacklistController});dvbSelector = (0,_baseUrlResolutionDVBSelector2['default'])(context).create({blacklistController:serviceLocationBlacklistController});selector = basicSelector;}function setConfig(config){if(config.selector){selector = config.selector;}if(config.dashManifestModel){dashManifestModel = config.dashManifestModel;}}function checkConfig(){if(!dashManifestModel || !dashManifestModel.hasOwnProperty('getIsDVB')){throw new Error(_constantsConstants2['default'].MISSING_CONFIG_ERROR);}}function chooseSelectorFromManifest(manifest){checkConfig();if(dashManifestModel.getIsDVB(manifest)){selector = dvbSelector;}else {selector = basicSelector;}}function select(data){if(!data){return;}var baseUrls=data.baseUrls;var selectedIdx=data.selectedIdx; // Once a random selection has been carried out amongst a group of BaseURLs with the same
	// @priority attribute value, then that choice should be re-used if the selection needs to be made again
	// unless the blacklist has been modified or the available BaseURLs have changed.
	if(!isNaN(selectedIdx)){return baseUrls[selectedIdx];}var selectedBaseUrl=selector.select(baseUrls);if(!selectedBaseUrl){eventBus.trigger(_coreEventsEvents2['default'].URL_RESOLUTION_FAILED,{error:new _voDashJSError2['default'](_coreErrorsErrors2['default'].URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE,_coreErrorsErrors2['default'].URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE)});if(selector === basicSelector){reset();}return;}data.selectedIdx = baseUrls.indexOf(selectedBaseUrl);return selectedBaseUrl;}function reset(){serviceLocationBlacklistController.reset();}instance = {chooseSelectorFromManifest:chooseSelectorFromManifest,select:select,reset:reset,setConfig:setConfig};setup();return instance;}BaseURLSelector.__dashjs_factory_name = 'BaseURLSelector';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(BaseURLSelector);module.exports = exports['default'];
	//# sourceMappingURL=BaseURLSelector.js.map


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);function BlackListController(config){config = config || {};var blacklist=[];var eventBus=(0,_coreEventBus2['default'])(this.context).getInstance();var updateEventName=config.updateEventName;var addBlacklistEventName=config.addBlacklistEventName;function contains(query){if(!blacklist.length || !query || !query.length){return false;}return blacklist.indexOf(query) !== -1;}function add(entry){if(blacklist.indexOf(entry) !== -1){return;}blacklist.push(entry);eventBus.trigger(updateEventName,{entry:entry});}function onAddBlackList(e){add(e.entry);}function setup(){if(addBlacklistEventName){eventBus.on(addBlacklistEventName,onAddBlackList,this);}}function reset(){blacklist = [];}setup();return {add:add,contains:contains,reset:reset};}BlackListController.__dashjs_factory_name = 'BlackListController';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(BlackListController);module.exports = exports['default'];
	//# sourceMappingURL=BlacklistController.js.map


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);function DVBSelector(config){config = config || {};var instance=undefined;var blacklistController=config.blacklistController;function getNonBlacklistedBaseUrls(urls){var removedPriorities=[];var samePrioritiesFilter=function samePrioritiesFilter(el){if(removedPriorities.length){if(el.dvb_priority && removedPriorities.indexOf(el.dvb_priority) !== -1){return false;}}return true;};var serviceLocationFilter=function serviceLocationFilter(baseUrl){if(blacklistController.contains(baseUrl.serviceLocation)){ // whenever a BaseURL is removed from the available list of
	// BaseURLs, any other BaseURL with the same @priority
	// value as the BaseURL being removed shall also be removed
	if(baseUrl.dvb_priority){removedPriorities.push(baseUrl.dvb_priority);} // all URLs in the list which have a @serviceLocation
	// attribute matching an entry in the blacklist shall be
	// removed from the available list of BaseURLs
	return false;}return true;};return urls.filter(serviceLocationFilter).filter(samePrioritiesFilter);}function selectByWeight(availableUrls){var prioritySorter=function prioritySorter(a,b){var diff=a.dvb_priority - b.dvb_priority;return isNaN(diff)?0:diff;};var topPriorityFilter=function topPriorityFilter(baseUrl,idx,arr){return !idx || arr[0].dvb_priority && baseUrl.dvb_priority && arr[0].dvb_priority === baseUrl.dvb_priority;};var totalWeight=0;var cumulWeights=[];var idx=0;var rn=undefined,urls=undefined; // It shall begin by taking the set of resolved BaseURLs present or inherited at the current
	// position in the MPD, resolved and filtered as described in 10.8.2.1, that have the lowest
	// @priority attribute value.
	urls = availableUrls.sort(prioritySorter).filter(topPriorityFilter);if(urls.length){if(urls.length > 1){ // If there is more than one BaseURL with this lowest @priority attribute value then the Player
	// shall select one of them at random such that the probability of each BaseURL being chosen
	// is proportional to the value of its @weight attribute. The method described in RFC 2782
	// [26] or picking from a number of weighted entries is suitable for this, but there may be other
	// algorithms which achieve the same effect.
	// add all the weights together, storing the accumulated weight per entry
	urls.forEach(function(baseUrl){totalWeight += baseUrl.dvb_weight;cumulWeights.push(totalWeight);}); // pick a random number between zero and totalWeight
	rn = Math.floor(Math.random() * (totalWeight - 1)); // select the index for the range rn falls within
	cumulWeights.every(function(limit,index){idx = index;if(rn < limit){return false;}return true;});}return urls[idx];}}function select(baseUrls){return baseUrls && selectByWeight(getNonBlacklistedBaseUrls(baseUrls));}instance = {select:select};return instance;}DVBSelector.__dashjs_factory_name = 'DVBSelector';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(DVBSelector);module.exports = exports['default'];
	//# sourceMappingURL=DVBSelector.js.map


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);function BasicSelector(config){config = config || {};var instance=undefined;var blacklistController=config.blacklistController;function select(baseUrls){var index=0;var selectedBaseUrl=undefined;if(baseUrls && baseUrls.some(function(baseUrl,idx){index = idx;return !blacklistController.contains(baseUrl.serviceLocation);})){selectedBaseUrl = baseUrls[index];}return selectedBaseUrl;}instance = {select:select};return instance;}BasicSelector.__dashjs_factory_name = 'BasicSelector';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(BasicSelector);module.exports = exports['default'];
	//# sourceMappingURL=BasicSelector.js.map


/***/ }),
/* 186 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var DEFAULT_DVB_PRIORITY=1;var DEFAULT_DVB_WEIGHT=1;var BaseURL=function BaseURL(url,serviceLocation,priority,weight){_classCallCheck(this,BaseURL);this.url = url || '';this.serviceLocation = serviceLocation || url || ''; // DVB extensions
	this.dvb_priority = priority || DEFAULT_DVB_PRIORITY;this.dvb_weight = weight || DEFAULT_DVB_WEIGHT;this.availabilityTimeOffset = 0;this.availabilityTimeComplete = true; /* currently unused:
	         * byteRange,
	         */};BaseURL.DEFAULT_DVB_PRIORITY = DEFAULT_DVB_PRIORITY;BaseURL.DEFAULT_DVB_WEIGHT = DEFAULT_DVB_WEIGHT;exports['default'] = BaseURL;module.exports = exports['default'];
	//# sourceMappingURL=BaseURL.js.map


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);function MediaSourceController(){var instance=undefined,logger=undefined;var context=this.context;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);}function createMediaSource(){var hasWebKit=('WebKitMediaSource' in window);var hasMediaSource=('MediaSource' in window);if(hasMediaSource){return new MediaSource();}else if(hasWebKit){return new WebKitMediaSource();}return null;}function attachMediaSource(source,videoModel){var objectURL=window.URL.createObjectURL(source);videoModel.setSource(objectURL);return objectURL;}function detachMediaSource(videoModel){videoModel.setSource(null);}function setDuration(source,value){if(source.duration != value)source.duration = value;return source.duration;}function setSeekable(source,start,end){if(source && typeof source.setLiveSeekableRange === 'function' && typeof source.clearLiveSeekableRange === 'function' && source.readyState === 'open' && start >= 0 && start < end){source.clearLiveSeekableRange();source.setLiveSeekableRange(start,end);}}function signalEndOfStream(source){var buffers=source.sourceBuffers;var ln=buffers.length;if(source.readyState !== 'open'){return;}for(var i=0;i < ln;i++) {if(buffers[i].updating){return;}if(buffers[i].buffered.length === 0){return;}}logger.info('call to mediaSource endOfStream');source.endOfStream();}instance = {createMediaSource:createMediaSource,attachMediaSource:attachMediaSource,detachMediaSource:detachMediaSource,setDuration:setDuration,setSeekable:setSeekable,signalEndOfStream:signalEndOfStream};setup();return instance;}MediaSourceController.__dashjs_factory_name = 'MediaSourceController';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(MediaSourceController);module.exports = exports['default'];
	//# sourceMappingURL=MediaSourceController.js.map


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _controllersXlinkController=__webpack_require__(189);var _controllersXlinkController2=_interopRequireDefault(_controllersXlinkController);var _netHTTPLoader=__webpack_require__(161);var _netHTTPLoader2=_interopRequireDefault(_netHTTPLoader);var _utilsURLUtils=__webpack_require__(154);var _utilsURLUtils2=_interopRequireDefault(_utilsURLUtils);var _voTextRequest=__webpack_require__(191);var _voTextRequest2=_interopRequireDefault(_voTextRequest);var _voDashJSError=__webpack_require__(62);var _voDashJSError2=_interopRequireDefault(_voDashJSError);var _voMetricsHTTPRequest=__webpack_require__(65);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _dashParserDashParser=__webpack_require__(193);var _dashParserDashParser2=_interopRequireDefault(_dashParserDashParser);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);function ManifestLoader(config){config = config || {};var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var urlUtils=(0,_utilsURLUtils2['default'])(context).getInstance();var instance=undefined,logger=undefined,httpLoader=undefined,xlinkController=undefined,parser=undefined;var mssHandler=config.mssHandler;var errHandler=config.errHandler;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);eventBus.on(_coreEventsEvents2['default'].XLINK_READY,onXlinkReady,instance);httpLoader = (0,_netHTTPLoader2['default'])(context).create({errHandler:errHandler,metricsModel:config.metricsModel,mediaPlayerModel:config.mediaPlayerModel,requestModifier:config.requestModifier});xlinkController = (0,_controllersXlinkController2['default'])(context).create({errHandler:errHandler,metricsModel:config.metricsModel,mediaPlayerModel:config.mediaPlayerModel,requestModifier:config.requestModifier});parser = null;}function onXlinkReady(event){eventBus.trigger(_coreEventsEvents2['default'].INTERNAL_MANIFEST_LOADED,{manifest:event.manifest});}function createParser(data){var parser=null; // Analyze manifest content to detect protocol and select appropriate parser
	if(data.indexOf('SmoothStreamingMedia') > -1){ //do some business to transform it into a Dash Manifest
	if(mssHandler){parser = mssHandler.createMssParser();mssHandler.registerEvents();}return parser;}else if(data.indexOf('MPD') > -1){return (0,_dashParserDashParser2['default'])(context).create();}else {return parser;}}function load(url){var request=new _voTextRequest2['default'](url,_voMetricsHTTPRequest.HTTPRequest.MPD_TYPE);httpLoader.load({request:request,success:function success(data,textStatus,responseURL){ // Manage situations in which success is called after calling reset
	if(!xlinkController)return;var actualUrl=undefined,baseUri=undefined,manifest=undefined; // Handle redirects for the MPD - as per RFC3986 Section 5.1.3
	// also handily resolves relative MPD URLs to absolute
	if(responseURL && responseURL !== url){baseUri = urlUtils.parseBaseUrl(responseURL);actualUrl = responseURL;}else { // usually this case will be caught and resolved by
	// responseURL above but it is not available for IE11 and Edge/12 and Edge/13
	// baseUri must be absolute for BaseURL resolution later
	if(urlUtils.isRelative(url)){url = urlUtils.resolve(url,window.location.href);}baseUri = urlUtils.parseBaseUrl(url);} // Create parser according to manifest type
	if(parser === null){parser = createParser(data);}if(parser === null){eventBus.trigger(_coreEventsEvents2['default'].INTERNAL_MANIFEST_LOADED,{manifest:null,error:new _voDashJSError2['default'](_coreErrorsErrors2['default'].MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,_coreErrorsErrors2['default'].MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + ('' + url))});return;} // init xlinkcontroller with matchers and iron object from created parser
	xlinkController.setMatchers(parser.getMatchers());xlinkController.setIron(parser.getIron());try{manifest = parser.parse(data);}catch(e) {eventBus.trigger(_coreEventsEvents2['default'].INTERNAL_MANIFEST_LOADED,{manifest:null,error:new _voDashJSError2['default'](_coreErrorsErrors2['default'].MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,_coreErrorsErrors2['default'].MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + ('' + url))});return;}if(manifest){manifest.url = actualUrl || url; // URL from which the MPD was originally retrieved (MPD updates will not change this value)
	if(!manifest.originalUrl){manifest.originalUrl = manifest.url;} // In the following, we only use the first Location entry even if many are available
	// Compare with ManifestUpdater/DashManifestModel
	if(manifest.hasOwnProperty(_constantsConstants2['default'].LOCATION)){baseUri = urlUtils.parseBaseUrl(manifest.Location_asArray[0]);logger.debug('BaseURI set by Location to: ' + baseUri);}manifest.baseUri = baseUri;manifest.loadedTime = new Date();xlinkController.resolveManifestOnLoad(manifest);}else {eventBus.trigger(_coreEventsEvents2['default'].INTERNAL_MANIFEST_LOADED,{manifest:null,error:new _voDashJSError2['default'](_coreErrorsErrors2['default'].MANIFEST_LOADER_PARSING_FAILURE_ERROR_CODE,_coreErrorsErrors2['default'].MANIFEST_LOADER_PARSING_FAILURE_ERROR_MESSAGE + ('' + url))});}},error:function error(request,statusText,errorText){eventBus.trigger(_coreEventsEvents2['default'].INTERNAL_MANIFEST_LOADED,{manifest:null,error:new _voDashJSError2['default'](_coreErrorsErrors2['default'].MANIFEST_LOADER_LOADING_FAILURE_ERROR_CODE,_coreErrorsErrors2['default'].MANIFEST_LOADER_LOADING_FAILURE_ERROR_MESSAGE + (url + ', ' + errorText))});}});}function reset(){eventBus.off(_coreEventsEvents2['default'].XLINK_READY,onXlinkReady,instance);if(xlinkController){xlinkController.reset();xlinkController = null;}if(httpLoader){httpLoader.abort();httpLoader = null;}if(mssHandler){mssHandler.reset();}}instance = {load:load,reset:reset};setup();return instance;}ManifestLoader.__dashjs_factory_name = 'ManifestLoader';var factory=_coreFactoryMaker2['default'].getClassFactory(ManifestLoader);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=ManifestLoader.js.map


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _XlinkLoader=__webpack_require__(190);var _XlinkLoader2=_interopRequireDefault(_XlinkLoader);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _externalsXml2json=__webpack_require__(192);var _externalsXml2json2=_interopRequireDefault(_externalsXml2json);var _utilsURLUtils=__webpack_require__(154);var _utilsURLUtils2=_interopRequireDefault(_utilsURLUtils);var _dashConstantsDashConstants=__webpack_require__(151);var _dashConstantsDashConstants2=_interopRequireDefault(_dashConstantsDashConstants);var RESOLVE_TYPE_ONLOAD='onLoad';var RESOLVE_TYPE_ONACTUATE='onActuate';var RESOLVE_TO_ZERO='urn:mpeg:dash:resolve-to-zero:2013';function XlinkController(config){config = config || {};var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var urlUtils=(0,_utilsURLUtils2['default'])(context).getInstance();var instance=undefined,matchers=undefined,iron=undefined,manifest=undefined,converter=undefined,xlinkLoader=undefined;function setup(){eventBus.on(_coreEventsEvents2['default'].XLINK_ELEMENT_LOADED,onXlinkElementLoaded,instance);xlinkLoader = (0,_XlinkLoader2['default'])(context).create({errHandler:config.errHandler,metricsModel:config.metricsModel,mediaPlayerModel:config.mediaPlayerModel,requestModifier:config.requestModifier});}function setMatchers(value){if(value){matchers = value;}}function setIron(value){if(value){iron = value;}} /**
	     * <p>Triggers the resolution of the xlink.onLoad attributes in the manifest file </p>
	     * @param {Object} mpd - the manifest
	     */function resolveManifestOnLoad(mpd){var elements=undefined; // First resolve all periods, so unnecessary requests inside onLoad Periods with Default content are avoided
	converter = new _externalsXml2json2['default']({escapeMode:false,attributePrefix:'',arrayAccessForm:'property',emptyNodeForm:'object',stripWhitespaces:false,enableToStringFunc:false,ignoreRoot:true,matchers:matchers});manifest = mpd;elements = getElementsToResolve(manifest.Period_asArray,manifest,_dashConstantsDashConstants2['default'].PERIOD,RESOLVE_TYPE_ONLOAD);resolve(elements,_dashConstantsDashConstants2['default'].PERIOD,RESOLVE_TYPE_ONLOAD);}function reset(){eventBus.off(_coreEventsEvents2['default'].XLINK_ELEMENT_LOADED,onXlinkElementLoaded,instance);if(xlinkLoader){xlinkLoader.reset();xlinkLoader = null;}}function resolve(elements,type,resolveType){var resolveObject={};var element=undefined,url=undefined;resolveObject.elements = elements;resolveObject.type = type;resolveObject.resolveType = resolveType; // If nothing to resolve, directly call allElementsLoaded
	if(resolveObject.elements.length === 0){onXlinkAllElementsLoaded(resolveObject);}for(var i=0;i < resolveObject.elements.length;i++) {element = resolveObject.elements[i];if(urlUtils.isHTTPURL(element.url)){url = element.url;}else {url = element.originalContent.BaseURL + element.url;}xlinkLoader.load(url,element,resolveObject);}}function onXlinkElementLoaded(event){var element=undefined,resolveObject=undefined;var openingTag='<response>';var closingTag='</response>';var mergedContent='';element = event.element;resolveObject = event.resolveObject; // if the element resolved into content parse the content
	if(element.resolvedContent){var index=0; // we add a parent elements so the converter is able to parse multiple elements of the same type which are not wrapped inside a container
	if(element.resolvedContent.indexOf('<?xml') === 0){index = element.resolvedContent.indexOf('?>') + 2; //find the closing position of the xml declaration, if it exists.
	}mergedContent = element.resolvedContent.substr(0,index) + openingTag + element.resolvedContent.substr(index) + closingTag;element.resolvedContent = converter.xml_str2json(mergedContent);}if(isResolvingFinished(resolveObject)){onXlinkAllElementsLoaded(resolveObject);}} // We got to wait till all elements of the current queue are resolved before merging back
	function onXlinkAllElementsLoaded(resolveObject){var elements=[];var i=undefined,obj=undefined;mergeElementsBack(resolveObject);if(resolveObject.resolveType === RESOLVE_TYPE_ONACTUATE){eventBus.trigger(_coreEventsEvents2['default'].XLINK_READY,{manifest:manifest});}if(resolveObject.resolveType === RESOLVE_TYPE_ONLOAD){switch(resolveObject.type){ // Start resolving the other elements. We can do Adaptation Set and EventStream in parallel
	case _dashConstantsDashConstants2['default'].PERIOD:for(i = 0;i < manifest[_dashConstantsDashConstants2['default'].PERIOD + '_asArray'].length;i++) {obj = manifest[_dashConstantsDashConstants2['default'].PERIOD + '_asArray'][i];if(obj.hasOwnProperty(_dashConstantsDashConstants2['default'].ADAPTATION_SET + '_asArray')){elements = elements.concat(getElementsToResolve(obj[_dashConstantsDashConstants2['default'].ADAPTATION_SET + '_asArray'],obj,_dashConstantsDashConstants2['default'].ADAPTATION_SET,RESOLVE_TYPE_ONLOAD));}if(obj.hasOwnProperty(_dashConstantsDashConstants2['default'].EVENT_STREAM + '_asArray')){elements = elements.concat(getElementsToResolve(obj[_dashConstantsDashConstants2['default'].EVENT_STREAM + '_asArray'],obj,_dashConstantsDashConstants2['default'].EVENT_STREAM,RESOLVE_TYPE_ONLOAD));}}resolve(elements,_dashConstantsDashConstants2['default'].ADAPTATION_SET,RESOLVE_TYPE_ONLOAD);break;case _dashConstantsDashConstants2['default'].ADAPTATION_SET: // TODO: Resolve SegmentList here
	eventBus.trigger(_coreEventsEvents2['default'].XLINK_READY,{manifest:manifest});break;}}} // Returns the elements with the specific resolve Type
	function getElementsToResolve(elements,parentElement,type,resolveType){var toResolve=[];var element=undefined,i=undefined,xlinkObject=undefined; // first remove all the resolve-to-zero elements
	for(i = elements.length - 1;i >= 0;i--) {element = elements[i];if(element.hasOwnProperty('xlink:href') && element['xlink:href'] === RESOLVE_TO_ZERO){elements.splice(i,1);}} // now get the elements with the right resolve type
	for(i = 0;i < elements.length;i++) {element = elements[i];if(element.hasOwnProperty('xlink:href') && element.hasOwnProperty('xlink:actuate') && element['xlink:actuate'] === resolveType){xlinkObject = createXlinkObject(element['xlink:href'],parentElement,type,i,resolveType,element);toResolve.push(xlinkObject);}}return toResolve;}function mergeElementsBack(resolveObject){var resolvedElements=[];var element=undefined,type=undefined,obj=undefined,i=undefined,j=undefined,k=undefined; // Start merging back from the end because of index shifting. Note that the elements with the same parent have to be ordered by index ascending
	for(i = resolveObject.elements.length - 1;i >= 0;i--) {element = resolveObject.elements[i];type = element.type + '_asArray'; // Element couldn't be resolved or is TODO Inappropriate target: Remove all Xlink attributes
	if(!element.resolvedContent || isInappropriateTarget()){delete element.originalContent['xlink:actuate'];delete element.originalContent['xlink:href'];resolvedElements.push(element.originalContent);} // Element was successfully resolved
	else if(element.resolvedContent){for(j = 0;j < element.resolvedContent[type].length;j++) { //TODO Contains another Xlink attribute with xlink:actuate set to onload. Remove all xLink attributes
	obj = element.resolvedContent[type][j];resolvedElements.push(obj);}} // Replace the old elements in the parent with the resolved ones
	element.parentElement[type].splice(element.index,1);for(k = 0;k < resolvedElements.length;k++) {element.parentElement[type].splice(element.index + k,0,resolvedElements[k]);}resolvedElements = [];}if(resolveObject.elements.length > 0){iron.run(manifest);}}function createXlinkObject(url,parentElement,type,index,resolveType,originalContent){return {url:url,parentElement:parentElement,type:type,index:index,resolveType:resolveType,originalContent:originalContent,resolvedContent:null,resolved:false};} // Check if all pending requests are finished
	function isResolvingFinished(elementsToResolve){var i=undefined,obj=undefined;for(i = 0;i < elementsToResolve.elements.length;i++) {obj = elementsToResolve.elements[i];if(obj.resolved === false){return false;}}return true;} // TODO : Do some syntax check here if the target is valid or not
	function isInappropriateTarget(){return false;}instance = {resolveManifestOnLoad:resolveManifestOnLoad,setMatchers:setMatchers,setIron:setIron,reset:reset};setup();return instance;}XlinkController.__dashjs_factory_name = 'XlinkController';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(XlinkController);module.exports = exports['default'];
	//# sourceMappingURL=XlinkController.js.map


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _voDashJSError=__webpack_require__(62);var _voDashJSError2=_interopRequireDefault(_voDashJSError);var _netHTTPLoader=__webpack_require__(161);var _netHTTPLoader2=_interopRequireDefault(_netHTTPLoader);var _voMetricsHTTPRequest=__webpack_require__(65);var _voTextRequest=__webpack_require__(191);var _voTextRequest2=_interopRequireDefault(_voTextRequest);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);function XlinkLoader(config){config = config || {};var RESOLVE_TO_ZERO='urn:mpeg:dash:resolve-to-zero:2013';var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var httpLoader=(0,_netHTTPLoader2['default'])(context).create({errHandler:config.errHandler,metricsModel:config.metricsModel,mediaPlayerModel:config.mediaPlayerModel,requestModifier:config.requestModifier});var instance=undefined;function load(url,element,resolveObject){var report=function report(content,resolveToZero){element.resolved = true;element.resolvedContent = content?content:null;eventBus.trigger(_coreEventsEvents2['default'].XLINK_ELEMENT_LOADED,{element:element,resolveObject:resolveObject,error:content || resolveToZero?null:new _voDashJSError2['default'](_coreErrorsErrors2['default'].XLINK_LOADER_LOADING_FAILURE_ERROR_CODE,_coreErrorsErrors2['default'].XLINK_LOADER_LOADING_FAILURE_ERROR_MESSAGE + url)});};if(url === RESOLVE_TO_ZERO){report(null,true);}else {var request=new _voTextRequest2['default'](url,_voMetricsHTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE);httpLoader.load({request:request,success:function success(data){report(data);},error:function error(){report(null);}});}}function reset(){if(httpLoader){httpLoader.abort();httpLoader = null;}}instance = {load:load,reset:reset};return instance;}XlinkLoader.__dashjs_factory_name = 'XlinkLoader';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(XlinkLoader);module.exports = exports['default'];
	//# sourceMappingURL=XlinkLoader.js.map


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _get=function get(_x,_x2,_x3){var _again=true;_function: while(_again) {var object=_x,property=_x2,receiver=_x3;_again = false;if(object === null)object = Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc === undefined){var parent=Object.getPrototypeOf(object);if(parent === null){return undefined;}else {_x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;}}else if('value' in desc){return desc.value;}else {var getter=desc.get;if(getter === undefined){return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass,superClass){if(typeof superClass !== 'function' && superClass !== null){throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__ = superClass;}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _FragmentRequest2=__webpack_require__(59);var _FragmentRequest3=_interopRequireDefault(_FragmentRequest2);var TextRequest=(function(_FragmentRequest){_inherits(TextRequest,_FragmentRequest);function TextRequest(url,type){_classCallCheck(this,TextRequest);_get(Object.getPrototypeOf(TextRequest.prototype),'constructor',this).call(this);this.url = url || null;this.type = type || null;this.mediaType = _constantsConstants2['default'].STREAM;this.responseType = ''; //'text' value returns a bad encoding response in Firefox
	}return TextRequest;})(_FragmentRequest3['default']);exports['default'] = TextRequest;module.exports = exports['default'];
	//# sourceMappingURL=TextRequest.js.map


/***/ }),
/* 192 */
/***/ (function(module, exports) {

	/*
	 Copyright 2011-2013 Abdulla Abdurakhmanov
	 Original sources are available at https://code.google.com/p/x2js/

	 Licensed under the Apache License, Version 2.0 (the "License");
	 you may not use this file except in compliance with the License.
	 You may obtain a copy of the License at

	 http://www.apache.org/licenses/LICENSE-2.0

	 Unless required by applicable law or agreed to in writing, software
	 distributed under the License is distributed on an "AS IS" BASIS,
	 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 See the License for the specific language governing permissions and
	 limitations under the License.
	 */ /*
	  Further modified for dashjs to:
	  - keep track of children nodes in order in attribute __children.
	  - add type conversion matchers
	  - re-add ignoreRoot
	  - allow zero-length attributePrefix
	  - don't add white-space text nodes
	  - remove explicit RequireJS support
	*/"use strict";Object.defineProperty(exports,"__esModule",{value:true});function X2JS(config){'use strict';var VERSION="1.2.0";config = config || {};initConfigDefaults();initRequiredPolyfills();function initConfigDefaults(){if(config.escapeMode === undefined){config.escapeMode = true;}if(config.attributePrefix === undefined){config.attributePrefix = "_";}config.arrayAccessForm = config.arrayAccessForm || "none";config.emptyNodeForm = config.emptyNodeForm || "text";if(config.enableToStringFunc === undefined){config.enableToStringFunc = true;}config.arrayAccessFormPaths = config.arrayAccessFormPaths || [];if(config.skipEmptyTextNodesForObj === undefined){config.skipEmptyTextNodesForObj = true;}if(config.stripWhitespaces === undefined){config.stripWhitespaces = true;}config.datetimeAccessFormPaths = config.datetimeAccessFormPaths || [];if(config.useDoubleQuotes === undefined){config.useDoubleQuotes = false;}config.xmlElementsFilter = config.xmlElementsFilter || [];config.jsonPropertiesFilter = config.jsonPropertiesFilter || [];if(config.keepCData === undefined){config.keepCData = false;}if(config.ignoreRoot === undefined){config.ignoreRoot = false;}}var DOMNodeTypes={ELEMENT_NODE:1,TEXT_NODE:3,CDATA_SECTION_NODE:4,COMMENT_NODE:8,DOCUMENT_NODE:9};function initRequiredPolyfills(){}function getNodeLocalName(node){var nodeLocalName=node.localName;if(nodeLocalName == null) // Yeah, this is IE!!
	nodeLocalName = node.baseName;if(nodeLocalName == null || nodeLocalName == "") // =="" is IE too
	nodeLocalName = node.nodeName;return nodeLocalName;}function getNodePrefix(node){return node.prefix;}function escapeXmlChars(str){if(typeof str == "string")return str.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;').replace(/'/g,'&apos;');else return str;}function unescapeXmlChars(str){return str.replace(/&lt;/g,'<').replace(/&gt;/g,'>').replace(/&quot;/g,'"').replace(/&apos;/g,"'").replace(/&amp;/g,'&');}function checkInStdFiltersArrayForm(stdFiltersArrayForm,obj,name,path){var idx=0;for(;idx < stdFiltersArrayForm.length;idx++) {var filterPath=stdFiltersArrayForm[idx];if(typeof filterPath === "string"){if(filterPath == path)break;}else if(filterPath instanceof RegExp){if(filterPath.test(path))break;}else if(typeof filterPath === "function"){if(filterPath(obj,name,path))break;}}return idx != stdFiltersArrayForm.length;}function toArrayAccessForm(obj,childName,path){switch(config.arrayAccessForm){case "property":if(!(obj[childName] instanceof Array))obj[childName + "_asArray"] = [obj[childName]];else obj[childName + "_asArray"] = obj[childName];break; /*case "none":
	                break;*/}if(!(obj[childName] instanceof Array) && config.arrayAccessFormPaths.length > 0){if(checkInStdFiltersArrayForm(config.arrayAccessFormPaths,obj,childName,path)){obj[childName] = [obj[childName]];}}}function fromXmlDateTime(prop){ // Implementation based up on http://stackoverflow.com/questions/8178598/xml-datetime-to-javascript-date-object
	// Improved to support full spec and optional parts
	var bits=prop.split(/[-T:+Z]/g);var d=new Date(bits[0],bits[1] - 1,bits[2]);var secondBits=bits[5].split("\.");d.setHours(bits[3],bits[4],secondBits[0]);if(secondBits.length > 1)d.setMilliseconds(secondBits[1]); // Get supplied time zone offset in minutes
	if(bits[6] && bits[7]){var offsetMinutes=bits[6] * 60 + Number(bits[7]);var sign=/\d\d-\d\d:\d\d$/.test(prop)?'-':'+'; // Apply the sign
	offsetMinutes = 0 + (sign == '-'?-1 * offsetMinutes:offsetMinutes); // Apply offset and local timezone
	d.setMinutes(d.getMinutes() - offsetMinutes - d.getTimezoneOffset());}else if(prop.indexOf("Z",prop.length - 1) !== -1){d = new Date(Date.UTC(d.getFullYear(),d.getMonth(),d.getDate(),d.getHours(),d.getMinutes(),d.getSeconds(),d.getMilliseconds()));} // d is now a local time equivalent to the supplied time
	return d;}function checkFromXmlDateTimePaths(value,childName,fullPath){if(config.datetimeAccessFormPaths.length > 0){var path=fullPath.split("\.#")[0];if(checkInStdFiltersArrayForm(config.datetimeAccessFormPaths,value,childName,path)){return fromXmlDateTime(value);}else return value;}else return value;}function checkXmlElementsFilter(obj,childType,childName,childPath){if(childType == DOMNodeTypes.ELEMENT_NODE && config.xmlElementsFilter.length > 0){return checkInStdFiltersArrayForm(config.xmlElementsFilter,obj,childName,childPath);}else return true;}function parseDOMChildren(node,path){if(node.nodeType == DOMNodeTypes.DOCUMENT_NODE){var result=new Object();var nodeChildren=node.childNodes; // Alternative for firstElementChild which is not supported in some environments
	for(var cidx=0;cidx < nodeChildren.length;cidx++) {var child=nodeChildren[cidx];if(child.nodeType == DOMNodeTypes.ELEMENT_NODE){if(config.ignoreRoot){result = parseDOMChildren(child);}else {result = {};var childName=getNodeLocalName(child);result[childName] = parseDOMChildren(child);}}}return result;}else if(node.nodeType == DOMNodeTypes.ELEMENT_NODE){var result=new Object();result.__cnt = 0;var children=[];var nodeChildren=node.childNodes; // Children nodes
	for(var cidx=0;cidx < nodeChildren.length;cidx++) {var child=nodeChildren[cidx];var childName=getNodeLocalName(child);if(child.nodeType != DOMNodeTypes.COMMENT_NODE){var childPath=path + "." + childName;if(checkXmlElementsFilter(result,child.nodeType,childName,childPath)){result.__cnt++;if(result[childName] == null){var c=parseDOMChildren(child,childPath);if(childName != "#text" || /[^\s]/.test(c)){var o={};o[childName] = c;children.push(o);}result[childName] = c;toArrayAccessForm(result,childName,childPath);}else {if(result[childName] != null){if(!(result[childName] instanceof Array)){result[childName] = [result[childName]];toArrayAccessForm(result,childName,childPath);}}var c=parseDOMChildren(child,childPath);if(childName != "#text" || /[^\s]/.test(c)){ // Don't add white-space text nodes
	var o={};o[childName] = c;children.push(o);}result[childName][result[childName].length] = c;}}}}result.__children = children; // Attributes
	var nodeLocalName=getNodeLocalName(node);for(var aidx=0;aidx < node.attributes.length;aidx++) {var attr=node.attributes[aidx];result.__cnt++;var value2=attr.value;for(var m=0,ml=config.matchers.length;m < ml;m++) {var matchobj=config.matchers[m];if(matchobj.test(attr,nodeLocalName))value2 = matchobj.converter(attr.value);}result[config.attributePrefix + attr.name] = value2;} // Node namespace prefix
	var nodePrefix=getNodePrefix(node);if(nodePrefix != null && nodePrefix != ""){result.__cnt++;result.__prefix = nodePrefix;}if(result["#text"] != null){result.__text = result["#text"];if(result.__text instanceof Array){result.__text = result.__text.join("\n");} //if(config.escapeMode)
	//	result.__text = unescapeXmlChars(result.__text);
	if(config.stripWhitespaces)result.__text = result.__text.trim();delete result["#text"];if(config.arrayAccessForm == "property")delete result["#text_asArray"];result.__text = checkFromXmlDateTimePaths(result.__text,childName,path + "." + childName);}if(result["#cdata-section"] != null){result.__cdata = result["#cdata-section"];delete result["#cdata-section"];if(config.arrayAccessForm == "property")delete result["#cdata-section_asArray"];}if(result.__cnt == 0 && config.emptyNodeForm == "text"){result = '';}else if(result.__cnt == 1 && result.__text != null){result = result.__text;}else if(result.__cnt == 1 && result.__cdata != null && !config.keepCData){result = result.__cdata;}else if(result.__cnt > 1 && result.__text != null && config.skipEmptyTextNodesForObj){if(config.stripWhitespaces && result.__text == "" || result.__text.trim() == ""){delete result.__text;}}delete result.__cnt;if(config.enableToStringFunc && (result.__text != null || result.__cdata != null)){result.toString = function(){return (this.__text != null?this.__text:'') + (this.__cdata != null?this.__cdata:'');};}return result;}else if(node.nodeType == DOMNodeTypes.TEXT_NODE || node.nodeType == DOMNodeTypes.CDATA_SECTION_NODE){return node.nodeValue;}}function startTag(jsonObj,element,attrList,closed){var resultStr="<" + (jsonObj != null && jsonObj.__prefix != null?jsonObj.__prefix + ":":"") + element;if(attrList != null){for(var aidx=0;aidx < attrList.length;aidx++) {var attrName=attrList[aidx];var attrVal=jsonObj[attrName];if(config.escapeMode)attrVal = escapeXmlChars(attrVal);resultStr += " " + attrName.substr(config.attributePrefix.length) + "=";if(config.useDoubleQuotes)resultStr += '"' + attrVal + '"';else resultStr += "'" + attrVal + "'";}}if(!closed)resultStr += ">";else resultStr += "/>";return resultStr;}function endTag(jsonObj,elementName){return "</" + (jsonObj.__prefix != null?jsonObj.__prefix + ":":"") + elementName + ">";}function endsWith(str,suffix){return str.indexOf(suffix,str.length - suffix.length) !== -1;}function jsonXmlSpecialElem(jsonObj,jsonObjField){if(config.arrayAccessForm == "property" && endsWith(jsonObjField.toString(),"_asArray") || jsonObjField.toString().indexOf(config.attributePrefix) == 0 || jsonObjField.toString().indexOf("__") == 0 || jsonObj[jsonObjField] instanceof Function)return true;else return false;}function jsonXmlElemCount(jsonObj){var elementsCnt=0;if(jsonObj instanceof Object){for(var it in jsonObj) {if(jsonXmlSpecialElem(jsonObj,it))continue;elementsCnt++;}}return elementsCnt;}function checkJsonObjPropertiesFilter(jsonObj,propertyName,jsonObjPath){return config.jsonPropertiesFilter.length == 0 || jsonObjPath == "" || checkInStdFiltersArrayForm(config.jsonPropertiesFilter,jsonObj,propertyName,jsonObjPath);}function parseJSONAttributes(jsonObj){var attrList=[];if(jsonObj instanceof Object){for(var ait in jsonObj) {if(ait.toString().indexOf("__") == -1 && ait.toString().indexOf(config.attributePrefix) == 0){attrList.push(ait);}}}return attrList;}function parseJSONTextAttrs(jsonTxtObj){var result="";if(jsonTxtObj.__cdata != null){result += "<![CDATA[" + jsonTxtObj.__cdata + "]]>";}if(jsonTxtObj.__text != null){if(config.escapeMode)result += escapeXmlChars(jsonTxtObj.__text);else result += jsonTxtObj.__text;}return result;}function parseJSONTextObject(jsonTxtObj){var result="";if(jsonTxtObj instanceof Object){result += parseJSONTextAttrs(jsonTxtObj);}else if(jsonTxtObj != null){if(config.escapeMode)result += escapeXmlChars(jsonTxtObj);else result += jsonTxtObj;}return result;}function getJsonPropertyPath(jsonObjPath,jsonPropName){if(jsonObjPath === ""){return jsonPropName;}else return jsonObjPath + "." + jsonPropName;}function parseJSONArray(jsonArrRoot,jsonArrObj,attrList,jsonObjPath){var result="";if(jsonArrRoot.length == 0){result += startTag(jsonArrRoot,jsonArrObj,attrList,true);}else {for(var arIdx=0;arIdx < jsonArrRoot.length;arIdx++) {result += startTag(jsonArrRoot[arIdx],jsonArrObj,parseJSONAttributes(jsonArrRoot[arIdx]),false);result += parseJSONObject(jsonArrRoot[arIdx],getJsonPropertyPath(jsonObjPath,jsonArrObj));result += endTag(jsonArrRoot[arIdx],jsonArrObj);}}return result;}function parseJSONObject(jsonObj,jsonObjPath){var result="";var elementsCnt=jsonXmlElemCount(jsonObj);if(elementsCnt > 0){for(var it in jsonObj) {if(jsonXmlSpecialElem(jsonObj,it) || jsonObjPath != "" && !checkJsonObjPropertiesFilter(jsonObj,it,getJsonPropertyPath(jsonObjPath,it)))continue;var subObj=jsonObj[it];var attrList=parseJSONAttributes(subObj);if(subObj == null || subObj == undefined){result += startTag(subObj,it,attrList,true);}else if(subObj instanceof Object){if(subObj instanceof Array){result += parseJSONArray(subObj,it,attrList,jsonObjPath);}else if(subObj instanceof Date){result += startTag(subObj,it,attrList,false);result += subObj.toISOString();result += endTag(subObj,it);}else {var subObjElementsCnt=jsonXmlElemCount(subObj);if(subObjElementsCnt > 0 || subObj.__text != null || subObj.__cdata != null){result += startTag(subObj,it,attrList,false);result += parseJSONObject(subObj,getJsonPropertyPath(jsonObjPath,it));result += endTag(subObj,it);}else {result += startTag(subObj,it,attrList,true);}}}else {result += startTag(subObj,it,attrList,false);result += parseJSONTextObject(subObj);result += endTag(subObj,it);}}}result += parseJSONTextObject(jsonObj);return result;}this.parseXmlString = function(xmlDocStr){var isIEParser=window.ActiveXObject || "ActiveXObject" in window;if(xmlDocStr === undefined){return null;}var xmlDoc;if(window.DOMParser){var parser=new window.DOMParser();var parsererrorNS=null;try{xmlDoc = parser.parseFromString(xmlDocStr,"text/xml");if(xmlDoc.getElementsByTagNameNS("*","parsererror").length > 0){xmlDoc = null;}}catch(err) {xmlDoc = null;}}else { // IE :(
	if(xmlDocStr.indexOf("<?") == 0){xmlDocStr = xmlDocStr.substr(xmlDocStr.indexOf("?>") + 2);}xmlDoc = new ActiveXObject("Microsoft.XMLDOM");xmlDoc.async = "false";xmlDoc.loadXML(xmlDocStr);}return xmlDoc;};this.asArray = function(prop){if(prop === undefined || prop == null)return [];else if(prop instanceof Array)return prop;else return [prop];};this.toXmlDateTime = function(dt){if(dt instanceof Date)return dt.toISOString();else if(typeof dt === 'number')return new Date(dt).toISOString();else return null;};this.asDateTime = function(prop){if(typeof prop == "string"){return fromXmlDateTime(prop);}else return prop;};this.xml2json = function(xmlDoc){return parseDOMChildren(xmlDoc);};this.xml_str2json = function(xmlDocStr){var xmlDoc=this.parseXmlString(xmlDocStr);if(xmlDoc != null)return this.xml2json(xmlDoc);else return null;};this.json2xml_str = function(jsonObj){return parseJSONObject(jsonObj,"");};this.json2xml = function(jsonObj){var xmlDocStr=this.json2xml_str(jsonObj);return this.parseXmlString(xmlDocStr);};this.getVersion = function(){return VERSION;};}exports["default"] = X2JS;module.exports = exports["default"];
	//# sourceMappingURL=xml2json.js.map


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _objectiron=__webpack_require__(194);var _objectiron2=_interopRequireDefault(_objectiron);var _externalsXml2json=__webpack_require__(192);var _externalsXml2json2=_interopRequireDefault(_externalsXml2json);var _matchersStringMatcher=__webpack_require__(195);var _matchersStringMatcher2=_interopRequireDefault(_matchersStringMatcher);var _matchersDurationMatcher=__webpack_require__(197);var _matchersDurationMatcher2=_interopRequireDefault(_matchersDurationMatcher);var _matchersDateTimeMatcher=__webpack_require__(198);var _matchersDateTimeMatcher2=_interopRequireDefault(_matchersDateTimeMatcher);var _matchersNumericMatcher=__webpack_require__(199);var _matchersNumericMatcher2=_interopRequireDefault(_matchersNumericMatcher);var _mapsRepresentationBaseValuesMap=__webpack_require__(200);var _mapsRepresentationBaseValuesMap2=_interopRequireDefault(_mapsRepresentationBaseValuesMap);var _mapsSegmentValuesMap=__webpack_require__(203);var _mapsSegmentValuesMap2=_interopRequireDefault(_mapsSegmentValuesMap);function DashParser(){var context=this.context;var instance=undefined,logger=undefined,matchers=undefined,converter=undefined,objectIron=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);matchers = [new _matchersDurationMatcher2['default'](),new _matchersDateTimeMatcher2['default'](),new _matchersNumericMatcher2['default'](),new _matchersStringMatcher2['default']() // last in list to take precedence over NumericMatcher
	];converter = new _externalsXml2json2['default']({escapeMode:false,attributePrefix:'',arrayAccessForm:'property',emptyNodeForm:'object',stripWhitespaces:false,enableToStringFunc:false,ignoreRoot:true,matchers:matchers});objectIron = (0,_objectiron2['default'])(context).create({adaptationset:new _mapsRepresentationBaseValuesMap2['default'](),period:new _mapsSegmentValuesMap2['default']()});}function getMatchers(){return matchers;}function getIron(){return objectIron;}function parse(data){var manifest=undefined;var startTime=window.performance.now();manifest = converter.xml_str2json(data);if(!manifest){throw new Error('parsing the manifest failed');}var jsonTime=window.performance.now();objectIron.run(manifest);var ironedTime=window.performance.now();logger.info('Parsing complete: ( xml2json: ' + (jsonTime - startTime).toPrecision(3) + 'ms, objectiron: ' + (ironedTime - jsonTime).toPrecision(3) + 'ms, total: ' + ((ironedTime - startTime) / 1000).toPrecision(3) + 's)');return manifest;}instance = {parse:parse,getMatchers:getMatchers,getIron:getIron};setup();return instance;}DashParser.__dashjs_factory_name = 'DashParser';exports['default'] = _coreFactoryMaker2['default'].getClassFactory(DashParser);module.exports = exports['default'];
	//# sourceMappingURL=DashParser.js.map


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);function ObjectIron(mappers){function mergeValues(parentItem,childItem){for(var _name in parentItem) {if(!childItem.hasOwnProperty(_name)){childItem[_name] = parentItem[_name];}}}function mapProperties(properties,parent,child){for(var i=0,len=properties.length;i < len;++i) {var property=properties[i];if(parent[property.name]){if(child[property.name]){ // check to see if we should merge
	if(property.merge){var parentValue=parent[property.name];var childValue=child[property.name]; // complex objects; merge properties
	if(typeof parentValue === 'object' && typeof childValue === 'object'){mergeValues(parentValue,childValue);} // simple objects; merge them together
	else {child[property.name] = parentValue + childValue;}}}else { // just add the property
	child[property.name] = parent[property.name];}}}}function mapItem(item,node){for(var i=0,len=item.children.length;i < len;++i) {var childItem=item.children[i];var array=node[childItem.name + '_asArray'];if(array){for(var v=0,len2=array.length;v < len2;++v) {var childNode=array[v];mapProperties(item.properties,node,childNode);mapItem(childItem,childNode);}}}}function run(source){if(source === null || typeof source !== 'object'){return source;}if('period' in mappers){var periodMapper=mappers.period;var periods=source.Period_asArray;for(var i=0,len=periods.length;i < len;++i) {var period=periods[i];mapItem(periodMapper,period);if('adaptationset' in mappers){var adaptationSets=period.AdaptationSet_asArray;if(adaptationSets){var adaptationSetMapper=mappers.adaptationset;for(var _i=0,_len=adaptationSets.length;_i < _len;++_i) {mapItem(adaptationSetMapper,adaptationSets[_i]);}}}}}return source;}return {run:run};}ObjectIron.__dashjs_factory_name = 'ObjectIron';var factory=_coreFactoryMaker2['default'].getClassFactory(ObjectIron);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=objectiron.js.map


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc Matches and converts xs:string to string, but only for specific attributes on specific nodes
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _get=function get(_x,_x2,_x3){var _again=true;_function: while(_again) {var object=_x,property=_x2,receiver=_x3;_again = false;if(object === null)object = Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc === undefined){var parent=Object.getPrototypeOf(object);if(parent === null){return undefined;}else {_x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;}}else if('value' in desc){return desc.value;}else {var getter=desc.get;if(getter === undefined){return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else {obj[key] = value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass,superClass){if(typeof superClass !== 'function' && superClass !== null){throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__ = superClass;}var _BaseMatcher2=__webpack_require__(196);var _BaseMatcher3=_interopRequireDefault(_BaseMatcher2);var _constantsDashConstants=__webpack_require__(151);var _constantsDashConstants2=_interopRequireDefault(_constantsDashConstants);var StringMatcher=(function(_BaseMatcher){_inherits(StringMatcher,_BaseMatcher);function StringMatcher(){_classCallCheck(this,StringMatcher);_get(Object.getPrototypeOf(StringMatcher.prototype),'constructor',this).call(this,function(attr,nodeName){var _stringAttrsInElements;var stringAttrsInElements=(_stringAttrsInElements = {},_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].MPD,[_constantsDashConstants2['default'].ID,_constantsDashConstants2['default'].PROFILES]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].PERIOD,[_constantsDashConstants2['default'].ID]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].BASE_URL,[_constantsDashConstants2['default'].SERVICE_LOCATION,_constantsDashConstants2['default'].BYTE_RANGE]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].SEGMENT_BASE,[_constantsDashConstants2['default'].INDEX_RANGE]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].INITIALIZATION,[_constantsDashConstants2['default'].RANGE]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].REPRESENTATION_INDEX,[_constantsDashConstants2['default'].RANGE]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].SEGMENT_LIST,[_constantsDashConstants2['default'].INDEX_RANGE]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].BITSTREAM_SWITCHING,[_constantsDashConstants2['default'].RANGE]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].SEGMENT_URL,[_constantsDashConstants2['default'].MEDIA_RANGE,_constantsDashConstants2['default'].INDEX_RANGE]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].SEGMENT_TEMPLATE,[_constantsDashConstants2['default'].INDEX_RANGE,_constantsDashConstants2['default'].MEDIA,_constantsDashConstants2['default'].INDEX,_constantsDashConstants2['default'].INITIALIZATION_MINUS,_constantsDashConstants2['default'].BITSTREAM_SWITCHING_MINUS]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].ASSET_IDENTIFIER,[_constantsDashConstants2['default'].VALUE,_constantsDashConstants2['default'].ID]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].EVENT_STREAM,[_constantsDashConstants2['default'].VALUE]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].ADAPTATION_SET,[_constantsDashConstants2['default'].PROFILES,_constantsDashConstants2['default'].MIME_TYPE,_constantsDashConstants2['default'].SEGMENT_PROFILES,_constantsDashConstants2['default'].CODECS,_constantsDashConstants2['default'].CONTENT_TYPE]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].FRAME_PACKING,[_constantsDashConstants2['default'].VALUE,_constantsDashConstants2['default'].ID]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].AUDIO_CHANNEL_CONFIGURATION,[_constantsDashConstants2['default'].VALUE,_constantsDashConstants2['default'].ID]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].CONTENT_PROTECTION,[_constantsDashConstants2['default'].VALUE,_constantsDashConstants2['default'].ID]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].ESSENTIAL_PROPERTY,[_constantsDashConstants2['default'].VALUE,_constantsDashConstants2['default'].ID]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].SUPPLEMENTAL_PROPERTY,[_constantsDashConstants2['default'].VALUE,_constantsDashConstants2['default'].ID]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].INBAND_EVENT_STREAM,[_constantsDashConstants2['default'].VALUE,_constantsDashConstants2['default'].ID]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].ACCESSIBILITY,[_constantsDashConstants2['default'].VALUE,_constantsDashConstants2['default'].ID]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].ROLE,[_constantsDashConstants2['default'].VALUE,_constantsDashConstants2['default'].ID]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].RATING,[_constantsDashConstants2['default'].VALUE,_constantsDashConstants2['default'].ID]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].VIEWPOINT,[_constantsDashConstants2['default'].VALUE,_constantsDashConstants2['default'].ID]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].CONTENT_COMPONENT,[_constantsDashConstants2['default'].CONTENT_TYPE]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].REPRESENTATION,[_constantsDashConstants2['default'].ID,_constantsDashConstants2['default'].DEPENDENCY_ID,_constantsDashConstants2['default'].MEDIA_STREAM_STRUCTURE_ID]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].SUBSET,[_constantsDashConstants2['default'].ID]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].METRICS,[_constantsDashConstants2['default'].METRICS_MINUS]),_defineProperty(_stringAttrsInElements,_constantsDashConstants2['default'].REPORTING,[_constantsDashConstants2['default'].VALUE,_constantsDashConstants2['default'].ID]),_stringAttrsInElements);if(stringAttrsInElements.hasOwnProperty(nodeName)){var attrNames=stringAttrsInElements[nodeName];if(attrNames !== undefined){return attrNames.indexOf(attr.name) >= 0;}else {return false;}}return false;},function(str){return String(str);});}return StringMatcher;})(_BaseMatcher3['default']);exports['default'] = StringMatcher;module.exports = exports['default'];
	//# sourceMappingURL=StringMatcher.js.map


/***/ }),
/* 196 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc a base type for matching and converting types in manifest to
	 * something more useful
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _createClass=(function(){function defineProperties(target,props){for(var i=0;i < props.length;i++) {var descriptor=props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if("value" in descriptor)descriptor.writable = true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};})();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var BaseMatcher=(function(){function BaseMatcher(test,converter){_classCallCheck(this,BaseMatcher);this._test = test;this._converter = converter;}_createClass(BaseMatcher,[{key:"test",get:function get(){return this._test;}},{key:"converter",get:function get(){return this._converter;}}]);return BaseMatcher;})();exports["default"] = BaseMatcher;module.exports = exports["default"];
	//# sourceMappingURL=BaseMatcher.js.map


/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc matches and converts xs:duration to seconds
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _get=function get(_x,_x2,_x3){var _again=true;_function: while(_again) {var object=_x,property=_x2,receiver=_x3;_again = false;if(object === null)object = Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc === undefined){var parent=Object.getPrototypeOf(object);if(parent === null){return undefined;}else {_x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;}}else if('value' in desc){return desc.value;}else {var getter=desc.get;if(getter === undefined){return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass,superClass){if(typeof superClass !== 'function' && superClass !== null){throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__ = superClass;}var _BaseMatcher2=__webpack_require__(196);var _BaseMatcher3=_interopRequireDefault(_BaseMatcher2);var _streamingConstantsConstants=__webpack_require__(49);var _streamingConstantsConstants2=_interopRequireDefault(_streamingConstantsConstants);var _constantsDashConstants=__webpack_require__(151);var _constantsDashConstants2=_interopRequireDefault(_constantsDashConstants);var durationRegex=/^([-])?P(([\d.]*)Y)?(([\d.]*)M)?(([\d.]*)D)?T?(([\d.]*)H)?(([\d.]*)M)?(([\d.]*)S)?/;var SECONDS_IN_YEAR=365 * 24 * 60 * 60;var SECONDS_IN_MONTH=30 * 24 * 60 * 60;var SECONDS_IN_DAY=24 * 60 * 60;var SECONDS_IN_HOUR=60 * 60;var SECONDS_IN_MIN=60;var DurationMatcher=(function(_BaseMatcher){_inherits(DurationMatcher,_BaseMatcher);function DurationMatcher(){_classCallCheck(this,DurationMatcher);_get(Object.getPrototypeOf(DurationMatcher.prototype),'constructor',this).call(this,function(attr){var attributeList=[_constantsDashConstants2['default'].MIN_BUFFER_TIME,_constantsDashConstants2['default'].MEDIA_PRESENTATION_DURATION,_constantsDashConstants2['default'].MINIMUM_UPDATE_PERIOD,_constantsDashConstants2['default'].TIMESHIFT_BUFFER_DEPTH,_constantsDashConstants2['default'].MAX_SEGMENT_DURATION,_constantsDashConstants2['default'].MAX_SUBSEGMENT_DURATION,_streamingConstantsConstants2['default'].SUGGESTED_PRESENTATION_DELAY,_constantsDashConstants2['default'].START,_streamingConstantsConstants2['default'].START_TIME,_constantsDashConstants2['default'].DURATION];var len=attributeList.length;for(var i=0;i < len;i++) {if(attr.nodeName === attributeList[i]){return durationRegex.test(attr.value);}}return false;},function(str){ //str = "P10Y10M10DT10H10M10.1S";
	var match=durationRegex.exec(str);var result=parseFloat(match[2] || 0) * SECONDS_IN_YEAR + parseFloat(match[4] || 0) * SECONDS_IN_MONTH + parseFloat(match[6] || 0) * SECONDS_IN_DAY + parseFloat(match[8] || 0) * SECONDS_IN_HOUR + parseFloat(match[10] || 0) * SECONDS_IN_MIN + parseFloat(match[12] || 0);if(match[1] !== undefined){result = -result;}return result;});}return DurationMatcher;})(_BaseMatcher3['default']);exports['default'] = DurationMatcher;module.exports = exports['default'];
	//# sourceMappingURL=DurationMatcher.js.map


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc matches and converts xs:datetime to Date
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _get=function get(_x,_x2,_x3){var _again=true;_function: while(_again) {var object=_x,property=_x2,receiver=_x3;_again = false;if(object === null)object = Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc === undefined){var parent=Object.getPrototypeOf(object);if(parent === null){return undefined;}else {_x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;}}else if('value' in desc){return desc.value;}else {var getter=desc.get;if(getter === undefined){return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass,superClass){if(typeof superClass !== 'function' && superClass !== null){throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__ = superClass;}var _BaseMatcher2=__webpack_require__(196);var _BaseMatcher3=_interopRequireDefault(_BaseMatcher2);var SECONDS_IN_MIN=60;var MINUTES_IN_HOUR=60;var MILLISECONDS_IN_SECONDS=1000;var datetimeRegex=/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\.[0-9]*)?)?(?:([+-])([0-9]{2})(?::?)([0-9]{2}))?/;var DateTimeMatcher=(function(_BaseMatcher){_inherits(DateTimeMatcher,_BaseMatcher);function DateTimeMatcher(){_classCallCheck(this,DateTimeMatcher);_get(Object.getPrototypeOf(DateTimeMatcher.prototype),'constructor',this).call(this,function(attr){return datetimeRegex.test(attr.value);},function(str){var match=datetimeRegex.exec(str);var utcDate=undefined; // If the string does not contain a timezone offset different browsers can interpret it either
	// as UTC or as a local time so we have to parse the string manually to normalize the given date value for
	// all browsers
	utcDate = Date.UTC(parseInt(match[1],10),parseInt(match[2],10) - 1, // months start from zero
	parseInt(match[3],10),parseInt(match[4],10),parseInt(match[5],10),match[6] && parseInt(match[6],10) || 0,match[7] && parseFloat(match[7]) * MILLISECONDS_IN_SECONDS || 0); // If the date has timezone offset take it into account as well
	if(match[9] && match[10]){var timezoneOffset=parseInt(match[9],10) * MINUTES_IN_HOUR + parseInt(match[10],10);utcDate += (match[8] === '+'?-1:+1) * timezoneOffset * SECONDS_IN_MIN * MILLISECONDS_IN_SECONDS;}return new Date(utcDate);});}return DateTimeMatcher;})(_BaseMatcher3['default']);exports['default'] = DateTimeMatcher;module.exports = exports['default'];
	//# sourceMappingURL=DateTimeMatcher.js.map


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc Matches and converts xs:numeric to float
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _get=function get(_x,_x2,_x3){var _again=true;_function: while(_again) {var object=_x,property=_x2,receiver=_x3;_again = false;if(object === null)object = Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc === undefined){var parent=Object.getPrototypeOf(object);if(parent === null){return undefined;}else {_x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;}}else if('value' in desc){return desc.value;}else {var getter=desc.get;if(getter === undefined){return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass,superClass){if(typeof superClass !== 'function' && superClass !== null){throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__ = superClass;}var _BaseMatcher2=__webpack_require__(196);var _BaseMatcher3=_interopRequireDefault(_BaseMatcher2);var numericRegex=/^[-+]?[0-9]+[.]?[0-9]*([eE][-+]?[0-9]+)?$/;var NumericMatcher=(function(_BaseMatcher){_inherits(NumericMatcher,_BaseMatcher);function NumericMatcher(){_classCallCheck(this,NumericMatcher);_get(Object.getPrototypeOf(NumericMatcher.prototype),'constructor',this).call(this,function(attr){return numericRegex.test(attr.value);},function(str){return parseFloat(str);});}return NumericMatcher;})(_BaseMatcher3['default']);exports['default'] = NumericMatcher;module.exports = exports['default'];
	//# sourceMappingURL=NumericMatcher.js.map


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc a RepresentationBaseValuesMap type for input to objectiron
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _get=function get(_x,_x2,_x3){var _again=true;_function: while(_again) {var object=_x,property=_x2,receiver=_x3;_again = false;if(object === null)object = Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc === undefined){var parent=Object.getPrototypeOf(object);if(parent === null){return undefined;}else {_x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;}}else if('value' in desc){return desc.value;}else {var getter=desc.get;if(getter === undefined){return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass,superClass){if(typeof superClass !== 'function' && superClass !== null){throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__ = superClass;}var _MapNode2=__webpack_require__(201);var _MapNode3=_interopRequireDefault(_MapNode2);var _constantsDashConstants=__webpack_require__(151);var _constantsDashConstants2=_interopRequireDefault(_constantsDashConstants);var RepresentationBaseValuesMap=(function(_MapNode){_inherits(RepresentationBaseValuesMap,_MapNode);function RepresentationBaseValuesMap(){_classCallCheck(this,RepresentationBaseValuesMap);var commonProperties=[_constantsDashConstants2['default'].PROFILES,_constantsDashConstants2['default'].WIDTH,_constantsDashConstants2['default'].HEIGHT,_constantsDashConstants2['default'].SAR,_constantsDashConstants2['default'].FRAMERATE,_constantsDashConstants2['default'].AUDIO_SAMPLING_RATE,_constantsDashConstants2['default'].MIME_TYPE,_constantsDashConstants2['default'].SEGMENT_PROFILES,_constantsDashConstants2['default'].CODECS,_constantsDashConstants2['default'].MAXIMUM_SAP_PERIOD,_constantsDashConstants2['default'].START_WITH_SAP,_constantsDashConstants2['default'].MAX_PLAYOUT_RATE,_constantsDashConstants2['default'].CODING_DEPENDENCY,_constantsDashConstants2['default'].SCAN_TYPE,_constantsDashConstants2['default'].FRAME_PACKING,_constantsDashConstants2['default'].AUDIO_CHANNEL_CONFIGURATION,_constantsDashConstants2['default'].CONTENT_PROTECTION,_constantsDashConstants2['default'].ESSENTIAL_PROPERTY,_constantsDashConstants2['default'].SUPPLEMENTAL_PROPERTY,_constantsDashConstants2['default'].INBAND_EVENT_STREAM];_get(Object.getPrototypeOf(RepresentationBaseValuesMap.prototype),'constructor',this).call(this,_constantsDashConstants2['default'].ADAPTATION_SET,commonProperties,[new _MapNode3['default'](_constantsDashConstants2['default'].REPRESENTATION,commonProperties,[new _MapNode3['default'](_constantsDashConstants2['default'].SUB_REPRESENTATION,commonProperties)])]);}return RepresentationBaseValuesMap;})(_MapNode3['default']);exports['default'] = RepresentationBaseValuesMap;module.exports = exports['default'];
	//# sourceMappingURL=RepresentationBaseValuesMap.js.map


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc a node at some level in a ValueMap
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _createClass=(function(){function defineProperties(target,props){for(var i=0;i < props.length;i++) {var descriptor=props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if('value' in descriptor)descriptor.writable = true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};})();function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var _CommonProperty=__webpack_require__(202);var _CommonProperty2=_interopRequireDefault(_CommonProperty);var MapNode=(function(){function MapNode(name,properties,children){var _this=this;_classCallCheck(this,MapNode);this._name = name || '';this._properties = [];this._children = children || [];if(Array.isArray(properties)){properties.forEach(function(p){_this._properties.push(new _CommonProperty2['default'](p));});}}_createClass(MapNode,[{key:'name',get:function get(){return this._name;}},{key:'children',get:function get(){return this._children;}},{key:'properties',get:function get(){return this._properties;}}]);return MapNode;})();exports['default'] = MapNode;module.exports = exports['default'];
	//# sourceMappingURL=MapNode.js.map


/***/ }),
/* 202 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc a property belonging to a MapNode
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});var _createClass=(function(){function defineProperties(target,props){for(var i=0;i < props.length;i++) {var descriptor=props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if("value" in descriptor)descriptor.writable = true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};})();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var CommonProperty=(function(){function CommonProperty(name){_classCallCheck(this,CommonProperty);var getDefaultMergeForName=function getDefaultMergeForName(n){return n && n.length && n.charAt(0) === n.charAt(0).toUpperCase();};this._name = name;this._merge = getDefaultMergeForName(name);}_createClass(CommonProperty,[{key:"name",get:function get(){return this._name;}},{key:"merge",get:function get(){return this._merge;}}]);return CommonProperty;})();exports["default"] = CommonProperty;module.exports = exports["default"];
	//# sourceMappingURL=CommonProperty.js.map


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc a SegmentValuesMap type for input to objectiron
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _get=function get(_x,_x2,_x3){var _again=true;_function: while(_again) {var object=_x,property=_x2,receiver=_x3;_again = false;if(object === null)object = Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc === undefined){var parent=Object.getPrototypeOf(object);if(parent === null){return undefined;}else {_x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;}}else if('value' in desc){return desc.value;}else {var getter=desc.get;if(getter === undefined){return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass,superClass){if(typeof superClass !== 'function' && superClass !== null){throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__ = superClass;}var _MapNode2=__webpack_require__(201);var _MapNode3=_interopRequireDefault(_MapNode2);var _constantsDashConstants=__webpack_require__(151);var _constantsDashConstants2=_interopRequireDefault(_constantsDashConstants);var SegmentValuesMap=(function(_MapNode){_inherits(SegmentValuesMap,_MapNode);function SegmentValuesMap(){_classCallCheck(this,SegmentValuesMap);var commonProperties=[_constantsDashConstants2['default'].SEGMENT_BASE,_constantsDashConstants2['default'].SEGMENT_TEMPLATE,_constantsDashConstants2['default'].SEGMENT_LIST];_get(Object.getPrototypeOf(SegmentValuesMap.prototype),'constructor',this).call(this,_constantsDashConstants2['default'].PERIOD,commonProperties,[new _MapNode3['default'](_constantsDashConstants2['default'].ADAPTATION_SET,commonProperties,[new _MapNode3['default'](_constantsDashConstants2['default'].REPRESENTATION,commonProperties)])]);}return SegmentValuesMap;})(_MapNode3['default']);exports['default'] = SegmentValuesMap;module.exports = exports['default'];
	//# sourceMappingURL=SegmentValuesMap.js.map


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker); /**
	 * @module ErrorHandler
	 */function ErrorHandler(){var instance=undefined;var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance(); /**
	     * @param {number} err  "mediasource"|"mediakeys"
	     * @memberof module:ErrorHandler
	     * @deprecated
	     */function capabilityError(err){eventBus.trigger(_coreEventsEvents2['default'].ERROR,{error:'capability',event:err});} /**
	     * @param {string} id "manifest"|"SIDX"|"content"|"initialization"|"xlink"
	     * @param {string} url ""
	     * @param {object} request {XMLHttpRequest instance}
	     * @memberof module:ErrorHandler
	     * @deprecated
	     */function downloadError(id,url,request){eventBus.trigger(_coreEventsEvents2['default'].ERROR,{error:'download',event:{id:id,url:url,request:request}});} /**
	     * @param {string} message ""
	     * @param {string} id "parse"|"nostreams"
	     * @param {obj} manifest {parsed manifest}
	     * @param {obj} err
	     * @memberof module:ErrorHandler
	     * @deprecated
	     */function manifestError(message,id,manifest,err){eventBus.trigger(_coreEventsEvents2['default'].ERROR,{error:'manifestError',event:{message:message,id:id,manifest:manifest,event:err}});} /**
	     * @param {string} message ''
	     * @param {string} id 'parse'
	     * @param {string} ccContent ''
	     * @memberof module:ErrorHandler
	     * @deprecated
	     */function timedTextError(message,id,ccContent){eventBus.trigger(_coreEventsEvents2['default'].ERROR,{error:'cc',event:{message:message,id:id,cc:ccContent}});} /**
	     * @param {string} err
	     * @memberof module:ErrorHandler
	     * @deprecated
	     */function mediaSourceError(err){eventBus.trigger(_coreEventsEvents2['default'].ERROR,{error:'mediasource',event:err});} /**
	     * @param {string} err
	     * @memberof module:ErrorHandler
	     * @deprecated
	     */function mediaKeySessionError(err){eventBus.trigger(_coreEventsEvents2['default'].ERROR,{error:'key_session',event:err});} /**
	     * @param {string} err
	     * @memberof module:ErrorHandler
	     * @deprecated
	     */function mediaKeyMessageError(err){eventBus.trigger(_coreEventsEvents2['default'].ERROR,{error:'key_message',event:err});} /**
	     * @param {object} err DashJSError with code, message and data attributes
	     * @memberof module:ErrorHandler
	     */function error(err){eventBus.trigger(_coreEventsEvents2['default'].ERROR,{error:err});}instance = {capabilityError:capabilityError,downloadError:downloadError,manifestError:manifestError,timedTextError:timedTextError,mediaSourceError:mediaSourceError,mediaKeySessionError:mediaKeySessionError,mediaKeyMessageError:mediaKeyMessageError,error:error};return instance;}ErrorHandler.__dashjs_factory_name = 'ErrorHandler';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(ErrorHandler);module.exports = exports['default'];
	//# sourceMappingURL=ErrorHandler.js.map


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);function Capabilities(){var instance=undefined,encryptedMediaSupported=undefined;function setup(){encryptedMediaSupported = false;}function supportsMediaSource(){var hasWebKit=('WebKitMediaSource' in window);var hasMediaSource=('MediaSource' in window);return hasWebKit || hasMediaSource;} /**
	     * Returns whether Encrypted Media Extensions are supported on this
	     * user agent
	     *
	     * @return {boolean} true if EME is supported, false otherwise
	     */function supportsEncryptedMedia(){return encryptedMediaSupported;}function setEncryptedMediaSupported(value){encryptedMediaSupported = value;}function supportsCodec(codec){if('MediaSource' in window && MediaSource.isTypeSupported(codec)){return true;}if('WebKitMediaSource' in window && WebKitMediaSource.isTypeSupported(codec)){return true;}return false;}instance = {supportsMediaSource:supportsMediaSource,supportsEncryptedMedia:supportsEncryptedMedia,supportsCodec:supportsCodec,setEncryptedMediaSupported:setEncryptedMediaSupported};setup();return instance;}Capabilities.__dashjs_factory_name = 'Capabilities';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(Capabilities);module.exports = exports['default'];
	//# sourceMappingURL=Capabilities.js.map


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _voURIFragmentData=__webpack_require__(207);var _voURIFragmentData2=_interopRequireDefault(_voURIFragmentData);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker); /**
	 * Model class managing URI fragments.
	 */function URIFragmentModel(){var instance=undefined,URIFragmentDataVO=undefined; /**
	     * @param {string} uri The URI to parse for fragment extraction
	     * @memberof module:URIFragmentModel
	     * @instance
	     */function initialize(uri){URIFragmentDataVO = new _voURIFragmentData2['default']();if(!uri)return null;var hashIndex=uri.indexOf('#');if(hashIndex !== -1){var fragments=uri.substr(hashIndex + 1).split('&');for(var i=0,len=fragments.length;i < len;++i) {var fragment=fragments[i];var equalIndex=fragment.indexOf('=');if(equalIndex !== -1){var key=fragment.substring(0,equalIndex);if(URIFragmentDataVO.hasOwnProperty(key)){URIFragmentDataVO[key] = fragment.substr(equalIndex + 1);}}}}} /**
	     * @returns {URIFragmentData} Object containing supported URI fragments
	     * @memberof module:URIFragmentModel
	     * @instance
	     */function getURIFragmentData(){return URIFragmentDataVO;}instance = {initialize:initialize,getURIFragmentData:getURIFragmentData};return instance;}URIFragmentModel.__dashjs_factory_name = 'URIFragmentModel';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(URIFragmentModel);module.exports = exports['default'];
	//# sourceMappingURL=URIFragmentModel.js.map


/***/ }),
/* 207 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var URIFragmentData=function URIFragmentData(){_classCallCheck(this,URIFragmentData);this.t = null;this.xywh = null;this.track = null;this.id = null;this.s = null;this.r = null;};exports["default"] = URIFragmentData; /*
	    From Spec http://www.w3.org/TR/media-frags/

	    temporal (t)     - This dimension denotes a specific time range in the original media, such as "starting at second 10, continuing until second 20";
	    spatial  (xywh)  - this dimension denotes a specific range of pixels in the original media, such as "a rectangle with size (100,100) with its top-left at coordinate (10,10)";
	                       Media fragments support also addressing the media along two additional dimensions (in the advanced version defined in Media Fragments 1.0 URI (advanced)):
	    track    (track) - this dimension denotes one or more tracks in the original media, such as "the english audio and the video track";
	    id       (id)    - this dimension denotes a named temporal fragment within the original media, such as "chapter 2", and can be seen as a convenient way of specifying a temporal fragment.


	    ## Note
	    Akamai is purposing to add #s=X to the ISO standard.
	        - (X) Value would be a start time to seek to at startup instead of starting at 0 or live edge
	        - Allows for seeking back before the start time unlike a temporal clipping.
	*/module.exports = exports["default"];
	//# sourceMappingURL=URIFragmentData.js.map


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);function ManifestModel(){var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var instance=undefined,manifest=undefined;function getValue(){return manifest;}function setValue(value){manifest = value;if(value){eventBus.trigger(_coreEventsEvents2['default'].MANIFEST_LOADED,{data:value});}}instance = {getValue:getValue,setValue:setValue};return instance;}ManifestModel.__dashjs_factory_name = 'ManifestModel';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(ManifestModel);module.exports = exports['default'];
	//# sourceMappingURL=ManifestModel.js.map


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else {obj[key] = value;}return obj;}var _dashVoUTCTiming=__webpack_require__(210);var _dashVoUTCTiming2=_interopRequireDefault(_dashVoUTCTiming);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _voMetricsHTTPRequest=__webpack_require__(65);var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _rulesAbrABRRulesCollection=__webpack_require__(123);var _rulesAbrABRRulesCollection2=_interopRequireDefault(_rulesAbrABRRulesCollection);var _utilsSupervisorTools=__webpack_require__(73);var LIVE_DELAY_FRAGMENT_COUNT=4;var DEFAULT_LOCAL_STORAGE_BITRATE_EXPIRATION=360000;var DEFAULT_LOCAL_STORAGE_MEDIA_SETTINGS_EXPIRATION=360000;var BANDWIDTH_SAFETY_FACTOR=0.9;var ABANDON_LOAD_TIMEOUT=10000;var BUFFER_TO_KEEP=20;var BUFFER_AHEAD_TO_KEEP=80;var BUFFER_PRUNING_INTERVAL=10;var DEFAULT_MIN_BUFFER_TIME=12;var DEFAULT_MIN_BUFFER_TIME_FAST_SWITCH=20;var BUFFER_TIME_AT_TOP_QUALITY=30;var BUFFER_TIME_AT_TOP_QUALITY_LONG_FORM=60;var LONG_FORM_CONTENT_DURATION_THRESHOLD=600;var SEGMENT_OVERLAP_TOLERANCE_TIME=0.2;var SMALL_GAP_LIMIT=0.8;var MANIFEST_UPDATE_RETRY_INTERVAL=100;var CACHE_LOAD_THRESHOLD_VIDEO=50;var CACHE_LOAD_THRESHOLD_AUDIO=5;var FRAGMENT_RETRY_ATTEMPTS=3;var FRAGMENT_RETRY_INTERVAL=1000;var MANIFEST_RETRY_ATTEMPTS=3;var MANIFEST_RETRY_INTERVAL=500;var XLINK_RETRY_ATTEMPTS=1;var XLINK_RETRY_INTERVAL=500;var DEFAULT_LOW_LATENCY_LIVE_DELAY=3.0;var LOW_LATENCY_REDUCTION_FACTOR=10;var LOW_LATENCY_MULTIPLY_FACTOR=5;var LOW_LATENCY_CATCH_UP_MIN_DRIFT=0.02;var LOW_LATENCY_CATCH_UP_MAX_DRIFT=0;var LOW_LATENCY_CATCH_UP_PLAYBACK_RATE=0.5; //This value influences the startup time for live (in ms).
	var WALLCLOCK_TIME_UPDATE_INTERVAL=50;var DEFAULT_XHR_WITH_CREDENTIALS=false;function MediaPlayerModel(){var instance=undefined,useManifestDateHeaderTimeSource=undefined,useSuggestedPresentationDelay=undefined,UTCTimingSources=undefined,liveDelayFragmentCount=undefined,liveDelay=undefined,scheduleWhilePaused=undefined,bufferToKeep=undefined,bufferAheadToKeep=undefined,bufferPruningInterval=undefined,lastBitrateCachingInfo=undefined,lastMediaSettingsCachingInfo=undefined,stableBufferTime=undefined,bufferTimeAtTopQuality=undefined,bufferTimeAtTopQualityLongForm=undefined,longFormContentDurationThreshold=undefined,segmentOverlapToleranceTime=undefined,bandwidthSafetyFactor=undefined,abandonLoadTimeout=undefined,retryAttempts=undefined,retryIntervals=undefined,wallclockTimeUpdateInterval=undefined,ABRStrategy=undefined,useDefaultABRRules=undefined,xhrWithCredentials=undefined,fastSwitchEnabled=undefined,customABRRule=undefined,movingAverageMethod=undefined,cacheLoadThresholds=undefined,jumpGaps=undefined,smallGapLimit=undefined,lowLatencyEnabled=undefined,manifestUpdateRetryInterval=undefined,keepProtectionMediaKeys=undefined,liveCatchUpMinDrift=undefined,liveCatchUpMaxDrift=undefined,liveCatchUpPlaybackRate=undefined;var DEFAULT_UTC_TIMING_SOURCE={scheme:'urn:mpeg:dash:utc:http-xsdate:2014',value:'http://time.akamai.com/?iso&ms'};function setup(){var _retryAttempts,_retryIntervals;UTCTimingSources = [];useSuggestedPresentationDelay = false;useManifestDateHeaderTimeSource = true;scheduleWhilePaused = true;ABRStrategy = _constantsConstants2['default'].ABR_STRATEGY_DYNAMIC;useDefaultABRRules = true;fastSwitchEnabled = false;lastBitrateCachingInfo = {enabled:true,ttl:DEFAULT_LOCAL_STORAGE_BITRATE_EXPIRATION};lastMediaSettingsCachingInfo = {enabled:true,ttl:DEFAULT_LOCAL_STORAGE_MEDIA_SETTINGS_EXPIRATION};liveDelayFragmentCount = LIVE_DELAY_FRAGMENT_COUNT;liveDelay = undefined; // Explicitly state that default is undefined
	bufferToKeep = BUFFER_TO_KEEP;bufferAheadToKeep = BUFFER_AHEAD_TO_KEEP;bufferPruningInterval = BUFFER_PRUNING_INTERVAL;stableBufferTime = NaN;bufferTimeAtTopQuality = BUFFER_TIME_AT_TOP_QUALITY;bufferTimeAtTopQualityLongForm = BUFFER_TIME_AT_TOP_QUALITY_LONG_FORM;longFormContentDurationThreshold = LONG_FORM_CONTENT_DURATION_THRESHOLD;segmentOverlapToleranceTime = SEGMENT_OVERLAP_TOLERANCE_TIME;bandwidthSafetyFactor = BANDWIDTH_SAFETY_FACTOR;abandonLoadTimeout = ABANDON_LOAD_TIMEOUT;wallclockTimeUpdateInterval = WALLCLOCK_TIME_UPDATE_INTERVAL;jumpGaps = false;smallGapLimit = SMALL_GAP_LIMIT;manifestUpdateRetryInterval = MANIFEST_UPDATE_RETRY_INTERVAL;xhrWithCredentials = {'default':DEFAULT_XHR_WITH_CREDENTIALS};customABRRule = [];movingAverageMethod = _constantsConstants2['default'].MOVING_AVERAGE_SLIDING_WINDOW;lowLatencyEnabled = false;liveCatchUpMinDrift = LOW_LATENCY_CATCH_UP_MIN_DRIFT;liveCatchUpMaxDrift = LOW_LATENCY_CATCH_UP_MAX_DRIFT;liveCatchUpPlaybackRate = LOW_LATENCY_CATCH_UP_PLAYBACK_RATE;retryAttempts = (_retryAttempts = {},_defineProperty(_retryAttempts,_voMetricsHTTPRequest.HTTPRequest.MPD_TYPE,MANIFEST_RETRY_ATTEMPTS),_defineProperty(_retryAttempts,_voMetricsHTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE,XLINK_RETRY_ATTEMPTS),_defineProperty(_retryAttempts,_voMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE,FRAGMENT_RETRY_ATTEMPTS),_defineProperty(_retryAttempts,_voMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE,FRAGMENT_RETRY_ATTEMPTS),_defineProperty(_retryAttempts,_voMetricsHTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE,FRAGMENT_RETRY_ATTEMPTS),_defineProperty(_retryAttempts,_voMetricsHTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE,FRAGMENT_RETRY_ATTEMPTS),_defineProperty(_retryAttempts,_voMetricsHTTPRequest.HTTPRequest.OTHER_TYPE,FRAGMENT_RETRY_ATTEMPTS),_retryAttempts);retryIntervals = (_retryIntervals = {},_defineProperty(_retryIntervals,_voMetricsHTTPRequest.HTTPRequest.MPD_TYPE,MANIFEST_RETRY_INTERVAL),_defineProperty(_retryIntervals,_voMetricsHTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE,XLINK_RETRY_INTERVAL),_defineProperty(_retryIntervals,_voMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE,FRAGMENT_RETRY_INTERVAL),_defineProperty(_retryIntervals,_voMetricsHTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE,FRAGMENT_RETRY_INTERVAL),_defineProperty(_retryIntervals,_voMetricsHTTPRequest.HTTPRequest.BITSTREAM_SWITCHING_SEGMENT_TYPE,FRAGMENT_RETRY_INTERVAL),_defineProperty(_retryIntervals,_voMetricsHTTPRequest.HTTPRequest.INDEX_SEGMENT_TYPE,FRAGMENT_RETRY_INTERVAL),_defineProperty(_retryIntervals,_voMetricsHTTPRequest.HTTPRequest.OTHER_TYPE,FRAGMENT_RETRY_INTERVAL),_retryIntervals);cacheLoadThresholds = {};cacheLoadThresholds[_constantsConstants2['default'].VIDEO] = CACHE_LOAD_THRESHOLD_VIDEO;cacheLoadThresholds[_constantsConstants2['default'].AUDIO] = CACHE_LOAD_THRESHOLD_AUDIO;keepProtectionMediaKeys = false;} //TODO Should we use Object.define to have setters/getters? makes more readable code on other side.
	function setABRStrategy(value){if(value === _constantsConstants2['default'].ABR_STRATEGY_DYNAMIC || value === _constantsConstants2['default'].ABR_STRATEGY_BOLA || value === _constantsConstants2['default'].ABR_STRATEGY_THROUGHPUT){ABRStrategy = value;}else {throw _constantsConstants2['default'].BAD_ARGUMENT_ERROR;}}function getABRStrategy(){return ABRStrategy;}function setUseDefaultABRRules(value){(0,_utilsSupervisorTools.checkParameterType)(value,'boolean');useDefaultABRRules = value;}function getUseDefaultABRRules(){return useDefaultABRRules;}function findABRCustomRuleIndex(rulename){var i=undefined;for(i = 0;i < customABRRule.length;i++) {if(customABRRule[i].rulename === rulename){return i;}}return -1;}function getABRCustomRules(){return customABRRule;}function addABRCustomRule(type,rulename,rule){if(typeof type !== 'string' || type !== _rulesAbrABRRulesCollection2['default'].ABANDON_FRAGMENT_RULES && type !== _rulesAbrABRRulesCollection2['default'].QUALITY_SWITCH_RULES || typeof rulename !== 'string'){throw _constantsConstants2['default'].BAD_ARGUMENT_ERROR;}var index=findABRCustomRuleIndex(rulename);if(index === -1){ // add rule
	customABRRule.push({type:type,rulename:rulename,rule:rule});}else { // update rule
	customABRRule[index].type = type;customABRRule[index].rule = rule;}}function removeABRCustomRule(rulename){if(rulename){var index=findABRCustomRuleIndex(rulename); //if no rulename custom rule has been found, do nothing
	if(index !== -1){ // remove rule
	customABRRule.splice(index,1);}}else { //if no rulename is defined, remove all ABR custome rules
	customABRRule = [];}}function setBandwidthSafetyFactor(value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');bandwidthSafetyFactor = value;}function getBandwidthSafetyFactor(){return bandwidthSafetyFactor;}function setAbandonLoadTimeout(value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');abandonLoadTimeout = value;}function getAbandonLoadTimeout(){return abandonLoadTimeout;}function setStableBufferTime(value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');stableBufferTime = value;}function getStableBufferTime(){if(getLowLatencyEnabled()){return getLiveDelay() * 0.6;}return !isNaN(stableBufferTime)?stableBufferTime:fastSwitchEnabled?DEFAULT_MIN_BUFFER_TIME_FAST_SWITCH:DEFAULT_MIN_BUFFER_TIME;}function setBufferTimeAtTopQuality(value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');bufferTimeAtTopQuality = value;}function getBufferTimeAtTopQuality(){return bufferTimeAtTopQuality;}function setBufferTimeAtTopQualityLongForm(value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');bufferTimeAtTopQualityLongForm = value;}function getBufferTimeAtTopQualityLongForm(){return bufferTimeAtTopQualityLongForm;}function setLongFormContentDurationThreshold(value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');longFormContentDurationThreshold = value;}function getLongFormContentDurationThreshold(){return longFormContentDurationThreshold;}function setSegmentOverlapToleranceTime(value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');segmentOverlapToleranceTime = value;}function getSegmentOverlapToleranceTime(){return segmentOverlapToleranceTime;}function setCacheLoadThresholdForType(type,value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');(0,_utilsSupervisorTools.checkIsVideoOrAudioType)(type);cacheLoadThresholds[type] = value;}function getCacheLoadThresholdForType(type){return cacheLoadThresholds[type];}function setBufferToKeep(value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');bufferToKeep = value;}function getBufferToKeep(){return bufferToKeep;}function setBufferAheadToKeep(value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');bufferAheadToKeep = value;}function getBufferAheadToKeep(){return bufferAheadToKeep;}function setLastBitrateCachingInfo(enable,ttl){if(typeof enable !== 'boolean' || ttl !== undefined && (typeof ttl !== 'number' || isNaN(ttl))){throw _constantsConstants2['default'].BAD_ARGUMENT_ERROR;}lastBitrateCachingInfo.enabled = enable;if(ttl !== undefined){lastBitrateCachingInfo.ttl = ttl;}}function getLastBitrateCachingInfo(){return lastBitrateCachingInfo;}function setLastMediaSettingsCachingInfo(enable,ttl){if(typeof enable !== 'boolean' || ttl !== undefined && (typeof ttl !== 'number' || isNaN(ttl))){throw _constantsConstants2['default'].BAD_ARGUMENT_ERROR;}lastMediaSettingsCachingInfo.enabled = enable;if(ttl !== undefined){lastMediaSettingsCachingInfo.ttl = ttl;}}function getLastMediaSettingsCachingInfo(){return lastMediaSettingsCachingInfo;}function setBufferPruningInterval(value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');bufferPruningInterval = value;}function getBufferPruningInterval(){return bufferPruningInterval;}function setRetryAttemptsForType(type,value){if(typeof value !== 'number' || typeof type !== 'string' || type !== _voMetricsHTTPRequest.HTTPRequest.MPD_TYPE && type !== _voMetricsHTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE){throw _constantsConstants2['default'].BAD_ARGUMENT_ERROR;}retryAttempts[type] = value;}function getRetryAttemptsForType(type){return getLowLatencyEnabled()?retryAttempts[type] * LOW_LATENCY_MULTIPLY_FACTOR:retryAttempts[type];}function setRetryIntervalForType(type,value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');retryIntervals[type] = value;}function getRetryIntervalForType(type){return getLowLatencyEnabled()?retryIntervals[type] / LOW_LATENCY_REDUCTION_FACTOR:retryIntervals[type];}function setWallclockTimeUpdateInterval(value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');wallclockTimeUpdateInterval = value;}function getWallclockTimeUpdateInterval(){return wallclockTimeUpdateInterval;}function setScheduleWhilePaused(value){(0,_utilsSupervisorTools.checkParameterType)(value,'boolean');scheduleWhilePaused = value;}function getScheduleWhilePaused(){return scheduleWhilePaused;}function setLiveDelayFragmentCount(value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');liveDelayFragmentCount = value;}function getLiveDelayFragmentCount(){return liveDelayFragmentCount;}function setLiveDelay(value){if(value !== undefined){ // undefined is the default value...
	(0,_utilsSupervisorTools.checkParameterType)(value,'number');}liveDelay = value;}function getLiveDelay(){if(lowLatencyEnabled){return liveDelay || DEFAULT_LOW_LATENCY_LIVE_DELAY;}return liveDelay;}function setUseManifestDateHeaderTimeSource(value){(0,_utilsSupervisorTools.checkParameterType)(value,'boolean');useManifestDateHeaderTimeSource = value;}function getUseManifestDateHeaderTimeSource(){return useManifestDateHeaderTimeSource;}function setUseSuggestedPresentationDelay(value){(0,_utilsSupervisorTools.checkParameterType)(value,'boolean');useSuggestedPresentationDelay = value;}function getUseSuggestedPresentationDelay(){return useSuggestedPresentationDelay;}function addUTCTimingSource(schemeIdUri,value){removeUTCTimingSource(schemeIdUri,value); //check if it already exists and remove if so.
	var vo=new _dashVoUTCTiming2['default']();vo.schemeIdUri = schemeIdUri;vo.value = value;UTCTimingSources.push(vo);}function getUTCTimingSources(){return UTCTimingSources;}function removeUTCTimingSource(schemeIdUri,value){(0,_utilsSupervisorTools.checkParameterType)(schemeIdUri,'string');(0,_utilsSupervisorTools.checkParameterType)(value,'string');UTCTimingSources.forEach(function(obj,idx){if(obj.schemeIdUri === schemeIdUri && obj.value === value){UTCTimingSources.splice(idx,1);}});}function clearDefaultUTCTimingSources(){UTCTimingSources = [];}function restoreDefaultUTCTimingSources(){addUTCTimingSource(DEFAULT_UTC_TIMING_SOURCE.scheme,DEFAULT_UTC_TIMING_SOURCE.value);}function setXHRWithCredentialsForType(type,value){if(!type){Object.keys(xhrWithCredentials).forEach(function(key){setXHRWithCredentialsForType(key,value);});}else {xhrWithCredentials[type] = !!value;}}function getXHRWithCredentialsForType(type){var useCreds=xhrWithCredentials[type];return useCreds === undefined?xhrWithCredentials['default']:useCreds;}function getFastSwitchEnabled(){return fastSwitchEnabled;}function setFastSwitchEnabled(value){(0,_utilsSupervisorTools.checkParameterType)(value,'boolean');fastSwitchEnabled = value;}function setMovingAverageMethod(value){if(value === _constantsConstants2['default'].MOVING_AVERAGE_SLIDING_WINDOW || value === _constantsConstants2['default'].MOVING_AVERAGE_EWMA){movingAverageMethod = value;}else {throw _constantsConstants2['default'].BAD_ARGUMENT_ERROR;}}function getMovingAverageMethod(){return movingAverageMethod;}function setJumpGaps(value){(0,_utilsSupervisorTools.checkParameterType)(value,'boolean');jumpGaps = value;}function getJumpGaps(){return jumpGaps;}function setSmallGapLimit(value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');smallGapLimit = value;}function getSmallGapLimit(){return smallGapLimit;}function getLowLatencyEnabled(){return lowLatencyEnabled;}function setLowLatencyEnabled(value){(0,_utilsSupervisorTools.checkParameterType)(value,'boolean');lowLatencyEnabled = value;}function setCatchUpPlaybackRate(value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');(0,_utilsSupervisorTools.checkRange)(value,0.0,0.5);liveCatchUpPlaybackRate = value;}function getCatchUpPlaybackRate(){return liveCatchUpPlaybackRate;}function setLowLatencyMinDrift(value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');liveCatchUpMinDrift = value;}function getLowLatencyMinDrift(){return liveCatchUpMinDrift;}function setLowLatencyMaxDriftBeforeSeeking(value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');liveCatchUpMaxDrift = value;}function getLowLatencyMaxDriftBeforeSeeking(){return liveCatchUpMaxDrift;}function setManifestUpdateRetryInterval(value){(0,_utilsSupervisorTools.checkParameterType)(value,'number');manifestUpdateRetryInterval = value;}function getManifestUpdateRetryInterval(){return manifestUpdateRetryInterval;}function setKeepProtectionMediaKeys(value){(0,_utilsSupervisorTools.checkParameterType)(value,'boolean');keepProtectionMediaKeys = value;}function getKeepProtectionMediaKeys(){return keepProtectionMediaKeys;}function getDefaultUtcTimingSource(){return DEFAULT_UTC_TIMING_SOURCE;}function reset(){ //TODO need to figure out what props to persist across sessions and which to reset if any.
	//setup();
	}instance = {setABRStrategy:setABRStrategy,getABRStrategy:getABRStrategy,setUseDefaultABRRules:setUseDefaultABRRules,getUseDefaultABRRules:getUseDefaultABRRules,getABRCustomRules:getABRCustomRules,addABRCustomRule:addABRCustomRule,removeABRCustomRule:removeABRCustomRule,setBandwidthSafetyFactor:setBandwidthSafetyFactor,getBandwidthSafetyFactor:getBandwidthSafetyFactor,setAbandonLoadTimeout:setAbandonLoadTimeout,getAbandonLoadTimeout:getAbandonLoadTimeout,setLastBitrateCachingInfo:setLastBitrateCachingInfo,getLastBitrateCachingInfo:getLastBitrateCachingInfo,setLastMediaSettingsCachingInfo:setLastMediaSettingsCachingInfo,getLastMediaSettingsCachingInfo:getLastMediaSettingsCachingInfo,setStableBufferTime:setStableBufferTime,getStableBufferTime:getStableBufferTime,setBufferTimeAtTopQuality:setBufferTimeAtTopQuality,getBufferTimeAtTopQuality:getBufferTimeAtTopQuality,setBufferTimeAtTopQualityLongForm:setBufferTimeAtTopQualityLongForm,getBufferTimeAtTopQualityLongForm:getBufferTimeAtTopQualityLongForm,setLongFormContentDurationThreshold:setLongFormContentDurationThreshold,getLongFormContentDurationThreshold:getLongFormContentDurationThreshold,setSegmentOverlapToleranceTime:setSegmentOverlapToleranceTime,getSegmentOverlapToleranceTime:getSegmentOverlapToleranceTime,getCacheLoadThresholdForType:getCacheLoadThresholdForType,setCacheLoadThresholdForType:setCacheLoadThresholdForType,setBufferToKeep:setBufferToKeep,getBufferToKeep:getBufferToKeep,setBufferAheadToKeep:setBufferAheadToKeep,getBufferAheadToKeep:getBufferAheadToKeep,setBufferPruningInterval:setBufferPruningInterval,getBufferPruningInterval:getBufferPruningInterval,setRetryAttemptsForType:setRetryAttemptsForType,getRetryAttemptsForType:getRetryAttemptsForType,setRetryIntervalForType:setRetryIntervalForType,getRetryIntervalForType:getRetryIntervalForType,setWallclockTimeUpdateInterval:setWallclockTimeUpdateInterval,getWallclockTimeUpdateInterval:getWallclockTimeUpdateInterval,setScheduleWhilePaused:setScheduleWhilePaused,getScheduleWhilePaused:getScheduleWhilePaused,getUseSuggestedPresentationDelay:getUseSuggestedPresentationDelay,setUseSuggestedPresentationDelay:setUseSuggestedPresentationDelay,setLiveDelayFragmentCount:setLiveDelayFragmentCount,getLiveDelayFragmentCount:getLiveDelayFragmentCount,getLiveDelay:getLiveDelay,setLiveDelay:setLiveDelay,setUseManifestDateHeaderTimeSource:setUseManifestDateHeaderTimeSource,getUseManifestDateHeaderTimeSource:getUseManifestDateHeaderTimeSource,addUTCTimingSource:addUTCTimingSource,removeUTCTimingSource:removeUTCTimingSource,getUTCTimingSources:getUTCTimingSources,clearDefaultUTCTimingSources:clearDefaultUTCTimingSources,restoreDefaultUTCTimingSources:restoreDefaultUTCTimingSources,setXHRWithCredentialsForType:setXHRWithCredentialsForType,getXHRWithCredentialsForType:getXHRWithCredentialsForType,setFastSwitchEnabled:setFastSwitchEnabled,getFastSwitchEnabled:getFastSwitchEnabled,setMovingAverageMethod:setMovingAverageMethod,getMovingAverageMethod:getMovingAverageMethod,setJumpGaps:setJumpGaps,getJumpGaps:getJumpGaps,setSmallGapLimit:setSmallGapLimit,getSmallGapLimit:getSmallGapLimit,getLowLatencyEnabled:getLowLatencyEnabled,setLowLatencyEnabled:setLowLatencyEnabled,setCatchUpPlaybackRate:setCatchUpPlaybackRate,getCatchUpPlaybackRate:getCatchUpPlaybackRate,setLowLatencyMinDrift:setLowLatencyMinDrift,getLowLatencyMinDrift:getLowLatencyMinDrift,setLowLatencyMaxDriftBeforeSeeking:setLowLatencyMaxDriftBeforeSeeking,getLowLatencyMaxDriftBeforeSeeking:getLowLatencyMaxDriftBeforeSeeking,setManifestUpdateRetryInterval:setManifestUpdateRetryInterval,getManifestUpdateRetryInterval:getManifestUpdateRetryInterval,setKeepProtectionMediaKeys:setKeepProtectionMediaKeys,getKeepProtectionMediaKeys:getKeepProtectionMediaKeys,getDefaultUtcTimingSource:getDefaultUtcTimingSource,reset:reset};setup();return instance;} //TODO see if you can move this and not export and just getter to get default value.
	MediaPlayerModel.__dashjs_factory_name = 'MediaPlayerModel';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(MediaPlayerModel);module.exports = exports['default'];
	//# sourceMappingURL=MediaPlayerModel.js.map


/***/ }),
/* 210 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var UTCTiming=function UTCTiming(){_classCallCheck(this,UTCTiming); // UTCTiming is a DescriptorType and doesn't have any additional fields
	this.schemeIdUri = '';this.value = '';};exports['default'] = UTCTiming;module.exports = exports['default'];
	//# sourceMappingURL=UTCTiming.js.map


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var _constantsMetricsConstants=__webpack_require__(50);var _constantsMetricsConstants2=_interopRequireDefault(_constantsMetricsConstants);var _voMetricsList=__webpack_require__(212);var _voMetricsList2=_interopRequireDefault(_voMetricsList);var _voMetricsTCPConnection=__webpack_require__(213);var _voMetricsTCPConnection2=_interopRequireDefault(_voMetricsTCPConnection);var _voMetricsHTTPRequest=__webpack_require__(65);var _voMetricsRepresentationSwitch=__webpack_require__(214);var _voMetricsRepresentationSwitch2=_interopRequireDefault(_voMetricsRepresentationSwitch);var _voMetricsBufferLevel=__webpack_require__(215);var _voMetricsBufferLevel2=_interopRequireDefault(_voMetricsBufferLevel);var _voMetricsBufferState=__webpack_require__(216);var _voMetricsBufferState2=_interopRequireDefault(_voMetricsBufferState);var _voMetricsDVRInfo=__webpack_require__(217);var _voMetricsDVRInfo2=_interopRequireDefault(_voMetricsDVRInfo);var _voMetricsDroppedFrames=__webpack_require__(218);var _voMetricsDroppedFrames2=_interopRequireDefault(_voMetricsDroppedFrames);var _voMetricsManifestUpdate=__webpack_require__(219);var _voMetricsSchedulingInfo=__webpack_require__(220);var _voMetricsSchedulingInfo2=_interopRequireDefault(_voMetricsSchedulingInfo);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _voMetricsRequestsQueue=__webpack_require__(221);var _voMetricsRequestsQueue2=_interopRequireDefault(_voMetricsRequestsQueue);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);function MetricsModel(){var MAXIMUM_LIST_DEPTH=1000;var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var instance=undefined,streamMetrics=undefined;function setup(){streamMetrics = {};}function setConfig(config){if(!config)return;}function metricsChanged(){eventBus.trigger(_coreEventsEvents2['default'].METRICS_CHANGED);}function metricChanged(mediaType){eventBus.trigger(_coreEventsEvents2['default'].METRIC_CHANGED,{mediaType:mediaType});metricsChanged();}function metricUpdated(mediaType,metricType,vo){eventBus.trigger(_coreEventsEvents2['default'].METRIC_UPDATED,{mediaType:mediaType,metric:metricType,value:vo});metricChanged(mediaType);}function metricAdded(mediaType,metricType,vo){eventBus.trigger(_coreEventsEvents2['default'].METRIC_ADDED,{mediaType:mediaType,metric:metricType,value:vo});metricChanged(mediaType);}function clearCurrentMetricsForType(type){delete streamMetrics[type];metricChanged(type);}function clearAllCurrentMetrics(){streamMetrics = {};metricsChanged();}function getReadOnlyMetricsFor(type){if(streamMetrics.hasOwnProperty(type)){return streamMetrics[type];}return null;}function getMetricsFor(type){var metrics=undefined;if(streamMetrics.hasOwnProperty(type)){metrics = streamMetrics[type];}else {metrics = new _voMetricsList2['default']();streamMetrics[type] = metrics;}return metrics;}function pushMetrics(type,list,value){var metrics=getMetricsFor(type);metrics[list].push(value);if(metrics[list].length > MAXIMUM_LIST_DEPTH){metrics[list].shift();}}function addTcpConnection(mediaType,tcpid,dest,topen,tclose,tconnect){var vo=new _voMetricsTCPConnection2['default']();vo.tcpid = tcpid;vo.dest = dest;vo.topen = topen;vo.tclose = tclose;vo.tconnect = tconnect;pushAndNotify(mediaType,_constantsMetricsConstants2['default'].TCP_CONNECTION,vo);return vo;}function appendHttpTrace(httpRequest,s,d,b){var vo=new _voMetricsHTTPRequest.HTTPRequestTrace();vo.s = s;vo.d = d;vo.b = b;httpRequest.trace.push(vo);if(!httpRequest.interval){httpRequest.interval = 0;}httpRequest.interval += d;return vo;}function addHttpRequest(mediaType,tcpid,type,url,actualurl,serviceLocation,range,trequest,tresponse,tfinish,responsecode,mediaduration,responseHeaders,traces){var vo=new _voMetricsHTTPRequest.HTTPRequest(); // ISO 23009-1 D.4.3 NOTE 2:
	// All entries for a given object will have the same URL and range
	// and so can easily be correlated. If there were redirects or
	// failures there will be one entry for each redirect/failure.
	// The redirect-to URL or alternative url (where multiple have been
	// provided in the MPD) will appear as the actualurl of the next
	// entry with the same url value.
	if(actualurl && actualurl !== url){ // given the above, add an entry for the original request
	addHttpRequest(mediaType,null,type,url,null,null,range,trequest,null, // unknown
	null, // unknown
	null, // unknown, probably a 302
	mediaduration,null,null);vo.actualurl = actualurl;}vo.tcpid = tcpid;vo.type = type;vo.url = url;vo.range = range;vo.trequest = trequest;vo.tresponse = tresponse;vo.responsecode = responsecode;vo._tfinish = tfinish;vo._stream = mediaType;vo._mediaduration = mediaduration;vo._responseHeaders = responseHeaders;vo._serviceLocation = serviceLocation;if(traces){traces.forEach(function(trace){appendHttpTrace(vo,trace.s,trace.d,trace.b);});}else { // The interval and trace shall be absent for redirect and failure records.
	delete vo.interval;delete vo.trace;}pushAndNotify(mediaType,_constantsMetricsConstants2['default'].HTTP_REQUEST,vo);return vo;}function addRepresentationSwitch(mediaType,t,mt,to,lto){var vo=new _voMetricsRepresentationSwitch2['default']();vo.t = t;vo.mt = mt;vo.to = to;if(lto){vo.lto = lto;}else {delete vo.lto;}pushAndNotify(mediaType,_constantsMetricsConstants2['default'].TRACK_SWITCH,vo);return vo;}function pushAndNotify(mediaType,metricType,metricObject){pushMetrics(mediaType,metricType,metricObject);metricAdded(mediaType,metricType,metricObject);}function addBufferLevel(mediaType,t,level){var vo=new _voMetricsBufferLevel2['default']();vo.t = t;vo.level = level;pushAndNotify(mediaType,_constantsMetricsConstants2['default'].BUFFER_LEVEL,vo);return vo;}function addBufferState(mediaType,state,target){var vo=new _voMetricsBufferState2['default']();vo.target = target;vo.state = state;pushAndNotify(mediaType,_constantsMetricsConstants2['default'].BUFFER_STATE,vo);return vo;}function addDVRInfo(mediaType,currentTime,mpd,range){var vo=new _voMetricsDVRInfo2['default']();vo.time = currentTime;vo.range = range;vo.manifestInfo = mpd;pushAndNotify(mediaType,_constantsMetricsConstants2['default'].DVR_INFO,vo);return vo;}function addDroppedFrames(mediaType,quality){var vo=new _voMetricsDroppedFrames2['default']();var list=getMetricsFor(mediaType).DroppedFrames;vo.time = quality.creationTime;vo.droppedFrames = quality.droppedVideoFrames;if(list.length > 0 && list[list.length - 1] == vo){return list[list.length - 1];}pushAndNotify(mediaType,_constantsMetricsConstants2['default'].DROPPED_FRAMES,vo);return vo;}function addSchedulingInfo(mediaType,t,type,startTime,availabilityStartTime,duration,quality,range,state){var vo=new _voMetricsSchedulingInfo2['default']();vo.mediaType = mediaType;vo.t = t;vo.type = type;vo.startTime = startTime;vo.availabilityStartTime = availabilityStartTime;vo.duration = duration;vo.quality = quality;vo.range = range;vo.state = state;pushAndNotify(mediaType,_constantsMetricsConstants2['default'].SCHEDULING_INFO,vo);return vo;}function addRequestsQueue(mediaType,loadingRequests,executedRequests){var vo=new _voMetricsRequestsQueue2['default']();vo.loadingRequests = loadingRequests;vo.executedRequests = executedRequests;getMetricsFor(mediaType).RequestsQueue = vo;metricAdded(mediaType,_constantsMetricsConstants2['default'].REQUESTS_QUEUE,vo);}function addManifestUpdate(mediaType,type,requestTime,fetchTime,availabilityStartTime,presentationStartTime,clientTimeOffset,currentTime,buffered,latency){var vo=new _voMetricsManifestUpdate.ManifestUpdate();vo.mediaType = mediaType;vo.type = type;vo.requestTime = requestTime; // when this manifest update was requested
	vo.fetchTime = fetchTime; // when this manifest update was received
	vo.availabilityStartTime = availabilityStartTime;vo.presentationStartTime = presentationStartTime; // the seek point (liveEdge for dynamic, Stream[0].startTime for static)
	vo.clientTimeOffset = clientTimeOffset; // the calculated difference between the server and client wall clock time
	vo.currentTime = currentTime; // actual element.currentTime
	vo.buffered = buffered; // actual element.ranges
	vo.latency = latency; // (static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - currentTime)
	pushMetrics(_constantsConstants2['default'].STREAM,_constantsMetricsConstants2['default'].MANIFEST_UPDATE,vo);metricAdded(mediaType,_constantsMetricsConstants2['default'].MANIFEST_UPDATE,vo);return vo;}function updateManifestUpdateInfo(manifestUpdate,updatedFields){if(manifestUpdate){for(var field in updatedFields) {manifestUpdate[field] = updatedFields[field];}metricUpdated(manifestUpdate.mediaType,_constantsMetricsConstants2['default'].MANIFEST_UPDATE,manifestUpdate);}}function addManifestUpdateStreamInfo(manifestUpdate,id,index,start,duration){if(manifestUpdate){var vo=new _voMetricsManifestUpdate.ManifestUpdateStreamInfo();vo.id = id;vo.index = index;vo.start = start;vo.duration = duration;manifestUpdate.streamInfo.push(vo);metricUpdated(manifestUpdate.mediaType,_constantsMetricsConstants2['default'].MANIFEST_UPDATE_STREAM_INFO,manifestUpdate);return vo;}return null;}function addManifestUpdateRepresentationInfo(manifestUpdate,id,index,streamIndex,mediaType,presentationTimeOffset,startNumber,fragmentInfoType){if(manifestUpdate){var vo=new _voMetricsManifestUpdate.ManifestUpdateRepresentationInfo();vo.id = id;vo.index = index;vo.streamIndex = streamIndex;vo.mediaType = mediaType;vo.startNumber = startNumber;vo.fragmentInfoType = fragmentInfoType;vo.presentationTimeOffset = presentationTimeOffset;manifestUpdate.representationInfo.push(vo);metricUpdated(manifestUpdate.mediaType,_constantsMetricsConstants2['default'].MANIFEST_UPDATE_TRACK_INFO,manifestUpdate);return vo;}return null;}function addPlayList(vo){var type=_constantsConstants2['default'].STREAM;if(vo.trace && Array.isArray(vo.trace)){vo.trace.forEach(function(trace){if(trace.hasOwnProperty('subreplevel') && !trace.subreplevel){delete trace.subreplevel;}});}else {delete vo.trace;}pushAndNotify(type,_constantsMetricsConstants2['default'].PLAY_LIST,vo);return vo;}function addDVBErrors(vo){var type=_constantsConstants2['default'].STREAM;pushAndNotify(type,_constantsMetricsConstants2['default'].DVB_ERRORS,vo);return vo;}instance = {clearCurrentMetricsForType:clearCurrentMetricsForType,clearAllCurrentMetrics:clearAllCurrentMetrics,getReadOnlyMetricsFor:getReadOnlyMetricsFor,getMetricsFor:getMetricsFor,addTcpConnection:addTcpConnection,addHttpRequest:addHttpRequest,addRepresentationSwitch:addRepresentationSwitch,addBufferLevel:addBufferLevel,addBufferState:addBufferState,addDVRInfo:addDVRInfo,addDroppedFrames:addDroppedFrames,addSchedulingInfo:addSchedulingInfo,addRequestsQueue:addRequestsQueue,addManifestUpdate:addManifestUpdate,updateManifestUpdateInfo:updateManifestUpdateInfo,addManifestUpdateStreamInfo:addManifestUpdateStreamInfo,addManifestUpdateRepresentationInfo:addManifestUpdateRepresentationInfo,addPlayList:addPlayList,addDVBErrors:addDVBErrors,setConfig:setConfig};setup();return instance;}MetricsModel.__dashjs_factory_name = 'MetricsModel';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(MetricsModel);module.exports = exports['default'];
	//# sourceMappingURL=MetricsModel.js.map


/***/ }),
/* 212 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var MetricsList=function MetricsList(){_classCallCheck(this,MetricsList);this.TcpList = [];this.HttpList = [];this.RepSwitchList = [];this.BufferLevel = [];this.BufferState = [];this.PlayList = [];this.DroppedFrames = [];this.SchedulingInfo = [];this.DVRInfo = [];this.ManifestUpdate = [];this.RequestsQueue = null;this.DVBErrors = [];};exports["default"] = MetricsList;module.exports = exports["default"];
	//# sourceMappingURL=MetricsList.js.map


/***/ }),
/* 213 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var TCPConnection= /**
	     * @description This Object holds reference to the current tcp connection
	     */function TCPConnection(){_classCallCheck(this,TCPConnection); /**
	         * Identifier of the TCP connection on which the HTTP request was sent.
	         * @public
	         */this.tcpid = null; /**
	         * IP Address of the interface over which the client is receiving the TCP data.
	         * @public
	         */this.dest = null; /**
	         * Real-Time | The time at which the connection was opened (sending time of the initial SYN or connect socket operation).
	         * @public
	         */this.topen = null; /**
	         * Real-Time | The time at which the connection was closed (sending or reception time of FIN or RST or close socket operation).
	         * @public
	         */this.tclose = null; /**
	         * Connect time in ms (time from sending the initial SYN to receiving the ACK or completion of the connect socket operation).
	         * @public
	         */this.tconnect = null;};exports["default"] = TCPConnection;module.exports = exports["default"];
	//# sourceMappingURL=TCPConnection.js.map


/***/ }),
/* 214 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var RepresentationSwitch= /**
	     * @description This Object holds reference to the info at quality switch between two representations.
	     */function RepresentationSwitch(){_classCallCheck(this,RepresentationSwitch); /**
	         * Time of the switch event.
	         * @public
	         */this.t = null; /**
	         * The media presentation time of the earliest access unit
	         * (out of all media content components) played out from
	         * the Representation.
	         *
	         * @public
	         */this.mt = null; /**
	         * Value of Representation@id identifying the switch-to Representation.
	         * @public
	         */this.to = null; /**
	         * If not present, this metrics concerns the Representation as a whole.
	         * If present, lto indicates the value of SubRepresentation@level within
	         * Representation identifying the switch-to level of the Representation.
	         *
	         * @public
	         */this.lto = null;};exports["default"] = RepresentationSwitch;module.exports = exports["default"];
	//# sourceMappingURL=RepresentationSwitch.js.map


/***/ }),
/* 215 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var BufferLevel= /**
	     * @description This Object holds reference to the current buffer level and the time it was recorded.
	     */function BufferLevel(){_classCallCheck(this,BufferLevel); /**
	         * Real-Time | Time of the measurement of the buffer level.
	         * @public
	         */this.t = null; /**
	         * Level of the buffer in milliseconds. Indicates the playout duration for which
	         * media data of all active media components is available starting from the
	         * current playout time.
	         * @public
	         */this.level = null;};exports["default"] = BufferLevel;module.exports = exports["default"];
	//# sourceMappingURL=BufferLevel.js.map


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var _controllersBufferController=__webpack_require__(52);var _controllersBufferController2=_interopRequireDefault(_controllersBufferController); /**
	 * @class
	 */var BufferState= /**
	     * @description This Object holds reference to the current buffer state of the video element.
	     */function BufferState(){_classCallCheck(this,BufferState); /**
	         * The Buffer Level Target determined by the BufferLevelRule.
	         * @public
	         */this.target = null; /**
	         * Current buffer state. Will be BufferController.BUFFER_EMPTY or BufferController.BUFFER_LOADED.
	         * @public
	         */this.state = _controllersBufferController2['default'].BUFFER_EMPTY;};exports['default'] = BufferState;module.exports = exports['default'];
	//# sourceMappingURL=BufferState.js.map


/***/ }),
/* 217 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var DVRInfo= /**
	     * @description This Object holds reference to DVR availability window information.
	     */function DVRInfo(){_classCallCheck(this,DVRInfo); /**
	         * The current time of the video element when this was created.
	         * @public
	         */this.time = null; /**
	         * The current Segment Availability Range as an object with start and end properties.
	         * It's delta defined by the timeShiftBufferDepth MPD attribute.
	         * @public
	         */this.range = null; /**
	         * Reference to the internal ManifestInfo.js VO.
	         * @public
	         */this.manifestInfo = null;};exports["default"] = DVRInfo;module.exports = exports["default"];
	//# sourceMappingURL=DVRInfo.js.map


/***/ }),
/* 218 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var DroppedFrames= /**
	     * @description This Object holds reference to DroppedFrames count and the time it was recorded.
	     */function DroppedFrames(){_classCallCheck(this,DroppedFrames); /**
	         * Real-Time | Time of the measurement of the dropped frames.
	         * @public
	         */this.time = null; /**
	         * Number of dropped frames
	         * @public
	         */this.droppedFrames = null;};exports["default"] = DroppedFrames;module.exports = exports["default"];
	//# sourceMappingURL=DroppedFrames.js.map


/***/ }),
/* 219 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc This Object holds reference to the manifest update information.
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var ManifestUpdate= /**
	     * @class
	     */function ManifestUpdate(){_classCallCheck(this,ManifestUpdate); /**
	         * Media Type Video | Audio | FragmentedText
	         * @public
	         */this.mediaType = null; /**
	         * MPD Type static | dynamic
	         * @public
	         */this.type = null; /**
	         * When this manifest update was requested
	         * @public
	         */this.requestTime = null; /**
	         * When this manifest update was received
	         * @public
	         */this.fetchTime = null; /**
	         * Calculated Availability Start time of the stream.
	         * @public
	         */this.availabilityStartTime = null; /**
	         * the seek point (liveEdge for dynamic, Stream[0].startTime for static)
	         * @public
	         */this.presentationStartTime = 0; /**
	         * The calculated difference between the server and client wall clock time
	         * @public
	         */this.clientTimeOffset = 0; /**
	         * Actual element.currentTime
	         * @public
	         */this.currentTime = null; /**
	         * Actual element.ranges
	         * @public
	         */this.buffered = null; /**
	         * Static is fixed value of zero. dynamic should be ((Now-@availabilityStartTime) - elementCurrentTime)
	         * @public
	         */this.latency = 0; /**
	         * Array holding list of StreamInfo VO Objects
	         * @public
	         */this.streamInfo = []; /**
	         * Array holding list of RepresentationInfo VO Objects
	         * @public
	         */this.representationInfo = [];} /**
	 * @classdesc This Object holds reference to the current period's stream information when the manifest was updated.
	 */;var ManifestUpdateStreamInfo= /**
	     * @class
	     */function ManifestUpdateStreamInfo(){_classCallCheck(this,ManifestUpdateStreamInfo); /**
	         * Stream@id
	         * @public
	         */this.id = null; /**
	         * Period Index
	         * @public
	         */this.index = null; /**
	         * Stream@start
	         * @public
	         */this.start = null; /**
	         * Stream@duration
	         * @public
	         */this.duration = null;} /**
	 * @classdesc This Object holds reference to the current representation's info when the manifest was updated.
	 */;var ManifestUpdateRepresentationInfo= /**
	     * @class
	     */function ManifestUpdateRepresentationInfo(){_classCallCheck(this,ManifestUpdateRepresentationInfo); /**
	         * Track@id
	         * @public
	         */this.id = null; /**
	         * Representation Index
	         * @public
	         */this.index = null; /**
	         * Media Type Video | Audio | FragmentedText
	         * @public
	         */this.mediaType = null; /**
	         * Which representation
	         * @public
	         */this.streamIndex = null; /**
	         * Holds reference to @presentationTimeOffset
	         * @public
	         */this.presentationTimeOffset = null; /**
	         * Holds reference to @startNumber
	         * @public
	         */this.startNumber = null; /**
	         * list|template|timeline
	         * @public
	         */this.fragmentInfoType = null;};exports.ManifestUpdate = ManifestUpdate;exports.ManifestUpdateStreamInfo = ManifestUpdateStreamInfo;exports.ManifestUpdateRepresentationInfo = ManifestUpdateRepresentationInfo;
	//# sourceMappingURL=ManifestUpdate.js.map


/***/ }),
/* 220 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var SchedulingInfo= /**
	     * @description This Object holds reference to the index handling of the current fragment being loaded or executed.
	     */function SchedulingInfo(){_classCallCheck(this,SchedulingInfo); /**
	         * Type of stream Audio | Video | FragmentedText
	         * @public
	         */this.mediaType = null; /**
	         * Time of the scheduling event.
	         * @public
	         */this.t = null; /**
	         * Type of fragment (initialization | media)
	         * @public
	         */this.type = null; /**
	         * Presentation start time of fragment
	         * @public
	         */this.startTime = null; /**
	         * Availability start time of fragment
	         * @public
	         */this.availabilityStartTime = null; /**
	         * Duration of fragment
	         * @public
	         */this.duration = null; /**
	         * Bit Rate Quality of fragment
	         * @public
	         */this.quality = null; /**
	         * Range of fragment
	         * @public
	         */this.range = null; /**
	         * Current state of fragment
	         * @public
	         */this.state = null;};exports["default"] = SchedulingInfo;module.exports = exports["default"];
	//# sourceMappingURL=SchedulingInfo.js.map


/***/ }),
/* 221 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var RequestsQueue= /**
	     * @description This Object holds reference to Fragment Model's request queues
	     */function RequestsQueue(){_classCallCheck(this,RequestsQueue); /**
	         * Array of all of the requests that have begun to load
	         * This request may not make it into the executed queue if it is abandon due to ABR rules for example.
	         * @public
	         */this.loadingRequests = []; /**
	         * Array of the The requests that have completed
	         * @public
	         */this.executedRequests = [];};exports["default"] = RequestsQueue;module.exports = exports["default"];
	//# sourceMappingURL=RequestsQueue.js.map


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);function VideoModel(){var instance=undefined,logger=undefined,element=undefined,TTMLRenderingDiv=undefined,videoContainer=undefined,previousPlaybackRate=undefined;var VIDEO_MODEL_WRONG_ELEMENT_TYPE='element is not video or audio DOM type!';var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var stalledStreams=[];function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);}function initialize(){eventBus.on(_coreEventsEvents2['default'].PLAYBACK_PLAYING,onPlaying,this);}function reset(){eventBus.off(_coreEventsEvents2['default'].PLAYBACK_PLAYING,onPlaying,this);}function onPlaybackCanPlay(){if(element){element.playbackRate = previousPlaybackRate || 1;element.removeEventListener('canplay',onPlaybackCanPlay);}}function setPlaybackRate(value){if(!element)return;if(element.readyState <= 2 && value > 0){ // If media element hasn't loaded enough data to play yet, wait until it has
	element.addEventListener('canplay',onPlaybackCanPlay);}else {element.playbackRate = value;}} //TODO Move the DVR window calculations from MediaPlayer to Here.
	function setCurrentTime(currentTime,stickToBuffered){if(element){ //_currentTime = currentTime;
	// We don't set the same currentTime because it can cause firing unexpected Pause event in IE11
	// providing playbackRate property equals to zero.
	if(element.currentTime == currentTime)return; // TODO Despite the fact that MediaSource 'open' event has been fired IE11 cannot set videoElement.currentTime
	// immediately (it throws InvalidStateError). It seems that this is related to videoElement.readyState property
	// Initially it is 0, but soon after 'open' event it goes to 1 and setting currentTime is allowed. Chrome allows to
	// set currentTime even if readyState = 0.
	// setTimeout is used to workaround InvalidStateError in IE11
	try{currentTime = stickToBuffered?stickTimeToBuffered(currentTime):currentTime;element.currentTime = currentTime;}catch(e) {if(element.readyState === 0 && e.code === e.INVALID_STATE_ERR){setTimeout(function(){element.currentTime = currentTime;},400);}}}}function stickTimeToBuffered(time){var buffered=getBufferRange();var closestTime=time;var closestDistance=9999999999;if(buffered){for(var i=0;i < buffered.length;i++) {var start=buffered.start(i);var end=buffered.end(i);var distanceToStart=Math.abs(start - time);var distanceToEnd=Math.abs(end - time);if(time >= start && time <= end){return time;}if(distanceToStart < closestDistance){closestDistance = distanceToStart;closestTime = start;}if(distanceToEnd < closestDistance){closestDistance = distanceToEnd;closestTime = end;}}}return closestTime;}function getElement(){return element;}function setElement(value){ //add check of value type
	if(value === null || value === undefined || value && /^(VIDEO|AUDIO)$/i.test(value.nodeName)){element = value; // Workaround to force Firefox to fire the canplay event.
	if(element){element.preload = 'auto';}}else {throw VIDEO_MODEL_WRONG_ELEMENT_TYPE;}}function setSource(source){if(element){if(source){element.src = source;}else {element.removeAttribute('src');element.load();}}}function getSource(){return element?element.src:null;}function getVideoContainer(){return videoContainer;}function setVideoContainer(value){videoContainer = value;}function getTTMLRenderingDiv(){return TTMLRenderingDiv;}function setTTMLRenderingDiv(div){TTMLRenderingDiv = div; // The styling will allow the captions to match the video window size and position.
	TTMLRenderingDiv.style.position = 'absolute';TTMLRenderingDiv.style.display = 'flex';TTMLRenderingDiv.style.overflow = 'hidden';TTMLRenderingDiv.style.pointerEvents = 'none';TTMLRenderingDiv.style.top = 0;TTMLRenderingDiv.style.left = 0;}function setStallState(type,state){stallStream(type,state);}function isStalled(){return stalledStreams.length > 0;}function addStalledStream(type){var event=undefined;if(type === null || element.seeking || stalledStreams.indexOf(type) !== -1){return;}stalledStreams.push(type);if(element && stalledStreams.length === 1){ // Halt playback until nothing is stalled.
	event = document.createEvent('Event');event.initEvent('waiting',true,false);previousPlaybackRate = element.playbackRate;setPlaybackRate(0);element.dispatchEvent(event);}}function removeStalledStream(type){var index=stalledStreams.indexOf(type);var event=undefined;if(type === null){return;}if(index !== -1){stalledStreams.splice(index,1);} // If nothing is stalled resume playback.
	if(element && isStalled() === false && element.playbackRate === 0){setPlaybackRate(previousPlaybackRate || 1);if(!element.paused){event = document.createEvent('Event');event.initEvent('playing',true,false);element.dispatchEvent(event);}}}function stallStream(type,isStalled){if(isStalled){addStalledStream(type);}else {removeStalledStream(type);}} //Calling play on the element will emit playing - even if the stream is stalled. If the stream is stalled, emit a waiting event.
	function onPlaying(){if(element && isStalled() && element.playbackRate === 0){var _event=document.createEvent('Event');_event.initEvent('waiting',true,false);element.dispatchEvent(_event);}}function getPlaybackQuality(){if(!element){return null;}var hasWebKit='webkitDroppedFrameCount' in element && 'webkitDecodedFrameCount' in element;var hasQuality=('getVideoPlaybackQuality' in element);var result=null;if(hasQuality){result = element.getVideoPlaybackQuality();}else if(hasWebKit){result = {droppedVideoFrames:element.webkitDroppedFrameCount,totalVideoFrames:element.webkitDroppedFrameCount + element.webkitDecodedFrameCount,creationTime:new Date()};}return result;}function play(){if(element){element.autoplay = true;var p=element.play();if(p && typeof Promise !== 'undefined' && p instanceof Promise){p['catch'](function(e){if(e.name === 'NotAllowedError'){eventBus.trigger(_coreEventsEvents2['default'].PLAYBACK_NOT_ALLOWED);}logger.warn('Caught pending play exception - continuing (' + e + ')');});}}}function isPaused(){return element?element.paused:null;}function pause(){if(element){element.pause();element.autoplay = false;}}function isSeeking(){return element?element.seeking:null;}function getTime(){return element?element.currentTime:null;}function getPlaybackRate(){return element?element.playbackRate:null;}function getPlayedRanges(){return element?element.played:null;}function getEnded(){return element?element.ended:null;}function addEventListener(eventName,eventCallBack){if(element){element.addEventListener(eventName,eventCallBack);}}function removeEventListener(eventName,eventCallBack){if(element){element.removeEventListener(eventName,eventCallBack);}}function getReadyState(){return element?element.readyState:NaN;}function getBufferRange(){return element?element.buffered:null;}function getClientWidth(){return element?element.clientWidth:NaN;}function getClientHeight(){return element?element.clientHeight:NaN;}function getVideoWidth(){return element?element.videoWidth:NaN;}function getVideoHeight(){return element?element.videoHeight:NaN;}function getVideoRelativeOffsetTop(){return element && element.parentNode?element.getBoundingClientRect().top - element.parentNode.getBoundingClientRect().top:NaN;}function getVideoRelativeOffsetLeft(){return element && element.parentNode?element.getBoundingClientRect().left - element.parentNode.getBoundingClientRect().left:NaN;}function getTextTracks(){return element?element.textTracks:[];}function getTextTrack(kind,label,lang,isTTML,isEmbedded){if(element){for(var i=0;i < element.textTracks.length;i++) { //label parameter could be a number (due to adaptationSet), but label, the attribute of textTrack, is a string => to modify...
	//label could also be undefined (due to adaptationSet)
	if(element.textTracks[i].kind === kind && (label?element.textTracks[i].label == label:true) && element.textTracks[i].language === lang && element.textTracks[i].isTTML === isTTML && element.textTracks[i].isEmbedded === isEmbedded){return element.textTracks[i];}}}return null;}function addTextTrack(kind,label,lang){if(element){return element.addTextTrack(kind,label,lang);}return null;}function appendChild(childElement){if(element){element.appendChild(childElement); //in Chrome, we need to differenciate textTrack with same lang, kind and label but different format (vtt, ttml, etc...)
	if(childElement.isTTML !== undefined){element.textTracks[element.textTracks.length - 1].isTTML = childElement.isTTML;element.textTracks[element.textTracks.length - 1].isEmbedded = childElement.isEmbedded;}}}function removeChild(childElement){if(element){element.removeChild(childElement);}}instance = {initialize:initialize,setCurrentTime:setCurrentTime,play:play,isPaused:isPaused,pause:pause,isSeeking:isSeeking,getTime:getTime,getPlaybackRate:getPlaybackRate,setPlaybackRate:setPlaybackRate,getPlayedRanges:getPlayedRanges,getEnded:getEnded,setStallState:setStallState,getElement:getElement,setElement:setElement,setSource:setSource,getSource:getSource,getVideoContainer:getVideoContainer,setVideoContainer:setVideoContainer,getTTMLRenderingDiv:getTTMLRenderingDiv,setTTMLRenderingDiv:setTTMLRenderingDiv,getPlaybackQuality:getPlaybackQuality,addEventListener:addEventListener,removeEventListener:removeEventListener,getReadyState:getReadyState,getBufferRange:getBufferRange,getClientWidth:getClientWidth,getClientHeight:getClientHeight,getTextTracks:getTextTracks,getTextTrack:getTextTrack,addTextTrack:addTextTrack,appendChild:appendChild,removeChild:removeChild,getVideoWidth:getVideoWidth,getVideoHeight:getVideoHeight,getVideoRelativeOffsetTop:getVideoRelativeOffsetTop,getVideoRelativeOffsetLeft:getVideoRelativeOffsetLeft,reset:reset};setup();return instance;}VideoModel.__dashjs_factory_name = 'VideoModel';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(VideoModel);module.exports = exports['default'];
	//# sourceMappingURL=VideoModel.js.map


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _constantsConstants=__webpack_require__(49);var _constantsConstants2=_interopRequireDefault(_constantsConstants);var legacyKeysAndReplacements=[{oldKey:'dashjs_vbitrate',newKey:'dashjs_video_bitrate'},{oldKey:'dashjs_abitrate',newKey:'dashjs_audio_bitrate'},{oldKey:'dashjs_vsettings',newKey:'dashjs_video_settings'},{oldKey:'dashjs_asettings',newKey:'dashjs_audio_settings'}];var LOCAL_STORAGE_BITRATE_KEY_TEMPLATE='dashjs_?_bitrate';var LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE='dashjs_?_settings';var STORAGE_TYPE_LOCAL='localStorage';var STORAGE_TYPE_SESSION='sessionStorage';var LAST_BITRATE='LastBitrate';var LAST_MEDIA_SETTINGS='LastMediaSettings';function DOMStorage(config){config = config || {};var context=this.context;var mediaPlayerModel=config.mediaPlayerModel;var instance=undefined,logger=undefined,supported=undefined;function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);translateLegacyKeys();} //type can be local, session
	function isSupported(type){if(supported !== undefined)return supported;supported = false;var testKey='1';var testValue='1';var storage=undefined;try{if(typeof window !== 'undefined'){storage = window[type];}}catch(error) {logger.warn('DOMStorage access denied: ' + error.message);return supported;}if(!storage || type !== STORAGE_TYPE_LOCAL && type !== STORAGE_TYPE_SESSION){return supported;} /* When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage is available, but trying to call setItem throws an exception.
	         http://stackoverflow.com/questions/14555347/html5-localstorage-error-with-safari-quota-exceeded-err-dom-exception-22-an

	         Check if the storage can be used
	         */try{storage.setItem(testKey,testValue);storage.removeItem(testKey);supported = true;}catch(error) {logger.warn('DOMStorage is supported, but cannot be used: ' + error.message);}return supported;}function translateLegacyKeys(){if(isSupported(STORAGE_TYPE_LOCAL)){legacyKeysAndReplacements.forEach(function(entry){var value=localStorage.getItem(entry.oldKey);if(value){localStorage.removeItem(entry.oldKey);try{localStorage.setItem(entry.newKey,value);}catch(e) {logger.error(e.message);}}});}} // Return current epoch time, ms, rounded to the nearest 10m to avoid fingerprinting user
	function getTimestamp(){var ten_minutes_ms=60 * 1000 * 10;return Math.round(new Date().getTime() / ten_minutes_ms) * ten_minutes_ms;}function canStore(storageType,key){return isSupported(storageType) && mediaPlayerModel['get' + key + 'CachingInfo']().enabled;}function checkConfig(){if(!mediaPlayerModel || !mediaPlayerModel.hasOwnProperty('getLastMediaSettingsCachingInfo')){throw new Error(_constantsConstants2['default'].MISSING_CONFIG_ERROR);}}function getSavedMediaSettings(type){checkConfig(); //Checks local storage to see if there is valid, non-expired media settings
	if(!canStore(STORAGE_TYPE_LOCAL,LAST_MEDIA_SETTINGS))return null;var settings=null;var key=LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\?/,type);try{var obj=JSON.parse(localStorage.getItem(key)) || {};var isExpired=new Date().getTime() - parseInt(obj.timestamp,10) >= mediaPlayerModel.getLastMediaSettingsCachingInfo().ttl || false;settings = obj.settings;if(isExpired){localStorage.removeItem(key);settings = null;}}catch(e) {return null;}return settings;}function getSavedBitrateSettings(type){var savedBitrate=NaN;checkConfig(); //Checks local storage to see if there is valid, non-expired bit rate
	//hinting from the last play session to use as a starting bit rate.
	if(canStore(STORAGE_TYPE_LOCAL,LAST_BITRATE)){var key=LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\?/,type);try{var obj=JSON.parse(localStorage.getItem(key)) || {};var isExpired=new Date().getTime() - parseInt(obj.timestamp,10) >= mediaPlayerModel.getLastMediaSettingsCachingInfo().ttl || false;var bitrate=parseFloat(obj.bitrate);if(!isNaN(bitrate) && !isExpired){savedBitrate = bitrate;logger.debug('Last saved bitrate for ' + type + ' was ' + bitrate);}else if(isExpired){localStorage.removeItem(key);}}catch(e) {return null;}}return savedBitrate;}function setSavedMediaSettings(type,value){if(canStore(STORAGE_TYPE_LOCAL,LAST_MEDIA_SETTINGS)){var key=LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\?/,type);try{localStorage.setItem(key,JSON.stringify({settings:value,timestamp:getTimestamp()}));}catch(e) {logger.error(e.message);}}}function setSavedBitrateSettings(type,bitrate){if(canStore(STORAGE_TYPE_LOCAL,LAST_BITRATE) && bitrate){var key=LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\?/,type);try{localStorage.setItem(key,JSON.stringify({bitrate:bitrate.toFixed(3),timestamp:getTimestamp()}));}catch(e) {logger.error(e.message);}}}instance = {getSavedBitrateSettings:getSavedBitrateSettings,setSavedBitrateSettings:setSavedBitrateSettings,getSavedMediaSettings:getSavedMediaSettings,setSavedMediaSettings:setSavedMediaSettings};setup();return instance;}DOMStorage.__dashjs_factory_name = 'DOMStorage';var factory=_coreFactoryMaker2['default'].getSingletonFactory(DOMStorage);exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=DOMStorage.js.map


/***/ }),
/* 224 */
/***/ (function(module, exports) {

	'use strict';Object.defineProperty(exports,'__esModule',{value:true});exports.getVersionString = getVersionString;var VERSION='2.9.2';function getVersionString(){return VERSION;}
	//# sourceMappingURL=Version.js.map


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _streamingConstantsConstants=__webpack_require__(49);var _streamingConstantsConstants2=_interopRequireDefault(_streamingConstantsConstants);var _streamingVoRepresentationInfo=__webpack_require__(226);var _streamingVoRepresentationInfo2=_interopRequireDefault(_streamingVoRepresentationInfo);var _streamingVoMediaInfo=__webpack_require__(227);var _streamingVoMediaInfo2=_interopRequireDefault(_streamingVoMediaInfo);var _streamingVoStreamInfo=__webpack_require__(228);var _streamingVoStreamInfo2=_interopRequireDefault(_streamingVoStreamInfo);var _streamingVoManifestInfo=__webpack_require__(229);var _streamingVoManifestInfo2=_interopRequireDefault(_streamingVoManifestInfo);var _voEvent=__webpack_require__(230);var _voEvent2=_interopRequireDefault(_voEvent);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _externalsCea608Parser=__webpack_require__(116);var _externalsCea608Parser2=_interopRequireDefault(_externalsCea608Parser);var _streamingUtilsSupervisorTools=__webpack_require__(73);function DashAdapter(){var instance=undefined,dashManifestModel=undefined,voPeriods=undefined,voAdaptations=undefined;function setup(){reset();}function setConfig(config){if(!config)return;if(config.dashManifestModel){dashManifestModel = config.dashManifestModel;}}function getRepresentationForRepresentationInfo(representationInfo,representationController){return representationController && representationInfo?representationController.getRepresentationForQuality(representationInfo.quality):null;}function getAdaptationForMediaInfo(mediaInfo){if(!mediaInfo || !mediaInfo.streamInfo || mediaInfo.streamInfo.id === undefined || !voAdaptations[mediaInfo.streamInfo.id])return null;return voAdaptations[mediaInfo.streamInfo.id][mediaInfo.index];}function getPeriodForStreamInfo(streamInfo,voPeriodsArray){var ln=voPeriodsArray.length;for(var i=0;i < ln;i++) {var voPeriod=voPeriodsArray[i];if(streamInfo.id === voPeriod.id)return voPeriod;}return null;}function convertRepresentationToRepresentationInfo(voRepresentation){var representationInfo=new _streamingVoRepresentationInfo2['default']();var realAdaptation=voRepresentation.adaptation.period.mpd.manifest.Period_asArray[voRepresentation.adaptation.period.index].AdaptationSet_asArray[voRepresentation.adaptation.index];var realRepresentation=dashManifestModel.getRepresentationFor(voRepresentation.index,realAdaptation);representationInfo.id = voRepresentation.id;representationInfo.quality = voRepresentation.index;representationInfo.bandwidth = dashManifestModel.getBandwidth(realRepresentation);representationInfo.DVRWindow = voRepresentation.segmentAvailabilityRange;representationInfo.fragmentDuration = voRepresentation.segmentDuration || (voRepresentation.segments && voRepresentation.segments.length > 0?voRepresentation.segments[0].duration:NaN);representationInfo.MSETimeOffset = voRepresentation.MSETimeOffset;representationInfo.useCalculatedLiveEdgeTime = voRepresentation.useCalculatedLiveEdgeTime;representationInfo.mediaInfo = convertAdaptationToMediaInfo(voRepresentation.adaptation);return representationInfo;}function convertAdaptationToMediaInfo(adaptation){var mediaInfo=new _streamingVoMediaInfo2['default']();var realAdaptation=adaptation.period.mpd.manifest.Period_asArray[adaptation.period.index].AdaptationSet_asArray[adaptation.index];var viewpoint=undefined;mediaInfo.id = adaptation.id;mediaInfo.index = adaptation.index;mediaInfo.type = adaptation.type;mediaInfo.streamInfo = convertPeriodToStreamInfo(adaptation.period);mediaInfo.representationCount = dashManifestModel.getRepresentationCount(realAdaptation);mediaInfo.lang = dashManifestModel.getLanguageForAdaptation(realAdaptation);viewpoint = dashManifestModel.getViewpointForAdaptation(realAdaptation);mediaInfo.viewpoint = viewpoint?viewpoint.value:undefined;mediaInfo.accessibility = dashManifestModel.getAccessibilityForAdaptation(realAdaptation).map(function(accessibility){var accessibilityValue=accessibility.value;var accessibilityData=accessibilityValue;if(accessibility.schemeIdUri && accessibility.schemeIdUri.search('cea-608') >= 0 && typeof _externalsCea608Parser2['default'] !== 'undefined'){if(accessibilityValue){accessibilityData = 'cea-608:' + accessibilityValue;}else {accessibilityData = 'cea-608';}mediaInfo.embeddedCaptions = true;}return accessibilityData;});mediaInfo.audioChannelConfiguration = dashManifestModel.getAudioChannelConfigurationForAdaptation(realAdaptation).map(function(audioChannelConfiguration){return audioChannelConfiguration.value;});mediaInfo.roles = dashManifestModel.getRolesForAdaptation(realAdaptation).map(function(role){return role.value;});mediaInfo.codec = dashManifestModel.getCodec(realAdaptation);mediaInfo.mimeType = dashManifestModel.getMimeType(realAdaptation);mediaInfo.contentProtection = dashManifestModel.getContentProtectionData(realAdaptation);mediaInfo.bitrateList = dashManifestModel.getBitrateListForAdaptation(realAdaptation);if(mediaInfo.contentProtection){mediaInfo.contentProtection.forEach(function(item){item.KID = dashManifestModel.getKID(item);});}mediaInfo.isText = dashManifestModel.getIsTextTrack(mediaInfo.mimeType);return mediaInfo;}function convertVideoInfoToEmbeddedTextInfo(mediaInfo,channel,lang){mediaInfo.id = channel; // CC1, CC2, CC3, or CC4
	mediaInfo.index = 100 + parseInt(channel.substring(2,3));mediaInfo.type = _streamingConstantsConstants2['default'].EMBEDDED_TEXT;mediaInfo.codec = 'cea-608-in-SEI';mediaInfo.isText = true;mediaInfo.isEmbedded = true;mediaInfo.lang = lang;mediaInfo.roles = ['caption'];}function convertVideoInfoToThumbnailInfo(mediaInfo){mediaInfo.type = _streamingConstantsConstants2['default'].IMAGE;}function convertPeriodToStreamInfo(period){var streamInfo=new _streamingVoStreamInfo2['default']();var THRESHOLD=1;streamInfo.id = period.id;streamInfo.index = period.index;streamInfo.start = period.start;streamInfo.duration = period.duration;streamInfo.manifestInfo = convertMpdToManifestInfo(period.mpd);streamInfo.isLast = period.mpd.manifest.Period_asArray.length === 1 || Math.abs(streamInfo.start + streamInfo.duration - streamInfo.manifestInfo.duration) < THRESHOLD;return streamInfo;}function convertMpdToManifestInfo(mpd){var manifestInfo=new _streamingVoManifestInfo2['default']();manifestInfo.DVRWindowSize = mpd.timeShiftBufferDepth;manifestInfo.loadedTime = mpd.manifest.loadedTime;manifestInfo.availableFrom = mpd.availabilityStartTime;manifestInfo.minBufferTime = mpd.manifest.minBufferTime;manifestInfo.maxFragmentDuration = mpd.maxSegmentDuration;manifestInfo.duration = dashManifestModel.getDuration(mpd.manifest);manifestInfo.isDynamic = dashManifestModel.getIsDynamic(mpd.manifest);return manifestInfo;}function getMediaInfoForType(streamInfo,type){if(voPeriods.length === 0){return null;}var manifest=voPeriods[0].mpd.manifest;var realAdaptation=dashManifestModel.getAdaptationForType(manifest,streamInfo.index,type,streamInfo);if(!realAdaptation)return null;var selectedVoPeriod=getPeriodForStreamInfo(streamInfo,voPeriods);var periodId=selectedVoPeriod.id;var idx=dashManifestModel.getIndexForAdaptation(realAdaptation,manifest,streamInfo.index);voAdaptations[periodId] = voAdaptations[periodId] || dashManifestModel.getAdaptationsForPeriod(selectedVoPeriod);return convertAdaptationToMediaInfo(voAdaptations[periodId][idx]);}function getAllMediaInfoForType(streamInfo,type,externalManifest){var voLocalPeriods=voPeriods;var manifest=externalManifest;var mediaArr=[];var data=undefined,media=undefined,idx=undefined,i=undefined,j=undefined,ln=undefined;if(manifest){checkSetConfigCall();var mpd=dashManifestModel.getMpd(manifest);voLocalPeriods = dashManifestModel.getRegularPeriods(mpd);}else {if(voPeriods.length > 0){manifest = voPeriods[0].mpd.manifest;}else {return mediaArr;}}var selectedVoPeriod=getPeriodForStreamInfo(streamInfo,voLocalPeriods);var periodId=selectedVoPeriod.id;var adaptationsForType=dashManifestModel.getAdaptationsForType(manifest,streamInfo.index,type !== _streamingConstantsConstants2['default'].EMBEDDED_TEXT?type:_streamingConstantsConstants2['default'].VIDEO);if(!adaptationsForType)return mediaArr;voAdaptations[periodId] = voAdaptations[periodId] || dashManifestModel.getAdaptationsForPeriod(selectedVoPeriod);for(i = 0,ln = adaptationsForType.length;i < ln;i++) {data = adaptationsForType[i];idx = dashManifestModel.getIndexForAdaptation(data,manifest,streamInfo.index);media = convertAdaptationToMediaInfo(voAdaptations[periodId][idx]);if(type === _streamingConstantsConstants2['default'].EMBEDDED_TEXT){var accessibilityLength=media.accessibility.length;for(j = 0;j < accessibilityLength;j++) {if(!media){continue;}var accessibility=media.accessibility[j];if(accessibility.indexOf('cea-608:') === 0){var value=accessibility.substring(8);var parts=value.split(';');if(parts[0].substring(0,2) === 'CC'){for(j = 0;j < parts.length;j++) {if(!media){media = convertAdaptationToMediaInfo.call(this,voAdaptations[periodId][idx]);}convertVideoInfoToEmbeddedTextInfo(media,parts[j].substring(0,3),parts[j].substring(4));mediaArr.push(media);media = null;}}else {for(j = 0;j < parts.length;j++) { // Only languages for CC1, CC2, ...
	if(!media){media = convertAdaptationToMediaInfo.call(this,voAdaptations[periodId][idx]);}convertVideoInfoToEmbeddedTextInfo(media,'CC' + (j + 1),parts[j]);mediaArr.push(media);media = null;}}}else if(accessibility.indexOf('cea-608') === 0){ // Nothing known. We interpret it as CC1=eng
	convertVideoInfoToEmbeddedTextInfo(media,_streamingConstantsConstants2['default'].CC1,'eng');mediaArr.push(media);media = null;}}}else if(type === _streamingConstantsConstants2['default'].IMAGE){convertVideoInfoToThumbnailInfo(media);mediaArr.push(media);media = null;}else if(media){mediaArr.push(media);}}return mediaArr;}function checkSetConfigCall(){if(!dashManifestModel || !dashManifestModel.hasOwnProperty('getMpd') || !dashManifestModel.hasOwnProperty('getRegularPeriods')){throw new Error('setConfig function has to be called previously');}}function updatePeriods(newManifest){if(!newManifest)return null;checkSetConfigCall();var mpd=dashManifestModel.getMpd(newManifest);voPeriods = dashManifestModel.getRegularPeriods(mpd);voAdaptations = {};}function getStreamsInfo(externalManifest,maxStreamsInfo){var streams=[];var voLocalPeriods=voPeriods; //if manifest is defined, getStreamsInfo is for an outside manifest, not the current one
	if(externalManifest){checkSetConfigCall();var mpd=dashManifestModel.getMpd(externalManifest);voLocalPeriods = dashManifestModel.getRegularPeriods(mpd);}if(!maxStreamsInfo){maxStreamsInfo = voLocalPeriods.length;}for(var i=0;i < maxStreamsInfo;i++) {streams.push(convertPeriodToStreamInfo(voLocalPeriods[i]));}return streams;}function checkStreamProcessor(streamProcessor){if(!streamProcessor || !streamProcessor.hasOwnProperty('getRepresentationController') || !streamProcessor.hasOwnProperty('getIndexHandler') || !streamProcessor.hasOwnProperty('getMediaInfo') || !streamProcessor.hasOwnProperty('getType') || !streamProcessor.hasOwnProperty('getStreamInfo')){throw new Error('streamProcessor parameter is missing or malformed!');}}function checkRepresentationController(representationController){if(!representationController || !representationController.hasOwnProperty('getRepresentationForQuality') || !representationController.hasOwnProperty('getCurrentRepresentation')){throw new Error('representationController parameter is missing or malformed!');}}function getInitRequest(streamProcessor,quality){var representationController=undefined,representation=undefined,indexHandler=undefined;checkStreamProcessor(streamProcessor);(0,_streamingUtilsSupervisorTools.checkInteger)(quality);representationController = streamProcessor.getRepresentationController();indexHandler = streamProcessor.getIndexHandler();representation = representationController?representationController.getRepresentationForQuality(quality):null;return indexHandler?indexHandler.getInitRequest(representation):null;}function getFragmentRequest(streamProcessor,representationInfo,time,options){var representationController=undefined,representation=undefined,indexHandler=undefined;var fragRequest=null;checkStreamProcessor(streamProcessor);representationController = streamProcessor.getRepresentationController();representation = getRepresentationForRepresentationInfo(representationInfo,representationController);indexHandler = streamProcessor.getIndexHandler();if(indexHandler){ //if time and options are undefined, it means the next segment is requested
	//otherwise, the segment at this specific time is requested.
	if(time !== undefined && options !== undefined){fragRequest = indexHandler.getSegmentRequestForTime(representation,time,options);}else {fragRequest = indexHandler.getNextSegmentRequest(representation);}}return fragRequest;}function getIndexHandlerTime(streamProcessor){checkStreamProcessor(streamProcessor);var indexHandler=streamProcessor.getIndexHandler();return indexHandler?indexHandler.getCurrentTime():NaN;}function setIndexHandlerTime(streamProcessor,value){checkStreamProcessor(streamProcessor);var indexHandler=streamProcessor.getIndexHandler();if(indexHandler){indexHandler.setCurrentTime(value);}}function resetIndexHandler(streamProcessor){checkStreamProcessor(streamProcessor);var indexHandler=streamProcessor.getIndexHandler();if(indexHandler){indexHandler.resetIndex();}}function updateData(streamProcessor){checkStreamProcessor(streamProcessor);var selectedVoPeriod=getPeriodForStreamInfo(streamProcessor.getStreamInfo(),voPeriods);var mediaInfo=streamProcessor.getMediaInfo();var voAdaptation=getAdaptationForMediaInfo(mediaInfo);var type=streamProcessor.getType();var id=undefined,realAdaptation=undefined;id = mediaInfo?mediaInfo.id:null;if(voPeriods.length > 0){realAdaptation = id?dashManifestModel.getAdaptationForId(id,voPeriods[0].mpd.manifest,selectedVoPeriod.index):dashManifestModel.getAdaptationForIndex(mediaInfo.index,voPeriods[0].mpd.manifest,selectedVoPeriod.index);streamProcessor.getRepresentationController().updateData(realAdaptation,voAdaptation,type);}} /**
	     * Get a specific voRepresentation. If quality parameter is defined, this function will return the voRepresentation for this quality.
	     * Otherwise, this function will return the current voRepresentation used by the representationController.
	     * @param {RepresentationController} representationController - RepresentationController reference
	     * @param {number} quality - quality index of the voRepresentaion expected.
	     */function getRepresentationInfo(representationController,quality){checkRepresentationController(representationController);var voRepresentation=undefined;if(quality !== undefined){(0,_streamingUtilsSupervisorTools.checkInteger)(quality);voRepresentation = representationController.getRepresentationForQuality(quality);}else {voRepresentation = representationController.getCurrentRepresentation();}return voRepresentation?convertRepresentationToRepresentationInfo(voRepresentation):null;}function getEvent(eventBox,eventStreams,startTime){if(!eventBox || !eventStreams){return null;}var event=new _voEvent2['default']();var schemeIdUri=eventBox.scheme_id_uri;var value=eventBox.value;var timescale=eventBox.timescale;var presentationTimeDelta=eventBox.presentation_time_delta;var duration=eventBox.event_duration;var id=eventBox.id;var messageData=eventBox.message_data;var presentationTime=startTime * timescale + presentationTimeDelta;if(!eventStreams[schemeIdUri])return null;event.eventStream = eventStreams[schemeIdUri];event.eventStream.value = value;event.eventStream.timescale = timescale;event.duration = duration;event.id = id;event.presentationTime = presentationTime;event.messageData = messageData;event.presentationTimeDelta = presentationTimeDelta;return event;}function getEventsFor(info,streamProcessor){var events=[];if(voPeriods.length === 0){return events;}var manifest=voPeriods[0].mpd.manifest;if(info instanceof _streamingVoStreamInfo2['default']){events = dashManifestModel.getEventsForPeriod(getPeriodForStreamInfo(info,voPeriods));}else if(info instanceof _streamingVoMediaInfo2['default']){events = dashManifestModel.getEventStreamForAdaptationSet(manifest,getAdaptationForMediaInfo(info));}else if(info instanceof _streamingVoRepresentationInfo2['default']){events = dashManifestModel.getEventStreamForRepresentation(manifest,getRepresentationForRepresentationInfo(info,streamProcessor.getRepresentationController()));}return events;}function reset(){voPeriods = [];voAdaptations = {};}instance = {convertDataToRepresentationInfo:convertRepresentationToRepresentationInfo,getDataForMedia:getAdaptationForMediaInfo,getStreamsInfo:getStreamsInfo,getMediaInfoForType:getMediaInfoForType,getAllMediaInfoForType:getAllMediaInfoForType,getRepresentationInfo:getRepresentationInfo,updateData:updateData,getInitRequest:getInitRequest,getFragmentRequest:getFragmentRequest,getIndexHandlerTime:getIndexHandlerTime,setIndexHandlerTime:setIndexHandlerTime,getEventsFor:getEventsFor,getEvent:getEvent,setConfig:setConfig,updatePeriods:updatePeriods,reset:reset,resetIndexHandler:resetIndexHandler};setup();return instance;}DashAdapter.__dashjs_factory_name = 'DashAdapter';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(DashAdapter);module.exports = exports['default'];
	//# sourceMappingURL=DashAdapter.js.map


/***/ }),
/* 226 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var RepresentationInfo=function RepresentationInfo(){_classCallCheck(this,RepresentationInfo);this.id = null;this.quality = null;this.DVRWindow = null;this.fragmentDuration = null;this.mediaInfo = null;this.MSETimeOffset = null;};exports["default"] = RepresentationInfo;module.exports = exports["default"];
	//# sourceMappingURL=RepresentationInfo.js.map


/***/ }),
/* 227 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var MediaInfo=function MediaInfo(){_classCallCheck(this,MediaInfo);this.id = null;this.index = null;this.type = null;this.streamInfo = null;this.representationCount = 0;this.lang = null;this.viewpoint = null;this.accessibility = null;this.audioChannelConfiguration = null;this.roles = null;this.codec = null;this.mimeType = null;this.contentProtection = null;this.isText = false;this.KID = null;this.bitrateList = null;};exports["default"] = MediaInfo;module.exports = exports["default"];
	//# sourceMappingURL=MediaInfo.js.map


/***/ }),
/* 228 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var StreamInfo=function StreamInfo(){_classCallCheck(this,StreamInfo);this.id = null;this.index = null;this.start = NaN;this.duration = NaN;this.manifestInfo = null;this.isLast = true;};exports["default"] = StreamInfo;module.exports = exports["default"];
	//# sourceMappingURL=StreamInfo.js.map


/***/ }),
/* 229 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var ManifestInfo=function ManifestInfo(){_classCallCheck(this,ManifestInfo);this.DVRWindowSize = NaN;this.loadedTime = null;this.availableFrom = null;this.minBufferTime = NaN;this.duration = NaN;this.isDynamic = false;this.maxFragmentDuration = null;};exports["default"] = ManifestInfo;module.exports = exports["default"];
	//# sourceMappingURL=ManifestInfo.js.map


/***/ }),
/* 230 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var Event=function Event(){_classCallCheck(this,Event);this.duration = NaN;this.presentationTime = NaN;this.id = NaN;this.messageData = '';this.eventStream = null;this.presentationTimeDelta = NaN; // Specific EMSG Box parameter
	};exports['default'] = Event;module.exports = exports['default'];
	//# sourceMappingURL=Event.js.map


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _streamingConstantsConstants=__webpack_require__(49);var _streamingConstantsConstants2=_interopRequireDefault(_streamingConstantsConstants);var _constantsDashConstants=__webpack_require__(151);var _constantsDashConstants2=_interopRequireDefault(_constantsDashConstants);var _voRepresentation=__webpack_require__(152);var _voRepresentation2=_interopRequireDefault(_voRepresentation);var _voAdaptationSet=__webpack_require__(232);var _voAdaptationSet2=_interopRequireDefault(_voAdaptationSet);var _voPeriod=__webpack_require__(233);var _voPeriod2=_interopRequireDefault(_voPeriod);var _voMpd=__webpack_require__(234);var _voMpd2=_interopRequireDefault(_voMpd);var _voUTCTiming=__webpack_require__(210);var _voUTCTiming2=_interopRequireDefault(_voUTCTiming);var _voEvent=__webpack_require__(230);var _voEvent2=_interopRequireDefault(_voEvent);var _voBaseURL=__webpack_require__(186);var _voBaseURL2=_interopRequireDefault(_voBaseURL);var _voEventStream=__webpack_require__(235);var _voEventStream2=_interopRequireDefault(_voEventStream);var _streamingUtilsObjectUtils=__webpack_require__(180);var _streamingUtilsObjectUtils2=_interopRequireDefault(_streamingUtilsObjectUtils);var _streamingUtilsURLUtils=__webpack_require__(154);var _streamingUtilsURLUtils2=_interopRequireDefault(_streamingUtilsURLUtils);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _coreDebug=__webpack_require__(60);var _coreDebug2=_interopRequireDefault(_coreDebug);var _streamingVoDashJSError=__webpack_require__(62);var _streamingVoDashJSError2=_interopRequireDefault(_streamingVoDashJSError);var _coreErrorsErrors=__webpack_require__(117);var _coreErrorsErrors2=_interopRequireDefault(_coreErrorsErrors);function DashManifestModel(config){config = config || {};var instance=undefined,logger=undefined;var context=this.context;var urlUtils=(0,_streamingUtilsURLUtils2['default'])(context).getInstance();var mediaController=config.mediaController;var timelineConverter=config.timelineConverter;var adapter=config.adapter;var errHandler=config.errHandler;var PROFILE_DVB='urn:dvb:dash:profile:dvb-dash:2014';var isInteger=Number.isInteger || function(value){return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;};function setup(){logger = (0,_coreDebug2['default'])(context).getInstance().getLogger(instance);}function getIsTypeOf(adaptation,type){var i=undefined,len=undefined,representation=undefined,col=undefined,mimeTypeRegEx=undefined,codecs=undefined;var result=false;var found=false;if(!adaptation){throw new Error('adaptation is not defined');}if(!type){throw new Error('type is not defined');}if(adaptation.hasOwnProperty('ContentComponent_asArray')){col = adaptation.ContentComponent_asArray;}mimeTypeRegEx = type !== _streamingConstantsConstants2['default'].TEXT?new RegExp(type):new RegExp('(vtt|ttml)');if(adaptation.Representation_asArray && adaptation.Representation_asArray.length && adaptation.Representation_asArray.length > 0 && adaptation.Representation_asArray[0].hasOwnProperty(_constantsDashConstants2['default'].CODECS)){ // Just check the start of the codecs string
	codecs = adaptation.Representation_asArray[0].codecs;if(codecs.search(_streamingConstantsConstants2['default'].STPP) === 0 || codecs.search(_streamingConstantsConstants2['default'].WVTT) === 0){return type === _streamingConstantsConstants2['default'].FRAGMENTED_TEXT;}}if(col){if(col.length > 1){return type === _streamingConstantsConstants2['default'].MUXED;}else if(col[0] && col[0].contentType === type){result = true;found = true;}}if(adaptation.hasOwnProperty(_constantsDashConstants2['default'].MIME_TYPE)){result = mimeTypeRegEx.test(adaptation.mimeType);found = true;} // couldn't find on adaptationset, so check a representation
	if(!found){i = 0;len = adaptation.Representation_asArray && adaptation.Representation_asArray.length?adaptation.Representation_asArray.length:0;while(!found && i < len) {representation = adaptation.Representation_asArray[i];if(representation.hasOwnProperty(_constantsDashConstants2['default'].MIME_TYPE)){result = mimeTypeRegEx.test(representation.mimeType);found = true;}i++;}}return result;}function getIsAudio(adaptation){return getIsTypeOf(adaptation,_streamingConstantsConstants2['default'].AUDIO);}function getIsVideo(adaptation){return getIsTypeOf(adaptation,_streamingConstantsConstants2['default'].VIDEO);}function getIsFragmentedText(adaptation){return getIsTypeOf(adaptation,_streamingConstantsConstants2['default'].FRAGMENTED_TEXT);}function getIsMuxed(adaptation){return getIsTypeOf(adaptation,_streamingConstantsConstants2['default'].MUXED);}function getIsImage(adaptation){return getIsTypeOf(adaptation,_streamingConstantsConstants2['default'].IMAGE);}function getIsTextTrack(type){return type === 'text/vtt' || type === 'application/ttml+xml';}function getLanguageForAdaptation(adaptation){var lang='';if(adaptation && adaptation.hasOwnProperty(_constantsDashConstants2['default'].LANG)){ //Filter out any other characters not allowed according to RFC5646
	lang = adaptation.lang.replace(/[^A-Za-z0-9-]/g,'');}return lang;}function getViewpointForAdaptation(adaptation){return adaptation && adaptation.hasOwnProperty(_constantsDashConstants2['default'].VIEWPOINT)?adaptation.Viewpoint:null;}function getRolesForAdaptation(adaptation){return adaptation && adaptation.hasOwnProperty(_constantsDashConstants2['default'].ROLE_ASARRAY)?adaptation.Role_asArray:[];}function getAccessibilityForAdaptation(adaptation){return adaptation && adaptation.hasOwnProperty(_constantsDashConstants2['default'].ACCESSIBILITY_ASARRAY)?adaptation.Accessibility_asArray:[];}function getAudioChannelConfigurationForAdaptation(adaptation){return adaptation && adaptation.hasOwnProperty(_constantsDashConstants2['default'].AUDIOCHANNELCONFIGURATION_ASARRAY)?adaptation.AudioChannelConfiguration_asArray:[];}function getIsMain(adaptation){return getRolesForAdaptation(adaptation).filter(function(role){return role.value === _constantsDashConstants2['default'].MAIN;})[0];}function getRepresentationSortFunction(){return function(a,b){return a.bandwidth - b.bandwidth;};}function processAdaptation(realAdaptation){if(realAdaptation && realAdaptation.Representation_asArray !== undefined && realAdaptation.Representation_asArray !== null){realAdaptation.Representation_asArray.sort(getRepresentationSortFunction());}return realAdaptation;}function getRealAdaptations(manifest,periodIndex){return manifest && manifest.Period_asArray && isInteger(periodIndex)?manifest.Period_asArray[periodIndex]?manifest.Period_asArray[periodIndex].AdaptationSet_asArray:[]:[];}function getAdaptationForId(id,manifest,periodIndex){var realAdaptations=getRealAdaptations(manifest,periodIndex);var i=undefined,len=undefined;for(i = 0,len = realAdaptations.length;i < len;i++) {if(realAdaptations[i].hasOwnProperty(_constantsDashConstants2['default'].ID) && realAdaptations[i].id === id){return realAdaptations[i];}}return null;}function getAdaptationForIndex(index,manifest,periodIndex){var realAdaptations=getRealAdaptations(manifest,periodIndex);if(realAdaptations.length > 0 && isInteger(index)){return realAdaptations[index];}else {return null;}}function getIndexForAdaptation(realAdaptation,manifest,periodIndex){var realAdaptations=getRealAdaptations(manifest,periodIndex);var len=realAdaptations.length;if(realAdaptation){for(var i=0;i < len;i++) {var objectUtils=(0,_streamingUtilsObjectUtils2['default'])(context).getInstance();if(objectUtils.areEqual(realAdaptations[i],realAdaptation)){return i;}}}return -1;}function getAdaptationsForType(manifest,periodIndex,type){var realAdaptations=getRealAdaptations(manifest,periodIndex);var i=undefined,len=undefined;var adaptations=[];for(i = 0,len = realAdaptations.length;i < len;i++) {if(getIsTypeOf(realAdaptations[i],type)){adaptations.push(processAdaptation(realAdaptations[i]));}}return adaptations;}function getAdaptationForType(manifest,periodIndex,type,streamInfo){var adaptations=getAdaptationsForType(manifest,periodIndex,type);if(!adaptations || adaptations.length === 0)return null;if(adaptations.length > 1 && streamInfo){var currentTrack=mediaController.getCurrentTrackFor(type,streamInfo);var allMediaInfoForType=adapter.getAllMediaInfoForType(streamInfo,type);if(currentTrack){for(var i=0,ln=adaptations.length;i < ln;i++) {if(mediaController.isTracksEqual(currentTrack,allMediaInfoForType[i])){return adaptations[i];}}}for(var i=0,ln=adaptations.length;i < ln;i++) {if(getIsMain(adaptations[i])){return adaptations[i];}}}return adaptations[0];}function getCodec(adaptation,representationId,addResolutionInfo){var codec=null;if(adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0){var representation=isInteger(representationId) && representationId >= 0 && representationId < adaptation.Representation_asArray.length?adaptation.Representation_asArray[representationId]:adaptation.Representation_asArray[0];if(representation){codec = representation.mimeType + ';codecs="' + representation.codecs + '"';if(addResolutionInfo && representation.width !== undefined){codec += ';width="' + representation.width + '";height="' + representation.height + '"';}}}return codec;}function getMimeType(adaptation){return adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0?adaptation.Representation_asArray[0].mimeType:null;}function getKID(adaptation){if(!adaptation || !adaptation.hasOwnProperty(_constantsDashConstants2['default'].CENC_DEFAULT_KID)){return null;}return adaptation[_constantsDashConstants2['default'].CENC_DEFAULT_KID];}function getContentProtectionData(adaptation){if(!adaptation || !adaptation.hasOwnProperty(_constantsDashConstants2['default'].CONTENTPROTECTION_ASARRAY) || adaptation.ContentProtection_asArray.length === 0){return null;}return adaptation.ContentProtection_asArray;}function getIsDynamic(manifest){var isDynamic=false;if(manifest && manifest.hasOwnProperty('type')){isDynamic = manifest.type === _constantsDashConstants2['default'].DYNAMIC;}return isDynamic;}function hasProfile(manifest,profile){var has=false;if(manifest && manifest.profiles && manifest.profiles.length > 0){has = manifest.profiles.indexOf(profile) !== -1;}return has;}function getIsDVB(manifest){return hasProfile(manifest,PROFILE_DVB);}function getDuration(manifest){var mpdDuration=undefined; //@mediaPresentationDuration specifies the duration of the entire Media Presentation.
	//If the attribute is not present, the duration of the Media Presentation is unknown.
	if(manifest && manifest.hasOwnProperty(_constantsDashConstants2['default'].MEDIA_PRESENTATION_DURATION)){mpdDuration = manifest.mediaPresentationDuration;}else {mpdDuration = Number.MAX_SAFE_INTEGER || Number.MAX_VALUE;}return mpdDuration;}function getBandwidth(representation){return representation && representation.bandwidth?representation.bandwidth:NaN;}function getManifestUpdatePeriod(manifest){var latencyOfLastUpdate=arguments.length <= 1 || arguments[1] === undefined?0:arguments[1];var delay=NaN;if(manifest && manifest.hasOwnProperty(_constantsDashConstants2['default'].MINIMUM_UPDATE_PERIOD)){delay = manifest.minimumUpdatePeriod;}return isNaN(delay)?delay:Math.max(delay - latencyOfLastUpdate,1);}function getRepresentationCount(adaptation){return adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length?adaptation.Representation_asArray.length:0;}function getBitrateListForAdaptation(realAdaptation){if(!realAdaptation || !realAdaptation.Representation_asArray || !realAdaptation.Representation_asArray.length)return null;var processedRealAdaptation=processAdaptation(realAdaptation);var realRepresentations=processedRealAdaptation.Representation_asArray;return realRepresentations.map(function(realRepresentation){return {bandwidth:realRepresentation.bandwidth,width:realRepresentation.width || 0,height:realRepresentation.height || 0,scanType:realRepresentation.scanType || null};});}function getEssentialPropertiesForRepresentation(realRepresentation){if(!realRepresentation || !realRepresentation.EssentialProperty_asArray || !realRepresentation.EssentialProperty_asArray.length)return null;return realRepresentation.EssentialProperty_asArray.map(function(prop){return {schemeIdUri:prop.schemeIdUri,value:prop.value};});}function getRepresentationFor(index,adaptation){return adaptation && adaptation.Representation_asArray && adaptation.Representation_asArray.length > 0 && isInteger(index)?adaptation.Representation_asArray[index]:null;}function getRealAdaptationFor(voAdaptation){if(voAdaptation && voAdaptation.period && isInteger(voAdaptation.period.index)){var periodArray=voAdaptation.period.mpd.manifest.Period_asArray[voAdaptation.period.index];if(periodArray && periodArray.AdaptationSet_asArray && isInteger(voAdaptation.index)){return processAdaptation(periodArray.AdaptationSet_asArray[voAdaptation.index]);}}}function isLastRepeatAttributeValid(segmentTimeline){var s=segmentTimeline.S_asArray[segmentTimeline.S_asArray.length - 1];return !s.hasOwnProperty('r') || s.r >= 0;}function getUseCalculatedLiveEdgeTimeForAdaptation(voAdaptation){var realRepresentation=getRealAdaptationFor(voAdaptation).Representation_asArray[0];var segmentInfo=undefined;if(realRepresentation.hasOwnProperty(_constantsDashConstants2['default'].SEGMENT_LIST)){segmentInfo = realRepresentation.SegmentList;return segmentInfo.hasOwnProperty(_constantsDashConstants2['default'].SEGMENT_TIMELINE)?isLastRepeatAttributeValid(segmentInfo.SegmentTimeline):true;}else if(realRepresentation.hasOwnProperty(_constantsDashConstants2['default'].SEGMENT_TEMPLATE)){segmentInfo = realRepresentation.SegmentTemplate;if(segmentInfo.hasOwnProperty(_constantsDashConstants2['default'].SEGMENT_TIMELINE)){return isLastRepeatAttributeValid(segmentInfo.SegmentTimeline);}}return false;}function getRepresentationsForAdaptation(voAdaptation){var voRepresentations=[];var processedRealAdaptation=getRealAdaptationFor(voAdaptation);var segmentInfo=undefined,baseUrl=undefined; // TODO: TO BE REMOVED. We should get just the baseUrl elements that affects to the representations
	// that we are processing. Making it works properly will require much further changes and given
	// parsing base Urls parameters is needed for our ultra low latency examples, we will
	// keep this "tricky" code until the real (and good) solution comes
	if(voAdaptation && voAdaptation.period && isInteger(voAdaptation.period.index)){var baseUrls=getBaseURLsFromElement(voAdaptation.period.mpd.manifest);if(baseUrls){baseUrl = baseUrls[0];}}if(processedRealAdaptation && processedRealAdaptation.Representation_asArray){for(var i=0,len=processedRealAdaptation.Representation_asArray.length;i < len;++i) {var realRepresentation=processedRealAdaptation.Representation_asArray[i];var voRepresentation=new _voRepresentation2['default']();voRepresentation.index = i;voRepresentation.adaptation = voAdaptation;if(realRepresentation.hasOwnProperty(_constantsDashConstants2['default'].ID)){voRepresentation.id = realRepresentation.id;}if(realRepresentation.hasOwnProperty(_constantsDashConstants2['default'].CODECS)){voRepresentation.codecs = realRepresentation.codecs;}if(realRepresentation.hasOwnProperty(_constantsDashConstants2['default'].CODEC_PRIVATE_DATA)){voRepresentation.codecPrivateData = realRepresentation.codecPrivateData;}if(realRepresentation.hasOwnProperty(_constantsDashConstants2['default'].BANDWITH)){voRepresentation.bandwidth = realRepresentation.bandwidth;}if(realRepresentation.hasOwnProperty(_constantsDashConstants2['default'].WIDTH)){voRepresentation.width = realRepresentation.width;}if(realRepresentation.hasOwnProperty(_constantsDashConstants2['default'].HEIGHT)){voRepresentation.height = realRepresentation.height;}if(realRepresentation.hasOwnProperty(_constantsDashConstants2['default'].SCAN_TYPE)){voRepresentation.scanType = realRepresentation.scanType;}if(realRepresentation.hasOwnProperty(_constantsDashConstants2['default'].MAX_PLAYOUT_RATE)){voRepresentation.maxPlayoutRate = realRepresentation.maxPlayoutRate;}if(realRepresentation.hasOwnProperty(_constantsDashConstants2['default'].SEGMENT_BASE)){segmentInfo = realRepresentation.SegmentBase;voRepresentation.segmentInfoType = _constantsDashConstants2['default'].SEGMENT_BASE;}else if(realRepresentation.hasOwnProperty(_constantsDashConstants2['default'].SEGMENT_LIST)){segmentInfo = realRepresentation.SegmentList;if(segmentInfo.hasOwnProperty(_constantsDashConstants2['default'].SEGMENT_TIMELINE)){voRepresentation.segmentInfoType = _constantsDashConstants2['default'].SEGMENT_TIMELINE;voRepresentation.useCalculatedLiveEdgeTime = isLastRepeatAttributeValid(segmentInfo.SegmentTimeline);}else {voRepresentation.segmentInfoType = _constantsDashConstants2['default'].SEGMENT_LIST;voRepresentation.useCalculatedLiveEdgeTime = true;}}else if(realRepresentation.hasOwnProperty(_constantsDashConstants2['default'].SEGMENT_TEMPLATE)){segmentInfo = realRepresentation.SegmentTemplate;if(segmentInfo.hasOwnProperty(_constantsDashConstants2['default'].SEGMENT_TIMELINE)){voRepresentation.segmentInfoType = _constantsDashConstants2['default'].SEGMENT_TIMELINE;voRepresentation.useCalculatedLiveEdgeTime = isLastRepeatAttributeValid(segmentInfo.SegmentTimeline);}else {voRepresentation.segmentInfoType = _constantsDashConstants2['default'].SEGMENT_TEMPLATE;}if(segmentInfo.hasOwnProperty(_constantsDashConstants2['default'].INITIALIZATION_MINUS)){voRepresentation.initialization = segmentInfo.initialization.split('$Bandwidth$').join(realRepresentation.bandwidth).split('$RepresentationID$').join(realRepresentation.id);}}else {voRepresentation.segmentInfoType = _constantsDashConstants2['default'].BASE_URL;}voRepresentation.essentialProperties = getEssentialPropertiesForRepresentation(realRepresentation);if(segmentInfo){if(segmentInfo.hasOwnProperty(_constantsDashConstants2['default'].INITIALIZATION)){var initialization=segmentInfo.Initialization;if(initialization.hasOwnProperty(_constantsDashConstants2['default'].SOURCE_URL)){voRepresentation.initialization = initialization.sourceURL;}else if(initialization.hasOwnProperty(_constantsDashConstants2['default'].RANGE)){voRepresentation.range = initialization.range; // initialization source url will be determined from
	// BaseURL when resolved at load time.
	}}else if(realRepresentation.hasOwnProperty(_constantsDashConstants2['default'].MIME_TYPE) && getIsTextTrack(realRepresentation.mimeType)){voRepresentation.range = 0;}if(segmentInfo.hasOwnProperty(_constantsDashConstants2['default'].TIMESCALE)){voRepresentation.timescale = segmentInfo.timescale;}if(segmentInfo.hasOwnProperty(_constantsDashConstants2['default'].DURATION)){ // TODO according to the spec @maxSegmentDuration specifies the maximum duration of any Segment in any Representation in the Media Presentation
	// It is also said that for a SegmentTimeline any @d value shall not exceed the value of MPD@maxSegmentDuration, but nothing is said about
	// SegmentTemplate @duration attribute. We need to find out if @maxSegmentDuration should be used instead of calculated duration if the the duration
	// exceeds @maxSegmentDuration
	//representation.segmentDuration = Math.min(segmentInfo.duration / representation.timescale, adaptation.period.mpd.maxSegmentDuration);
	voRepresentation.segmentDuration = segmentInfo.duration / voRepresentation.timescale;}if(segmentInfo.hasOwnProperty(_constantsDashConstants2['default'].MEDIA)){voRepresentation.media = segmentInfo.media;}if(segmentInfo.hasOwnProperty(_constantsDashConstants2['default'].START_NUMBER)){voRepresentation.startNumber = segmentInfo.startNumber;}if(segmentInfo.hasOwnProperty(_constantsDashConstants2['default'].INDEX_RANGE)){voRepresentation.indexRange = segmentInfo.indexRange;}if(segmentInfo.hasOwnProperty(_constantsDashConstants2['default'].PRESENTATION_TIME_OFFSET)){voRepresentation.presentationTimeOffset = segmentInfo.presentationTimeOffset / voRepresentation.timescale;}if(segmentInfo.hasOwnProperty(_constantsDashConstants2['default'].AVAILABILITY_TIME_OFFSET)){voRepresentation.availabilityTimeOffset = segmentInfo.availabilityTimeOffset;}else if(baseUrl && baseUrl.availabilityTimeOffset !== undefined){voRepresentation.availabilityTimeOffset = baseUrl.availabilityTimeOffset;}if(segmentInfo.hasOwnProperty(_constantsDashConstants2['default'].AVAILABILITY_TIME_COMPLETE)){voRepresentation.availabilityTimeComplete = segmentInfo.availabilityTimeComplete !== 'false';}else if(baseUrl && baseUrl.availabilityTimeComplete !== undefined){voRepresentation.availabilityTimeComplete = baseUrl.availabilityTimeComplete;}}voRepresentation.MSETimeOffset = timelineConverter.calcMSETimeOffset(voRepresentation);voRepresentation.path = [voAdaptation.period.index,voAdaptation.index,i];voRepresentations.push(voRepresentation);}}return voRepresentations;}function getAdaptationsForPeriod(voPeriod){var realPeriod=voPeriod && isInteger(voPeriod.index)?voPeriod.mpd.manifest.Period_asArray[voPeriod.index]:null;var voAdaptations=[];var voAdaptationSet=undefined,realAdaptationSet=undefined,i=undefined;if(realPeriod && realPeriod.AdaptationSet_asArray){for(i = 0;i < realPeriod.AdaptationSet_asArray.length;i++) {realAdaptationSet = realPeriod.AdaptationSet_asArray[i];voAdaptationSet = new _voAdaptationSet2['default']();if(realAdaptationSet.hasOwnProperty(_constantsDashConstants2['default'].ID)){voAdaptationSet.id = realAdaptationSet.id;}voAdaptationSet.index = i;voAdaptationSet.period = voPeriod;if(getIsMuxed(realAdaptationSet)){voAdaptationSet.type = _streamingConstantsConstants2['default'].MUXED;}else if(getIsAudio(realAdaptationSet)){voAdaptationSet.type = _streamingConstantsConstants2['default'].AUDIO;}else if(getIsVideo(realAdaptationSet)){voAdaptationSet.type = _streamingConstantsConstants2['default'].VIDEO;}else if(getIsFragmentedText(realAdaptationSet)){voAdaptationSet.type = _streamingConstantsConstants2['default'].FRAGMENTED_TEXT;}else if(getIsImage(realAdaptationSet)){voAdaptationSet.type = _streamingConstantsConstants2['default'].IMAGE;}else {voAdaptationSet.type = _streamingConstantsConstants2['default'].TEXT;}voAdaptations.push(voAdaptationSet);}}return voAdaptations;}function getRegularPeriods(mpd){var isDynamic=mpd?getIsDynamic(mpd.manifest):false;var voPeriods=[];var realPreviousPeriod=null;var realPeriod=null;var voPreviousPeriod=null;var voPeriod=null;var len=undefined,i=undefined;for(i = 0,len = mpd && mpd.manifest && mpd.manifest.Period_asArray?mpd.manifest.Period_asArray.length:0;i < len;i++) {realPeriod = mpd.manifest.Period_asArray[i]; // If the attribute @start is present in the Period, then the
	// Period is a regular Period and the PeriodStart is equal
	// to the value of this attribute.
	if(realPeriod.hasOwnProperty(_constantsDashConstants2['default'].START)){voPeriod = new _voPeriod2['default']();voPeriod.start = realPeriod.start;} // If the @start attribute is absent, but the previous Period
	// element contains a @duration attribute then then this new
	// Period is also a regular Period. The start time of the new
	// Period PeriodStart is the sum of the start time of the previous
	// Period PeriodStart and the value of the attribute @duration
	// of the previous Period.
	else if(realPreviousPeriod !== null && realPreviousPeriod.hasOwnProperty(_constantsDashConstants2['default'].DURATION) && voPreviousPeriod !== null){voPeriod = new _voPeriod2['default']();voPeriod.start = parseFloat((voPreviousPeriod.start + voPreviousPeriod.duration).toFixed(5));} // If (i) @start attribute is absent, and (ii) the Period element
	// is the first in the MPD, and (iii) the MPD@type is 'static',
	// then the PeriodStart time shall be set to zero.
	else if(i === 0 && !isDynamic){voPeriod = new _voPeriod2['default']();voPeriod.start = 0;} // The Period extends until the PeriodStart of the next Period.
	// The difference between the PeriodStart time of a Period and
	// the PeriodStart time of the following Period.
	if(voPreviousPeriod !== null && isNaN(voPreviousPeriod.duration)){if(voPeriod !== null){voPreviousPeriod.duration = parseFloat((voPeriod.start - voPreviousPeriod.start).toFixed(5));}else {logger.warn('First period duration could not be calculated because lack of start and duration period properties. This will cause timing issues during playback');}}if(voPeriod !== null){voPeriod.id = getPeriodId(realPeriod,i);voPeriod.index = i;voPeriod.mpd = mpd;if(realPeriod.hasOwnProperty(_constantsDashConstants2['default'].DURATION)){voPeriod.duration = realPeriod.duration;}voPeriods.push(voPeriod);realPreviousPeriod = realPeriod;voPreviousPeriod = voPeriod;}realPeriod = null;voPeriod = null;}if(voPeriods.length === 0){return voPeriods;} // The last Period extends until the end of the Media Presentation.
	// The difference between the PeriodStart time of the last Period
	// and the mpd duration
	if(voPreviousPeriod !== null && isNaN(voPreviousPeriod.duration)){voPreviousPeriod.duration = parseFloat((getEndTimeForLastPeriod(voPreviousPeriod) - voPreviousPeriod.start).toFixed(5));}return voPeriods;}function getPeriodId(realPeriod,i){if(!realPeriod){throw new Error('Period cannot be null or undefined');}var id=_voPeriod2['default'].DEFAULT_ID + '_' + i;if(realPeriod.hasOwnProperty(_constantsDashConstants2['default'].ID) && realPeriod.id.length > 0 && realPeriod.id !== '__proto__'){id = realPeriod.id;}return id;}function getMpd(manifest){var mpd=new _voMpd2['default']();if(manifest){mpd.manifest = manifest;if(manifest.hasOwnProperty(_constantsDashConstants2['default'].AVAILABILITY_START_TIME)){mpd.availabilityStartTime = new Date(manifest.availabilityStartTime.getTime());}else {mpd.availabilityStartTime = new Date(manifest.loadedTime.getTime());}if(manifest.hasOwnProperty(_constantsDashConstants2['default'].AVAILABILITY_END_TIME)){mpd.availabilityEndTime = new Date(manifest.availabilityEndTime.getTime());}if(manifest.hasOwnProperty(_constantsDashConstants2['default'].MINIMUM_UPDATE_PERIOD)){mpd.minimumUpdatePeriod = manifest.minimumUpdatePeriod;}if(manifest.hasOwnProperty(_constantsDashConstants2['default'].MEDIA_PRESENTATION_DURATION)){mpd.mediaPresentationDuration = manifest.mediaPresentationDuration;}if(manifest.hasOwnProperty(_streamingConstantsConstants2['default'].SUGGESTED_PRESENTATION_DELAY)){mpd.suggestedPresentationDelay = manifest.suggestedPresentationDelay;}if(manifest.hasOwnProperty(_constantsDashConstants2['default'].TIMESHIFT_BUFFER_DEPTH)){mpd.timeShiftBufferDepth = manifest.timeShiftBufferDepth;}if(manifest.hasOwnProperty(_constantsDashConstants2['default'].MAX_SEGMENT_DURATION)){mpd.maxSegmentDuration = manifest.maxSegmentDuration;}}return mpd;}function getEndTimeForLastPeriod(voPeriod){var isDynamic=getIsDynamic(voPeriod.mpd.manifest);var periodEnd=undefined;if(voPeriod.mpd.manifest.mediaPresentationDuration){periodEnd = voPeriod.mpd.manifest.mediaPresentationDuration;}else if(voPeriod.duration){periodEnd = voPeriod.duration;}else if(isDynamic){periodEnd = Number.POSITIVE_INFINITY;}else {errHandler.error(new _streamingVoDashJSError2['default'](_coreErrorsErrors2['default'].MANIFEST_ERROR_ID_PARSE_CODE,'Must have @mediaPresentationDuration on MPD or an explicit @duration on the last period.',voPeriod));}return periodEnd;}function getEventsForPeriod(period){var manifest=period && period.mpd && period.mpd.manifest?period.mpd.manifest:null;var periodArray=manifest?manifest.Period_asArray:null;var eventStreams=periodArray && period && isInteger(period.index)?periodArray[period.index].EventStream_asArray:null;var events=[];var i=undefined,j=undefined;if(eventStreams){for(i = 0;i < eventStreams.length;i++) {var eventStream=new _voEventStream2['default']();eventStream.period = period;eventStream.timescale = 1;if(eventStreams[i].hasOwnProperty(_streamingConstantsConstants2['default'].SCHEME_ID_URI)){eventStream.schemeIdUri = eventStreams[i].schemeIdUri;}else {throw new Error('Invalid EventStream. SchemeIdUri has to be set');}if(eventStreams[i].hasOwnProperty(_constantsDashConstants2['default'].TIMESCALE)){eventStream.timescale = eventStreams[i].timescale;}if(eventStreams[i].hasOwnProperty(_constantsDashConstants2['default'].VALUE)){eventStream.value = eventStreams[i].value;}for(j = 0;j < eventStreams[i].Event_asArray.length;j++) {var _event=new _voEvent2['default']();_event.presentationTime = 0;_event.eventStream = eventStream;if(eventStreams[i].Event_asArray[j].hasOwnProperty(_constantsDashConstants2['default'].PRESENTATION_TIME)){_event.presentationTime = eventStreams[i].Event_asArray[j].presentationTime;}if(eventStreams[i].Event_asArray[j].hasOwnProperty(_constantsDashConstants2['default'].DURATION)){_event.duration = eventStreams[i].Event_asArray[j].duration;}if(eventStreams[i].Event_asArray[j].hasOwnProperty(_constantsDashConstants2['default'].ID)){_event.id = eventStreams[i].Event_asArray[j].id;} // From Cor.1: 'NOTE: this attribute is an alternative
	// to specifying a complete XML element(s) in the Event.
	// It is useful when an event leans itself to a compact
	// string representation'.
	_event.messageData = eventStreams[i].Event_asArray[j].messageData || eventStreams[i].Event_asArray[j].__text;events.push(_event);}}}return events;}function getEventStreams(inbandStreams,representation){var eventStreams=[];var i=undefined;if(!inbandStreams)return eventStreams;for(i = 0;i < inbandStreams.length;i++) {var eventStream=new _voEventStream2['default']();eventStream.timescale = 1;eventStream.representation = representation;if(inbandStreams[i].hasOwnProperty(_streamingConstantsConstants2['default'].SCHEME_ID_URI)){eventStream.schemeIdUri = inbandStreams[i].schemeIdUri;}else {throw new Error('Invalid EventStream. SchemeIdUri has to be set');}if(inbandStreams[i].hasOwnProperty(_constantsDashConstants2['default'].TIMESCALE)){eventStream.timescale = inbandStreams[i].timescale;}if(inbandStreams[i].hasOwnProperty(_constantsDashConstants2['default'].VALUE)){eventStream.value = inbandStreams[i].value;}eventStreams.push(eventStream);}return eventStreams;}function getEventStreamForAdaptationSet(manifest,adaptation){var inbandStreams=undefined,periodArray=undefined,adaptationArray=undefined;if(manifest && manifest.Period_asArray && adaptation && adaptation.period && isInteger(adaptation.period.index)){periodArray = manifest.Period_asArray[adaptation.period.index];if(periodArray && periodArray.AdaptationSet_asArray && isInteger(adaptation.index)){adaptationArray = periodArray.AdaptationSet_asArray[adaptation.index];if(adaptationArray){inbandStreams = adaptationArray.InbandEventStream_asArray;}}}return getEventStreams(inbandStreams,null);}function getEventStreamForRepresentation(manifest,representation){var inbandStreams=undefined,periodArray=undefined,adaptationArray=undefined,representationArray=undefined;if(manifest && manifest.Period_asArray && representation && representation.adaptation && representation.adaptation.period && isInteger(representation.adaptation.period.index)){periodArray = manifest.Period_asArray[representation.adaptation.period.index];if(periodArray && periodArray.AdaptationSet_asArray && isInteger(representation.adaptation.index)){adaptationArray = periodArray.AdaptationSet_asArray[representation.adaptation.index];if(adaptationArray && adaptationArray.Representation_asArray && isInteger(representation.index)){representationArray = adaptationArray.Representation_asArray[representation.index];if(representationArray){inbandStreams = representationArray.InbandEventStream_asArray;}}}}return getEventStreams(inbandStreams,representation);}function getUTCTimingSources(manifest){var isDynamic=getIsDynamic(manifest);var hasAST=manifest?manifest.hasOwnProperty(_constantsDashConstants2['default'].AVAILABILITY_START_TIME):false;var utcTimingsArray=manifest?manifest.UTCTiming_asArray:null;var utcTimingEntries=[]; // do not bother synchronizing the clock unless MPD is live,
	// or it is static and has availabilityStartTime attribute
	if(isDynamic || hasAST){if(utcTimingsArray){ // the order is important here - 23009-1 states that the order
	// in the manifest "indicates relative preference, first having
	// the highest, and the last the lowest priority".
	utcTimingsArray.forEach(function(utcTiming){var entry=new _voUTCTiming2['default']();if(utcTiming.hasOwnProperty(_streamingConstantsConstants2['default'].SCHEME_ID_URI)){entry.schemeIdUri = utcTiming.schemeIdUri;}else { // entries of type DescriptorType with no schemeIdUri
	// are meaningless. let's just ignore this entry and
	// move on.
	return;} // this is (incorrectly) interpreted as a number - schema
	// defines it as a string
	if(utcTiming.hasOwnProperty(_constantsDashConstants2['default'].VALUE)){entry.value = utcTiming.value.toString();}else { // without a value, there's not a lot we can do with
	// this entry. let's just ignore this one and move on
	return;} // we're not interested in the optional id or any other
	// attributes which might be attached to the entry
	utcTimingEntries.push(entry);});}}return utcTimingEntries;}function getBaseURLsFromElement(node){var baseUrls=[]; // if node.BaseURL_asArray and node.baseUri are undefined entries
	// will be [undefined] which entries.some will just skip
	var entries=node.BaseURL_asArray || [node.baseUri];var earlyReturn=false;entries.some(function(entry){if(entry){var baseUrl=new _voBaseURL2['default']();var text=entry.__text || entry;if(urlUtils.isRelative(text)){ // it doesn't really make sense to have relative and
	// absolute URLs at the same level, or multiple
	// relative URLs at the same level, so assume we are
	// done from this level of the MPD
	earlyReturn = true; // deal with the specific case where the MPD@BaseURL
	// is specified and is relative. when no MPD@BaseURL
	// entries exist, that case is handled by the
	// [node.baseUri] in the entries definition.
	if(node.baseUri){text = urlUtils.resolve(text,node.baseUri);}}baseUrl.url = text; // serviceLocation is optional, but we need it in order
	// to blacklist correctly. if it's not available, use
	// anything unique since there's no relationship to any
	// other BaseURL and, in theory, the url should be
	// unique so use this instead.
	if(entry.hasOwnProperty(_constantsDashConstants2['default'].SERVICE_LOCATION) && entry.serviceLocation.length){baseUrl.serviceLocation = entry.serviceLocation;}else {baseUrl.serviceLocation = text;}if(entry.hasOwnProperty(_constantsDashConstants2['default'].DVB_PRIORITY)){baseUrl.dvb_priority = entry[_constantsDashConstants2['default'].DVB_PRIORITY];}if(entry.hasOwnProperty(_constantsDashConstants2['default'].DVB_WEIGHT)){baseUrl.dvb_weight = entry[_constantsDashConstants2['default'].DVB_WEIGHT];}if(entry.hasOwnProperty(_constantsDashConstants2['default'].AVAILABILITY_TIME_OFFSET)){baseUrl.availabilityTimeOffset = entry[_constantsDashConstants2['default'].AVAILABILITY_TIME_OFFSET];}if(entry.hasOwnProperty(_constantsDashConstants2['default'].AVAILABILITY_TIME_COMPLETE)){baseUrl.availabilityTimeComplete = entry[_constantsDashConstants2['default'].AVAILABILITY_TIME_COMPLETE] !== 'false';} /* NOTE: byteRange currently unused
	                 */baseUrls.push(baseUrl);return earlyReturn;}});return baseUrls;}function getLocation(manifest){if(manifest && manifest.hasOwnProperty(_streamingConstantsConstants2['default'].LOCATION)){ // for now, do not support multiple Locations -
	// just set Location to the first Location.
	manifest.Location = manifest.Location_asArray[0];return manifest.Location;} // may well be undefined
	return undefined;}instance = {getIsTypeOf:getIsTypeOf,getIsTextTrack:getIsTextTrack,getLanguageForAdaptation:getLanguageForAdaptation,getViewpointForAdaptation:getViewpointForAdaptation,getRolesForAdaptation:getRolesForAdaptation,getAccessibilityForAdaptation:getAccessibilityForAdaptation,getAudioChannelConfigurationForAdaptation:getAudioChannelConfigurationForAdaptation,getAdaptationForIndex:getAdaptationForIndex,getIndexForAdaptation:getIndexForAdaptation,getAdaptationForId:getAdaptationForId,getAdaptationsForType:getAdaptationsForType,getAdaptationForType:getAdaptationForType,getCodec:getCodec,getMimeType:getMimeType,getKID:getKID,getContentProtectionData:getContentProtectionData,getIsDynamic:getIsDynamic,getIsDVB:getIsDVB,getDuration:getDuration,getBandwidth:getBandwidth,getManifestUpdatePeriod:getManifestUpdatePeriod,getRepresentationCount:getRepresentationCount,getBitrateListForAdaptation:getBitrateListForAdaptation,getRepresentationFor:getRepresentationFor,getRepresentationsForAdaptation:getRepresentationsForAdaptation,getAdaptationsForPeriod:getAdaptationsForPeriod,getRegularPeriods:getRegularPeriods,getMpd:getMpd,getEventsForPeriod:getEventsForPeriod,getEventStreamForAdaptationSet:getEventStreamForAdaptationSet,getEventStreamForRepresentation:getEventStreamForRepresentation,getUTCTimingSources:getUTCTimingSources,getBaseURLsFromElement:getBaseURLsFromElement,getRepresentationSortFunction:getRepresentationSortFunction,getLocation:getLocation,getUseCalculatedLiveEdgeTimeForAdaptation:getUseCalculatedLiveEdgeTimeForAdaptation};setup();return instance;}DashManifestModel.__dashjs_factory_name = 'DashManifestModel';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(DashManifestModel);module.exports = exports['default'];
	//# sourceMappingURL=DashManifestModel.js.map


/***/ }),
/* 232 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var AdaptationSet=function AdaptationSet(){_classCallCheck(this,AdaptationSet);this.period = null;this.index = -1;this.type = null;};exports["default"] = AdaptationSet;module.exports = exports["default"];
	//# sourceMappingURL=AdaptationSet.js.map


/***/ }),
/* 233 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var Period=function Period(){_classCallCheck(this,Period);this.id = null;this.index = -1;this.duration = NaN;this.start = NaN;this.mpd = null;};Period.DEFAULT_ID = 'defaultId';exports['default'] = Period;module.exports = exports['default'];
	//# sourceMappingURL=Period.js.map


/***/ }),
/* 234 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var Mpd=function Mpd(){_classCallCheck(this,Mpd);this.manifest = null;this.suggestedPresentationDelay = 0;this.availabilityStartTime = null;this.availabilityEndTime = Number.POSITIVE_INFINITY;this.timeShiftBufferDepth = Number.POSITIVE_INFINITY;this.maxSegmentDuration = Number.POSITIVE_INFINITY;this.minimumUpdatePeriod = NaN;this.mediaPresentationDuration = NaN;};exports["default"] = Mpd;module.exports = exports["default"];
	//# sourceMappingURL=Mpd.js.map


/***/ }),
/* 235 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var EventStream=function EventStream(){_classCallCheck(this,EventStream);this.adaptionSet = null;this.representation = null;this.period = null;this.timescale = 1;this.value = '';this.schemeIdUri = '';};exports['default'] = EventStream;module.exports = exports['default'];
	//# sourceMappingURL=EventStream.js.map


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _streamingVoMetricsHTTPRequest=__webpack_require__(65);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);var _streamingConstantsMetricsConstants=__webpack_require__(50);var _streamingConstantsMetricsConstants2=_interopRequireDefault(_streamingConstantsMetricsConstants);var _utilsRound10=__webpack_require__(237);var _utilsRound102=_interopRequireDefault(_utilsRound10); /**
	 * @module DashMetrics
	 * @param {object} config configuration passed to DashMetrics
	 */function DashMetrics(config){config = config || {};var instance=undefined;var dashManifestModel=config.dashManifestModel;var manifestModel=config.manifestModel;function getBandwidthForRepresentation(representationId,periodId){var representation=undefined;var manifest=manifestModel.getValue();var period=manifest.Period_asArray[periodId];representation = findRepresentation(period,representationId);if(representation === null){return null;}return representation.bandwidth;} /**
	     *
	     * @param {string} representationId
	     * @param {number} periodIdx
	     * @returns {*}
	     */function getIndexForRepresentation(representationId,periodIdx){var representationIndex=undefined;var manifest=manifestModel.getValue();var period=manifest.Period_asArray[periodIdx];representationIndex = findRepresentationIndex(period,representationId);return representationIndex;} /**
	     * This method returns the current max index based on what is defined in the MPD.
	     *
	     * @param {string} bufferType - String 'audio' or 'video',
	     * @param {number} periodIdx - Make sure this is the period index not id
	     * @return {number}
	     * @memberof module:DashMetrics
	     * @instance
	     */function getMaxIndexForBufferType(bufferType,periodIdx){var maxIndex=undefined;var manifest=manifestModel.getValue();if(!manifest){return -1;}var period=manifest.Period_asArray[periodIdx];maxIndex = findMaxBufferIndex(period,bufferType);return maxIndex;} /**
	     * @param {MetricsList} metrics
	     * @returns {*}
	     * @memberof module:DashMetrics
	     * @instance
	     */function getCurrentRepresentationSwitch(metrics){return getCurrent(metrics,_streamingConstantsMetricsConstants2['default'].TRACK_SWITCH);} /**
	     * @param {MetricsList} metrics
	     * @returns {*}
	     * @memberof module:DashMetrics
	     * @instance
	     */function getLatestBufferLevelVO(metrics){return getCurrent(metrics,_streamingConstantsMetricsConstants2['default'].BUFFER_LEVEL);} /**
	     * @param {MetricsList} metrics
	     * @returns {number}
	     * @memberof module:DashMetrics
	     * @instance
	     */function getCurrentBufferLevel(metrics){var vo=getLatestBufferLevelVO(metrics);if(vo){return _utilsRound102['default'].round10(vo.level / 1000,-3);}return 0;} /**
	     * @param {MetricsList} metrics
	     * @returns {null|*|vo}
	     * @memberof module:DashMetrics
	     * @instance
	     */function getRequestsQueue(metrics){return metrics?metrics.RequestsQueue:null;} /**
	     * @param {MetricsList} metrics
	     * @returns {*}
	     * @memberof module:DashMetrics
	     * @instance
	     */function getCurrentHttpRequest(metrics){if(!metrics){return null;}var httpList=metrics.HttpList;var currentHttpList=null;var httpListLength=undefined,httpListLastIndex=undefined;if(!httpList || httpList.length <= 0){return null;}httpListLength = httpList.length;httpListLastIndex = httpListLength - 1;while(httpListLastIndex >= 0) {if(httpList[httpListLastIndex].responsecode){currentHttpList = httpList[httpListLastIndex];break;}httpListLastIndex--;}return currentHttpList;} /**
	     * @param {MetricsList} metrics
	     * @returns {*}
	     * @memberof module:DashMetrics
	     * @instance
	     */function getHttpRequests(metrics){if(!metrics){return [];}return !!metrics.HttpList?metrics.HttpList:[];} /**
	     * @param {MetricsList} metrics
	     * @param {string} metricName
	     * @returns {*}
	     * @memberof module:DashMetrics
	     * @instance
	     */function getCurrent(metrics,metricName){if(!metrics){return null;}var list=metrics[metricName];if(!list){return null;}var length=list.length;if(length <= 0){return null;}return list[length - 1];} /**
	     * @param {MetricsList} metrics
	     * @returns {*}
	     * @memberof module:DashMetrics
	     * @instance
	     */function getCurrentDroppedFrames(metrics){return getCurrent(metrics,_streamingConstantsMetricsConstants2['default'].DROPPED_FRAMES);} /**
	     * @param {MetricsList} metrics
	     * @returns {*}
	     * @memberof module:DashMetrics
	     * @instance
	     */function getCurrentSchedulingInfo(metrics){return getCurrent(metrics,_streamingConstantsMetricsConstants2['default'].SCHEDULING_INFO);} /**
	     * @param {MetricsList} metrics
	     * @returns {*}
	     * @memberof module:DashMetrics
	     * @instance
	     */function getCurrentManifestUpdate(metrics){return getCurrent(metrics,_streamingConstantsMetricsConstants2['default'].MANIFEST_UPDATE);} /**
	     * @param {MetricsList} metrics
	     * @returns {*}
	     * @memberof module:DashMetrics
	     * @instance
	     */function getCurrentDVRInfo(metrics){return getCurrent(metrics,_streamingConstantsMetricsConstants2['default'].DVR_INFO);} /**
	     * @param {MetricsList} metrics
	     * @param {string} id
	     * @returns {*}
	     * @memberof module:DashMetrics
	     * @instance
	     */function getLatestMPDRequestHeaderValueByID(metrics,id){var headers={};var httpRequestList=undefined,httpRequest=undefined,i=undefined;httpRequestList = getHttpRequests(metrics);for(i = httpRequestList.length - 1;i >= 0;i--) {httpRequest = httpRequestList[i];if(httpRequest.type === _streamingVoMetricsHTTPRequest.HTTPRequest.MPD_TYPE){headers = parseResponseHeaders(httpRequest._responseHeaders);break;}}return headers[id] === undefined?null:headers[id];} /**
	     * @param {MetricsList} metrics
	     * @param {string} id
	     * @returns {*}
	     * @memberof module:DashMetrics
	     * @instance
	     */function getLatestFragmentRequestHeaderValueByID(metrics,id){var headers={};var httpRequest=getCurrentHttpRequest(metrics);if(httpRequest){headers = parseResponseHeaders(httpRequest._responseHeaders);}return headers[id] === undefined?null:headers[id];}function parseResponseHeaders(headerStr){var headers={};if(!headerStr){return headers;} // Trim headerStr to fix a MS Edge bug with xhr.getAllResponseHeaders method
	// which send a string starting with a "\n" character
	var headerPairs=headerStr.trim().split('\r\n');for(var i=0,ilen=headerPairs.length;i < ilen;i++) {var headerPair=headerPairs[i];var index=headerPair.indexOf(': ');if(index > 0){headers[headerPair.substring(0,index)] = headerPair.substring(index + 2);}}return headers;}function findRepresentationIndex(period,representationId){var index=findRepresentation(period,representationId,true);if(index !== null){return index;}return -1;}function findRepresentation(period,representationId,returnIndex){var adaptationSet=undefined,adaptationSetArray=undefined,representation=undefined,representationArray=undefined,adaptationSetArrayIndex=undefined,representationArrayIndex=undefined;if(period){adaptationSetArray = period.AdaptationSet_asArray;for(adaptationSetArrayIndex = 0;adaptationSetArrayIndex < adaptationSetArray.length;adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {adaptationSet = adaptationSetArray[adaptationSetArrayIndex];representationArray = adaptationSet.Representation_asArray;for(representationArrayIndex = 0;representationArrayIndex < representationArray.length;representationArrayIndex = representationArrayIndex + 1) {representation = representationArray[representationArrayIndex];if(representationId === representation.id){if(returnIndex){return representationArrayIndex;}else {return representation;}}}}}return null;}function adaptationIsType(adaptation,bufferType){return dashManifestModel.getIsTypeOf(adaptation,bufferType);}function findMaxBufferIndex(period,bufferType){var adaptationSet=undefined,adaptationSetArray=undefined,representationArray=undefined,adaptationSetArrayIndex=undefined;if(!period || !bufferType)return -1;adaptationSetArray = period.AdaptationSet_asArray;for(adaptationSetArrayIndex = 0;adaptationSetArrayIndex < adaptationSetArray.length;adaptationSetArrayIndex = adaptationSetArrayIndex + 1) {adaptationSet = adaptationSetArray[adaptationSetArrayIndex];representationArray = adaptationSet.Representation_asArray;if(adaptationIsType(adaptationSet,bufferType)){return representationArray.length;}}return -1;}instance = {getBandwidthForRepresentation:getBandwidthForRepresentation,getIndexForRepresentation:getIndexForRepresentation,getMaxIndexForBufferType:getMaxIndexForBufferType,getCurrentRepresentationSwitch:getCurrentRepresentationSwitch,getLatestBufferLevelVO:getLatestBufferLevelVO,getCurrentBufferLevel:getCurrentBufferLevel,getCurrentHttpRequest:getCurrentHttpRequest,getHttpRequests:getHttpRequests,getCurrentDroppedFrames:getCurrentDroppedFrames,getCurrentSchedulingInfo:getCurrentSchedulingInfo,getCurrentDVRInfo:getCurrentDVRInfo,getCurrentManifestUpdate:getCurrentManifestUpdate,getLatestFragmentRequestHeaderValueByID:getLatestFragmentRequestHeaderValueByID,getLatestMPDRequestHeaderValueByID:getLatestMPDRequestHeaderValueByID,getRequestsQueue:getRequestsQueue};return instance;}DashMetrics.__dashjs_factory_name = 'DashMetrics';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(DashMetrics);module.exports = exports['default'];
	//# sourceMappingURL=DashMetrics.js.map


/***/ }),
/* 237 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * Static methods for rounding decimals
	 *
	 * Modified version of the CC0-licenced example at:
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
	 *
	 * @export
	 * @class Round10
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _createClass=(function(){function defineProperties(target,props){for(var i=0;i < props.length;i++) {var descriptor=props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if('value' in descriptor)descriptor.writable = true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};})();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var Round10=(function(){function Round10(){_classCallCheck(this,Round10);} /**
	 * Decimal adjustment of a number.
	 *
	 * @param {String}  type  The type of adjustment.
	 * @param {Number}  value The number.
	 * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).
	 * @returns {Number} The adjusted value.
	 */_createClass(Round10,null,[{key:'round10', /**
	    * Decimal round.
	    *
	    * @param {Number}  value The number.
	    * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).
	    * @returns {Number} The adjusted value.
	    */value:function round10(value,exp){return _decimalAdjust('round',value,exp);}}]);return Round10;})();exports['default'] = Round10;function _decimalAdjust(type,value,exp){ // If the exp is undefined or zero...
	if(typeof exp === 'undefined' || +exp === 0){return Math[type](value);}value = +value;exp = +exp; // If the value is not a number or the exp is not an integer...
	if(value === null || isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)){return NaN;} // Shift
	value = value.toString().split('e');value = Math[type](+(value[0] + 'e' + (value[1]?+value[1] - exp:-exp))); // Shift back
	value = value.toString().split('e');return +(value[0] + 'e' + (value[1]?+value[1] + exp:exp));}module.exports = exports['default'];
	//# sourceMappingURL=Round10.js.map


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _coreEventBus=__webpack_require__(54);var _coreEventBus2=_interopRequireDefault(_coreEventBus);var _coreEventsEvents=__webpack_require__(56);var _coreEventsEvents2=_interopRequireDefault(_coreEventsEvents);var _coreFactoryMaker=__webpack_require__(55);var _coreFactoryMaker2=_interopRequireDefault(_coreFactoryMaker);function TimelineConverter(){var context=this.context;var eventBus=(0,_coreEventBus2['default'])(context).getInstance();var instance=undefined,clientServerTimeShift=undefined,isClientServerTimeSyncCompleted=undefined,expectedLiveEdge=undefined;function initialize(){resetInitialSettings();eventBus.on(_coreEventsEvents2['default'].TIME_SYNCHRONIZATION_COMPLETED,onTimeSyncComplete,this);}function isTimeSyncCompleted(){return isClientServerTimeSyncCompleted;}function setTimeSyncCompleted(value){isClientServerTimeSyncCompleted = value;}function getClientTimeOffset(){return clientServerTimeShift;}function setClientTimeOffset(value){clientServerTimeShift = value;}function getExpectedLiveEdge(){return expectedLiveEdge;}function setExpectedLiveEdge(value){expectedLiveEdge = value;}function calcAvailabilityTimeFromPresentationTime(presentationTime,mpd,isDynamic,calculateEnd){var availabilityTime=NaN;if(calculateEnd){ //@timeShiftBufferDepth specifies the duration of the time shifting buffer that is guaranteed
	// to be available for a Media Presentation with type 'dynamic'.
	// When not present, the value is infinite.
	if(isDynamic && mpd.timeShiftBufferDepth != Number.POSITIVE_INFINITY){availabilityTime = new Date(mpd.availabilityStartTime.getTime() + (presentationTime + mpd.timeShiftBufferDepth) * 1000);}else {availabilityTime = mpd.availabilityEndTime;}}else {if(isDynamic){availabilityTime = new Date(mpd.availabilityStartTime.getTime() + (presentationTime - clientServerTimeShift) * 1000);}else { // in static mpd, all segments are available at the same time
	availabilityTime = mpd.availabilityStartTime;}}return availabilityTime;}function calcAvailabilityStartTimeFromPresentationTime(presentationTime,mpd,isDynamic){return calcAvailabilityTimeFromPresentationTime.call(this,presentationTime,mpd,isDynamic);}function calcAvailabilityEndTimeFromPresentationTime(presentationTime,mpd,isDynamic){return calcAvailabilityTimeFromPresentationTime.call(this,presentationTime,mpd,isDynamic,true);}function calcPresentationTimeFromWallTime(wallTime,period){return (wallTime.getTime() - period.mpd.availabilityStartTime.getTime() + clientServerTimeShift * 1000) / 1000;}function calcPresentationTimeFromMediaTime(mediaTime,representation){var periodStart=representation.adaptation.period.start;var presentationOffset=representation.presentationTimeOffset;return mediaTime + (periodStart - presentationOffset);}function calcMediaTimeFromPresentationTime(presentationTime,representation){var periodStart=representation.adaptation.period.start;var presentationOffset=representation.presentationTimeOffset;return presentationTime - periodStart + presentationOffset;}function calcWallTimeForSegment(segment,isDynamic){var suggestedPresentationDelay=undefined,displayStartTime=undefined,wallTime=undefined;if(isDynamic){suggestedPresentationDelay = segment.representation.adaptation.period.mpd.suggestedPresentationDelay;displayStartTime = segment.presentationStartTime + suggestedPresentationDelay;wallTime = new Date(segment.availabilityStartTime.getTime() + displayStartTime * 1000);}return wallTime;}function calcSegmentAvailabilityRange(voRepresentation,isDynamic){ // Static Range Finder
	var voPeriod=voRepresentation.adaptation.period;var range={start:voPeriod.start,end:voPeriod.start + voPeriod.duration};if(!isDynamic)return range;if(!isClientServerTimeSyncCompleted && voRepresentation.segmentAvailabilityRange){return voRepresentation.segmentAvailabilityRange;} // Dynamic Range Finder
	var d=voRepresentation.segmentDuration || (voRepresentation.segments && voRepresentation.segments.length?voRepresentation.segments[voRepresentation.segments.length - 1].duration:0);var now=calcPresentationTimeFromWallTime(new Date(),voPeriod);var periodEnd=voPeriod.start + voPeriod.duration;range.start = Math.max(now - voPeriod.mpd.timeShiftBufferDepth,voPeriod.start);var endOffset=voRepresentation.availabilityTimeOffset !== undefined && voRepresentation.availabilityTimeOffset < d?d - voRepresentation.availabilityTimeOffset:d;range.end = now >= periodEnd && now - endOffset < periodEnd?periodEnd:now - endOffset;return range;}function calcPeriodRelativeTimeFromMpdRelativeTime(representation,mpdRelativeTime){var periodStartTime=representation.adaptation.period.start;return mpdRelativeTime - periodStartTime;} /*
	    * We need to figure out if we want to timesync for segmentTimeine where useCalculatedLiveEdge = true
	    * seems we figure out client offset based on logic in liveEdgeFinder getLiveEdge timelineConverter.setClientTimeOffset(liveEdge - representationInfo.DVRWindow.end);
	    * FYI StreamController's onManifestUpdated entry point to timeSync
	    * */function onTimeSyncComplete(e){if(isClientServerTimeSyncCompleted)return;if(e.offset !== undefined){setClientTimeOffset(e.offset / 1000);isClientServerTimeSyncCompleted = true;}}function calcMSETimeOffset(representation){ // The MSEOffset is offset from AST for media. It is Period@start - presentationTimeOffset
	var presentationOffset=representation.presentationTimeOffset;var periodStart=representation.adaptation.period.start;return periodStart - presentationOffset;}function resetInitialSettings(){clientServerTimeShift = 0;isClientServerTimeSyncCompleted = false;expectedLiveEdge = NaN;}function reset(){eventBus.off(_coreEventsEvents2['default'].TIME_SYNCHRONIZATION_COMPLETED,onTimeSyncComplete,this);resetInitialSettings();}instance = {initialize:initialize,isTimeSyncCompleted:isTimeSyncCompleted,setTimeSyncCompleted:setTimeSyncCompleted,getClientTimeOffset:getClientTimeOffset,setClientTimeOffset:setClientTimeOffset,getExpectedLiveEdge:getExpectedLiveEdge,setExpectedLiveEdge:setExpectedLiveEdge,calcAvailabilityStartTimeFromPresentationTime:calcAvailabilityStartTimeFromPresentationTime,calcAvailabilityEndTimeFromPresentationTime:calcAvailabilityEndTimeFromPresentationTime,calcPresentationTimeFromWallTime:calcPresentationTimeFromWallTime,calcPresentationTimeFromMediaTime:calcPresentationTimeFromMediaTime,calcPeriodRelativeTimeFromMpdRelativeTime:calcPeriodRelativeTimeFromMpdRelativeTime,calcMediaTimeFromPresentationTime:calcMediaTimeFromPresentationTime,calcSegmentAvailabilityRange:calcSegmentAvailabilityRange,calcWallTimeForSegment:calcWallTimeForSegment,calcMSETimeOffset:calcMSETimeOffset,reset:reset};return instance;}TimelineConverter.__dashjs_factory_name = 'TimelineConverter';exports['default'] = _coreFactoryMaker2['default'].getSingletonFactory(TimelineConverter);module.exports = exports['default'];
	//# sourceMappingURL=TimelineConverter.js.map


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

	/* $Date: 2007-06-12 18:02:31 $ */ // from: http://bannister.us/weblog/2007/06/09/simple-base64-encodedecode-javascript/
	// Handles encode/decode of ASCII and Unicode strings.
	'use strict';var UTF8={};UTF8.encode = function(s){var u=[];for(var i=0;i < s.length;++i) {var c=s.charCodeAt(i);if(c < 0x80){u.push(c);}else if(c < 0x800){u.push(0xC0 | c >> 6);u.push(0x80 | 63 & c);}else if(c < 0x10000){u.push(0xE0 | c >> 12);u.push(0x80 | 63 & c >> 6);u.push(0x80 | 63 & c);}else {u.push(0xF0 | c >> 18);u.push(0x80 | 63 & c >> 12);u.push(0x80 | 63 & c >> 6);u.push(0x80 | 63 & c);}}return u;};UTF8.decode = function(u){var a=[];var i=0;while(i < u.length) {var v=u[i++];if(v < 0x80){ // no need to mask byte
	}else if(v < 0xE0){v = (31 & v) << 6;v |= 63 & u[i++];}else if(v < 0xF0){v = (15 & v) << 12;v |= (63 & u[i++]) << 6;v |= 63 & u[i++];}else {v = (7 & v) << 18;v |= (63 & u[i++]) << 12;v |= (63 & u[i++]) << 6;v |= 63 & u[i++];}a.push(String.fromCharCode(v));}return a.join('');};var BASE64={};(function(T){var encodeArray=function encodeArray(u){var i=0;var a=[];var n=0 | u.length / 3;while(0 < n--) {var v=(u[i] << 16) + (u[i + 1] << 8) + u[i + 2];i += 3;a.push(T.charAt(63 & v >> 18));a.push(T.charAt(63 & v >> 12));a.push(T.charAt(63 & v >> 6));a.push(T.charAt(63 & v));}if(2 == u.length - i){var v=(u[i] << 16) + (u[i + 1] << 8);a.push(T.charAt(63 & v >> 18));a.push(T.charAt(63 & v >> 12));a.push(T.charAt(63 & v >> 6));a.push('=');}else if(1 == u.length - i){var v=u[i] << 16;a.push(T.charAt(63 & v >> 18));a.push(T.charAt(63 & v >> 12));a.push('==');}return a.join('');};var R=(function(){var a=[];for(var i=0;i < T.length;++i) {a[T.charCodeAt(i)] = i;}a['='.charCodeAt(0)] = 0;return a;})();var decodeArray=function decodeArray(s){var i=0;var u=[];var n=0 | s.length / 4;while(0 < n--) {var v=(R[s.charCodeAt(i)] << 18) + (R[s.charCodeAt(i + 1)] << 12) + (R[s.charCodeAt(i + 2)] << 6) + R[s.charCodeAt(i + 3)];u.push(255 & v >> 16);u.push(255 & v >> 8);u.push(255 & v);i += 4;}if(u){if('=' == s.charAt(i - 2)){u.pop();u.pop();}else if('=' == s.charAt(i - 1)){u.pop();}}return u;};var ASCII={};ASCII.encode = function(s){var u=[];for(var i=0;i < s.length;++i) {u.push(s.charCodeAt(i));}return u;};ASCII.decode = function(u){for(var i=0;i < s.length;++i) {a[i] = String.fromCharCode(a[i]);}return a.join('');};BASE64.decodeArray = function(s){var u=decodeArray(s);return new Uint8Array(u);};BASE64.encodeASCII = function(s){var u=ASCII.encode(s);return encodeArray(u);};BASE64.decodeASCII = function(s){var a=decodeArray(s);return ASCII.decode(a);};BASE64.encode = function(s){var u=UTF8.encode(s);return encodeArray(u);};BASE64.decode = function(s){var u=decodeArray(s);return UTF8.decode(u);};})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"); /*The following polyfills are not used in dash.js but have caused multiplayer integration issues.
	 Therefore commenting them out.
	if (undefined === btoa) {
	    var btoa = BASE64.encode;
	}
	if (undefined === atob) {
	    var atob = BASE64.decode;
	}
	*/if(true){exports.decode = BASE64.decode;exports.decodeArray = BASE64.decodeArray;exports.encode = BASE64.encode;exports.encodeASCII = BASE64.encodeASCII;}
	//# sourceMappingURL=base64.js.map


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _utilsDVBErrorsTranslator=__webpack_require__(241);var _utilsDVBErrorsTranslator2=_interopRequireDefault(_utilsDVBErrorsTranslator);var _MetricsReportingEvents=__webpack_require__(243);var _MetricsReportingEvents2=_interopRequireDefault(_MetricsReportingEvents);var _controllersMetricsCollectionController=__webpack_require__(244);var _controllersMetricsCollectionController2=_interopRequireDefault(_controllersMetricsCollectionController);var _metricsMetricsHandlerFactory=__webpack_require__(253);var _metricsMetricsHandlerFactory2=_interopRequireDefault(_metricsMetricsHandlerFactory);var _reportingReportingFactory=__webpack_require__(248);var _reportingReportingFactory2=_interopRequireDefault(_reportingReportingFactory);function MetricsReporting(){var context=this.context;var instance=undefined;var dvbErrorsTranslator=undefined; /**
	     * Create a MetricsCollectionController, and a DVBErrorsTranslator
	     * @param {Object} config - dependancies from owner
	     * @return {MetricsCollectionController} Metrics Collection Controller
	     */function createMetricsReporting(config){dvbErrorsTranslator = (0,_utilsDVBErrorsTranslator2['default'])(context).getInstance({eventBus:config.eventBus,metricsModel:config.metricsModel,metricsConstants:config.metricsConstants,events:config.events});return (0,_controllersMetricsCollectionController2['default'])(context).create(config);} /**
	     * Get the ReportingFactory to allow new reporters to be registered
	     * @return {ReportingFactory} Reporting Factory
	     */function getReportingFactory(){return (0,_reportingReportingFactory2['default'])(context).getInstance();} /**
	     * Get the MetricsHandlerFactory to allow new handlers to be registered
	     * @return {MetricsHandlerFactory} Metrics Handler Factory
	     */function getMetricsHandlerFactory(){return (0,_metricsMetricsHandlerFactory2['default'])(context).getInstance();}instance = {createMetricsReporting:createMetricsReporting,getReportingFactory:getReportingFactory,getMetricsHandlerFactory:getMetricsHandlerFactory};return instance;}MetricsReporting.__dashjs_factory_name = 'MetricsReporting';var factory=dashjs.FactoryMaker.getClassFactory(MetricsReporting); /* jshint ignore:line */factory.events = _MetricsReportingEvents2['default'];dashjs.FactoryMaker.updateClassFactory(MetricsReporting.__dashjs_factory_name,factory); /* jshint ignore:line */exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=MetricsReporting.js.map


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _voDVBErrors=__webpack_require__(242);var _voDVBErrors2=_interopRequireDefault(_voDVBErrors);var _MetricsReportingEvents=__webpack_require__(243);var _MetricsReportingEvents2=_interopRequireDefault(_MetricsReportingEvents);function DVBErrorsTranslator(config){config = config || {};var instance=undefined;var eventBus=config.eventBus;var metricModel=config.metricsModel;var mpd=undefined;var metricsConstants=config.metricsConstants; //MediaPlayerEvents have been added to Events in MediaPlayer class
	var Events=config.events;function report(vo){var o=new _voDVBErrors2['default']();if(!mpd){return;}for(var key in vo) {if(vo.hasOwnProperty(key)){o[key] = vo[key];}}if(!o.mpdurl){o.mpdurl = mpd.originalUrl || mpd.url;}if(!o.terror){o.terror = new Date();}metricModel.addDVBErrors(o);}function onManifestUpdate(e){if(e.error){return;}mpd = e.manifest;}function onServiceLocationChanged(e){report({errorcode:_voDVBErrors2['default'].BASE_URL_CHANGED,servicelocation:e.entry});}function onBecameReporter(){report({errorcode:_voDVBErrors2['default'].BECAME_REPORTER});}function handleHttpMetric(vo){if(vo.responsecode === 0 ||  // connection failure - unknown
	vo.responsecode >= 400 ||  // HTTP error status code
	vo.responsecode < 100 ||  // unknown status codes
	vo.responsecode >= 600){ // unknown status codes
	report({errorcode:vo.responsecode || _voDVBErrors2['default'].CONNECTION_ERROR,url:vo.url,terror:vo.tresponse,servicelocation:vo._serviceLocation});}}function onMetricEvent(e){switch(e.metric){case metricsConstants.HTTP_REQUEST:handleHttpMetric(e.value);break;default:break;}}function onPlaybackError(e){var reason=e.error?e.error.code:0;var errorcode=undefined;switch(reason){case MediaError.MEDIA_ERR_NETWORK:errorcode = _voDVBErrors2['default'].CONNECTION_ERROR;break;case MediaError.MEDIA_ERR_DECODE:errorcode = _voDVBErrors2['default'].CORRUPT_MEDIA_OTHER;break;default:return;}report({errorcode:errorcode});}function initialise(){eventBus.on(Events.MANIFEST_UPDATED,onManifestUpdate,instance);eventBus.on(Events.SERVICE_LOCATION_BLACKLIST_CHANGED,onServiceLocationChanged,instance);eventBus.on(Events.METRIC_ADDED,onMetricEvent,instance);eventBus.on(Events.METRIC_UPDATED,onMetricEvent,instance);eventBus.on(Events.PLAYBACK_ERROR,onPlaybackError,instance);eventBus.on(_MetricsReportingEvents2['default'].BECAME_REPORTING_PLAYER,onBecameReporter,instance);}function reset(){eventBus.off(Events.MANIFEST_UPDATED,onManifestUpdate,instance);eventBus.off(Events.SERVICE_LOCATION_BLACKLIST_CHANGED,onServiceLocationChanged,instance);eventBus.off(Events.METRIC_ADDED,onMetricEvent,instance);eventBus.off(Events.METRIC_UPDATED,onMetricEvent,instance);eventBus.off(Events.PLAYBACK_ERROR,onPlaybackError,instance);eventBus.off(_MetricsReportingEvents2['default'].BECAME_REPORTING_PLAYER,onBecameReporter,instance);}instance = {initialise:initialise,reset:reset};initialise();return instance;}DVBErrorsTranslator.__dashjs_factory_name = 'DVBErrorsTranslator';exports['default'] = dashjs.FactoryMaker.getSingletonFactory(DVBErrorsTranslator); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=DVBErrorsTranslator.js.map


/***/ }),
/* 242 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var DVBErrors=function DVBErrors(){_classCallCheck(this,DVBErrors);this.mpdurl = null; // String - Absolute URL from which the MPD was originally
	// retrieved (MPD updates will not change this value).
	this.errorcode = null; // String - The value of errorcode depends upon the type
	// of error being reported. For an error listed in the
	// ErrorType column below the value is as described in the
	// Value column.
	//
	// ErrorType                                            Value
	// ---------                                            -----
	// HTTP error status code                               HTTP status code
	// Unknown HTTP status code                             HTTP status code
	// SSL connection failed                                "SSL" followed by SSL alert value
	// DNS resolution failed                                "C00"
	// Host unreachable                                     "C01"
	// Connection refused                                   "C02"
	// Connection error – Not otherwise specified           "C03"
	// Corrupt media – ISO BMFF container cannot be parsed  "M00"
	// Corrupt media – Not otherwise specified              "M01"
	// Changing Base URL in use due to errors               "F00"
	// Becoming an error reporting Player                   "S00"
	this.terror = null; // Real-Time - Date and time at which error occurred in UTC,
	// formatted as a combined date and time according to ISO 8601.
	this.url = null; // String - Absolute URL from which data was being requested
	// when this error occurred. If the error report is in relation
	// to corrupt media or changing BaseURL, this may be a null
	// string if the URL from which the media was obtained or
	// which led to the change of BaseURL is no longer known.
	this.ipaddress = null; // String - IP Address which the host name in "url" resolved to.
	// If the error report is in relation to corrupt media or
	// changing BaseURL, this may be a null string if the URL
	// from which the media was obtained or which led to the
	// change of BaseURL is no longer known.
	this.servicelocation = null; // String - The value of the serviceLocation field in the
	// BaseURL being used. In the event of this report indicating
	// a change of BaseURL this is the value from the BaseURL
	// being moved from.
	};DVBErrors.SSL_CONNECTION_FAILED_PREFIX = 'SSL';DVBErrors.DNS_RESOLUTION_FAILED = 'C00';DVBErrors.HOST_UNREACHABLE = 'C01';DVBErrors.CONNECTION_REFUSED = 'C02';DVBErrors.CONNECTION_ERROR = 'C03';DVBErrors.CORRUPT_MEDIA_ISOBMFF = 'M00';DVBErrors.CORRUPT_MEDIA_OTHER = 'M01';DVBErrors.BASE_URL_CHANGED = 'F00';DVBErrors.BECAME_REPORTER = 'S00';exports['default'] = DVBErrors;module.exports = exports['default'];
	//# sourceMappingURL=DVBErrors.js.map


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _get=function get(_x,_x2,_x3){var _again=true;_function: while(_again) {var object=_x,property=_x2,receiver=_x3;_again = false;if(object === null)object = Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc === undefined){var parent=Object.getPrototypeOf(object);if(parent === null){return undefined;}else {_x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;}}else if('value' in desc){return desc.value;}else {var getter=desc.get;if(getter === undefined){return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass,superClass){if(typeof superClass !== 'function' && superClass !== null){throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__ = superClass;}var _coreEventsEventsBase=__webpack_require__(58);var _coreEventsEventsBase2=_interopRequireDefault(_coreEventsEventsBase);var MetricsReportingEvents=(function(_EventsBase){_inherits(MetricsReportingEvents,_EventsBase);function MetricsReportingEvents(){_classCallCheck(this,MetricsReportingEvents);_get(Object.getPrototypeOf(MetricsReportingEvents.prototype),'constructor',this).call(this);this.METRICS_INITIALISATION_COMPLETE = 'internal_metricsReportingInitialized';this.BECAME_REPORTING_PLAYER = 'internal_becameReportingPlayer';}return MetricsReportingEvents;})(_coreEventsEventsBase2['default']);var metricsReportingEvents=new MetricsReportingEvents();exports['default'] = metricsReportingEvents;module.exports = exports['default'];
	//# sourceMappingURL=MetricsReportingEvents.js.map


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _MetricsController=__webpack_require__(245);var _MetricsController2=_interopRequireDefault(_MetricsController);var _utilsManifestParsing=__webpack_require__(259);var _utilsManifestParsing2=_interopRequireDefault(_utilsManifestParsing);var _MetricsReportingEvents=__webpack_require__(243);var _MetricsReportingEvents2=_interopRequireDefault(_MetricsReportingEvents);function MetricsCollectionController(config){config = config || {};var metricsControllers={};var context=this.context;var eventBus=config.eventBus;var events=config.events;function update(e){if(e.error){return;} // start by assuming all existing controllers need removing
	var controllersToRemove=Object.keys(metricsControllers);var metrics=(0,_utilsManifestParsing2['default'])(context).getInstance({dashManifestModel:config.dashManifestModel,constants:config.constants}).getMetrics(e.manifest);metrics.forEach(function(m){var key=JSON.stringify(m);if(!metricsControllers.hasOwnProperty(key)){try{var controller=(0,_MetricsController2['default'])(context).create(config);controller.initialize(m);metricsControllers[key] = controller;}catch(e) { // fail quietly
	}}else { // we still need this controller - delete from removal list
	controllersToRemove.splice(key,1);}}); // now remove the unwanted controllers
	controllersToRemove.forEach(function(c){metricsControllers[c].reset();delete metricsControllers[c];});eventBus.trigger(_MetricsReportingEvents2['default'].METRICS_INITIALISATION_COMPLETE);}function resetMetricsControllers(){Object.keys(metricsControllers).forEach(function(key){metricsControllers[key].reset();});metricsControllers = {};}function setup(){eventBus.on(events.MANIFEST_UPDATED,update);eventBus.on(events.STREAM_TEARDOWN_COMPLETE,resetMetricsControllers);}function reset(){eventBus.off(events.MANIFEST_UPDATED,update);eventBus.off(events.STREAM_TEARDOWN_COMPLETE,resetMetricsControllers);}setup();return {reset:reset};}MetricsCollectionController.__dashjs_factory_name = 'MetricsCollectionController';exports['default'] = dashjs.FactoryMaker.getClassFactory(MetricsCollectionController); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=MetricsCollectionController.js.map


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _RangeController=__webpack_require__(246);var _RangeController2=_interopRequireDefault(_RangeController);var _ReportingController=__webpack_require__(247);var _ReportingController2=_interopRequireDefault(_ReportingController);var _MetricsHandlersController=__webpack_require__(252);var _MetricsHandlersController2=_interopRequireDefault(_MetricsHandlersController);function MetricsController(config){config = config || {};var metricsHandlersController=undefined,reportingController=undefined,rangeController=undefined,instance=undefined;var context=this.context;function initialize(metricsEntry){try{rangeController = (0,_RangeController2['default'])(context).create({mediaElement:config.mediaElement});rangeController.initialize(metricsEntry.Range);reportingController = (0,_ReportingController2['default'])(context).create({debug:config.debug,metricsConstants:config.metricsConstants});reportingController.initialize(metricsEntry.Reporting,rangeController);metricsHandlersController = (0,_MetricsHandlersController2['default'])(context).create({debug:config.debug,eventBus:config.eventBus,metricsConstants:config.metricsConstants,events:config.events});metricsHandlersController.initialize(metricsEntry.metrics,reportingController);}catch(e) {reset();throw e;}}function reset(){if(metricsHandlersController){metricsHandlersController.reset();}if(reportingController){reportingController.reset();}if(rangeController){rangeController.reset();}}instance = {initialize:initialize,reset:reset};return instance;}MetricsController.__dashjs_factory_name = 'MetricsController';exports['default'] = dashjs.FactoryMaker.getClassFactory(MetricsController); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=MetricsController.js.map


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _utilsCustomTimeRanges=__webpack_require__(72);var _utilsCustomTimeRanges2=_interopRequireDefault(_utilsCustomTimeRanges);function RangeController(config){config = config || {};var useWallClockTime=false;var context=this.context;var instance=undefined,ranges=undefined;var mediaElement=config.mediaElement;function initialize(rs){if(rs && rs.length){rs.forEach(function(r){var start=r.starttime;var end=start + r.duration;ranges.add(start,end);});useWallClockTime = !!rs[0]._useWallClockTime;}}function reset(){ranges.clear();}function setup(){ranges = (0,_utilsCustomTimeRanges2['default'])(context).create();}function isEnabled(){var numRanges=ranges.length;var time=undefined;if(!numRanges){return true;} // When not present, DASH Metrics reporting is requested
	// for the whole duration of the content.
	time = useWallClockTime?new Date().getTime() / 1000:mediaElement.currentTime;for(var i=0;i < numRanges;i += 1) {var start=ranges.start(i);var end=ranges.end(i);if(start <= time && time < end){return true;}}return false;}instance = {initialize:initialize,reset:reset,isEnabled:isEnabled};setup();return instance;}RangeController.__dashjs_factory_name = 'RangeController';exports['default'] = dashjs.FactoryMaker.getClassFactory(RangeController); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=RangeController.js.map


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _reportingReportingFactory=__webpack_require__(248);var _reportingReportingFactory2=_interopRequireDefault(_reportingReportingFactory);function ReportingController(config){var reporters=[];var instance=undefined;var reportingFactory=(0,_reportingReportingFactory2['default'])(this.context).getInstance(config);function initialize(reporting,rangeController){ // "if multiple Reporting elements are present, it is expected that
	// the client processes one of the recognized reporting schemes."
	// to ignore this, and support multiple Reporting per Metric,
	// simply change the 'some' below to 'forEach'
	reporting.some(function(r){var reporter=reportingFactory.create(r,rangeController);if(reporter){reporters.push(reporter);return true;}});}function reset(){reporters.forEach(function(r){return r.reset();});reporters = [];}function report(type,vos){reporters.forEach(function(r){return r.report(type,vos);});}instance = {initialize:initialize,reset:reset,report:report};return instance;}ReportingController.__dashjs_factory_name = 'ReportingController';exports['default'] = dashjs.FactoryMaker.getClassFactory(ReportingController); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=ReportingController.js.map


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _reportersDVBReporting=__webpack_require__(249);var _reportersDVBReporting2=_interopRequireDefault(_reportersDVBReporting);function ReportingFactory(config){config = config || {};var knownReportingSchemeIdUris={'urn:dvb:dash:reporting:2014':_reportersDVBReporting2['default']};var context=this.context;var debug=config.debug;var metricsConstants=config.metricsConstants;var instance=undefined;function create(entry,rangeController){var reporting=undefined;try{reporting = knownReportingSchemeIdUris[entry.schemeIdUri](context).create({metricsConstants:metricsConstants});reporting.initialize(entry,rangeController);}catch(e) {reporting = null;debug.error('ReportingFactory: could not create Reporting with schemeIdUri ' + entry.schemeIdUri + ' (' + e.message + ')');}return reporting;}function register(schemeIdUri,moduleName){knownReportingSchemeIdUris[schemeIdUri] = moduleName;}function unregister(schemeIdUri){delete knownReportingSchemeIdUris[schemeIdUri];}instance = {create:create,register:register,unregister:unregister};return instance;}ReportingFactory.__dashjs_factory_name = 'ReportingFactory';exports['default'] = dashjs.FactoryMaker.getSingletonFactory(ReportingFactory); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=ReportingFactory.js.map


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _utilsMetricSerialiser=__webpack_require__(250);var _utilsMetricSerialiser2=_interopRequireDefault(_utilsMetricSerialiser);var _utilsRNG=__webpack_require__(251);var _utilsRNG2=_interopRequireDefault(_utilsRNG);function DVBReporting(config){config = config || {};var instance=undefined;var context=this.context;var metricSerialiser=(0,_utilsMetricSerialiser2['default'])(context).getInstance();var randomNumberGenerator=(0,_utilsRNG2['default'])(context).getInstance();var USE_DRAFT_DVB_SPEC=true;var isReportingPlayer=false;var reportingPlayerStatusDecided=false;var reportingUrl=null;var rangeController=null;var allowPendingRequestsToCompleteOnReset=true;var pendingRequests=[];var metricsConstants=config.metricsConstants;function doGetRequest(url,successCB,failureCB){var req=new XMLHttpRequest();var oncomplete=function oncomplete(){var reqIndex=pendingRequests.indexOf(req);if(reqIndex === -1){return;}else {pendingRequests.splice(reqIndex,1);}if(req.status >= 200 && req.status < 300){if(successCB){successCB();}}else {if(failureCB){failureCB();}}};pendingRequests.push(req);try{req.open('GET',url);req.onloadend = oncomplete;req.onerror = oncomplete;req.send();}catch(e) {req.onerror();}}function report(type,vos){if(!Array.isArray(vos)){vos = [vos];} // If the Player is not a reporting Player, then the Player shall
	// not report any errors.
	// ... In addition to any time restrictions specified by a Range
	// element within the Metrics element.
	if(isReportingPlayer && rangeController.isEnabled()){ // This reporting mechanism operates by creating one HTTP GET
	// request for every entry in the top level list of the metric.
	vos.forEach(function(vo){var url=metricSerialiser.serialise(vo); // this has been proposed for errata
	if(USE_DRAFT_DVB_SPEC && type !== metricsConstants.DVB_ERRORS){url = 'metricname=' + type + '&' + url;} // Take the value of the @reportingUrl attribute, append a
	// question mark ('?') character and then append the string
	// created in the previous step.
	url = reportingUrl + '?' + url; // Make an HTTP GET request to the URL contained within the
	// string created in the previous step.
	doGetRequest(url,null,function(){ // If the Player is unable to make the report, for
	// example because the @reportingUrl is invalid, the
	// host cannot be reached, or an HTTP status code other
	// than one in the 200 series is received, the Player
	// shall cease being a reporting Player for the
	// duration of the MPD.
	isReportingPlayer = false;});});}}function initialize(entry,rc){var probability=undefined;rangeController = rc;reportingUrl = entry['dvb:reportingUrl']; // If a required attribute is missing, the Reporting descriptor may
	// be ignored by the Player
	if(!reportingUrl){throw new Error('required parameter missing (dvb:reportingUrl)');} // A Player's status, as a reporting Player or not, shall remain
	// static for the duration of the MPD, regardless of MPD updates.
	// (i.e. only calling reset (or failure) changes this state)
	if(!reportingPlayerStatusDecided){ // NOTE: DVB spec has a typo where it incorrectly references the
	// priority attribute, which should be probability
	probability = entry['dvb:probability'] || entry['dvb:priority'] || 0; // If the @priority attribute is set to 1000, it shall be a reporting Player.
	// If the @priority attribute is missing, the Player shall not be a reporting Player.
	// For any other value of the @probability attribute, it shall decide at random whether to be a
	// reporting Player, such that the probability of being one is @probability/1000.
	if(probability && (probability === 1000 || probability / 1000 >= randomNumberGenerator.random())){isReportingPlayer = true;}reportingPlayerStatusDecided = true;}}function reset(){if(!allowPendingRequestsToCompleteOnReset){pendingRequests.forEach(function(req){return req.abort();});pendingRequests = [];}reportingPlayerStatusDecided = false;isReportingPlayer = false;reportingUrl = null;rangeController = null;}instance = {report:report,initialize:initialize,reset:reset};return instance;}DVBReporting.__dashjs_factory_name = 'DVBReporting';exports['default'] = dashjs.FactoryMaker.getClassFactory(DVBReporting); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=DVBReporting.js.map


/***/ }),
/* 250 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function MetricSerialiser(){ // For each entry in the top level list within the metric (in the case
	// of the DVBErrors metric each entry corresponds to an "error event"
	// described in clause 10.8.4) the Player shall:
	function serialise(metric){var pairs=[];var obj=[];var key=undefined,value=undefined; // Take each (key, value) pair from the metric entry and create a
	// string consisting of the name of the key, followed by an equals
	// ('=') character, followed by the string representation of the
	// value. The string representation of the value is created based
	// on the type of the value following the instructions in Table 22.
	for(key in metric) {if(metric.hasOwnProperty(key) && key.indexOf('_') !== 0){value = metric[key]; // we want to ensure that keys still end up in the report
	// even if there is no value
	if(value === undefined || value === null){value = '';} // DVB A168 10.12.4 Table 22
	if(Array.isArray(value)){ // if trace or similar is null, do not include in output
	if(!value.length){continue;}obj = [];value.forEach(function(v){var isBuiltIn=Object.prototype.toString.call(v).slice(8,-1) !== 'Object';obj.push(isBuiltIn?v:serialise(v));});value = obj.map(encodeURIComponent).join(',');}else if(typeof value === 'string'){value = encodeURIComponent(value);}else if(value instanceof Date){value = value.toISOString();}else if(typeof value === 'number'){value = Math.round(value);}pairs.push(key + '=' + value);}} // Concatenate the strings created in the previous step with an
	// ampersand ('&') character between each one.
	return pairs.join('&');}return {serialise:serialise};}MetricSerialiser.__dashjs_factory_name = 'MetricSerialiser';exports['default'] = dashjs.FactoryMaker.getSingletonFactory(MetricSerialiser); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=MetricSerialiser.js.map


/***/ }),
/* 251 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function RNG(){ // check whether secure random numbers are available. if not, revert to
	// using Math.random
	var crypto=window.crypto || window.msCrypto; // could just as easily use any other array type by changing line below
	var ArrayType=Uint32Array;var MAX_VALUE=Math.pow(2,ArrayType.BYTES_PER_ELEMENT * 8) - 1; // currently there is only one client for this code, and that only uses
	// a single random number per initialisation. may want to increase this
	// number if more consumers in the future
	var NUM_RANDOM_NUMBERS=10;var randomNumbers=undefined,index=undefined,instance=undefined;function initialise(){if(crypto){if(!randomNumbers){randomNumbers = new ArrayType(NUM_RANDOM_NUMBERS);}crypto.getRandomValues(randomNumbers);index = 0;}}function rand(min,max){var r=undefined;if(!min){min = 0;}if(!max){max = 1;}if(crypto){if(index === randomNumbers.length){initialise();}r = randomNumbers[index] / MAX_VALUE;index += 1;}else {r = Math.random();}return r * (max - min) + min;}instance = {random:rand};initialise();return instance;}RNG.__dashjs_factory_name = 'RNG';exports['default'] = dashjs.FactoryMaker.getSingletonFactory(RNG); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=RNG.js.map


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _metricsMetricsHandlerFactory=__webpack_require__(253);var _metricsMetricsHandlerFactory2=_interopRequireDefault(_metricsMetricsHandlerFactory);function MetricsHandlersController(config){config = config || {};var handlers=[];var instance=undefined;var context=this.context;var eventBus=config.eventBus;var Events=config.events;var metricsHandlerFactory=(0,_metricsMetricsHandlerFactory2['default'])(context).getInstance({debug:config.debug,eventBus:config.eventBus,metricsConstants:config.metricsConstants});function handle(e){handlers.forEach(function(handler){handler.handleNewMetric(e.metric,e.value,e.mediaType);});}function initialize(metrics,reportingController){metrics.split(',').forEach(function(m,midx,ms){var handler=undefined; // there is a bug in ISO23009-1 where the metrics attribute
	// is a comma-separated list but HttpList key can contain a
	// comma enclosed by ().
	if(m.indexOf('(') !== -1 && m.indexOf(')') === -1){var nextm=ms[midx + 1];if(nextm && nextm.indexOf('(') === -1 && nextm.indexOf(')') !== -1){m += ',' + nextm; // delete the next metric so forEach does not visit.
	delete ms[midx + 1];}}handler = metricsHandlerFactory.create(m,reportingController);if(handler){handlers.push(handler);}});eventBus.on(Events.METRIC_ADDED,handle,instance);eventBus.on(Events.METRIC_UPDATED,handle,instance);}function reset(){eventBus.off(Events.METRIC_ADDED,handle,instance);eventBus.off(Events.METRIC_UPDATED,handle,instance);handlers.forEach(function(handler){return handler.reset();});handlers = [];}instance = {initialize:initialize,reset:reset};return instance;}MetricsHandlersController.__dashjs_factory_name = 'MetricsHandlersController';exports['default'] = dashjs.FactoryMaker.getClassFactory(MetricsHandlersController); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=MetricsHandlersController.js.map


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _handlersBufferLevelHandler=__webpack_require__(254);var _handlersBufferLevelHandler2=_interopRequireDefault(_handlersBufferLevelHandler);var _handlersDVBErrorsHandler=__webpack_require__(256);var _handlersDVBErrorsHandler2=_interopRequireDefault(_handlersDVBErrorsHandler);var _handlersHttpListHandler=__webpack_require__(257);var _handlersHttpListHandler2=_interopRequireDefault(_handlersHttpListHandler);var _handlersGenericMetricHandler=__webpack_require__(258);var _handlersGenericMetricHandler2=_interopRequireDefault(_handlersGenericMetricHandler);function MetricsHandlerFactory(config){config = config || {};var instance=undefined;var debug=config.debug; // group 1: key, [group 3: n [, group 5: type]]
	var keyRegex=/([a-zA-Z]*)(\(([0-9]*)(\,\s*([a-zA-Z]*))?\))?/;var context=this.context;var knownFactoryProducts={BufferLevel:_handlersBufferLevelHandler2['default'],DVBErrors:_handlersDVBErrorsHandler2['default'],HttpList:_handlersHttpListHandler2['default'],PlayList:_handlersGenericMetricHandler2['default'],RepSwitchList:_handlersGenericMetricHandler2['default'],TcpList:_handlersGenericMetricHandler2['default']};function create(listType,reportingController){var matches=listType.match(keyRegex);var handler;if(!matches){return;}try{handler = knownFactoryProducts[matches[1]](context).create({eventBus:config.eventBus,metricsConstants:config.metricsConstants});handler.initialize(matches[1],reportingController,matches[3],matches[5]);}catch(e) {handler = null;debug.error('MetricsHandlerFactory: Could not create handler for type ' + matches[1] + ' with args ' + matches[3] + ', ' + matches[5] + ' (' + e.message + ')');}return handler;}function register(key,handler){knownFactoryProducts[key] = handler;}function unregister(key){delete knownFactoryProducts[key];}instance = {create:create,register:register,unregister:unregister};return instance;}MetricsHandlerFactory.__dashjs_factory_name = 'MetricsHandlerFactory';exports['default'] = dashjs.FactoryMaker.getSingletonFactory(MetricsHandlerFactory); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=MetricsHandlerFactory.js.map


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _utilsHandlerHelpers=__webpack_require__(255);var _utilsHandlerHelpers2=_interopRequireDefault(_utilsHandlerHelpers);function BufferLevelHandler(config){config = config || {};var instance=undefined,reportingController=undefined,n=undefined,name=undefined,interval=undefined,lastReportedTime=undefined;var context=this.context;var handlerHelpers=(0,_utilsHandlerHelpers2['default'])(context).getInstance();var storedVOs=[];var metricsConstants=config.metricsConstants;function getLowestBufferLevelVO(){try{return Object.keys(storedVOs).map(function(key){return storedVOs[key];}).reduce(function(a,b){return a.level < b.level?a:b;});}catch(e) {return;}}function intervalCallback(){var vo=getLowestBufferLevelVO();if(vo){if(lastReportedTime !== vo.t){lastReportedTime = vo.t;reportingController.report(name,vo);}}}function initialize(basename,rc,n_ms){if(rc){ // this will throw if n is invalid, to be
	// caught by the initialize caller.
	n = handlerHelpers.validateN(n_ms);reportingController = rc;name = handlerHelpers.reconstructFullMetricName(basename,n_ms);interval = setInterval(intervalCallback,n);}}function reset(){clearInterval(interval);interval = null;n = 0;reportingController = null;lastReportedTime = null;}function handleNewMetric(metric,vo,type){if(metric === metricsConstants.BUFFER_LEVEL){storedVOs[type] = vo;}}instance = {initialize:initialize,reset:reset,handleNewMetric:handleNewMetric};return instance;}BufferLevelHandler.__dashjs_factory_name = 'BufferLevelHandler';exports['default'] = dashjs.FactoryMaker.getClassFactory(BufferLevelHandler); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=BufferLevelHandler.js.map


/***/ }),
/* 255 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function HandlerHelpers(){return {reconstructFullMetricName:function reconstructFullMetricName(key,n,type){var mn=key;if(n){mn += '(' + n;if(type && type.length){mn += ',' + type;}mn += ')';}return mn;},validateN:function validateN(n_ms){if(!n_ms){throw new Error('missing n');}if(isNaN(n_ms)){throw new Error('n is NaN');} // n is a positive integer is defined to refer to the metric
	// in which the buffer level is recorded every n ms.
	if(n_ms < 0){throw new Error('n must be positive');}return n_ms;}};}HandlerHelpers.__dashjs_factory_name = 'HandlerHelpers';exports['default'] = dashjs.FactoryMaker.getSingletonFactory(HandlerHelpers); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=HandlerHelpers.js.map


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _MetricsReportingEvents=__webpack_require__(243);var _MetricsReportingEvents2=_interopRequireDefault(_MetricsReportingEvents);function DVBErrorsHandler(config){config = config || {};var instance=undefined,reportingController=undefined;var eventBus=config.eventBus;var metricsConstants=config.metricsConstants;function onInitialisationComplete(){ // we only want to report this once per call to initialize
	eventBus.off(_MetricsReportingEvents2['default'].METRICS_INITIALISATION_COMPLETE,onInitialisationComplete,this); // Note: A Player becoming a reporting Player is itself
	// something which is recorded by the DVBErrors metric.
	eventBus.trigger(_MetricsReportingEvents2['default'].BECAME_REPORTING_PLAYER);}function initialize(unused,rc){if(rc){reportingController = rc;eventBus.on(_MetricsReportingEvents2['default'].METRICS_INITIALISATION_COMPLETE,onInitialisationComplete,this);}}function reset(){reportingController = null;}function handleNewMetric(metric,vo){ // simply pass metric straight through
	if(metric === metricsConstants.DVB_ERRORS){if(reportingController){reportingController.report(metric,vo);}}}instance = {initialize:initialize,reset:reset,handleNewMetric:handleNewMetric};return instance;}exports['default'] = dashjs.FactoryMaker.getClassFactory(DVBErrorsHandler); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=DVBErrorsHandler.js.map


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _utilsHandlerHelpers=__webpack_require__(255);var _utilsHandlerHelpers2=_interopRequireDefault(_utilsHandlerHelpers);function HttpListHandler(config){config = config || {};var instance=undefined,reportingController=undefined,n=undefined,type=undefined,name=undefined,interval=undefined;var storedVos=[];var handlerHelpers=(0,_utilsHandlerHelpers2['default'])(this.context).getInstance();var metricsConstants=config.metricsConstants;function intervalCallback(){var vos=storedVos;if(vos.length){if(reportingController){reportingController.report(name,vos);}}storedVos = [];}function initialize(basename,rc,n_ms,requestType){if(rc){ // this will throw if n is invalid, to be
	// caught by the initialize caller.
	n = handlerHelpers.validateN(n_ms);reportingController = rc;if(requestType && requestType.length){type = requestType;}name = handlerHelpers.reconstructFullMetricName(basename,n_ms,requestType);interval = setInterval(intervalCallback,n);}}function reset(){clearInterval(interval);interval = null;n = null;type = null;storedVos = [];reportingController = null;}function handleNewMetric(metric,vo){if(metric === metricsConstants.HTTP_REQUEST){if(!type || type === vo.type){storedVos.push(vo);}}}instance = {initialize:initialize,reset:reset,handleNewMetric:handleNewMetric};return instance;}HttpListHandler.__dashjs_factory_name = 'HttpListHandler';exports['default'] = dashjs.FactoryMaker.getClassFactory(HttpListHandler); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=HttpListHandler.js.map


/***/ }),
/* 258 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function GenericMetricHandler(){var instance=undefined,metricName=undefined,reportingController=undefined;function initialize(name,rc){metricName = name;reportingController = rc;}function reset(){reportingController = null;metricName = undefined;}function handleNewMetric(metric,vo){ // simply pass metric straight through
	if(metric === metricName){if(reportingController){reportingController.report(metricName,vo);}}}instance = {initialize:initialize,reset:reset,handleNewMetric:handleNewMetric};return instance;}GenericMetricHandler.__dashjs_factory_name = 'GenericMetricHandler';exports['default'] = dashjs.FactoryMaker.getClassFactory(GenericMetricHandler); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=GenericMetricHandler.js.map


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _voMetrics=__webpack_require__(260);var _voMetrics2=_interopRequireDefault(_voMetrics);var _voRange=__webpack_require__(261);var _voRange2=_interopRequireDefault(_voRange);var _voReporting=__webpack_require__(262);var _voReporting2=_interopRequireDefault(_voReporting);function ManifestParsing(config){config = config || {};var instance=undefined;var dashManifestModel=config.dashManifestModel;var constants=config.constants;function getMetricsRangeStartTime(manifest,dynamic,range){var mpd=dashManifestModel.getMpd(manifest);var voPeriods;var presentationStartTime=0;var reportingStartTime;if(dynamic){ // For services with MPD@type='dynamic', the start time is
	// indicated in wall clock time by adding the value of this
	// attribute to the value of the MPD@availabilityStartTime
	// attribute.
	presentationStartTime = mpd.availabilityStartTime.getTime() / 1000;}else { // For services with MPD@type='static', the start time is indicated
	// in Media Presentation time and is relative to the PeriodStart
	// time of the first Period in this MPD.
	voPeriods = this.getRegularPeriods(mpd);if(voPeriods.length){presentationStartTime = voPeriods[0].start;}} // When not present, DASH Metrics collection is
	// requested from the beginning of content
	// consumption.
	reportingStartTime = presentationStartTime;if(range && range.hasOwnProperty(constants.START_TIME)){reportingStartTime += range.starttime;}return reportingStartTime;}function getMetrics(manifest){var metrics=[];if(manifest.Metrics_asArray){manifest.Metrics_asArray.forEach(function(metric){var metricEntry=new _voMetrics2['default']();var isDynamic=dashManifestModel.getIsDynamic(manifest);if(metric.hasOwnProperty('metrics')){metricEntry.metrics = metric.metrics;}else {return;}if(metric.Range_asArray){metric.Range_asArray.forEach(function(range){var rangeEntry=new _voRange2['default']();rangeEntry.starttime = getMetricsRangeStartTime(manifest,isDynamic,range);if(range.hasOwnProperty('duration')){rangeEntry.duration = range.duration;}else { // if not present, the value is identical to the
	// Media Presentation duration.
	rangeEntry.duration = dashManifestModel.getDuration(manifest);}rangeEntry._useWallClockTime = isDynamic;metricEntry.Range.push(rangeEntry);});}if(metric.Reporting_asArray){metric.Reporting_asArray.forEach(function(reporting){var reportingEntry=new _voReporting2['default']();if(reporting.hasOwnProperty(constants.SCHEME_ID_URI)){reportingEntry.schemeIdUri = reporting.schemeIdUri;}else { // Invalid Reporting. schemeIdUri must be set. Ignore.
	return;}for(var prop in reporting) {if(reporting.hasOwnProperty(prop)){reportingEntry[prop] = reporting[prop];}}metricEntry.Reporting.push(reportingEntry);});}else { // Invalid Metrics. At least one reporting must be present. Ignore
	return;}metrics.push(metricEntry);});}return metrics;}instance = {getMetrics:getMetrics};return instance;}ManifestParsing.__dashjs_factory_name = 'ManifestParsing';exports['default'] = dashjs.FactoryMaker.getSingletonFactory(ManifestParsing); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=ManifestParsing.js.map


/***/ }),
/* 260 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var Metrics=function Metrics(){_classCallCheck(this,Metrics);this.metrics = '';this.Range = [];this.Reporting = [];};exports['default'] = Metrics;module.exports = exports['default'];
	//# sourceMappingURL=Metrics.js.map


/***/ }),
/* 261 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var Range=function Range(){_classCallCheck(this,Range); // as defined in ISO23009-1
	this.starttime = 0;this.duration = Infinity; // for internal use
	this._useWallClockTime = false;};exports["default"] = Range;module.exports = exports["default"];
	//# sourceMappingURL=Range.js.map


/***/ }),
/* 262 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var Reporting=function Reporting(){_classCallCheck(this,Reporting); // Reporting is a DescriptorType and doesn't have any additional fields
	this.schemeIdUri = '';this.value = '';};exports['default'] = Reporting;module.exports = exports['default'];
	//# sourceMappingURL=Reporting.js.map


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _controllersProtectionController=__webpack_require__(264);var _controllersProtectionController2=_interopRequireDefault(_controllersProtectionController);var _controllersProtectionKeyController=__webpack_require__(269);var _controllersProtectionKeyController2=_interopRequireDefault(_controllersProtectionKeyController);var _ProtectionEvents=__webpack_require__(281);var _ProtectionEvents2=_interopRequireDefault(_ProtectionEvents);var _errorsProtectionErrors=__webpack_require__(268);var _errorsProtectionErrors2=_interopRequireDefault(_errorsProtectionErrors);var _modelsProtectionModel_21Jan2015=__webpack_require__(282);var _modelsProtectionModel_21Jan20152=_interopRequireDefault(_modelsProtectionModel_21Jan2015);var _modelsProtectionModel_3Feb2014=__webpack_require__(286);var _modelsProtectionModel_3Feb20142=_interopRequireDefault(_modelsProtectionModel_3Feb2014);var _modelsProtectionModel_01b=__webpack_require__(287);var _modelsProtectionModel_01b2=_interopRequireDefault(_modelsProtectionModel_01b);var APIS_ProtectionModel_01b=[ // Un-prefixed as per spec
	{ // Video Element
	generateKeyRequest:'generateKeyRequest',addKey:'addKey',cancelKeyRequest:'cancelKeyRequest', // Events
	needkey:'needkey',keyerror:'keyerror',keyadded:'keyadded',keymessage:'keymessage'}, // Webkit-prefixed (early Chrome versions and Chrome with EME disabled in chrome://flags)
	{ // Video Element
	generateKeyRequest:'webkitGenerateKeyRequest',addKey:'webkitAddKey',cancelKeyRequest:'webkitCancelKeyRequest', // Events
	needkey:'webkitneedkey',keyerror:'webkitkeyerror',keyadded:'webkitkeyadded',keymessage:'webkitkeymessage'}];var APIS_ProtectionModel_3Feb2014=[ // Un-prefixed as per spec
	// Chrome 38-39 (and some earlier versions) with chrome://flags -- Enable Encrypted Media Extensions
	{ // Video Element
	setMediaKeys:'setMediaKeys', // MediaKeys
	MediaKeys:'MediaKeys', // MediaKeySession
	release:'close', // Events
	needkey:'needkey',error:'keyerror',message:'keymessage',ready:'keyadded',close:'keyclose'}, // MS-prefixed (IE11, Windows 8.1)
	{ // Video Element
	setMediaKeys:'msSetMediaKeys', // MediaKeys
	MediaKeys:'MSMediaKeys', // MediaKeySession
	release:'close', // Events
	needkey:'msneedkey',error:'mskeyerror',message:'mskeymessage',ready:'mskeyadded',close:'mskeyclose'}];function Protection(){var instance=undefined;var context=this.context; /**
	     * Create a ProtectionController and associated ProtectionModel for use with
	     * a single piece of content.
	     *
	     * @param {Object} config
	     * @return {ProtectionController} protection controller
	     *
	     */function createProtectionSystem(config){var controller=null;var protectionKeyController=(0,_controllersProtectionKeyController2['default'])(context).getInstance();protectionKeyController.setConfig({debug:config.debug,BASE64:config.BASE64});protectionKeyController.initialize();var protectionModel=getProtectionModel(config);if(!controller && protectionModel){ //TODO add ability to set external controller if still needed at all?
	controller = (0,_controllersProtectionController2['default'])(context).create({protectionModel:protectionModel,protectionKeyController:protectionKeyController,eventBus:config.eventBus,debug:config.debug,events:config.events,BASE64:config.BASE64,constants:config.constants});config.capabilities.setEncryptedMediaSupported(true);}return controller;}function getProtectionModel(config){var debug=config.debug;var logger=debug.getLogger(instance);var eventBus=config.eventBus;var errHandler=config.errHandler;var videoElement=config.videoModel?config.videoModel.getElement():null;if((!videoElement || videoElement.onencrypted !== undefined) && (!videoElement || videoElement.mediaKeys !== undefined)){logger.info('EME detected on this user agent! (ProtectionModel_21Jan2015)');return (0,_modelsProtectionModel_21Jan20152['default'])(context).create({debug:debug,eventBus:eventBus,events:config.events});}else if(getAPI(videoElement,APIS_ProtectionModel_3Feb2014)){logger.info('EME detected on this user agent! (ProtectionModel_3Feb2014)');return (0,_modelsProtectionModel_3Feb20142['default'])(context).create({debug:debug,eventBus:eventBus,events:config.events,api:getAPI(videoElement,APIS_ProtectionModel_3Feb2014)});}else if(getAPI(videoElement,APIS_ProtectionModel_01b)){logger.info('EME detected on this user agent! (ProtectionModel_01b)');return (0,_modelsProtectionModel_01b2['default'])(context).create({debug:debug,eventBus:eventBus,errHandler:errHandler,events:config.events,api:getAPI(videoElement,APIS_ProtectionModel_01b)});}else {logger.warn('No supported version of EME detected on this user agent! - Attempts to play encrypted content will fail!');return null;}}function getAPI(videoElement,apis){for(var i=0;i < apis.length;i++) {var api=apis[i]; // detect if api is supported by browser
	// check only first function in api -> should be fine
	if(typeof videoElement[api[Object.keys(api)[0]]] !== 'function'){continue;}return api;}return null;}instance = {createProtectionSystem:createProtectionSystem};return instance;}Protection.__dashjs_factory_name = 'Protection';var factory=dashjs.FactoryMaker.getClassFactory(Protection); /* jshint ignore:line */factory.events = _ProtectionEvents2['default'];factory.errors = _errorsProtectionErrors2['default'];dashjs.FactoryMaker.updateClassFactory(Protection.__dashjs_factory_name,factory); /* jshint ignore:line */exports['default'] = factory;module.exports = exports['default'];
	//# sourceMappingURL=Protection.js.map


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _CommonEncryption=__webpack_require__(265);var _CommonEncryption2=_interopRequireDefault(_CommonEncryption);var _voMediaCapability=__webpack_require__(266);var _voMediaCapability2=_interopRequireDefault(_voMediaCapability);var _voKeySystemConfiguration=__webpack_require__(267);var _voKeySystemConfiguration2=_interopRequireDefault(_voKeySystemConfiguration);var _errorsProtectionErrors=__webpack_require__(268);var _errorsProtectionErrors2=_interopRequireDefault(_errorsProtectionErrors);var _voDashJSError=__webpack_require__(62);var _voDashJSError2=_interopRequireDefault(_voDashJSError);var NEEDKEY_BEFORE_INITIALIZE_RETRIES=5;var NEEDKEY_BEFORE_INITIALIZE_TIMEOUT=500;var LICENSE_SERVER_REQUEST_RETRIES=3;var LICENSE_SERVER_REQUEST_RETRY_INTERVAL=1000;var LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT=8000; /**
	 * @module ProtectionController
	 * @description Provides access to media protection information and functionality.  Each
	 * ProtectionController manages a single {@link MediaPlayer.models.ProtectionModel}
	 * which encapsulates a set of protection information (EME APIs, selected key system,
	 * key sessions).  The APIs of ProtectionController mostly align with the latest EME
	 * APIs.  Key system selection is mostly automated when combined with app-overrideable
	 * functionality provided in {@link ProtectionKeyController}.
	 * @todo ProtectionController does almost all of its tasks automatically after init() is
	 * called.  Applications might want more control over this process and want to go through
	 * each step manually (key system selection, session creation, session maintenance).
	 * @param {Object} config
	 */function ProtectionController(config){config = config || {};var protectionKeyController=config.protectionKeyController;var protectionModel=config.protectionModel;var eventBus=config.eventBus;var events=config.events;var debug=config.debug;var BASE64=config.BASE64;var constants=config.constants;var needkeyRetries=[];var instance=undefined,logger=undefined,pendingNeedKeyData=undefined,mediaInfoArr=undefined,protDataSet=undefined,sessionType=undefined,robustnessLevel=undefined,keySystem=undefined;function setup(){logger = debug.getLogger(instance);pendingNeedKeyData = [];mediaInfoArr = [];sessionType = 'temporary';robustnessLevel = '';}function checkConfig(){if(!eventBus || !eventBus.hasOwnProperty('on') || !protectionKeyController || !protectionKeyController.hasOwnProperty('getSupportedKeySystemsFromContentProtection')){throw new Error('Missing config parameter(s)');}} /**
	     * Initialize this protection system with a given audio
	     * or video stream information.
	     *
	     * @param {StreamInfo} [mediaInfo] Media information
	     * @memberof module:ProtectionController
	     * @instance
	     * @todo This API will change when we have better support for allowing applications
	     * to select different adaptation sets for playback.  Right now it is clunky for
	     * applications to create {@link StreamInfo} with the right information,
	     */function initializeForMedia(mediaInfo){ // Not checking here if a session for similar KS/KID combination is already created
	// because still don't know which keysystem will be selected.
	// Once Keysystem is selected and before creating the session, we will do that check
	// so we create the strictly necessary DRM sessions
	if(!mediaInfo){throw new Error('mediaInfo can not be null or undefined');}checkConfig();eventBus.on(events.INTERNAL_KEY_MESSAGE,onKeyMessage,this);eventBus.on(events.INTERNAL_KEY_STATUS_CHANGED,onKeyStatusChanged,this);mediaInfoArr.push(mediaInfo); // ContentProtection elements are specified at the AdaptationSet level, so the CP for audio
	// and video will be the same.  Just use one valid MediaInfo object
	var supportedKS=protectionKeyController.getSupportedKeySystemsFromContentProtection(mediaInfo.contentProtection);if(supportedKS && supportedKS.length > 0){selectKeySystem(supportedKS,true);}} /**
	     * Returns a set of supported key systems and CENC initialization data
	     * from the given array of ContentProtection elements.  Only
	     * key systems that are supported by this player will be returned.
	     * Key systems are returned in priority order (highest first).
	     *
	     * @param {Array.<Object>} cps - array of content protection elements parsed
	     * from the manifest
	     * @returns {Array.<Object>} array of objects indicating which supported key
	     * systems were found.  Empty array is returned if no
	     * supported key systems were found
	     * @memberof module:ProtectionKeyController
	     * @instance
	     */function getSupportedKeySystemsFromContentProtection(cps){return protectionKeyController.getSupportedKeySystemsFromContentProtection(cps);} /**
	     * Create a new key session associated with the given initialization data from
	     * the MPD or from the PSSH box in the media
	     *
	     * @param {ArrayBuffer} initData the initialization data
	     * @param {Uint8Array} cdmData the custom data to provide to licenser
	     * @memberof module:ProtectionController
	     * @instance
	     * @fires ProtectionController#KeySessionCreated
	     * @todo In older versions of the EME spec, there was a one-to-one relationship between
	     * initialization data and key sessions.  That is no longer true in the latest APIs.  This
	     * API will need to modified (and a new "generateRequest(keySession, initData)" API created)
	     * to come up to speed with the latest EME standard
	     */function createKeySession(initData,cdmData){var initDataForKS=_CommonEncryption2['default'].getPSSHForKeySystem(keySystem,initData);var protData=getProtData(keySystem);if(initDataForKS){ // Check for duplicate initData
	var currentInitData=protectionModel.getAllInitData();for(var i=0;i < currentInitData.length;i++) {if(protectionKeyController.initDataEquals(initDataForKS,currentInitData[i])){logger.warn('DRM: Ignoring initData because we have already seen it!');return;}}try{protectionModel.createKeySession(initDataForKS,protData,getSessionType(keySystem),cdmData);}catch(error) {eventBus.trigger(events.KEY_SESSION_CREATED,{data:null,error:new _voDashJSError2['default'](_errorsProtectionErrors2['default'].KEY_SESSION_CREATED_ERROR_CODE,_errorsProtectionErrors2['default'].KEY_SESSION_CREATED_ERROR_MESSAGE + error.message)});}}else if(initData){protectionModel.createKeySession(initData,protData,getSessionType(keySystem),cdmData);}else {eventBus.trigger(events.KEY_SESSION_CREATED,{data:null,error:new _voDashJSError2['default'](_errorsProtectionErrors2['default'].KEY_SESSION_CREATED_ERROR_CODE,_errorsProtectionErrors2['default'].KEY_SESSION_CREATED_ERROR_MESSAGE + 'Selected key system is ' + keySystem.systemString + '.  needkey/encrypted event contains no initData corresponding to that key system!')});}} /**
	     * Loads a key session with the given session ID from persistent storage.  This
	     * essentially creates a new key session
	     *
	     * @param {string} sessionID
	     * @param {string} initData
	     * @memberof module:ProtectionController
	     * @instance
	     * @fires ProtectionController#KeySessionCreated
	     */function loadKeySession(sessionID,initData){protectionModel.loadKeySession(sessionID,initData,getSessionType(keySystem));} /**
	     * Removes the given key session from persistent storage and closes the session
	     * as if {@link ProtectionController#closeKeySession}
	     * was called
	     *
	     * @param {SessionToken} sessionToken the session
	     * token
	     * @memberof module:ProtectionController
	     * @instance
	     * @fires ProtectionController#KeySessionRemoved
	     * @fires ProtectionController#KeySessionClosed
	     */function removeKeySession(sessionToken){protectionModel.removeKeySession(sessionToken);} /**
	     * Closes the key session and releases all associated decryption keys.  These
	     * keys will no longer be available for decrypting media
	     *
	     * @param {SessionToken} sessionToken the session
	     * token
	     * @memberof module:ProtectionController
	     * @instance
	     * @fires ProtectionController#KeySessionClosed
	     */function closeKeySession(sessionToken){protectionModel.closeKeySession(sessionToken);} /**
	     * Sets a server certificate for use by the CDM when signing key messages
	     * intended for a particular license server.  This will fire
	     * an error event if a key system has not yet been selected.
	     *
	     * @param {ArrayBuffer} serverCertificate a CDM-specific license server
	     * certificate
	     * @memberof module:ProtectionController
	     * @instance
	     * @fires ProtectionController#ServerCertificateUpdated
	     */function setServerCertificate(serverCertificate){protectionModel.setServerCertificate(serverCertificate);} /**
	     * Associate this protection system with the given HTMLMediaElement.  This
	     * causes the system to register for needkey/encrypted events from the given
	     * element and provides a destination for setting of MediaKeys
	     *
	     * @param {HTMLMediaElement} element the media element to which the protection
	     * system should be associated
	     * @memberof module:ProtectionController
	     * @instance
	     */function setMediaElement(element){if(element){protectionModel.setMediaElement(element);eventBus.on(events.NEED_KEY,onNeedKey,this);}else if(element === null){protectionModel.setMediaElement(element);eventBus.off(events.NEED_KEY,onNeedKey,this);}} /**
	     * Sets the session type to use when creating key sessions.  Either "temporary" or
	     * "persistent-license".  Default is "temporary".
	     *
	     * @param {string} value the session type
	     * @memberof module:ProtectionController
	     * @instance
	     */function setSessionType(value){sessionType = value;} /**
	     * Sets the robustness level for video and audio capabilities. Optional to remove Chrome warnings.
	     * Possible values are SW_SECURE_CRYPTO, SW_SECURE_DECODE, HW_SECURE_CRYPTO, HW_SECURE_CRYPTO, HW_SECURE_DECODE, HW_SECURE_ALL.
	     *
	     * @param {string} level the robustness level
	     * @memberof module:ProtectionController
	     * @instance
	     */function setRobustnessLevel(level){robustnessLevel = level;} /**
	     * Attach KeySystem-specific data to use for license acquisition with EME
	     *
	     * @param {Object} data an object containing property names corresponding to
	     * key system name strings (e.g. "org.w3.clearkey") and associated values
	     * being instances of {@link ProtectionData}
	     * @memberof module:ProtectionController
	     * @instance
	     */function setProtectionData(data){protDataSet = data;protectionKeyController.setProtectionData(data);} /**
	     * Stop method is called when current playback is stopped/resetted.
	     *
	     * @memberof module:ProtectionController
	     * @instance
	     */function stop(){if(protectionModel){protectionModel.stop();}} /**
	     * Destroys all protection data associated with this protection set.  This includes
	     * deleting all key sessions. In the case of persistent key sessions, the sessions
	     * will simply be unloaded and not deleted.  Additionally, if this protection set is
	     * associated with a HTMLMediaElement, it will be detached from that element.
	     *
	     * @memberof module:ProtectionController
	     * @instance
	     */function reset(){eventBus.off(events.INTERNAL_KEY_MESSAGE,onKeyMessage,this);eventBus.off(events.INTERNAL_KEY_STATUS_CHANGED,onKeyStatusChanged,this);setMediaElement(null);keySystem = undefined; //TODO-Refactor look at why undefined is needed for this. refactor
	if(protectionModel){protectionModel.reset();protectionModel = null;}needkeyRetries.forEach(function(retryTimeout){return clearTimeout(retryTimeout);});needkeyRetries = [];mediaInfoArr = [];} ///////////////
	// Private
	///////////////
	function getProtData(keySystem){var protData=null;if(keySystem){var keySystemString=keySystem.systemString;if(protDataSet){protData = keySystemString in protDataSet?protDataSet[keySystemString]:null;}}return protData;}function getKeySystemConfiguration(keySystem){var protData=getProtData(keySystem);var audioCapabilities=[];var videoCapabilities=[];var audioRobustness=protData && protData.audioRobustness && protData.audioRobustness.length > 0?protData.audioRobustness:robustnessLevel;var videoRobustness=protData && protData.videoRobustness && protData.videoRobustness.length > 0?protData.videoRobustness:robustnessLevel;var ksSessionType=getSessionType(keySystem);var distinctiveIdentifier=protData && protData.distinctiveIdentifier?protData.distinctiveIdentifier:'optional';var persistentState=protData && protData.persistentState?protData.persistentState:ksSessionType === 'temporary'?'optional':'required';mediaInfoArr.forEach(function(media){if(media.type === constants.AUDIO){audioCapabilities.push(new _voMediaCapability2['default'](media.codec,audioRobustness));}else if(media.type === constants.VIDEO){videoCapabilities.push(new _voMediaCapability2['default'](media.codec,videoRobustness));}});return new _voKeySystemConfiguration2['default'](audioCapabilities,videoCapabilities,distinctiveIdentifier,persistentState,[ksSessionType]);}function getSessionType(keySystem){var protData=getProtData(keySystem);var ksSessionType=protData && protData.sessionType?protData.sessionType:sessionType;return ksSessionType;}function selectKeySystem(supportedKS,fromManifest){var self=this;var requestedKeySystems=[];var ksIdx=undefined;if(keySystem){ // We have a key system
	for(ksIdx = 0;ksIdx < supportedKS.length;ksIdx++) {if(keySystem === supportedKS[ksIdx].ks){var _ret=(function(){requestedKeySystems.push({ks:supportedKS[ksIdx].ks,configs:[getKeySystemConfiguration(keySystem)]}); // Ensure that we would be granted key system access using the key
	// system and codec information
	var onKeySystemAccessComplete=function onKeySystemAccessComplete(event){eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE,onKeySystemAccessComplete,self);if(event.error){if(!fromManifest){eventBus.trigger(events.KEY_SYSTEM_SELECTED,{error:new _voDashJSError2['default'](_errorsProtectionErrors2['default'].KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE,_errorsProtectionErrors2['default'].KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)});}}else {logger.info('DRM: KeySystem Access Granted');eventBus.trigger(events.KEY_SYSTEM_SELECTED,{data:event.data});if(supportedKS[ksIdx].sessionId){ // Load MediaKeySession with sessionId
	loadKeySession(supportedKS[ksIdx].sessionId,supportedKS[ksIdx].initData);}else if(supportedKS[ksIdx].initData){ // Create new MediaKeySession with initData
	createKeySession(supportedKS[ksIdx].initData,supportedKS[ksIdx].cdmData);}}};eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE,onKeySystemAccessComplete,self);protectionModel.requestKeySystemAccess(requestedKeySystems);return 'break';})();if(_ret === 'break')break;}}}else if(keySystem === undefined){var onKeySystemSelected;(function(){ // First time through, so we need to select a key system
	keySystem = null;pendingNeedKeyData.push(supportedKS); // Add all key systems to our request list since we have yet to select a key system
	for(var i=0;i < supportedKS.length;i++) {requestedKeySystems.push({ks:supportedKS[i].ks,configs:[getKeySystemConfiguration(supportedKS[i].ks)]});}var keySystemAccess=undefined;var onKeySystemAccessComplete=function onKeySystemAccessComplete(event){eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE,onKeySystemAccessComplete,self);if(event.error){keySystem = undefined;eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED,onKeySystemSelected,self);if(!fromManifest){eventBus.trigger(events.KEY_SYSTEM_SELECTED,{data:null,error:new _voDashJSError2['default'](_errorsProtectionErrors2['default'].KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE,_errorsProtectionErrors2['default'].KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + event.error)});}}else {keySystemAccess = event.data;logger.info('DRM: KeySystem Access Granted (' + keySystemAccess.keySystem.systemString + ')!  Selecting key system...');protectionModel.selectKeySystem(keySystemAccess);}};onKeySystemSelected = function onKeySystemSelected(event){eventBus.off(events.INTERNAL_KEY_SYSTEM_SELECTED,onKeySystemSelected,self);eventBus.off(events.KEY_SYSTEM_ACCESS_COMPLETE,onKeySystemAccessComplete,self);if(!event.error){if(!protectionModel){return;}keySystem = protectionModel.getKeySystem();eventBus.trigger(events.KEY_SYSTEM_SELECTED,{data:keySystemAccess}); // Set server certificate from protData
	var protData=getProtData(keySystem);if(protData && protData.serverCertificate && protData.serverCertificate.length > 0){protectionModel.setServerCertificate(BASE64.decodeArray(protData.serverCertificate).buffer);}for(var i=0;i < pendingNeedKeyData.length;i++) {for(ksIdx = 0;ksIdx < pendingNeedKeyData[i].length;ksIdx++) {if(keySystem === pendingNeedKeyData[i][ksIdx].ks){ // For Clearkey: if parameters for generating init data was provided by the user, use them for generating
	// initData and overwrite possible initData indicated in encrypted event (EME)
	if(protectionKeyController.isClearKey(keySystem) && protData && protData.hasOwnProperty('clearkeys')){var initData={kids:Object.keys(protData.clearkeys)};pendingNeedKeyData[i][ksIdx].initData = new TextEncoder().encode(JSON.stringify(initData));}if(pendingNeedKeyData[i][ksIdx].sessionId){ // Load MediaKeySession with sessionId
	loadKeySession(pendingNeedKeyData[i][ksIdx].sessionId,pendingNeedKeyData[i][ksIdx].initData);}else if(pendingNeedKeyData[i][ksIdx].initData !== null){ // Create new MediaKeySession with initData
	createKeySession(pendingNeedKeyData[i][ksIdx].initData,pendingNeedKeyData[i][ksIdx].cdmData);}break;}}}}else {keySystem = undefined;if(!fromManifest){eventBus.trigger(events.KEY_SYSTEM_SELECTED,{data:null,error:new _voDashJSError2['default'](_errorsProtectionErrors2['default'].KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE,_errorsProtectionErrors2['default'].KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE + 'Error selecting key system! -- ' + event.error)});}}};eventBus.on(events.INTERNAL_KEY_SYSTEM_SELECTED,onKeySystemSelected,self);eventBus.on(events.KEY_SYSTEM_ACCESS_COMPLETE,onKeySystemAccessComplete,self);protectionModel.requestKeySystemAccess(requestedKeySystems);})();}else { // We are in the process of selecting a key system, so just save the data
	pendingNeedKeyData.push(supportedKS);}}function sendLicenseRequestCompleteEvent(data,error){eventBus.trigger(events.LICENSE_REQUEST_COMPLETE,{data:data,error:error});}function onKeyStatusChanged(e){if(e.error){eventBus.trigger(events.KEY_STATUSES_CHANGED,{data:null,error:e.error});}else {logger.debug('DRM: key status = ' + e.status);}}function onKeyMessage(e){logger.debug('DRM: onKeyMessage'); // Dispatch event to applications indicating we received a key message
	var keyMessage=e.data;eventBus.trigger(events.KEY_MESSAGE,{data:keyMessage});var messageType=keyMessage.messageType?keyMessage.messageType:'license-request';var message=keyMessage.message;var sessionToken=keyMessage.sessionToken;var protData=getProtData(keySystem);var keySystemString=keySystem?keySystem.systemString:null;var licenseServerData=protectionKeyController.getLicenseServer(keySystem,protData,messageType);var eventData={sessionToken:sessionToken,messageType:messageType}; // Ensure message from CDM is not empty
	if(!message || message.byteLength === 0){sendLicenseRequestCompleteEvent(eventData,new _voDashJSError2['default'](_errorsProtectionErrors2['default'].MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE,_errorsProtectionErrors2['default'].MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE));return;} // Message not destined for license server
	if(!licenseServerData){logger.debug('DRM: License server request not required for this message (type = ' + e.data.messageType + ').  Session ID = ' + sessionToken.getSessionID());sendLicenseRequestCompleteEvent(eventData);return;} // Perform any special handling for ClearKey
	if(protectionKeyController.isClearKey(keySystem)){var clearkeys=protectionKeyController.processClearKeyLicenseRequest(keySystem,protData,message);if(clearkeys){logger.debug('DRM: ClearKey license request handled by application!');sendLicenseRequestCompleteEvent(eventData);protectionModel.updateKeySession(sessionToken,clearkeys);return;}} // All remaining key system scenarios require a request to a remote license server
	// Determine license server URL
	var url=null;if(protData && protData.serverURL){var serverURL=protData.serverURL;if(typeof serverURL === 'string' && serverURL !== ''){url = serverURL;}else if(typeof serverURL === 'object' && serverURL.hasOwnProperty(messageType)){url = serverURL[messageType];}}else if(protData && protData.laURL && protData.laURL !== ''){ // TODO: Deprecated!
	url = protData.laURL;}else {url = keySystem.getLicenseServerURLFromInitData(_CommonEncryption2['default'].getPSSHData(sessionToken.initData));if(!url){url = e.data.laURL;}} // Possibly update or override the URL based on the message
	url = licenseServerData.getServerURLFromMessage(url,message,messageType); // Ensure valid license server URL
	if(!url){sendLicenseRequestCompleteEvent(eventData,new _voDashJSError2['default'](_errorsProtectionErrors2['default'].MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE,_errorsProtectionErrors2['default'].MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE));return;} // Set optional XMLHttpRequest headers from protection data and message
	var reqHeaders={};var withCredentials=false;var updateHeaders=function updateHeaders(headers){if(headers){for(var key in headers) {if('authorization' === key.toLowerCase()){withCredentials = true;}reqHeaders[key] = headers[key];}}};if(protData){updateHeaders(protData.httpRequestHeaders);}updateHeaders(keySystem.getRequestHeadersFromMessage(message)); // Overwrite withCredentials property from protData if present
	if(protData && typeof protData.withCredentials == 'boolean'){withCredentials = protData.withCredentials;}var reportError=function reportError(xhr,eventData,keySystemString,messageType){var errorMsg=xhr.response?licenseServerData.getErrorResponse(xhr.response,keySystemString,messageType):'NONE';sendLicenseRequestCompleteEvent(eventData,new _voDashJSError2['default'](_errorsProtectionErrors2['default'].MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,_errorsProtectionErrors2['default'].MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR complete. status is "' + xhr.statusText + '" (' + xhr.status + '), readyState is ' + xhr.readyState + '.  Response is ' + errorMsg));};var onLoad=function onLoad(xhr){if(!protectionModel){return;}if(xhr.status === 200){var licenseMessage=licenseServerData.getLicenseMessage(xhr.response,keySystemString,messageType);if(licenseMessage !== null){sendLicenseRequestCompleteEvent(eventData);protectionModel.updateKeySession(sessionToken,licenseMessage);}else {reportError(xhr,eventData,keySystemString,messageType);}}else {reportError(xhr,eventData,keySystemString,messageType);}};var onAbort=function onAbort(xhr){sendLicenseRequestCompleteEvent(eventData,new _voDashJSError2['default'](_errorsProtectionErrors2['default'].MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,_errorsProtectionErrors2['default'].MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR aborted. status is "' + xhr.statusText + '" (' + xhr.status + '), readyState is ' + xhr.readyState));};var onError=function onError(xhr){sendLicenseRequestCompleteEvent(eventData,new _voDashJSError2['default'](_errorsProtectionErrors2['default'].MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE,_errorsProtectionErrors2['default'].MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE + keySystemString + ' update, XHR error. status is "' + xhr.statusText + '" (' + xhr.status + '), readyState is ' + xhr.readyState));};var reqPayload=keySystem.getLicenseRequestFromMessage(message);var reqMethod=licenseServerData.getHTTPMethod(messageType);var responseType=licenseServerData.getResponseType(keySystemString,messageType);var timeout=protData && !isNaN(protData.httpTimeout)?protData.httpTimeout:LICENSE_SERVER_REQUEST_DEFAULT_TIMEOUT;doLicenseRequest(url,reqHeaders,reqMethod,responseType,withCredentials,reqPayload,LICENSE_SERVER_REQUEST_RETRIES,timeout,onLoad,onAbort,onError);} // Implement license requests with a retry mechanism to avoid temporary network issues to affect playback experience
	function doLicenseRequest(url,headers,method,responseType,withCredentials,payload,retriesCount,timeout,onLoad,onAbort,onError){var xhr=new XMLHttpRequest();xhr.open(method,url,true);xhr.responseType = responseType;xhr.withCredentials = withCredentials;if(timeout > 0){xhr.timeout = timeout;}for(var key in headers) {xhr.setRequestHeader(key,headers[key]);}var retryRequest=function retryRequest(){ // fail silently and retry
	retriesCount--;setTimeout(function(){doLicenseRequest(url,headers,method,responseType,withCredentials,payload,retriesCount,timeout,onLoad,onAbort,onError);},LICENSE_SERVER_REQUEST_RETRY_INTERVAL);};xhr.onload = function(){if(this.status === 200 || retriesCount <= 0){onLoad(this);}else {logger.warn('License request failed (' + this.status + '). Retrying it... Pending retries: ' + retriesCount);retryRequest();}};xhr.onerror = function(){if(retriesCount <= 0){onError(this);}else {logger.warn('License request network request failed . Retrying it... Pending retries: ' + retriesCount);retryRequest();}};xhr.onabort = function(){onAbort(this);};xhr.send(payload);}function onNeedKey(event,retry){logger.debug('DRM: onNeedKey'); // Ignore non-cenc initData
	if(event.key.initDataType !== 'cenc'){logger.warn('DRM:  Only \'cenc\' initData is supported!  Ignoring initData of type: ' + event.key.initDataType);return;}if(mediaInfoArr.length === 0){logger.warn('DRM: onNeedKey called before initializeForMedia, wait until initialized');retry = typeof retry === 'undefined'?1:retry + 1;if(retry < NEEDKEY_BEFORE_INITIALIZE_RETRIES){needkeyRetries.push(setTimeout(function(){onNeedKey(event,retry);},NEEDKEY_BEFORE_INITIALIZE_TIMEOUT));return;}} // Some browsers return initData as Uint8Array (IE), some as ArrayBuffer (Chrome).
	// Convert to ArrayBuffer
	var abInitData=event.key.initData;if(ArrayBuffer.isView(abInitData)){abInitData = abInitData.buffer;} // If key system has already been selected and initData already seen, then do nothing
	if(keySystem){var initDataForKS=_CommonEncryption2['default'].getPSSHForKeySystem(keySystem,abInitData);if(initDataForKS){ // Check for duplicate initData
	var currentInitData=protectionModel.getAllInitData();for(var i=0;i < currentInitData.length;i++) {if(protectionKeyController.initDataEquals(initDataForKS,currentInitData[i])){logger.warn('DRM: Ignoring initData because we have already seen it!');return;}}}}logger.debug('DRM: initData:',String.fromCharCode.apply(null,new Uint8Array(abInitData)));var supportedKS=protectionKeyController.getSupportedKeySystems(abInitData,protDataSet);if(supportedKS.length === 0){logger.debug('DRM: Received needkey event with initData, but we don\'t support any of the key systems!');return;}selectKeySystem(supportedKS,false);}function getKeySystems(){return protectionKeyController?protectionKeyController.getKeySystems():[];}instance = {initializeForMedia:initializeForMedia,createKeySession:createKeySession,loadKeySession:loadKeySession,removeKeySession:removeKeySession,closeKeySession:closeKeySession,setServerCertificate:setServerCertificate,setMediaElement:setMediaElement,setSessionType:setSessionType,setRobustnessLevel:setRobustnessLevel,setProtectionData:setProtectionData,getSupportedKeySystemsFromContentProtection:getSupportedKeySystemsFromContentProtection,getKeySystems:getKeySystems,stop:stop,reset:reset};setup();return instance;}ProtectionController.__dashjs_factory_name = 'ProtectionController';exports['default'] = dashjs.FactoryMaker.getClassFactory(ProtectionController); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=ProtectionController.js.map


/***/ }),
/* 265 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _createClass=(function(){function defineProperties(target,props){for(var i=0;i < props.length;i++) {var descriptor=props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if('value' in descriptor)descriptor.writable = true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};})();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var CommonEncryption=(function(){function CommonEncryption(){_classCallCheck(this,CommonEncryption);}_createClass(CommonEncryption,null,[{key:'findCencContentProtection', /**
	     * Find and return the ContentProtection element in the given array
	     * that indicates support for MPEG Common Encryption
	     *
	     * @param {Array} cpArray array of content protection elements
	     * @returns {Object|null} the Common Encryption content protection element or
	     * null if one was not found
	     */value:function findCencContentProtection(cpArray){var retVal=null;for(var i=0;i < cpArray.length;++i) {var cp=cpArray[i];if(cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' && cp.value.toLowerCase() === 'cenc')retVal = cp;}return retVal;} /**
	     * Returns just the data portion of a single PSSH
	     *
	     * @param {ArrayBuffer} pssh - the PSSH
	     * @return {ArrayBuffer} data portion of the PSSH
	     */},{key:'getPSSHData',value:function getPSSHData(pssh){var offset=8; // Box size and type fields
	var view=new DataView(pssh); // Read version
	var version=view.getUint8(offset);offset += 20; // Version (1), flags (3), system ID (16)
	if(version > 0){offset += 4 + 16 * view.getUint32(offset); // Key ID count (4) and All key IDs (16*count)
	}offset += 4; // Data size
	return pssh.slice(offset);} /**
	     * Returns the PSSH associated with the given key system from the concatenated
	     * list of PSSH boxes in the given initData
	     *
	     * @param {KeySystem} keySystem the desired
	     * key system
	     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.
	     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found
	     * or null if a valid association could not be found.
	     */},{key:'getPSSHForKeySystem',value:function getPSSHForKeySystem(keySystem,initData){var psshList=CommonEncryption.parsePSSHList(initData);if(psshList.hasOwnProperty(keySystem.uuid.toLowerCase())){return psshList[keySystem.uuid.toLowerCase()];}return null;} /**
	     * Parse a standard common encryption PSSH which contains a simple
	     * base64-encoding of the init data
	     *
	     * @param {Object} cpData the ContentProtection element
	     * @param {BASE64} BASE64 reference
	     * @returns {ArrayBuffer|null} the init data or null if not found
	     */},{key:'parseInitDataFromContentProtection',value:function parseInitDataFromContentProtection(cpData,BASE64){if('pssh' in cpData){return BASE64.decodeArray(cpData.pssh.__text).buffer;}return null;} /**
	     * Parses list of PSSH boxes into keysystem-specific PSSH data
	     *
	     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by
	     * CDM as initialization data when CommonEncryption content is detected
	     * @returns {Object|Array} an object that has a property named according to each of
	     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)
	     * and a ArrayBuffer (the entire PSSH box) as the property value
	     */},{key:'parsePSSHList',value:function parsePSSHList(data){if(data === null)return [];var dv=new DataView(data.buffer || data); // data.buffer first for Uint8Array support
	var done=false;var pssh={}; // TODO: Need to check every data read for end of buffer
	var byteCursor=0;while(!done) {var size=undefined,nextBox=undefined,version=undefined,systemID=undefined,psshDataSize=undefined;var boxStart=byteCursor;if(byteCursor >= dv.buffer.byteLength)break; /* Box size */size = dv.getUint32(byteCursor);nextBox = byteCursor + size;byteCursor += 4; /* Verify PSSH */if(dv.getUint32(byteCursor) !== 0x70737368){byteCursor = nextBox;continue;}byteCursor += 4; /* Version must be 0 or 1 */version = dv.getUint8(byteCursor);if(version !== 0 && version !== 1){byteCursor = nextBox;continue;}byteCursor++;byteCursor += 3; /* skip flags */ // 16-byte UUID/SystemID
	systemID = '';var i=undefined,val=undefined;for(i = 0;i < 4;i++) {val = dv.getUint8(byteCursor + i).toString(16);systemID += val.length === 1?'0' + val:val;}byteCursor += 4;systemID += '-';for(i = 0;i < 2;i++) {val = dv.getUint8(byteCursor + i).toString(16);systemID += val.length === 1?'0' + val:val;}byteCursor += 2;systemID += '-';for(i = 0;i < 2;i++) {val = dv.getUint8(byteCursor + i).toString(16);systemID += val.length === 1?'0' + val:val;}byteCursor += 2;systemID += '-';for(i = 0;i < 2;i++) {val = dv.getUint8(byteCursor + i).toString(16);systemID += val.length === 1?'0' + val:val;}byteCursor += 2;systemID += '-';for(i = 0;i < 6;i++) {val = dv.getUint8(byteCursor + i).toString(16);systemID += val.length === 1?'0' + val:val;}byteCursor += 6;systemID = systemID.toLowerCase(); /* PSSH Data Size */psshDataSize = dv.getUint32(byteCursor);byteCursor += 4; /* PSSH Data */pssh[systemID] = dv.buffer.slice(boxStart,nextBox);byteCursor = nextBox;}return pssh;}}]);return CommonEncryption;})();exports['default'] = CommonEncryption;module.exports = exports['default'];
	//# sourceMappingURL=CommonEncryption.js.map


/***/ }),
/* 266 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc A media capability
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var MediaCapability= /**
	     * @param {string} contentType MIME type and codecs (RFC6386)
	     * @param {string} robustness
	     * @class
	     * @ignore
	     */function MediaCapability(contentType,robustness){_classCallCheck(this,MediaCapability);this.contentType = contentType;this.robustness = robustness;};exports["default"] = MediaCapability;module.exports = exports["default"];
	//# sourceMappingURL=MediaCapability.js.map


/***/ }),
/* 267 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc Represents a set of configurations that describe the capabilities desired for
	 *  support by a given CDM
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var KeySystemConfiguration= /**
	     * @param {Array.<MediaCapability>} audioCapabilities array of
	     * desired audio capabilities.  Higher preference capabilities should be placed earlier
	     * in the array.
	     * @param {Array.<MediaCapability>} videoCapabilities array of
	     * desired video capabilities.  Higher preference capabilities should be placed earlier
	     * in the array.
	     * @param {string} distinctiveIdentifier desired use of distinctive identifiers.
	     * One of "required", "optional", or "not-allowed"
	     * @param {string} persistentState desired support for persistent storage of
	     * key systems.  One of "required", "optional", or "not-allowed"
	     * @param {Array.<string>} sessionTypes List of session types that must
	     * be supported by the key system
	     * @class
	     */function KeySystemConfiguration(audioCapabilities,videoCapabilities,distinctiveIdentifier,persistentState,sessionTypes){_classCallCheck(this,KeySystemConfiguration);this.initDataTypes = ['cenc'];if(audioCapabilities && audioCapabilities.length){this.audioCapabilities = audioCapabilities;}if(videoCapabilities && videoCapabilities.length){this.videoCapabilities = videoCapabilities;}this.distinctiveIdentifier = distinctiveIdentifier;this.persistentState = persistentState;this.sessionTypes = sessionTypes;};exports['default'] = KeySystemConfiguration;module.exports = exports['default'];
	//# sourceMappingURL=KeySystemConfiguration.js.map


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _get=function get(_x,_x2,_x3){var _again=true;_function: while(_again) {var object=_x,property=_x2,receiver=_x3;_again = false;if(object === null)object = Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc === undefined){var parent=Object.getPrototypeOf(object);if(parent === null){return undefined;}else {_x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;}}else if('value' in desc){return desc.value;}else {var getter=desc.get;if(getter === undefined){return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass,superClass){if(typeof superClass !== 'function' && superClass !== null){throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__ = superClass;}var _coreErrorsErrorsBase=__webpack_require__(118);var _coreErrorsErrorsBase2=_interopRequireDefault(_coreErrorsErrorsBase); /**
	 * @class
	 *
	 */var ProtectionErrors=(function(_ErrorsBase){_inherits(ProtectionErrors,_ErrorsBase);function ProtectionErrors(){_classCallCheck(this,ProtectionErrors);_get(Object.getPrototypeOf(ProtectionErrors.prototype),'constructor',this).call(this); /**
	         *  Generid key Error code
	         */this.MEDIA_KEYERR_CODE = 100; /**
	         *  Error code returned by keyerror api for ProtectionModel_01b
	         */this.MEDIA_KEYERR_UNKNOWN_CODE = 101; /**
	         *  Error code returned by keyerror api for ProtectionModel_01b
	         */this.MEDIA_KEYERR_CLIENT_CODE = 102; /**
	         *  Error code returned by keyerror api for ProtectionModel_01b
	         */this.MEDIA_KEYERR_SERVICE_CODE = 103; /**
	         *  Error code returned by keyerror api for ProtectionModel_01b
	         */this.MEDIA_KEYERR_OUTPUT_CODE = 104; /**
	         *  Error code returned by keyerror api for ProtectionModel_01b
	         */this.MEDIA_KEYERR_HARDWARECHANGE_CODE = 105; /**
	         *  Error code returned by keyerror api for ProtectionModel_01b
	         */this.MEDIA_KEYERR_DOMAIN_CODE = 106; /**
	         *  Error code returned when an error occured in keymessage event for ProtectionModel_01b
	         */this.MEDIA_KEY_MESSAGE_ERROR_CODE = 107; /**
	         *  Error code returned when challenge is invalid in keymessage event (event triggered by CDM)
	         */this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_CODE = 108; /**
	         *  Error code returned when License server certificate has not been successfully updated
	         */this.SERVER_CERTIFICATE_UPDATED_ERROR_CODE = 109; /**
	         *  Error code returned when license validity has expired
	         */this.KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE = 110; /**
	         *  Error code returned when no licenser url is defined
	         */this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_CODE = 111; /**
	         *  Error code returned when key system access is denied
	         */this.KEY_SYSTEM_ACCESS_DENIED_ERROR_CODE = 112; /**
	         *  Error code returned when key session has not been successfully created
	         */this.KEY_SESSION_CREATED_ERROR_CODE = 113; /**
	         *  Error code returned when license request failed after a keymessage event has been triggered
	         */this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_CODE = 114;this.MEDIA_KEYERR_UNKNOWN_MESSAGE = 'An unspecified error occurred. This value is used for errors that don\'t match any of the other codes.';this.MEDIA_KEYERR_CLIENT_MESSAGE = 'The Key System could not be installed or updated.';this.MEDIA_KEYERR_SERVICE_MESSAGE = 'The message passed into update indicated an error from the license service.';this.MEDIA_KEYERR_OUTPUT_MESSAGE = 'There is no available output device with the required characteristics for the content protection system.';this.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE = 'A hardware configuration change caused a content protection error.';this.MEDIA_KEYERR_DOMAIN_MESSAGE = 'An error occurred in a multi-device domain licensing configuration. The most common error is a failure to join the domain.';this.MEDIA_KEY_MESSAGE_ERROR_MESSAGE = 'Multiple key sessions were creates with a user-agent that does not support sessionIDs!! Unpredictable behavior ahead!';this.MEDIA_KEY_MESSAGE_NO_CHALLENGE_ERROR_MESSAGE = 'DRM: Empty key message from CDM';this.SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE = 'Error updating server certificate -- ';this.KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE = 'DRM: KeyStatusChange error! -- License has expired';this.MEDIA_KEY_MESSAGE_NO_LICENSE_SERVER_URL_ERROR_MESSAGE = 'DRM: No license server URL specified!';this.KEY_SYSTEM_ACCESS_DENIED_ERROR_MESSAGE = 'DRM: KeySystem Access Denied! -- ';this.KEY_SESSION_CREATED_ERROR_MESSAGE = 'DRM: unable to create session! --';this.MEDIA_KEY_MESSAGE_LICENSER_ERROR_MESSAGE = 'DRM: licenser error! --';}return ProtectionErrors;})(_coreErrorsErrorsBase2['default']);var protectionErrors=new ProtectionErrors();exports['default'] = protectionErrors;module.exports = exports['default'];
	//# sourceMappingURL=ProtectionErrors.js.map


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _CommonEncryption=__webpack_require__(265);var _CommonEncryption2=_interopRequireDefault(_CommonEncryption);var _drmKeySystemClearKey=__webpack_require__(270);var _drmKeySystemClearKey2=_interopRequireDefault(_drmKeySystemClearKey);var _drmKeySystemW3CClearKey=__webpack_require__(274);var _drmKeySystemW3CClearKey2=_interopRequireDefault(_drmKeySystemW3CClearKey);var _drmKeySystemWidevine=__webpack_require__(275);var _drmKeySystemWidevine2=_interopRequireDefault(_drmKeySystemWidevine);var _drmKeySystemPlayReady=__webpack_require__(276);var _drmKeySystemPlayReady2=_interopRequireDefault(_drmKeySystemPlayReady);var _serversDRMToday=__webpack_require__(277);var _serversDRMToday2=_interopRequireDefault(_serversDRMToday);var _serversPlayReady=__webpack_require__(278);var _serversPlayReady2=_interopRequireDefault(_serversPlayReady);var _serversWidevine=__webpack_require__(279);var _serversWidevine2=_interopRequireDefault(_serversWidevine);var _serversClearKey=__webpack_require__(280);var _serversClearKey2=_interopRequireDefault(_serversClearKey);var _constantsProtectionConstants=__webpack_require__(273);var _constantsProtectionConstants2=_interopRequireDefault(_constantsProtectionConstants); /**
	 * @module ProtectionKeyController
	 * @description Media protection key system functionality that can be modified/overridden by applications
	 */function ProtectionKeyController(){var context=this.context;var instance=undefined,debug=undefined,logger=undefined,keySystems=undefined,BASE64=undefined,clearkeyKeySystem=undefined,clearkeyW3CKeySystem=undefined;function setConfig(config){if(!config)return;if(config.debug){debug = config.debug;logger = debug.getLogger(instance);}if(config.BASE64){BASE64 = config.BASE64;}}function initialize(){keySystems = [];var keySystem=undefined; // PlayReady
	keySystem = (0,_drmKeySystemPlayReady2['default'])(context).getInstance({BASE64:BASE64});keySystems.push(keySystem); // Widevine
	keySystem = (0,_drmKeySystemWidevine2['default'])(context).getInstance({BASE64:BASE64});keySystems.push(keySystem); // ClearKey
	keySystem = (0,_drmKeySystemClearKey2['default'])(context).getInstance({BASE64:BASE64});keySystems.push(keySystem);clearkeyKeySystem = keySystem; // W3C ClearKey
	keySystem = (0,_drmKeySystemW3CClearKey2['default'])(context).getInstance({BASE64:BASE64,debug:debug});keySystems.push(keySystem);clearkeyW3CKeySystem = keySystem;} /**
	     * Returns a prioritized list of key systems supported
	     * by this player (not necessarily those supported by the
	     * user agent)
	     *
	     * @returns {Array.<KeySystem>} a prioritized
	     * list of key systems
	     * @memberof module:ProtectionKeyController
	     * @instance
	     */function getKeySystems(){return keySystems;} /**
	     * Returns the key system associated with the given key system string
	     * name (i.e. 'org.w3.clearkey')
	     *
	     * @param {string} systemString the system string
	     * @returns {KeySystem|null} the key system
	     * or null if no supported key system is associated with the given key
	     * system string
	     * @memberof module:ProtectionKeyController
	     * @instance
	     */function getKeySystemBySystemString(systemString){for(var i=0;i < keySystems.length;i++) {if(keySystems[i].systemString === systemString){return keySystems[i];}}return null;} /**
	     * Determines whether the given key system is ClearKey.  This is
	     * necessary because the EME spec defines ClearKey and its method
	     * for providing keys to the key session; and this method has changed
	     * between the various API versions.  Our EME-specific ProtectionModels
	     * must know if the system is ClearKey so that it can format the keys
	     * according to the particular spec version.
	     *
	     * @param {Object} keySystem the key
	     * @returns {boolean} true if this is the ClearKey key system, false
	     * otherwise
	     * @memberof module:ProtectionKeyController
	     * @instance
	     */function isClearKey(keySystem){return keySystem === clearkeyKeySystem || keySystem === clearkeyW3CKeySystem;} /**
	     * Check equality of initData array buffers.
	     *
	     * @param {ArrayBuffer} initData1 - first initData
	     * @param {ArrayBuffer} initData2 - second initData
	     * @returns {boolean} true if the initData arrays are equal in size and
	     * contents, false otherwise
	     * @memberof module:ProtectionKeyController
	     * @instance
	     */function initDataEquals(initData1,initData2){if(initData1.byteLength === initData2.byteLength){var data1=new Uint8Array(initData1);var data2=new Uint8Array(initData2);for(var j=0;j < data1.length;j++) {if(data1[j] !== data2[j]){return false;}}return true;}return false;} /**
	     * Returns a set of supported key systems and CENC initialization data
	     * from the given array of ContentProtection elements.  Only
	     * key systems that are supported by this player will be returned.
	     * Key systems are returned in priority order (highest first).
	     *
	     * @param {Array.<Object>} cps - array of content protection elements parsed
	     * from the manifest
	     * @returns {Array.<Object>} array of objects indicating which supported key
	     * systems were found.  Empty array is returned if no
	     * supported key systems were found
	     * @memberof module:ProtectionKeyController
	     * @instance
	     */function getSupportedKeySystemsFromContentProtection(cps){var cp=undefined,ks=undefined,ksIdx=undefined,cpIdx=undefined;var supportedKS=[];if(cps){for(ksIdx = 0;ksIdx < keySystems.length;++ksIdx) {ks = keySystems[ksIdx];for(cpIdx = 0;cpIdx < cps.length;++cpIdx) {cp = cps[cpIdx];if(cp.schemeIdUri.toLowerCase() === ks.schemeIdURI){ // Look for DRM-specific ContentProtection
	var initData=ks.getInitData(cp);if(!!initData){supportedKS.push({ks:keySystems[ksIdx],initData:initData,cdmData:ks.getCDMData(),sessionId:ks.getSessionId(cp)});}else if(this.isClearKey(ks)){supportedKS.push({ks:ks,initData:null});}}}}}return supportedKS;} /**
	     * Returns key systems supported by this player for the given PSSH
	     * initializationData. Only key systems supported by this player
	     * that have protection data present will be returned.  Key systems are returned in priority order
	     * (highest priority first)
	     *
	     * @param {ArrayBuffer} initData Concatenated PSSH data for all DRMs
	     * supported by the content
	     * @param {ProtectionData} protDataSet user specified protection data - license server url etc
	     * supported by the content
	     * @returns {Array.<Object>} array of objects indicating which supported key
	     * systems were found.  Empty array is returned if no
	     * supported key systems were found
	     * @memberof module:ProtectionKeyController
	     * @instance
	     */function getSupportedKeySystems(initData,protDataSet){var supportedKS=[];var pssh=_CommonEncryption2['default'].parsePSSHList(initData);var ks=undefined,keySystemString=undefined,shouldNotFilterOutKeySystem=undefined;for(var ksIdx=0;ksIdx < keySystems.length;++ksIdx) {ks = keySystems[ksIdx];keySystemString = ks.systemString;shouldNotFilterOutKeySystem = protDataSet?keySystemString in protDataSet:true;if(ks.uuid in pssh && shouldNotFilterOutKeySystem){supportedKS.push({ks:ks,initData:pssh[ks.uuid],cdmData:ks.getCDMData(),sessionId:ks.getSessionId()});}}return supportedKS;} /**
	     * Returns the license server implementation data that should be used for this request.
	     *
	     * @param {KeySystem} keySystem the key system
	     * associated with this license request
	     * @param {ProtectionData} protData protection data to use for the
	     * request
	     * @param {string} [messageType="license-request"] the message type associated with this
	     * request.  Supported message types can be found
	     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.
	     * @returns {LicenseServer|null} the license server
	     * implementation that should be used for this request or null if the player should not
	     * pass messages of the given type to a license server
	     * @memberof module:ProtectionKeyController
	     * @instance
	     *
	     */function getLicenseServer(keySystem,protData,messageType){ // Our default server implementations do not do anything with "license-release" or
	// "individualization-request" messages, so we just send a success event
	if(messageType === 'license-release' || messageType === 'individualization-request'){return null;}var licenseServerData=null;if(protData && protData.hasOwnProperty('drmtoday')){licenseServerData = (0,_serversDRMToday2['default'])(context).getInstance({BASE64:BASE64});}else if(keySystem.systemString === _constantsProtectionConstants2['default'].WIDEVINE_KEYSTEM_STRING){licenseServerData = (0,_serversWidevine2['default'])(context).getInstance();}else if(keySystem.systemString === _constantsProtectionConstants2['default'].PLAYREADY_KEYSTEM_STRING){licenseServerData = (0,_serversPlayReady2['default'])(context).getInstance();}else if(keySystem.systemString === _constantsProtectionConstants2['default'].CLEARKEY_KEYSTEM_STRING){licenseServerData = (0,_serversClearKey2['default'])(context).getInstance();}return licenseServerData;} /**
	     * Allows application-specific retrieval of ClearKey keys.
	     *
	     * @param {KeySystem} clearkeyKeySystem They exact ClearKey System to be used
	     * @param {ProtectionData} protData protection data to use for the
	     * request
	     * @param {ArrayBuffer} message the key message from the CDM
	     * @return {ClearKeyKeySet|null} the clear keys associated with
	     * the request or null if no keys can be returned by this function
	     * @memberof module:ProtectionKeyController
	     * @instance
	     */function processClearKeyLicenseRequest(clearkeyKeySystem,protData,message){try{return clearkeyKeySystem.getClearKeysFromProtectionData(protData,message);}catch(error) {logger.error('Failed to retrieve clearkeys from ProtectionData');return null;}}function setProtectionData(protectionDataSet){var getProtectionData=function getProtectionData(keySystemString){var protData=null;if(protectionDataSet){protData = keySystemString in protectionDataSet?protectionDataSet[keySystemString]:null;}return protData;};for(var i=0;i < keySystems.length;i++) {var keySystem=keySystems[i];if(keySystem.hasOwnProperty('init')){keySystem.init(getProtectionData(keySystem.systemString));}}}instance = {initialize:initialize,setProtectionData:setProtectionData,isClearKey:isClearKey,initDataEquals:initDataEquals,getKeySystems:getKeySystems,getKeySystemBySystemString:getKeySystemBySystemString,getSupportedKeySystemsFromContentProtection:getSupportedKeySystemsFromContentProtection,getSupportedKeySystems:getSupportedKeySystems,getLicenseServer:getLicenseServer,processClearKeyLicenseRequest:processClearKeyLicenseRequest,setConfig:setConfig};return instance;}ProtectionKeyController.__dashjs_factory_name = 'ProtectionKeyController';exports['default'] = dashjs.FactoryMaker.getSingletonFactory(ProtectionKeyController); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=ProtectionKeyController.js.map


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _voKeyPair=__webpack_require__(271);var _voKeyPair2=_interopRequireDefault(_voKeyPair);var _voClearKeyKeySet=__webpack_require__(272);var _voClearKeyKeySet2=_interopRequireDefault(_voClearKeyKeySet);var _CommonEncryption=__webpack_require__(265);var _CommonEncryption2=_interopRequireDefault(_CommonEncryption);var _constantsProtectionConstants=__webpack_require__(273);var _constantsProtectionConstants2=_interopRequireDefault(_constantsProtectionConstants);var uuid='e2719d58-a985-b3c9-781a-b030af78d30e';var systemString=_constantsProtectionConstants2['default'].CLEARKEY_KEYSTEM_STRING;var schemeIdURI='urn:uuid:' + uuid;function KeySystemClearKey(config){config = config || {};var instance=undefined;var BASE64=config.BASE64; /**
	     * Returns desired clearkeys (as specified in the CDM message) from protection data
	     *
	     * @param {ProtectionData} protectionData the protection data
	     * @param {ArrayBuffer} message the ClearKey CDM message
	     * @returns {ClearKeyKeySet} the key set or null if none found
	     * @throws {Error} if a keyID specified in the CDM message was not found in the
	     * protection data
	     * @memberof KeySystemClearKey
	     */function getClearKeysFromProtectionData(protectionData,message){var clearkeySet=null;if(protectionData){ // ClearKey is the only system that does not require a license server URL, so we
	// handle it here when keys are specified in protection data
	var jsonMsg=JSON.parse(String.fromCharCode.apply(null,new Uint8Array(message)));var keyPairs=[];for(var i=0;i < jsonMsg.kids.length;i++) {var clearkeyID=jsonMsg.kids[i];var clearkey=protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)?protectionData.clearkeys[clearkeyID]:null;if(!clearkey){throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');} // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded
	keyPairs.push(new _voKeyPair2['default'](clearkeyID,clearkey));}clearkeySet = new _voClearKeyKeySet2['default'](keyPairs);}return clearkeySet;}function getInitData(cp){return _CommonEncryption2['default'].parseInitDataFromContentProtection(cp,BASE64);}function getRequestHeadersFromMessage() /*message*/{return null;}function getLicenseRequestFromMessage(message){return new Uint8Array(message);}function getLicenseServerURLFromInitData() /*initData*/{return null;}function getCDMData(){return null;}function getSessionId() /*cp*/{return null;}instance = {uuid:uuid,schemeIdURI:schemeIdURI,systemString:systemString,getInitData:getInitData,getRequestHeadersFromMessage:getRequestHeadersFromMessage,getLicenseRequestFromMessage:getLicenseRequestFromMessage,getLicenseServerURLFromInitData:getLicenseServerURLFromInitData,getCDMData:getCDMData,getSessionId:getSessionId,getClearKeysFromProtectionData:getClearKeysFromProtectionData};return instance;}KeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';exports['default'] = dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=KeySystemClearKey.js.map


/***/ }),
/* 271 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc Represents a 128-bit keyID and 128-bit encryption key
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var KeyPair= /**
	     * @param {string} keyID 128-bit key ID, base64 encoded, with no padding
	     * @param {string} key 128-bit encryption key, base64 encoded, with no padding
	     * @class
	     * @ignore
	     */function KeyPair(keyID,key){_classCallCheck(this,KeyPair);this.keyID = keyID;this.key = key;};exports["default"] = KeyPair;module.exports = exports["default"];
	//# sourceMappingURL=KeyPair.js.map


/***/ }),
/* 272 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc A collection of ClearKey encryption keys with an (optional) associated
	 *  type
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _createClass=(function(){function defineProperties(target,props){for(var i=0;i < props.length;i++) {var descriptor=props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if('value' in descriptor)descriptor.writable = true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};})();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var ClearKeyKeySet=(function(){ /**
	     * @param {Array.<KeyPair>} keyPairs
	     * @param {string} type the type of keys in this set.  One of either 'persistent'
	     * or 'temporary'.  Can also be null or undefined.
	     * @class
	     * @ignore
	     */function ClearKeyKeySet(keyPairs,type){_classCallCheck(this,ClearKeyKeySet);if(type && type !== 'persistent' && type !== 'temporary')throw new Error('Invalid ClearKey key set type!  Must be one of \'persistent\' or \'temporary\'');this.keyPairs = keyPairs;this.type = type;} /**
	     * Convert this key set to its JSON Web Key (JWK) representation
	     *
	     * @return {ArrayBuffer} JWK object UTF-8 encoded as ArrayBuffer
	     */_createClass(ClearKeyKeySet,[{key:'toJWK',value:function toJWK(){var i=undefined;var numKeys=this.keyPairs.length;var jwk={keys:[]};for(i = 0;i < numKeys;i++) {var key={kty:'oct',alg:'A128KW',kid:this.keyPairs[i].keyID,k:this.keyPairs[i].key};jwk.keys.push(key);}if(this.type){jwk.type = this.type;}var jwkString=JSON.stringify(jwk);var len=jwkString.length; // Convert JSON string to ArrayBuffer
	var buf=new ArrayBuffer(len);var bView=new Uint8Array(buf);for(i = 0;i < len;i++) bView[i] = jwkString.charCodeAt(i);return buf;}}]);return ClearKeyKeySet;})();exports['default'] = ClearKeyKeySet;module.exports = exports['default'];
	//# sourceMappingURL=ClearKeyKeySet.js.map


/***/ }),
/* 273 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * Protection Constants declaration
	 * @class
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _createClass=(function(){function defineProperties(target,props){for(var i=0;i < props.length;i++) {var descriptor=props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if('value' in descriptor)descriptor.writable = true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};})();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var ProtectionConstants=(function(){_createClass(ProtectionConstants,[{key:'init',value:function init(){this.CLEARKEY_KEYSTEM_STRING = 'org.w3.clearkey';this.WIDEVINE_KEYSTEM_STRING = 'com.widevine.alpha';this.PLAYREADY_KEYSTEM_STRING = 'com.microsoft.playready';}}]);function ProtectionConstants(){_classCallCheck(this,ProtectionConstants);this.init();}return ProtectionConstants;})();var constants=new ProtectionConstants();exports['default'] = constants;module.exports = exports['default'];
	//# sourceMappingURL=ProtectionConstants.js.map


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _voKeyPair=__webpack_require__(271);var _voKeyPair2=_interopRequireDefault(_voKeyPair);var _voClearKeyKeySet=__webpack_require__(272);var _voClearKeyKeySet2=_interopRequireDefault(_voClearKeyKeySet);var _CommonEncryption=__webpack_require__(265);var _CommonEncryption2=_interopRequireDefault(_CommonEncryption);var _constantsProtectionConstants=__webpack_require__(273);var _constantsProtectionConstants2=_interopRequireDefault(_constantsProtectionConstants);var uuid='1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';var systemString=_constantsProtectionConstants2['default'].CLEARKEY_KEYSTEM_STRING;var schemeIdURI='urn:uuid:' + uuid;function KeySystemW3CClearKey(config){var instance=undefined;var BASE64=config.BASE64;var logger=config.debug.getLogger(instance); /**
	     * Returns desired clearkeys (as specified in the CDM message) from protection data
	     *
	     * @param {ProtectionData} protectionData the protection data
	     * @param {ArrayBuffer} message the ClearKey CDM message
	     * @returns {ClearKeyKeySet} the key set or null if none found
	     * @throws {Error} if a keyID specified in the CDM message was not found in the
	     * protection data
	     * @memberof KeySystemClearKey
	     */function getClearKeysFromProtectionData(protectionData,message){var clearkeySet=null;if(protectionData){ // ClearKey is the only system that does not require a license server URL, so we
	// handle it here when keys are specified in protection data
	var jsonMsg=JSON.parse(String.fromCharCode.apply(null,new Uint8Array(message)));var keyPairs=[];for(var i=0;i < jsonMsg.kids.length;i++) {var clearkeyID=jsonMsg.kids[i];var clearkey=protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)?protectionData.clearkeys[clearkeyID]:null;if(!clearkey){throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');} // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded
	keyPairs.push(new _voKeyPair2['default'](clearkeyID,clearkey));}clearkeySet = new _voClearKeyKeySet2['default'](keyPairs);logger.warn('ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');}return clearkeySet;}function getInitData(cp){return _CommonEncryption2['default'].parseInitDataFromContentProtection(cp,BASE64);}function getRequestHeadersFromMessage() /*message*/{return null;}function getLicenseRequestFromMessage(message){return new Uint8Array(message);}function getLicenseServerURLFromInitData() /*initData*/{return null;}function getCDMData(){return null;}function getSessionId() /*cp*/{return null;}instance = {uuid:uuid,schemeIdURI:schemeIdURI,systemString:systemString,getInitData:getInitData,getRequestHeadersFromMessage:getRequestHeadersFromMessage,getLicenseRequestFromMessage:getLicenseRequestFromMessage,getLicenseServerURLFromInitData:getLicenseServerURLFromInitData,getCDMData:getCDMData,getSessionId:getSessionId,getClearKeysFromProtectionData:getClearKeysFromProtectionData};return instance;}KeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';exports['default'] = dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=KeySystemW3CClearKey.js.map


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * Google Widevine DRM
	 *
	 * @class
	 * @implements MediaPlayer.dependencies.protection.KeySystem
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _CommonEncryption=__webpack_require__(265);var _CommonEncryption2=_interopRequireDefault(_CommonEncryption);var _constantsProtectionConstants=__webpack_require__(273);var _constantsProtectionConstants2=_interopRequireDefault(_constantsProtectionConstants);var uuid='edef8ba9-79d6-4ace-a3c8-27dcd51d21ed';var systemString=_constantsProtectionConstants2['default'].WIDEVINE_KEYSTEM_STRING;var schemeIdURI='urn:uuid:' + uuid;function KeySystemWidevine(config){config = config || {};var instance=undefined;var protData=null;var BASE64=config.BASE64;function init(protectionData){if(protectionData){protData = protectionData;}}function getInitData(cp){return _CommonEncryption2['default'].parseInitDataFromContentProtection(cp,BASE64);}function getRequestHeadersFromMessage() /*message*/{return null;}function getLicenseRequestFromMessage(message){return new Uint8Array(message);}function getLicenseServerURLFromInitData() /*initData*/{return null;}function getCDMData(){return null;}function getSessionId(cp){ // Get sessionId from protectionData or from manifest
	if(protData && protData.sessionId){return protData.sessionId;}else if(cp && cp.sessionId){return cp.sessionId;}return null;}instance = {uuid:uuid,schemeIdURI:schemeIdURI,systemString:systemString,init:init,getInitData:getInitData,getRequestHeadersFromMessage:getRequestHeadersFromMessage,getLicenseRequestFromMessage:getLicenseRequestFromMessage,getLicenseServerURLFromInitData:getLicenseServerURLFromInitData,getCDMData:getCDMData,getSessionId:getSessionId};return instance;}KeySystemWidevine.__dashjs_factory_name = 'KeySystemWidevine';exports['default'] = dashjs.FactoryMaker.getSingletonFactory(KeySystemWidevine); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=KeySystemWidevine.js.map


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * Microsoft PlayReady DRM
	 *
	 * @class
	 * @implements KeySystem
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _CommonEncryption=__webpack_require__(265);var _CommonEncryption2=_interopRequireDefault(_CommonEncryption);var _constantsProtectionConstants=__webpack_require__(273);var _constantsProtectionConstants2=_interopRequireDefault(_constantsProtectionConstants);var uuid='9a04f079-9840-4286-ab92-e65be0885f95';var systemString=_constantsProtectionConstants2['default'].PLAYREADY_KEYSTEM_STRING;var schemeIdURI='urn:uuid:' + uuid;var PRCDMData='<PlayReadyCDMData type="LicenseAcquisition"><LicenseAcquisition version="1.0" Proactive="false"><CustomData encoding="base64encoded">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';var protData=undefined;function KeySystemPlayReady(config){config = config || {};var instance=undefined;var messageFormat='utf16';var BASE64=config.BASE64;function checkConfig(){if(!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray')){throw new Error('Missing config parameter(s)');}}function getRequestHeadersFromMessage(message){var msg=undefined,xmlDoc=undefined;var headers={};var parser=new DOMParser();var dataview=messageFormat === 'utf16'?new Uint16Array(message):new Uint8Array(message);msg = String.fromCharCode.apply(null,dataview);xmlDoc = parser.parseFromString(msg,'application/xml');var headerNameList=xmlDoc.getElementsByTagName('name');var headerValueList=xmlDoc.getElementsByTagName('value');for(var i=0;i < headerNameList.length;i++) {headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;} // some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.
	// this is NOT w3c conform and license servers may reject the request!
	// -> rename it to proper w3c definition!
	if(headers.hasOwnProperty('Content')){headers['Content-Type'] = headers.Content;delete headers.Content;} // some devices (Ex: LG SmartTVs) require content-type to be defined
	if(!headers.hasOwnProperty('Content-Type')){headers['Content-Type'] = 'text/xml; charset=' + messageFormat;}return headers;}function getLicenseRequestFromMessage(message){var licenseRequest=null;var parser=new DOMParser();var dataview=messageFormat === 'utf16'?new Uint16Array(message):new Uint8Array(message);checkConfig();var msg=String.fromCharCode.apply(null,dataview);var xmlDoc=parser.parseFromString(msg,'application/xml');if(xmlDoc.getElementsByTagName('Challenge')[0]){var Challenge=xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;if(Challenge){licenseRequest = BASE64.decode(Challenge);}}else if(xmlDoc.getElementsByTagName('parsererror').length){ // In case it is not an XML doc, return the message itself
	// There are CDM implementations of some devices (example: some smartTVs) that
	// return directly the challenge without wrapping it in an xml doc
	return message;}return licenseRequest;}function getLicenseServerURLFromInitData(initData){if(initData){var data=new DataView(initData);var numRecords=data.getUint16(4,true);var offset=6;var parser=new DOMParser();for(var i=0;i < numRecords;i++) { // Parse the PlayReady Record header
	var recordType=data.getUint16(offset,true);offset += 2;var recordLength=data.getUint16(offset,true);offset += 2;if(recordType !== 0x0001){offset += recordLength;continue;}var recordData=initData.slice(offset,offset + recordLength);var record=String.fromCharCode.apply(null,new Uint16Array(recordData));var xmlDoc=parser.parseFromString(record,'application/xml'); // First try <LA_URL>
	if(xmlDoc.getElementsByTagName('LA_URL')[0]){var laurl=xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;if(laurl){return laurl;}} // Optionally, try <LUI_URL>
	if(xmlDoc.getElementsByTagName('LUI_URL')[0]){var luiurl=xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;if(luiurl){return luiurl;}}}}return null;}function getInitData(cpData){ // * desc@ getInitData
	// *   generate PSSH data from PROHeader defined in MPD file
	// *   PSSH format:
	// *   size (4)
	// *   box type(PSSH) (8)
	// *   Protection SystemID (16)
	// *   protection system data size (4) - length of decoded PROHeader
	// *   decoded PROHeader data from MPD file
	var PSSHBoxType=new Uint8Array([0x70,0x73,0x73,0x68,0x00,0x00,0x00,0x00]); //'PSSH' 8 bytes
	var playreadySystemID=new Uint8Array([0x9a,0x04,0xf0,0x79,0x98,0x40,0x42,0x86,0xab,0x92,0xe6,0x5b,0xe0,0x88,0x5f,0x95]);var byteCursor=0;var uint8arraydecodedPROHeader=null;var PROSize=undefined,PSSHSize=undefined,PSSHBoxBuffer=undefined,PSSHBox=undefined,PSSHData=undefined;checkConfig(); // Handle common encryption PSSH
	if('pssh' in cpData){return _CommonEncryption2['default'].parseInitDataFromContentProtection(cpData,BASE64);} // Handle native MS PlayReady ContentProtection elements
	if('pro' in cpData){uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);}else if('prheader' in cpData){uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);}else {return null;}PROSize = uint8arraydecodedPROHeader.length;PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;PSSHBoxBuffer = new ArrayBuffer(PSSHSize);PSSHBox = new Uint8Array(PSSHBoxBuffer);PSSHData = new DataView(PSSHBoxBuffer);PSSHData.setUint32(byteCursor,PSSHSize);byteCursor += 0x4;PSSHBox.set(PSSHBoxType,byteCursor);byteCursor += PSSHBoxType.length;PSSHBox.set(playreadySystemID,byteCursor);byteCursor += playreadySystemID.length;PSSHData.setUint32(byteCursor,PROSize);byteCursor += 0x4;PSSHBox.set(uint8arraydecodedPROHeader,byteCursor);byteCursor += PROSize;return PSSHBox.buffer;} /**
	     * It seems that some PlayReady implementations return their XML-based CDM
	     * messages using UTF16, while others return them as UTF8.  Use this function
	     * to modify the message format to expect when parsing CDM messages.
	     *
	     * @param {string} format the expected message format.  Either "utf8" or "utf16".
	     * @throws {Error} Specified message format is not one of "utf8" or "utf16"
	     */function setPlayReadyMessageFormat(format){if(format !== 'utf8' && format !== 'utf16'){throw new Error('Illegal PlayReady message format! -- ' + format);}messageFormat = format;} /**
	     * Initialize the Key system with protection data
	     * @param {Object} protectionData the protection data
	     */function init(protectionData){if(protectionData){protData = protectionData;}} /**
	     * Get Playready Custom data
	     */function getCDMData(){var customData=undefined,cdmData=undefined,cdmDataBytes=undefined,i=undefined;checkConfig();if(protData && protData.cdmData){ // Convert custom data into multibyte string
	customData = [];for(i = 0;i < protData.cdmData.length;++i) {customData.push(protData.cdmData.charCodeAt(i));customData.push(0);}customData = String.fromCharCode.apply(null,customData); // Encode in Base 64 the custom data string
	customData = BASE64.encode(customData); // Initialize CDM data with Base 64 encoded custom data
	// (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)
	cdmData = PRCDMData.replace('%CUSTOMDATA%',customData); // Convert CDM data into multibyte characters
	cdmDataBytes = [];for(i = 0;i < cdmData.length;++i) {cdmDataBytes.push(cdmData.charCodeAt(i));cdmDataBytes.push(0);}return new Uint8Array(cdmDataBytes).buffer;}return null;}function getSessionId() /*cp*/{return null;}instance = {uuid:uuid,schemeIdURI:schemeIdURI,systemString:systemString,getInitData:getInitData,getRequestHeadersFromMessage:getRequestHeadersFromMessage,getLicenseRequestFromMessage:getLicenseRequestFromMessage,getLicenseServerURLFromInitData:getLicenseServerURLFromInitData,getCDMData:getCDMData,getSessionId:getSessionId,setPlayReadyMessageFormat:setPlayReadyMessageFormat,init:init};return instance;}KeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';exports['default'] = dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=KeySystemPlayReady.js.map


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * CastLabs DRMToday License Server implementation
	 *
	 * @implements LicenseServer
	 * @class
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _constantsProtectionConstants=__webpack_require__(273);var _constantsProtectionConstants2=_interopRequireDefault(_constantsProtectionConstants);function DRMToday(config){config = config || {};var BASE64=config.BASE64;var keySystems={};keySystems[_constantsProtectionConstants2['default'].WIDEVINE_KEYSTEM_STRING] = {responseType:'json',getLicenseMessage:function getLicenseMessage(response){return BASE64.decodeArray(response.license);},getErrorResponse:function getErrorResponse(response){return response;}};keySystems[_constantsProtectionConstants2['default'].PLAYREADY_KEYSTEM_STRING] = {responseType:'arraybuffer',getLicenseMessage:function getLicenseMessage(response){return response;},getErrorResponse:function getErrorResponse(response){return String.fromCharCode.apply(null,new Uint8Array(response));}};var instance=undefined;function checkConfig(){if(!BASE64 || !BASE64.hasOwnProperty('decodeArray')){throw new Error('Missing config parameter(s)');}}function getServerURLFromMessage(url /*, message, messageType*/){return url;}function getHTTPMethod() /*messageType*/{return 'POST';}function getResponseType(keySystemStr /*, messageType*/){return keySystems[keySystemStr].responseType;}function getLicenseMessage(serverResponse,keySystemStr /*, messageType*/){checkConfig();return keySystems[keySystemStr].getLicenseMessage(serverResponse);}function getErrorResponse(serverResponse,keySystemStr /*, messageType*/){return keySystems[keySystemStr].getErrorResponse(serverResponse);}instance = {getServerURLFromMessage:getServerURLFromMessage,getHTTPMethod:getHTTPMethod,getResponseType:getResponseType,getLicenseMessage:getLicenseMessage,getErrorResponse:getErrorResponse};return instance;}DRMToday.__dashjs_factory_name = 'DRMToday';exports['default'] = dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=DRMToday.js.map


/***/ }),
/* 278 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /* global escape: true */ /**
	 * Microsoft PlayReady Test License Server
	 *
	 * For testing content that uses the PlayReady test server at
	 *
	 * @implements LicenseServer
	 * @class
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function PlayReady(){var instance=undefined;var soap='http://schemas.xmlsoap.org/soap/envelope/';function uintToString(arrayBuffer){var encodedString=String.fromCharCode.apply(null,new Uint8Array(arrayBuffer));var decodedString=decodeURIComponent(escape(encodedString));return decodedString;}function parseServerResponse(serverResponse){if(window.DOMParser){var stringResponse=uintToString(serverResponse);var parser=new window.DOMParser();var xmlDoc=parser.parseFromString(stringResponse,'text/xml');var envelope=xmlDoc?xmlDoc.getElementsByTagNameNS(soap,'Envelope')[0]:null;var body=envelope?envelope.getElementsByTagNameNS(soap,'Body')[0]:null;var fault=body?body.getElementsByTagNameNS(soap,'Fault')[0]:null;if(fault){return null;}}return serverResponse;}function parseErrorResponse(serverResponse){var faultstring='';var statusCode='';var message='';var idStart=-1;var idEnd=-1;if(window.DOMParser){var stringResponse=uintToString(serverResponse);var parser=new window.DOMParser();var xmlDoc=parser.parseFromString(stringResponse,'text/xml');var envelope=xmlDoc?xmlDoc.getElementsByTagNameNS(soap,'Envelope')[0]:null;var body=envelope?envelope.getElementsByTagNameNS(soap,'Body')[0]:null;var fault=body?body.getElementsByTagNameNS(soap,'Fault')[0]:null;var detail=fault?fault.getElementsByTagName('detail')[0]:null;var exception=detail?detail.getElementsByTagName('Exception')[0]:null;var node=null;if(fault === null){return stringResponse;}node = fault.getElementsByTagName('faultstring')[0].firstChild;faultstring = node?node.nodeValue:null;if(exception !== null){node = exception.getElementsByTagName('StatusCode')[0];statusCode = node?node.firstChild.nodeValue:null;node = exception.getElementsByTagName('Message')[0];message = node?node.firstChild.nodeValue:null;idStart = message?message.lastIndexOf('[') + 1:-1;idEnd = message?message.indexOf(']'):-1;message = message?message.substring(idStart,idEnd):'';}}var errorString='code: ' + statusCode + ', name: ' + faultstring;if(message){errorString += ', message: ' + message;}return errorString;}function getServerURLFromMessage(url /*, message, messageType*/){return url;}function getHTTPMethod() /*messageType*/{return 'POST';}function getResponseType() /*keySystemStr, messageType*/{return 'arraybuffer';}function getLicenseMessage(serverResponse /*, keySystemStr, messageType*/){return parseServerResponse.call(this,serverResponse);}function getErrorResponse(serverResponse /*, keySystemStr, messageType*/){return parseErrorResponse.call(this,serverResponse);}instance = {getServerURLFromMessage:getServerURLFromMessage,getHTTPMethod:getHTTPMethod,getResponseType:getResponseType,getLicenseMessage:getLicenseMessage,getErrorResponse:getErrorResponse};return instance;}PlayReady.__dashjs_factory_name = 'PlayReady';exports['default'] = dashjs.FactoryMaker.getSingletonFactory(PlayReady); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=PlayReady.js.map


/***/ }),
/* 279 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function Widevine(){var instance=undefined;function getServerURLFromMessage(url /*, message, messageType*/){return url;}function getHTTPMethod() /*messageType*/{return 'POST';}function getResponseType() /*keySystemStr, messageType*/{return 'arraybuffer';}function getLicenseMessage(serverResponse /*, keySystemStr, messageType*/){return serverResponse;}function getErrorResponse(serverResponse /*, keySystemStr, messageType*/){return String.fromCharCode.apply(null,new Uint8Array(serverResponse));}instance = {getServerURLFromMessage:getServerURLFromMessage,getHTTPMethod:getHTTPMethod,getResponseType:getResponseType,getLicenseMessage:getLicenseMessage,getErrorResponse:getErrorResponse};return instance;}Widevine.__dashjs_factory_name = 'Widevine';exports['default'] = dashjs.FactoryMaker.getSingletonFactory(Widevine); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=Widevine.js.map


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * CableLabs ClearKey license server implementation
	 *
	 * For testing purposes and evaluating potential uses for ClearKey, we have developed
	 * a dirt-simple API for requesting ClearKey licenses from a remote server.
	 *
	 * @implements LicenseServer
	 * @class
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _voKeyPair=__webpack_require__(271);var _voKeyPair2=_interopRequireDefault(_voKeyPair);var _voClearKeyKeySet=__webpack_require__(272);var _voClearKeyKeySet2=_interopRequireDefault(_voClearKeyKeySet);function ClearKey(){var instance=undefined;function getServerURLFromMessage(url,message /*, messageType*/){ // Build ClearKey server query string
	var jsonMsg=JSON.parse(String.fromCharCode.apply(null,new Uint8Array(message)));url += '/?';for(var i=0;i < jsonMsg.kids.length;i++) {url += jsonMsg.kids[i] + '&';}url = url.substring(0,url.length - 1);return url;}function getHTTPMethod() /*messageType*/{return 'GET';}function getResponseType() /*keySystemStr*/{return 'json';}function getLicenseMessage(serverResponse /*, keySystemStr, messageType*/){if(!serverResponse.hasOwnProperty('keys')){return null;}var keyPairs=[];for(var i=0;i < serverResponse.keys.length;i++) {var keypair=serverResponse.keys[i];var keyid=keypair.kid.replace(/=/g,'');var key=keypair.k.replace(/=/g,'');keyPairs.push(new _voKeyPair2['default'](keyid,key));}return new _voClearKeyKeySet2['default'](keyPairs);}function getErrorResponse(serverResponse /*, keySystemStr, messageType*/){return String.fromCharCode.apply(null,new Uint8Array(serverResponse));}instance = {getServerURLFromMessage:getServerURLFromMessage,getHTTPMethod:getHTTPMethod,getResponseType:getResponseType,getLicenseMessage:getLicenseMessage,getErrorResponse:getErrorResponse};return instance;}ClearKey.__dashjs_factory_name = 'ClearKey';exports['default'] = dashjs.FactoryMaker.getSingletonFactory(ClearKey); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=ClearKey.js.map


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});var _get=function get(_x,_x2,_x3){var _again=true;_function: while(_again) {var object=_x,property=_x2,receiver=_x3;_again = false;if(object === null)object = Function.prototype;var desc=Object.getOwnPropertyDescriptor(object,property);if(desc === undefined){var parent=Object.getPrototypeOf(object);if(parent === null){return undefined;}else {_x = parent;_x2 = property;_x3 = receiver;_again = true;desc = parent = undefined;continue _function;}}else if('value' in desc){return desc.value;}else {var getter=desc.get;if(getter === undefined){return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass,superClass){if(typeof superClass !== 'function' && superClass !== null){throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__ = superClass;}var _coreEventsEventsBase=__webpack_require__(58);var _coreEventsEventsBase2=_interopRequireDefault(_coreEventsEventsBase); /**
	 * @class
	 *
	 */var ProtectionEvents=(function(_EventsBase){_inherits(ProtectionEvents,_EventsBase); /**
	     * @description Public facing external events to be used when including protection package.
	     * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed
	     * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.
	     */function ProtectionEvents(){_classCallCheck(this,ProtectionEvents);_get(Object.getPrototypeOf(ProtectionEvents.prototype),'constructor',this).call(this); /**
	         * Event ID for events delivered when the protection set receives
	         * a key message from the CDM
	         *
	         * @ignore
	         */this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage'; /**
	         * Event ID for events delivered when a key system selection procedure
	         * completes
	         * @ignore
	         */this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected'; /**
	         * Event ID for events delivered when the status of one decryption keys has changed
	         * @ignore
	         */this.INTERNAL_KEY_STATUS_CHANGED = 'internalkeyStatusChanged'; /**
	         * Event ID for events delivered when a new key has been added
	         *
	         * @constant
	         * @deprecated The latest versions of the EME specification no longer
	         * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}
	         * is preferred.
	         * @event ProtectionEvents#KEY_ADDED
	         */this.KEY_ADDED = 'public_keyAdded'; /**
	         * Event ID for events delivered when an error is encountered by the CDM
	         * while processing a license server response message
	         * @event ProtectionEvents#KEY_ERROR
	         */this.KEY_ERROR = 'public_keyError'; /**
	         * Event ID for events delivered when the protection set receives
	         * a key message from the CDM
	         * @event ProtectionEvents#KEY_MESSAGE
	         */this.KEY_MESSAGE = 'public_keyMessage'; /**
	         * Event ID for events delivered when a key session close
	         * process has completed
	         * @event ProtectionEvents#KEY_SESSION_CLOSED
	         */this.KEY_SESSION_CLOSED = 'public_keySessionClosed'; /**
	         * Event ID for events delivered when a new key sessions creation
	         * process has completed
	         * @event ProtectionEvents#KEY_SESSION_CREATED
	         */this.KEY_SESSION_CREATED = 'public_keySessionCreated'; /**
	         * Event ID for events delivered when a key session removal
	         * process has completed
	         * @event ProtectionEvents#KEY_SESSION_REMOVED
	         */this.KEY_SESSION_REMOVED = 'public_keySessionRemoved'; /**
	         * Event ID for events delivered when the status of one or more
	         * decryption keys has changed
	         * @event ProtectionEvents#KEY_STATUSES_CHANGED
	         */this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged'; /**
	         * Event ID for events delivered when a key system access procedure
	         * has completed
	         * @ignore
	         */this.KEY_SYSTEM_ACCESS_COMPLETE = 'public_keySystemAccessComplete'; /**
	         * Event ID for events delivered when a key system selection procedure
	         * completes
	         * @event ProtectionEvents#KEY_SYSTEM_SELECTED
	         */this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected'; /**
	         * Event ID for events delivered when a license request procedure
	         * has completed
	         * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE
	         */this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete'; /**
	         * Event ID for needkey/encrypted events
	         * @ignore
	         */this.NEED_KEY = 'needkey'; /**
	         * Event ID for events delivered when the Protection system is detected and created.
	         * @event ProtectionEvents#PROTECTION_CREATED
	         */this.PROTECTION_CREATED = 'public_protectioncreated'; /**
	         * Event ID for events delivered when the Protection system is destroyed.
	         * @event ProtectionEvents#PROTECTION_DESTROYED
	         */this.PROTECTION_DESTROYED = 'public_protectiondestroyed'; /**
	         * Event ID for events delivered when a new server certificate has
	         * been delivered to the CDM
	         * @ignore
	         */this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated'; /**
	         * Event ID for events delivered when the process of shutting down
	         * a protection set has completed
	         * @ignore
	         */this.TEARDOWN_COMPLETE = 'protectionTeardownComplete'; /**
	         * Event ID for events delivered when a HTMLMediaElement has been
	         * associated with the protection set
	         * @ignore
	         */this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';}return ProtectionEvents;})(_coreEventsEventsBase2['default']);var protectionEvents=new ProtectionEvents();exports['default'] = protectionEvents;module.exports = exports['default'];
	//# sourceMappingURL=ProtectionEvents.js.map


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * Most recent EME implementation
	 *
	 * Implemented by Google Chrome v36+ (Windows, OSX, Linux)
	 *
	 * @implements ProtectionModel
	 * @class
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _controllersProtectionKeyController=__webpack_require__(269);var _controllersProtectionKeyController2=_interopRequireDefault(_controllersProtectionKeyController);var _voNeedKey=__webpack_require__(283);var _voNeedKey2=_interopRequireDefault(_voNeedKey);var _errorsProtectionErrors=__webpack_require__(268);var _errorsProtectionErrors2=_interopRequireDefault(_errorsProtectionErrors);var _voDashJSError=__webpack_require__(62);var _voDashJSError2=_interopRequireDefault(_voDashJSError);var _voKeyMessage=__webpack_require__(284);var _voKeyMessage2=_interopRequireDefault(_voKeyMessage);var _voKeySystemAccess=__webpack_require__(285);var _voKeySystemAccess2=_interopRequireDefault(_voKeySystemAccess);var _constantsProtectionConstants=__webpack_require__(273);var _constantsProtectionConstants2=_interopRequireDefault(_constantsProtectionConstants);function ProtectionModel_21Jan2015(config){config = config || {};var context=this.context;var eventBus=config.eventBus; //Need to pass in here so we can use same instance since this is optional module
	var events=config.events;var debug=config.debug;var instance=undefined,logger=undefined,keySystem=undefined,videoElement=undefined,mediaKeys=undefined,sessions=undefined,eventHandler=undefined,protectionKeyController=undefined;function setup(){logger = debug.getLogger(instance);keySystem = null;videoElement = null;mediaKeys = null;sessions = [];protectionKeyController = (0,_controllersProtectionKeyController2['default'])(context).getInstance();eventHandler = createEventHandler();}function reset(){var numSessions=sessions.length;var session=undefined;if(numSessions !== 0){(function(){ // Called when we are done closing a session.  Success or fail
	var done=function done(session){removeSession(session);if(sessions.length === 0){if(videoElement){videoElement.removeEventListener('encrypted',eventHandler);videoElement.setMediaKeys(null).then(function(){eventBus.trigger(events.TEARDOWN_COMPLETE);});}else {eventBus.trigger(events.TEARDOWN_COMPLETE);}}};for(var i=0;i < numSessions;i++) {session = sessions[i];(function(s){ // Override closed promise resolver
	session.session.closed.then(function(){done(s);}); // Close the session and handle errors, otherwise promise
	// resolver above will be called
	closeKeySessionInternal(session)['catch'](function(){done(s);});})(session);}})();}else {eventBus.trigger(events.TEARDOWN_COMPLETE);}}function stop(){ // Close and remove not usable sessions
	var session=undefined;for(var i=0;i < sessions.length;i++) {session = sessions[i];if(!session.getUsable()){closeKeySessionInternal(session)['catch'](function(){removeSession(session);});}}}function getKeySystem(){return keySystem;}function getAllInitData(){var retVal=[];for(var i=0;i < sessions.length;i++) {if(sessions[i].initData){retVal.push(sessions[i].initData);}}return retVal;}function requestKeySystemAccess(ksConfigurations){requestKeySystemAccessInternal(ksConfigurations,0);}function selectKeySystem(keySystemAccess){keySystemAccess.mksa.createMediaKeys().then(function(mkeys){keySystem = keySystemAccess.keySystem;mediaKeys = mkeys;if(videoElement){videoElement.setMediaKeys(mediaKeys).then(function(){eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);});}else {eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);}})['catch'](function(){eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED,{error:'Error selecting keys system (' + keySystemAccess.keySystem.systemString + ')! Could not create MediaKeys -- TODO'});});}function setMediaElement(mediaElement){if(videoElement === mediaElement)return; // Replacing the previous element
	if(videoElement){videoElement.removeEventListener('encrypted',eventHandler);if(videoElement.setMediaKeys){videoElement.setMediaKeys(null);}}videoElement = mediaElement; // Only if we are not detaching from the existing element
	if(videoElement){videoElement.addEventListener('encrypted',eventHandler);if(videoElement.setMediaKeys && mediaKeys){videoElement.setMediaKeys(mediaKeys);}}}function setServerCertificate(serverCertificate){if(!keySystem || !mediaKeys){throw new Error('Can not set server certificate until you have selected a key system');}mediaKeys.setServerCertificate(serverCertificate).then(function(){logger.info('DRM: License server certificate successfully updated.');eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED);})['catch'](function(error){eventBus.trigger(events.SERVER_CERTIFICATE_UPDATED,{error:new _voDashJSError2['default'](_errorsProtectionErrors2['default'].SERVER_CERTIFICATE_UPDATED_ERROR_CODE,_errorsProtectionErrors2['default'].SERVER_CERTIFICATE_UPDATED_ERROR_MESSAGE + error.name)});});}function createKeySession(initData,protData,sessionType){if(!keySystem || !mediaKeys){throw new Error('Can not create sessions until you have selected a key system');}var session=mediaKeys.createSession(sessionType);var sessionToken=createSessionToken(session,initData,sessionType);var ks=this.getKeySystem(); // Generate initial key request.
	// keyids type is used for clearkey when keys are provided directly in the protection data and then request to a license server is not needed
	var dataType=ks.systemString === _constantsProtectionConstants2['default'].CLEARKEY_KEYSTEM_STRING && protData && protData.clearkeys?'keyids':'cenc';session.generateRequest(dataType,initData).then(function(){logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());eventBus.trigger(events.KEY_SESSION_CREATED,{data:sessionToken});})['catch'](function(error){ // TODO: Better error string
	removeSession(sessionToken);eventBus.trigger(events.KEY_SESSION_CREATED,{data:null,error:new _voDashJSError2['default'](_errorsProtectionErrors2['default'].KEY_SESSION_CREATED_ERROR_CODE,_errorsProtectionErrors2['default'].KEY_SESSION_CREATED_ERROR_MESSAGE + 'Error generating key request -- ' + error.name)});});}function updateKeySession(sessionToken,message){var session=sessionToken.session; // Send our request to the key session
	if(protectionKeyController.isClearKey(keySystem)){message = message.toJWK();}session.update(message)['catch'](function(error){eventBus.trigger(events.KEY_ERROR,{data:new _voDashJSError2['default'](_errorsProtectionErrors2['default'].MEDIA_KEYERR_CODE,'Error sending update() message! ' + error.name,sessionToken)});});}function loadKeySession(sessionID,initData,sessionType){if(!keySystem || !mediaKeys){throw new Error('Can not load sessions until you have selected a key system');} // Check if session Id is not already loaded or loading
	for(var i=0;i < sessions.length;i++) {if(sessionID === sessions[i].sessionId){logger.warn('DRM: Ignoring session ID because we have already seen it!');return;}}var session=mediaKeys.createSession(sessionType);var sessionToken=createSessionToken(session,initData,sessionType,sessionID); // Load persisted session data into our newly created session object
	session.load(sessionID).then(function(success){if(success){logger.debug('DRM: Session loaded.  SessionID = ' + sessionToken.getSessionID());eventBus.trigger(events.KEY_SESSION_CREATED,{data:sessionToken});}else {removeSession(sessionToken);eventBus.trigger(events.KEY_SESSION_CREATED,{data:null,error:new _voDashJSError2['default'](_errorsProtectionErrors2['default'].KEY_SESSION_CREATED_ERROR_CODE,_errorsProtectionErrors2['default'].KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session! Invalid Session ID (' + sessionID + ')')});}})['catch'](function(error){removeSession(sessionToken);eventBus.trigger(events.KEY_SESSION_CREATED,{data:null,error:new _voDashJSError2['default'](_errorsProtectionErrors2['default'].KEY_SESSION_CREATED_ERROR_CODE,_errorsProtectionErrors2['default'].KEY_SESSION_CREATED_ERROR_MESSAGE + 'Could not load session (' + sessionID + ')! ' + error.name)});});}function removeKeySession(sessionToken){var session=sessionToken.session;session.remove().then(function(){logger.debug('DRM: Session removed.  SessionID = ' + sessionToken.getSessionID());eventBus.trigger(events.KEY_SESSION_REMOVED,{data:sessionToken.getSessionID()});},function(error){eventBus.trigger(events.KEY_SESSION_REMOVED,{data:null,error:'Error removing session (' + sessionToken.getSessionID() + '). ' + error.name});});}function closeKeySession(sessionToken){ // Send our request to the key session
	closeKeySessionInternal(sessionToken)['catch'](function(error){removeSession(sessionToken);eventBus.trigger(events.KEY_SESSION_CLOSED,{data:null,error:'Error closing session (' + sessionToken.getSessionID() + ') ' + error.name});});}function requestKeySystemAccessInternal(ksConfigurations,idx){if(navigator.requestMediaKeySystemAccess === undefined || typeof navigator.requestMediaKeySystemAccess !== 'function'){eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE,{error:'Insecure origins are not allowed'});return;}(function(i){var keySystem=ksConfigurations[i].ks;var configs=ksConfigurations[i].configs;navigator.requestMediaKeySystemAccess(keySystem.systemString,configs).then(function(mediaKeySystemAccess){ // Chrome 40 does not currently implement MediaKeySystemAccess.getConfiguration()
	var configuration=typeof mediaKeySystemAccess.getConfiguration === 'function'?mediaKeySystemAccess.getConfiguration():null;var keySystemAccess=new _voKeySystemAccess2['default'](keySystem,configuration);keySystemAccess.mksa = mediaKeySystemAccess;eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE,{data:keySystemAccess});})['catch'](function(error){if(++i < ksConfigurations.length){requestKeySystemAccessInternal(ksConfigurations,i);}else {eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE,{error:'Key system access denied! ' + error.message});}});})(idx);}function closeKeySessionInternal(sessionToken){var session=sessionToken.session; // Remove event listeners
	session.removeEventListener('keystatuseschange',sessionToken);session.removeEventListener('message',sessionToken); // Send our request to the key session
	return session.close();} // This is our main event handler for all desired HTMLMediaElement events
	// related to EME.  These events are translated into our API-independent
	// versions of the same events
	function createEventHandler(){return {handleEvent:function handleEvent(event){switch(event.type){case 'encrypted':if(event.initData){var initData=ArrayBuffer.isView(event.initData)?event.initData.buffer:event.initData;eventBus.trigger(events.NEED_KEY,{key:new _voNeedKey2['default'](initData,event.initDataType)});}break;}}};}function removeSession(token){ // Remove from our session list
	for(var i=0;i < sessions.length;i++) {if(sessions[i] === token){sessions.splice(i,1);break;}}}function parseKeyStatus(args){ // Edge and Chrome implement different version of keystatues, param are not on same order
	var status=undefined,keyId=undefined;if(args && args.length > 0){if(args[0]){if(typeof args[0] === 'string'){status = args[0];}else {keyId = args[0];}}if(args[1]){if(typeof args[1] === 'string'){status = args[1];}else {keyId = args[1];}}}return {status:status,keyId:keyId};} // Function to create our session token objects which manage the EME
	// MediaKeySession and session-specific event handler
	function createSessionToken(session,initData,sessionType,sessionID){var token={ // Implements SessionToken
	session:session,initData:initData,sessionId:sessionID, // This is our main event handler for all desired MediaKeySession events
	// These events are translated into our API-independent versions of the
	// same events
	handleEvent:function handleEvent(event){switch(event.type){case 'keystatuseschange':eventBus.trigger(events.KEY_STATUSES_CHANGED,{data:this});event.target.keyStatuses.forEach(function(){var keyStatus=parseKeyStatus(arguments);switch(keyStatus.status){case 'expired':eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED,{error:new _voDashJSError2['default'](_errorsProtectionErrors2['default'].KEY_STATUS_CHANGED_EXPIRED_ERROR_CODE,_errorsProtectionErrors2['default'].KEY_STATUS_CHANGED_EXPIRED_ERROR_MESSAGE)});break;default:eventBus.trigger(events.INTERNAL_KEY_STATUS_CHANGED,keyStatus);break;}});break;case 'message':var message=ArrayBuffer.isView(event.message)?event.message.buffer:event.message;eventBus.trigger(events.INTERNAL_KEY_MESSAGE,{data:new _voKeyMessage2['default'](this,message,undefined,event.messageType)});break;}},getSessionID:function getSessionID(){return session.sessionId;},getExpirationTime:function getExpirationTime(){return session.expiration;},getKeyStatuses:function getKeyStatuses(){return session.keyStatuses;},getUsable:function getUsable(){var usable=false;session.keyStatuses.forEach(function(){var keyStatus=parseKeyStatus(arguments);if(keyStatus.status === 'usable'){usable = true;}});return usable;},getSessionType:function getSessionType(){return sessionType;}}; // Add all event listeners
	session.addEventListener('keystatuseschange',token);session.addEventListener('message',token); // Register callback for session closed Promise
	session.closed.then(function(){removeSession(token);logger.debug('DRM: Session closed.  SessionID = ' + token.getSessionID());eventBus.trigger(events.KEY_SESSION_CLOSED,{data:token.getSessionID()});}); // Add to our session list
	sessions.push(token);return token;}instance = {getAllInitData:getAllInitData,requestKeySystemAccess:requestKeySystemAccess,getKeySystem:getKeySystem,selectKeySystem:selectKeySystem,setMediaElement:setMediaElement,setServerCertificate:setServerCertificate,createKeySession:createKeySession,updateKeySession:updateKeySession,loadKeySession:loadKeySession,removeKeySession:removeKeySession,closeKeySession:closeKeySession,stop:stop,reset:reset};setup();return instance;}ProtectionModel_21Jan2015.__dashjs_factory_name = 'ProtectionModel_21Jan2015';exports['default'] = dashjs.FactoryMaker.getClassFactory(ProtectionModel_21Jan2015); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=ProtectionModel_21Jan2015.js.map


/***/ }),
/* 283 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc NeedKey
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var NeedKey= /**
	     * @param {ArrayBuffer} initData the initialization data
	     * @param {string} initDataType initialization data type
	     * @class
	     */function NeedKey(initData,initDataType){_classCallCheck(this,NeedKey);this.initData = initData;this.initDataType = initDataType;};exports["default"] = NeedKey;module.exports = exports["default"];
	//# sourceMappingURL=NeedKey.js.map


/***/ }),
/* 284 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc EME-independent KeyMessage
	 * @ignore
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function');}}var KeyMessage= /**
	     * @param {SessionToken} sessionToken the session
	     * to which the key message is associated
	     * @param {ArrayBuffer} message the key message
	     * @param {string} defaultURL license acquisition URL provided by the CDM
	     * @param {string} messageType Supported message types can be found
	     * {@link https://w3c.github.io/encrypted-media/#idl-def-MediaKeyMessageType|here}.
	     * @class
	     */function KeyMessage(sessionToken,message,defaultURL,messageType){_classCallCheck(this,KeyMessage);this.sessionToken = sessionToken;this.message = message;this.defaultURL = defaultURL;this.messageType = messageType?messageType:'license-request';};exports['default'] = KeyMessage;module.exports = exports['default'];
	//# sourceMappingURL=KeyMessage.js.map


/***/ }),
/* 285 */
/***/ (function(module, exports) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * @classdesc Creates a new key system access token.  Represents a valid key system for
	 * given piece of content and key system requirements.  Used to initialize license
	 * acquisition operations.
	 * @ignore
	 */"use strict";Object.defineProperty(exports,"__esModule",{value:true});function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}var KeySystemAccess= /**
	     * @param {MediaPlayer.dependencies.protection.KeySystem} keySystem the key system
	     * @param {KeySystemConfiguration} ksConfiguration the
	     * subset of configurations passed to the key system access request that are supported
	     * by this user agent
	     * @class
	     * @ignore
	     */function KeySystemAccess(keySystem,ksConfiguration){_classCallCheck(this,KeySystemAccess);this.keySystem = keySystem;this.ksConfiguration = ksConfiguration;};exports["default"] = KeySystemAccess;module.exports = exports["default"];
	//# sourceMappingURL=KeySystemAccess.js.map


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.
	 *
	 * Implemented by Internet Explorer 11 (Windows 8.1)
	 *
	 * @implements ProtectionModel
	 * @class
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _controllersProtectionKeyController=__webpack_require__(269);var _controllersProtectionKeyController2=_interopRequireDefault(_controllersProtectionKeyController);var _voNeedKey=__webpack_require__(283);var _voNeedKey2=_interopRequireDefault(_voNeedKey);var _voDashJSError=__webpack_require__(62);var _voDashJSError2=_interopRequireDefault(_voDashJSError);var _errorsProtectionErrors=__webpack_require__(268);var _errorsProtectionErrors2=_interopRequireDefault(_errorsProtectionErrors);var _voKeyMessage=__webpack_require__(284);var _voKeyMessage2=_interopRequireDefault(_voKeyMessage);var _voKeySystemConfiguration=__webpack_require__(267);var _voKeySystemConfiguration2=_interopRequireDefault(_voKeySystemConfiguration);var _voKeySystemAccess=__webpack_require__(285);var _voKeySystemAccess2=_interopRequireDefault(_voKeySystemAccess);function ProtectionModel_3Feb2014(config){config = config || {};var context=this.context;var eventBus=config.eventBus; //Need to pass in here so we can use same instance since this is optional module
	var events=config.events;var debug=config.debug;var api=config.api;var instance=undefined,logger=undefined,videoElement=undefined,keySystem=undefined,mediaKeys=undefined,keySystemAccess=undefined,sessions=undefined,eventHandler=undefined,protectionKeyController=undefined;function setup(){logger = debug.getLogger(instance);videoElement = null;keySystem = null;mediaKeys = null;keySystemAccess = null;sessions = [];protectionKeyController = (0,_controllersProtectionKeyController2['default'])(context).getInstance();eventHandler = createEventHandler();}function reset(){try{for(var i=0;i < sessions.length;i++) {closeKeySession(sessions[i]);}if(videoElement){videoElement.removeEventListener(api.needkey,eventHandler);}eventBus.trigger(events.TEARDOWN_COMPLETE);}catch(error) {eventBus.trigger(events.TEARDOWN_COMPLETE,{error:'Error tearing down key sessions and MediaKeys! -- ' + error.message});}}function getKeySystem(){return keySystem;}function getAllInitData(){var retVal=[];for(var i=0;i < sessions.length;i++) {retVal.push(sessions[i].initData);}return retVal;}function requestKeySystemAccess(ksConfigurations){ // Try key systems in order, first one with supported key system configuration
	// is used
	var found=false;for(var ksIdx=0;ksIdx < ksConfigurations.length;ksIdx++) {var systemString=ksConfigurations[ksIdx].ks.systemString;var configs=ksConfigurations[ksIdx].configs;var supportedAudio=null;var supportedVideo=null; // Try key system configs in order, first one with supported audio/video
	// is used
	for(var configIdx=0;configIdx < configs.length;configIdx++) {var audios=configs[configIdx].audioCapabilities;var videos=configs[configIdx].videoCapabilities; // Look for supported audio container/codecs
	if(audios && audios.length !== 0){supportedAudio = []; // Indicates that we have a requested audio config
	for(var audioIdx=0;audioIdx < audios.length;audioIdx++) {if(window[api.MediaKeys].isTypeSupported(systemString,audios[audioIdx].contentType)){supportedAudio.push(audios[audioIdx]);}}} // Look for supported video container/codecs
	if(videos && videos.length !== 0){supportedVideo = []; // Indicates that we have a requested video config
	for(var videoIdx=0;videoIdx < videos.length;videoIdx++) {if(window[api.MediaKeys].isTypeSupported(systemString,videos[videoIdx].contentType)){supportedVideo.push(videos[videoIdx]);}}} // No supported audio or video in this configuration OR we have
	// requested audio or video configuration that is not supported
	if(!supportedAudio && !supportedVideo || supportedAudio && supportedAudio.length === 0 || supportedVideo && supportedVideo.length === 0){continue;} // This configuration is supported
	found = true;var ksConfig=new _voKeySystemConfiguration2['default'](supportedAudio,supportedVideo);var ks=protectionKeyController.getKeySystemBySystemString(systemString);eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE,{data:new _voKeySystemAccess2['default'](ks,ksConfig)});break;}}if(!found){eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE,{error:'Key system access denied! -- No valid audio/video content configurations detected!'});}}function selectKeySystem(ksAccess){try{mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);keySystem = ksAccess.keySystem;keySystemAccess = ksAccess;if(videoElement){setMediaKeys();}eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);}catch(error) {eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED,{error:'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO'});}}function setMediaElement(mediaElement){if(videoElement === mediaElement)return; // Replacing the previous element
	if(videoElement){videoElement.removeEventListener(api.needkey,eventHandler);}videoElement = mediaElement; // Only if we are not detaching from the existing element
	if(videoElement){videoElement.addEventListener(api.needkey,eventHandler);if(mediaKeys){setMediaKeys();}}}function createKeySession(initData,protData,sessionType,cdmData){if(!keySystem || !mediaKeys || !keySystemAccess){throw new Error('Can not create sessions until you have selected a key system');} // Use the first video capability for the contentType.
	// TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format
	// If player is trying to playback Audio only stream - don't error out.
	var capabilities=null;if(keySystemAccess.ksConfiguration.videoCapabilities && keySystemAccess.ksConfiguration.videoCapabilities.length > 0){capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];}if(capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities && keySystemAccess.ksConfiguration.audioCapabilities.length > 0){capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];}if(capabilities === null){throw new Error('Can not create sessions for unknown content types.');}var contentType=capabilities.contentType;var session=mediaKeys.createSession(contentType,new Uint8Array(initData),cdmData?new Uint8Array(cdmData):null);var sessionToken=createSessionToken(session,initData); // Add all event listeners
	session.addEventListener(api.error,sessionToken);session.addEventListener(api.message,sessionToken);session.addEventListener(api.ready,sessionToken);session.addEventListener(api.close,sessionToken); // Add to our session list
	sessions.push(sessionToken);logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());eventBus.trigger(events.KEY_SESSION_CREATED,{data:sessionToken});}function updateKeySession(sessionToken,message){var session=sessionToken.session;if(!protectionKeyController.isClearKey(keySystem)){ // Send our request to the key session
	session.update(new Uint8Array(message));}else { // For clearkey, message is a ClearKeyKeySet
	session.update(new Uint8Array(message.toJWK()));}} /**
	     * Close the given session and release all associated keys.  Following
	     * this call, the sessionToken becomes invalid
	     *
	     * @param {Object} sessionToken - the session token
	     */function closeKeySession(sessionToken){var session=sessionToken.session; // Remove event listeners
	session.removeEventListener(api.error,sessionToken);session.removeEventListener(api.message,sessionToken);session.removeEventListener(api.ready,sessionToken);session.removeEventListener(api.close,sessionToken); // Remove from our session list
	for(var i=0;i < sessions.length;i++) {if(sessions[i] === sessionToken){sessions.splice(i,1);break;}} // Send our request to the key session
	session[api.release]();}function setServerCertificate() /*serverCertificate*/{ /* Not supported */}function loadKeySession() /*sessionID*/{ /* Not supported */}function removeKeySession() /*sessionToken*/{ /* Not supported */}function createEventHandler(){return {handleEvent:function handleEvent(event){switch(event.type){case api.needkey:if(event.initData){var initData=ArrayBuffer.isView(event.initData)?event.initData.buffer:event.initData;eventBus.trigger(events.NEED_KEY,{key:new _voNeedKey2['default'](initData,'cenc')});}break;}}};} // IE11 does not let you set MediaKeys until it has entered a certain
	// readyState, so we need this logic to ensure we don't set the keys
	// too early
	function setMediaKeys(){var boundDoSetKeys=null;var doSetKeys=function doSetKeys(){videoElement.removeEventListener('loadedmetadata',boundDoSetKeys);videoElement[api.setMediaKeys](mediaKeys);eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);};if(videoElement.readyState >= 1){doSetKeys();}else {boundDoSetKeys = doSetKeys.bind(this);videoElement.addEventListener('loadedmetadata',boundDoSetKeys);}} // Function to create our session token objects which manage the EME
	// MediaKeySession and session-specific event handler
	function createSessionToken(keySession,initData){return { // Implements SessionToken
	session:keySession,initData:initData,getSessionID:function getSessionID(){return this.session.sessionId;},getExpirationTime:function getExpirationTime(){return NaN;},getSessionType:function getSessionType(){return 'temporary';}, // This is our main event handler for all desired MediaKeySession events
	// These events are translated into our API-independent versions of the
	// same events
	handleEvent:function handleEvent(event){switch(event.type){case api.error:var errorStr='KeyError'; // TODO: Make better string from event
	eventBus.trigger(events.KEY_ERROR,{data:new _voDashJSError2['default'](_errorsProtectionErrors2['default'].MEDIA_KEYERR_CODE,errorStr,this)});break;case api.message:var message=ArrayBuffer.isView(event.message)?event.message.buffer:event.message;eventBus.trigger(events.INTERNAL_KEY_MESSAGE,{data:new _voKeyMessage2['default'](this,message,event.destinationURL)});break;case api.ready:logger.debug('DRM: Key added.');eventBus.trigger(events.KEY_ADDED);break;case api.close:logger.debug('DRM: Session closed.  SessionID = ' + this.getSessionID());eventBus.trigger(events.KEY_SESSION_CLOSED,{data:this.getSessionID()});break;}}};}instance = {getAllInitData:getAllInitData,requestKeySystemAccess:requestKeySystemAccess,getKeySystem:getKeySystem,selectKeySystem:selectKeySystem,setMediaElement:setMediaElement,createKeySession:createKeySession,updateKeySession:updateKeySession,closeKeySession:closeKeySession,setServerCertificate:setServerCertificate,loadKeySession:loadKeySession,removeKeySession:removeKeySession,stop:reset,reset:reset};setup();return instance;}ProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';exports['default'] = dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=ProtectionModel_3Feb2014.js.map


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * The copyright in this software is being made available under the BSD License,
	 * included below. This software may be subject to other third party and contributor
	 * rights, including patent rights, and no such rights are granted under this license.
	 *
	 * Copyright (c) 2013, Dash Industry Forum.
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without modification,
	 * are permitted provided that the following conditions are met:
	 *  * Redistributions of source code must retain the above copyright notice, this
	 *  list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above copyright notice,
	 *  this list of conditions and the following disclaimer in the documentation and/or
	 *  other materials provided with the distribution.
	 *  * Neither the name of Dash Industry Forum nor the names of its
	 *  contributors may be used to endorse or promote products derived from this software
	 *  without specific prior written permission.
	 *
	 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY
	 *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
	 *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
	 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
	 *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
	 *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
	 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
	 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
	 *  POSSIBILITY OF SUCH DAMAGE.
	 */ /**
	 * Initial implementation of EME
	 *
	 * Implemented by Google Chrome prior to v36
	 *
	 * @implements ProtectionModel
	 * @class
	 */'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _controllersProtectionKeyController=__webpack_require__(269);var _controllersProtectionKeyController2=_interopRequireDefault(_controllersProtectionKeyController);var _voNeedKey=__webpack_require__(283);var _voNeedKey2=_interopRequireDefault(_voNeedKey);var _voDashJSError=__webpack_require__(62);var _voDashJSError2=_interopRequireDefault(_voDashJSError);var _voKeyMessage=__webpack_require__(284);var _voKeyMessage2=_interopRequireDefault(_voKeyMessage);var _voKeySystemConfiguration=__webpack_require__(267);var _voKeySystemConfiguration2=_interopRequireDefault(_voKeySystemConfiguration);var _voKeySystemAccess=__webpack_require__(285);var _voKeySystemAccess2=_interopRequireDefault(_voKeySystemAccess);var _errorsProtectionErrors=__webpack_require__(268);var _errorsProtectionErrors2=_interopRequireDefault(_errorsProtectionErrors);function ProtectionModel_01b(config){config = config || {};var context=this.context;var eventBus=config.eventBus; //Need to pass in here so we can use same instance since this is optional module
	var events=config.events;var debug=config.debug;var api=config.api;var errHandler=config.errHandler;var instance=undefined,logger=undefined,videoElement=undefined,keySystem=undefined,protectionKeyController=undefined, // With this version of the EME APIs, sessionIDs are not assigned to
	// sessions until the first key message is received.  We are assuming
	// that in the case of multiple sessions, key messages will be received
	// in the order that generateKeyRequest() is called.
	// Holding spot for newly-created sessions until we determine whether or
	// not the CDM supports sessionIDs
	pendingSessions=undefined, // List of sessions that have been initialized.  Only the first position will
	// be used in the case that the CDM does not support sessionIDs
	sessions=undefined, // Not all CDMs support the notion of sessionIDs.  Without sessionIDs
	// there is no way for us to differentiate between sessions, therefore
	// we must only allow a single session.  Once we receive the first key
	// message we can set this flag to determine if more sessions are allowed
	moreSessionsAllowed=undefined, // This is our main event handler for all desired HTMLMediaElement events
	// related to EME.  These events are translated into our API-independent
	// versions of the same events
	eventHandler=undefined;function setup(){logger = debug.getLogger(instance);videoElement = null;keySystem = null;pendingSessions = [];sessions = [];protectionKeyController = (0,_controllersProtectionKeyController2['default'])(context).getInstance();eventHandler = createEventHandler();}function reset(){if(videoElement){removeEventListeners();}for(var i=0;i < sessions.length;i++) {closeKeySession(sessions[i]);}eventBus.trigger(events.TEARDOWN_COMPLETE);}function getKeySystem(){return keySystem;}function getAllInitData(){var retVal=[];for(var i=0;i < pendingSessions.length;i++) {retVal.push(pendingSessions[i].initData);}for(var i=0;i < sessions.length;i++) {retVal.push(sessions[i].initData);}return retVal;}function requestKeySystemAccess(ksConfigurations){var ve=videoElement;if(!ve){ // Must have a video element to do this capability tests
	ve = document.createElement('video');} // Try key systems in order, first one with supported key system configuration
	// is used
	var found=false;for(var ksIdx=0;ksIdx < ksConfigurations.length;ksIdx++) {var systemString=ksConfigurations[ksIdx].ks.systemString;var configs=ksConfigurations[ksIdx].configs;var supportedAudio=null;var supportedVideo=null; // Try key system configs in order, first one with supported audio/video
	// is used
	for(var configIdx=0;configIdx < configs.length;configIdx++) { //let audios = configs[configIdx].audioCapabilities;
	var videos=configs[configIdx].videoCapabilities; // Look for supported video container/codecs
	if(videos && videos.length !== 0){supportedVideo = []; // Indicates that we have a requested video config
	for(var videoIdx=0;videoIdx < videos.length;videoIdx++) {if(ve.canPlayType(videos[videoIdx].contentType,systemString) !== ''){supportedVideo.push(videos[videoIdx]);}}} // No supported audio or video in this configuration OR we have
	// requested audio or video configuration that is not supported
	if(!supportedAudio && !supportedVideo || supportedAudio && supportedAudio.length === 0 || supportedVideo && supportedVideo.length === 0){continue;} // This configuration is supported
	found = true;var ksConfig=new _voKeySystemConfiguration2['default'](supportedAudio,supportedVideo);var ks=protectionKeyController.getKeySystemBySystemString(systemString);eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE,{data:new _voKeySystemAccess2['default'](ks,ksConfig)});break;}}if(!found){eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE,{error:'Key system access denied! -- No valid audio/video content configurations detected!'});}}function selectKeySystem(keySystemAccess){keySystem = keySystemAccess.keySystem;eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);}function setMediaElement(mediaElement){if(videoElement === mediaElement){return;} // Replacing the previous element
	if(videoElement){removeEventListeners(); // Close any open sessions - avoids memory leak on LG webOS 2016/2017 TVs
	for(var i=0;i < sessions.length;i++) {closeKeySession(sessions[i]);}sessions = [];}videoElement = mediaElement; // Only if we are not detaching from the existing element
	if(videoElement){videoElement.addEventListener(api.keyerror,eventHandler);videoElement.addEventListener(api.needkey,eventHandler);videoElement.addEventListener(api.keymessage,eventHandler);videoElement.addEventListener(api.keyadded,eventHandler);eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);}}function createKeySession(initData /*, protData, keySystemType */){if(!keySystem){throw new Error('Can not create sessions until you have selected a key system');} // Determine if creating a new session is allowed
	if(moreSessionsAllowed || sessions.length === 0){var newSession={ // Implements SessionToken
	sessionID:null,initData:initData,getSessionID:function getSessionID(){return this.sessionID;},getExpirationTime:function getExpirationTime(){return NaN;},getSessionType:function getSessionType(){return 'temporary';}};pendingSessions.push(newSession); // Send our request to the CDM
	videoElement[api.generateKeyRequest](keySystem.systemString,new Uint8Array(initData));return newSession;}else {throw new Error('Multiple sessions not allowed!');}}function updateKeySession(sessionToken,message){var sessionID=sessionToken.sessionID;if(!protectionKeyController.isClearKey(keySystem)){ // Send our request to the CDM
	videoElement[api.addKey](keySystem.systemString,new Uint8Array(message),new Uint8Array(sessionToken.initData),sessionID);}else { // For clearkey, message is a ClearKeyKeySet
	for(var i=0;i < message.keyPairs.length;i++) {videoElement[api.addKey](keySystem.systemString,message.keyPairs[i].key,message.keyPairs[i].keyID,sessionID);}}}function closeKeySession(sessionToken){ // Send our request to the CDM
	try{videoElement[api.cancelKeyRequest](keySystem.systemString,sessionToken.sessionID);}catch(error) {eventBus.trigger(events.KEY_SESSION_CLOSED,{data:null,error:'Error closing session (' + sessionToken.sessionID + ') ' + error.message});}}function setServerCertificate() /*serverCertificate*/{ /* Not supported */}function loadKeySession() /*sessionID*/{ /* Not supported */}function removeKeySession() /*sessionToken*/{ /* Not supported */}function createEventHandler(){return {handleEvent:function handleEvent(event){var sessionToken=null;switch(event.type){case api.needkey:var initData=ArrayBuffer.isView(event.initData)?event.initData.buffer:event.initData;eventBus.trigger(events.NEED_KEY,{key:new _voNeedKey2['default'](initData,'cenc')});break;case api.keyerror:sessionToken = findSessionByID(sessions,event.sessionId);if(!sessionToken){sessionToken = findSessionByID(pendingSessions,event.sessionId);}if(sessionToken){var code=_errorsProtectionErrors2['default'].MEDIA_KEYERR_CODE;var msg='';switch(event.errorCode.code){case 1:code = _errorsProtectionErrors2['default'].MEDIA_KEYERR_UNKNOWN_CODE;msg += 'MEDIA_KEYERR_UNKNOWN - ' + _errorsProtectionErrors2['default'].MEDIA_KEYERR_UNKNOWN_MESSAGE;break;case 2:code = _errorsProtectionErrors2['default'].MEDIA_KEYERR_CLIENT_CODE;msg += 'MEDIA_KEYERR_CLIENT - ' + _errorsProtectionErrors2['default'].MEDIA_KEYERR_CLIENT_MESSAGE;break;case 3:code = _errorsProtectionErrors2['default'].MEDIA_KEYERR_SERVICE_CODE;msg += 'MEDIA_KEYERR_SERVICE - ' + _errorsProtectionErrors2['default'].MEDIA_KEYERR_SERVICE_MESSAGE;break;case 4:code = _errorsProtectionErrors2['default'].MEDIA_KEYERR_OUTPUT_CODE;msg += 'MEDIA_KEYERR_OUTPUT - ' + _errorsProtectionErrors2['default'].MEDIA_KEYERR_OUTPUT_MESSAGE;break;case 5:code = _errorsProtectionErrors2['default'].MEDIA_KEYERR_HARDWARECHANGE_CODE;msg += 'MEDIA_KEYERR_HARDWARECHANGE - ' + _errorsProtectionErrors2['default'].MEDIA_KEYERR_HARDWARECHANGE_MESSAGE;break;case 6:code = _errorsProtectionErrors2['default'].MEDIA_KEYERR_DOMAIN_CODE;msg += 'MEDIA_KEYERR_DOMAIN - ' + _errorsProtectionErrors2['default'].MEDIA_KEYERR_DOMAIN_MESSAGE;break;}msg += '  System Code = ' + event.systemCode; // TODO: Build error string based on key error
	eventBus.trigger(events.KEY_ERROR,{data:new _voDashJSError2['default'](code,msg,sessionToken)});}else {logger.error('No session token found for key error');}break;case api.keyadded:sessionToken = findSessionByID(sessions,event.sessionId);if(!sessionToken){sessionToken = findSessionByID(pendingSessions,event.sessionId);}if(sessionToken){logger.debug('DRM: Key added.');eventBus.trigger(events.KEY_ADDED,{data:sessionToken}); //TODO not sure anything is using sessionToken? why there?
	}else {logger.debug('No session token found for key added');}break;case api.keymessage: // If this CDM does not support session IDs, we will be limited
	// to a single session
	moreSessionsAllowed = event.sessionId !== null && event.sessionId !== undefined; // SessionIDs supported
	if(moreSessionsAllowed){ // Attempt to find an uninitialized token with this sessionID
	sessionToken = findSessionByID(sessions,event.sessionId);if(!sessionToken && pendingSessions.length > 0){ // This is the first message for our latest session, so set the
	// sessionID and add it to our list
	sessionToken = pendingSessions.shift();sessions.push(sessionToken);sessionToken.sessionID = event.sessionId;eventBus.trigger(events.KEY_SESSION_CREATED,{data:sessionToken});}}else if(pendingSessions.length > 0){ // SessionIDs not supported
	sessionToken = pendingSessions.shift();sessions.push(sessionToken);if(pendingSessions.length !== 0){errHandler.mediaKeyMessageError(_errorsProtectionErrors2['default'].MEDIA_KEY_MESSAGE_ERROR_MESSAGE);errHandler.error(new _voDashJSError2['default'](_errorsProtectionErrors2['default'].MEDIA_KEY_MESSAGE_ERROR_CODE,_errorsProtectionErrors2['default'].MEDIA_KEY_MESSAGE_ERROR_MESSAGE));}}if(sessionToken){var message=ArrayBuffer.isView(event.message)?event.message.buffer:event.message; // For ClearKey, the spec mandates that you pass this message to the
	// addKey method, so we always save it to the token since there is no
	// way to tell which key system is in use
	sessionToken.keyMessage = message;eventBus.trigger(events.INTERNAL_KEY_MESSAGE,{data:new _voKeyMessage2['default'](sessionToken,message,event.defaultURL)});}else {logger.warn('No session token found for key message');}break;}}};} /**
	     * Helper function to retrieve the stored session token based on a given
	     * sessionID value
	     *
	     * @param {Array} sessionArray - the array of sessions to search
	     * @param {*} sessionID - the sessionID to search for
	     * @returns {*} the session token with the given sessionID
	     */function findSessionByID(sessionArray,sessionID){if(!sessionID || !sessionArray){return null;}else {var len=sessionArray.length;for(var i=0;i < len;i++) {if(sessionArray[i].sessionID == sessionID){return sessionArray[i];}}return null;}}function removeEventListeners(){videoElement.removeEventListener(api.keyerror,eventHandler);videoElement.removeEventListener(api.needkey,eventHandler);videoElement.removeEventListener(api.keymessage,eventHandler);videoElement.removeEventListener(api.keyadded,eventHandler);}instance = {getAllInitData:getAllInitData,requestKeySystemAccess:requestKeySystemAccess,getKeySystem:getKeySystem,selectKeySystem:selectKeySystem,setMediaElement:setMediaElement,createKeySession:createKeySession,updateKeySession:updateKeySession,closeKeySession:closeKeySession,setServerCertificate:setServerCertificate,loadKeySession:loadKeySession,removeKeySession:removeKeySession,stop:reset,reset:reset};setup();return instance;}ProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';exports['default'] = dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */module.exports = exports['default'];
	//# sourceMappingURL=ProtectionModel_01b.js.map


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';Object.defineProperty(exports,'__esModule',{value:true});function _interopRequireDefault(obj){return obj && obj.__esModule?obj:{'default':obj};}var _MediaPlayer=__webpack_require__(48);var _MediaPlayer2=_interopRequireDefault(_MediaPlayer);function MediaPlayerFactory(){ /**
	     * mime-type identifier for any source content to be accepted as a dash manifest by the create() method.
	     * @type {string}
	     */var SUPPORTED_MIME_TYPE='application/dash+xml';var logger=undefined; /**
	     *  A new MediaPlayer is instantiated for the supplied videoElement and optional source and context.  If no context is provided,
	     *  a default DashContext is used. If no source is provided, the videoElement is interrogated to extract the first source whose
	     *  type is application/dash+xml.
	     * The autoplay property of the videoElement is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.
	     * @param {HTMLMediaElement} video
	     * @param {HTMLSourceElement} source
	     * @param {Object} context
	     * @returns {MediaPlayer|null}
	     */function create(video,source,context){if(!video || !/^VIDEO$/i.test(video.nodeName))return null;if(video._dashjs_player)return video._dashjs_player;var player=undefined;var videoID=video.id || video.name || 'video element';source = source || [].slice.call(video.querySelectorAll('source')).filter(function(s){return s.type == SUPPORTED_MIME_TYPE;})[0];if(!source && video.src){source = document.createElement('source');source.src = video.src;}else if(!source && !video.src){return null;}context = context || {};player = (0,_MediaPlayer2['default'])(context).create();player.initialize(video,source.src,video.autoplay);if(!logger){logger = player.getDebug().getLogger();}logger.debug('Converted ' + videoID + ' to dash.js player and added content: ' + source.src); // Store a reference to the player on the video element so it can be gotten at for debugging and so we know its
	// already been setup.
	video._dashjs_player = player;return player;} /**
	     * Searches the provided scope for all instances of the indicated selector. If no scope is provided, document is used. If no selector is
	     * specified, [data-dashjs-player] is used. The declarative setup also looks for source elements with the type attribute set to 'application/dash+xml'.
	     * It then looks for those video elements which have a source element defined with a type matching 'application/dash+xml'.
	     * A new MediaPlayer is instantiated for each matching video element and the appropriate source is assigned.
	     * The autoplay property of the video element is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.
	     * Returns an array holding all the MediaPlayer instances that were added by this method.
	     * @param {string} selector - CSS selector
	     * @param {Object} scope
	     * @returns {Array} an array of MediaPlayer objects
	     */function createAll(selector,scope){var aPlayers=[];selector = selector || '[data-dashjs-player]';scope = scope || document;var videos=scope.querySelectorAll(selector);for(var i=0;i < videos.length;i++) {var player=create(videos[i],null);aPlayers.push(player);}var sources=scope.querySelectorAll('source[type="' + SUPPORTED_MIME_TYPE + '"]');for(var i=0;i < sources.length;i++) {var video=findVideo(sources[i]);var player=create(video,null);aPlayers.push(player);}return aPlayers;}function findVideo(_x){var _again=true;_function: while(_again) {var el=_x;_again = false;if(/^VIDEO$/i.test(el.nodeName)){return el;}else {_x = el.parentNode;_again = true;continue _function;}}}return {create:create,createAll:createAll};}var instance=MediaPlayerFactory();var loadInterval=undefined;function loadHandler(){window.removeEventListener('load',loadHandler);instance.createAll();}function loadIntervalHandler(){if(window.dashjs){window.clearInterval(loadInterval);instance.createAll();}}var avoidAutoCreate=typeof window !== 'undefined' && window && window.dashjs && window.dashjs.skipAutoCreate;if(!avoidAutoCreate && typeof window !== 'undefined' && window && window.addEventListener){if(window.document.readyState === 'complete'){if(window.dashjs){instance.createAll();}else { // If loaded asynchronously, window.readyState may be 'complete' even if dashjs hasn't loaded yet
	loadInterval = window.setInterval(loadIntervalHandler,500);}}else {window.addEventListener('load',loadHandler);}}exports['default'] = instance;module.exports = exports['default'];
	//# sourceMappingURL=MediaPlayerFactory.js.map


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = setupAudioTracks;

	var _dashjs = __webpack_require__(46);

	var _dashjs2 = _interopRequireDefault(_dashjs);

	var _video = __webpack_require__(1);

	var _video2 = _interopRequireDefault(_video);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	/**
	 * Setup audio tracks. Take the tracks from dash and add the tracks to videojs. Listen for when
	 * videojs changes tracks and apply that to the dash player because videojs doesn't do this
	 * natively.
	 *
	 * @private
	 * @param {videojs} player the videojs player instance
	 * @param {videojs.tech} tech the videojs tech being used
	 */
	function handlePlaybackMetadataLoaded(player, tech) {
	  var mediaPlayer = player.dash.mediaPlayer;

	  var dashAudioTracks = mediaPlayer.getTracksFor('audio');
	  var videojsAudioTracks = player.audioTracks();

	  function generateIdFromTrackIndex(index) {
	    return 'dash-audio-' + index;
	  }

	  function findDashAudioTrack(dashAudioTracks, videojsAudioTrack) {
	    return dashAudioTracks.find(function (_ref) {
	      var index = _ref.index;
	      return generateIdFromTrackIndex(index) === videojsAudioTrack.id;
	    });
	  }

	  // Safari creates a single native `AudioTrack` (not `videojs.AudioTrack`) when loading. Clear all
	  // automatically generated audio tracks so we can create them all ourself.
	  if (videojsAudioTracks.length) {
	    tech.clearTracks(['audio']);
	  }

	  var currentAudioTrack = mediaPlayer.getCurrentTrackFor('audio');

	  dashAudioTracks.forEach(function (dashTrack) {
	    var label = dashTrack.lang;

	    if (dashTrack.roles && dashTrack.roles.length) {
	      label += ' (' + dashTrack.roles.join(', ') + ')';
	    }

	    // Add the track to the player's audio track list.
	    videojsAudioTracks.addTrack(new _video2['default'].AudioTrack({
	      enabled: dashTrack === currentAudioTrack,
	      id: generateIdFromTrackIndex(dashTrack.index),
	      kind: dashTrack.kind || 'main',
	      label: label,
	      language: dashTrack.lang
	    }));
	  });

	  var audioTracksChangeHandler = function audioTracksChangeHandler() {
	    for (var i = 0; i < videojsAudioTracks.length; i++) {
	      var track = videojsAudioTracks[i];

	      if (track.enabled) {
	        // Find the audio track we just selected by the id
	        var dashAudioTrack = findDashAudioTrack(dashAudioTracks, track);

	        // Set is as the current track
	        mediaPlayer.setCurrentTrack(dashAudioTrack);

	        // Stop looping
	        continue;
	      }
	    }
	  };

	  videojsAudioTracks.addEventListener('change', audioTracksChangeHandler);
	  player.dash.mediaPlayer.on(_dashjs2['default'].MediaPlayer.events.STREAM_TEARDOWN_COMPLETE, function () {
	    videojsAudioTracks.removeEventListener('change', audioTracksChangeHandler);
	  });
	}

	/*
	 * Call `handlePlaybackMetadataLoaded` when `mediaPlayer` emits
	 * `dashjs.MediaPlayer.events.PLAYBACK_METADATA_LOADED`.
	 */
	function setupAudioTracks(player, tech) {
	  // When `dashjs` finishes loading metadata, create audio tracks for `video.js`.
	  player.dash.mediaPlayer.on(_dashjs2['default'].MediaPlayer.events.PLAYBACK_METADATA_LOADED, handlePlaybackMetadataLoaded.bind(null, player, tech));
	}

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.__esModule = true;
	exports['default'] = setupTextTracks;

	var _dashjs = __webpack_require__(46);

	var _dashjs2 = _interopRequireDefault(_dashjs);

	var _video = __webpack_require__(1);

	var _video2 = _interopRequireDefault(_video);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function find(l, f) {
	  for (var i = 0; i < l.length; i++) {
	    if (f(l[i])) {
	      return l[i];
	    }
	  }
	}

	/*
	 * Attach text tracks from dash.js to videojs
	 *
	 * @param {videojs} player the videojs player instance
	 * @param {array} tracks the tracks loaded by dash.js to attach to videojs
	 *
	 * @private
	 */
	function attachDashTextTracksToVideojs(player, tech, tracks) {
	  var trackDictionary = [];

	  // Add remote tracks
	  var tracksAttached = tracks
	  // Map input data to match HTMLTrackElement spec
	  // https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement
	  .map(function (track) {
	    return {
	      dashTrack: track,
	      trackConfig: {
	        label: track.lang,
	        language: track.lang,
	        srclang: track.lang
	      }
	    };
	  })

	  // Add track to videojs track list
	  .map(function (_ref) {
	    var trackConfig = _ref.trackConfig,
	        dashTrack = _ref.dashTrack;

	    var remoteTextTrack = player.addRemoteTextTrack(trackConfig, false);
	    trackDictionary.push({ textTrack: remoteTextTrack.track, dashTrack: dashTrack });

	    // Don't add the cues becuase we're going to let dash handle it natively. This will ensure
	    // that dash handle external time text files and fragmented text tracks.
	    //
	    // Example file with external time text files:
	    // https://storage.googleapis.com/shaka-demo-assets/sintel-mp4-wvtt/dash.mpd

	    return remoteTextTrack;
	  });

	  /*
	   * Scan `videojs.textTracks()` to find one that is showing. Set the dash text track.
	   */
	  function updateActiveDashTextTrack() {
	    var dashMediaPlayer = player.dash.mediaPlayer;
	    var textTracks = player.textTracks();
	    var activeTextTrackIndex = -1;

	    // Iterate through the tracks and find the one marked as showing. If none are showing,
	    // `activeTextTrackIndex` will be set to `-1`, disabling text tracks.

	    var _loop = function _loop(i) {
	      var textTrack = textTracks[i];

	      if (textTrack.mode === 'showing') {
	        // Find the dash track we want to use

	        /* jshint loopfunc: true */
	        var dictionaryLookupResult = find(trackDictionary, function (track) {
	          return track.textTrack === textTrack;
	        });
	        /* jshint loopfunc: false */

	        var dashTrackToActivate = dictionaryLookupResult ? dictionaryLookupResult.dashTrack : null;

	        // If we found a track, get it's index.
	        if (dashTrackToActivate) {
	          activeTextTrackIndex = tracks.indexOf(dashTrackToActivate);
	        }
	      }
	    };

	    for (var i = 0; i < textTracks.length; i += 1) {
	      _loop(i);
	    }

	    // If the text track has changed, then set it in dash
	    if (activeTextTrackIndex !== dashMediaPlayer.getCurrentTextTrackIndex()) {
	      dashMediaPlayer.setTextTrack(activeTextTrackIndex);
	    }
	  }

	  // Update dash when videojs's selected text track changes.
	  player.textTracks().on('change', updateActiveDashTextTrack);

	  // Cleanup event listeners whenever we start loading a new source
	  player.dash.mediaPlayer.on(_dashjs2['default'].MediaPlayer.events.STREAM_TEARDOWN_COMPLETE, function () {
	    player.textTracks().off('change', updateActiveDashTextTrack);
	  });

	  // Initialize the text track on our first run-through
	  // There is a problem with dash.js (from v2.8.0) where immeditately deactivating the track
	  //    will stop the track from ever working.  As a temporary workaround, deactivate on a timeout
	  setTimeout(updateActiveDashTextTrack, 1000);

	  return tracksAttached;
	}

	/*
	 * Wait for dash to emit `TEXT_TRACKS_ADDED` and then attach the text tracks loaded by dash if
	 * we're not using native text tracks.
	 *
	 * @param {videojs} player the videojs player instance
	 * @private
	 */
	function setupTextTracks(player, tech, options) {
	  // Clear VTTCue if it was shimmed by vttjs and let dash.js use TextTrackCue.
	  // This is necessary because dash.js creates text tracks
	  // using addTextTrack which is incompatible with vttjs.VTTCue in IE11
	  if (window.VTTCue && !/\[native code\]/.test(window.VTTCue.toString())) {
	    window.VTTCue = false;
	  }

	  // Store the tracks that we've added so we can remove them later.
	  var dashTracksAttachedToVideoJs = [];

	  // We're relying on the user to disable native captions. Show an error if they didn't do so.
	  if (tech.featuresNativeTextTracks) {
	    _video2['default'].log.error('You must pass {html: {nativeCaptions: false}} in the videojs constructor ' + 'to use text tracks in videojs-contrib-dash');
	    return;
	  }

	  var mediaPlayer = player.dash.mediaPlayer;

	  // Clear the tracks that we added. We don't clear them all because someone else can add tracks.
	  function clearDashTracks() {
	    dashTracksAttachedToVideoJs.forEach(player.removeRemoteTextTrack.bind(player));

	    dashTracksAttachedToVideoJs = [];
	  }

	  function handleTextTracksAdded(_ref2) {
	    var index = _ref2.index,
	        tracks = _ref2.tracks;

	    // Stop listening for this event. We only want to hear it once.
	    mediaPlayer.off(_dashjs2['default'].MediaPlayer.events.TEXT_TRACKS_ADDED, handleTextTracksAdded);

	    // Cleanup old tracks
	    clearDashTracks();

	    if (!tracks.length) {
	      // Don't try to add text tracks if there aren't any
	      return;
	    }

	    // Save the tracks so we can remove them later
	    dashTracksAttachedToVideoJs = attachDashTextTracksToVideojs(player, tech, tracks, options);
	  }

	  // Attach dash text tracks whenever we dash emits `TEXT_TRACKS_ADDED`.
	  mediaPlayer.on(_dashjs2['default'].MediaPlayer.events.TEXT_TRACKS_ADDED, handleTextTracksAdded);

	  // When the player can play, remove the initialization events. We might not have received
	  // TEXT_TRACKS_ADDED` so we have to stop listening for it or we'll get errors when we load new
	  // videos and are listening for the same event in multiple places, including cleaned up
	  // mediaPlayers.
	  mediaPlayer.on(_dashjs2['default'].MediaPlayer.events.CAN_PLAY, function () {
	    mediaPlayer.off(_dashjs2['default'].MediaPlayer.events.TEXT_TRACKS_ADDED, handleTextTracksAdded);
	  });
	}

/***/ })
/******/ ]);